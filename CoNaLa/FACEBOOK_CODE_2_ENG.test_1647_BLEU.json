[
  // "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])", // almost correct but different // question is impossible to answer from title // not present in train set
  // "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')", // incorrect but overlap // not present in train
  "len(set(mylist)) == 1", // correct but different.
  // "max(min(my_value, max_value), min_value)", // question is impossible to answer from title
  // "s.decode('utf-8').lower()", // incorrect but overlap
  // "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))",
  // "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))",
  // "os.system('tcsh your_own_script')", // could work ... but yeah incorrect.
  "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", //_correct_!!! // legit duplicate
  // "max(min(my_value, max_value), min_value)", // rewritten intent hindered
  // "br.addheaders = [('Cookie', 'cookiename=cookie value')]", // incorrect but makes sense ...
  // "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", // incorrect but overlap
  "a.rstrip().split('\\n')", // _correct_!!!! // legit duplicate
  "a.rstrip().split('\\n')", // _correct_!!!! // legit duplicate
  // "' '.join((str(x) for x in L))", // incorrect but overlap
  // "Employees.objects.values_list('eng_name', flat=True)", // incorrect but overlap
  // "np.isnan(a).sum() / np.prod(a.shape)", // incorrect but overlap
  // "re.findall('a*?bc*?', 'aabcc', re.DOTALL)", // incorrect // question is impossible to answer from title
  "makeitastring = ''.join(map(str, L))", // _correct_ // legit duplicate // correct aside from detail
  // "sys.exit()", // incorrect
  "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')",
  "re.findall('([0-9]+)([A-Z])', '20M10000N80M')",
  "print('Total cost is: ${:,.2f}'.format(TotalAmount))",
  "os.system('ulimit -s unlimited; some_executable')",
  "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]",
  "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))",
  "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')",
  "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')",
  "webbrowser.open('http://example.com')",
  "file_name = wget.download(file_url)",
  "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')",
  "parser.add_argument('file', nargs='*')",
  "d = {k: v for (k, v) in iterable}",
  "np.einsum('ji,i->j', a, b)",
  "\"\"\" \"\"\".join(my_list)",
  "var = input('Please enter something: ')",
  "app.run(debug=True)",
  "with open(fname) as f:\n    content = f.readlines()",
  "np.corrcoef(x)",
  "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]",
  "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)",
  "a = np.array(a)",
  "[sum(x) for x in zip(*l)]",
  "int('a', 16)",
  "[key for item in lst for key, value in list(my_dict.items()) if item in value]",
  "subprocess.call('test.sh otherfunc')",
  "' '.join((str(x) for x in L))",
  "\"\"\" \"\"\".join(my_list)",
  "myList = [i for i in range(10)]",
  "a = a.replace(char, '')",
  "sorted(s, key=str.upper)",
  "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')",
  "datetimevariable.strftime('%Y-%m-%d')",
  "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')",
  "df['value'] = df['value'].str.get(0)",
  "a[np.argmin(a[:, (1)])]",
  "print('\\xc5\\xc4\\xd6'.encode('UTF8'))",
  "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)",
  "{k: v for d in L for k, v in list(d.items())}",
  "br.select_form(nr=0)",
  "list(map(list, set(map(lambda i: tuple(i), testdata))))",
  "sys.path.insert(0, './path/to/your/modules/')",
  "imp.find_module('os')[1]",
  "df.toPandas().to_csv('mycsv.csv')",
  "list(chain.from_iterable(a))",
  "[a[x].append(b[x]) for x in range(3)]",
  "a.update([3, 4])",
  "df.to_csv('mydf.tsv', sep='\\t')",
  "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])",
  "[l.split('\\\\')[-1] for l in list_dirs]",
  "\"\"\",+\"\"\".join(c.rsplit('+', 1))",
  "ftp.retrbinary('RETR %s' % filename, file.write)",
  "driver.find_element_by_xpath('xpath').click()",
  "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])",
  "l[:3] + l[-3:]",
  "for (key, value) in list(d.items()):\n    pass",
  "for (root, subFolders, files) in os.walk(rootdir):\n    pass",
  "numpy.random.random((3, 3))",
  "[dict(y) for y in set(tuple(x.items()) for x in d)]",
  "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))",
  "'used\\u200b'.replace('\\u200b', '*')",
  "s.rfind('&')",
  "pd.merge(a, b, on=['A', 'B'], how='outer')",
  "\"\"\"{0:.3g}\"\"\".format(num)",
  "print('Value is \"{}\"'.format(value))",
  "print('{0:+d}'.format(score))",
  "[int(x, 16) for x in L]",
  "sum(d * 10 ** i for i, d in enumerate(x[::-1]))",
  "[int(x, 16) for x in L]",
  "file.write('My String\\n')",
  "T = [L[i] for i in Idx]",
  "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)",
  "df.apply(lambda x: x.fillna(x.mean()), axis=0)",
  "re.compile('$^')",
  "re.findall('\\\\s+|\\\\S+', s)",
  "print(pattern.search(url).group(1))",
  "open('filename', 'w').close()",
  "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')",
  "[x for x in items if x[2] == 0]",
  "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)",
  "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')",
  "plt.xticks([1, 2, 3, 4, 5])",
  "plt.xticks([1, 2, 3, 4, 5])",
  "mylist.sort()",
  "a = [0] * 10000",
  "[y for x in range(3) for y in [x, x]]",
  "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()",
  "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])",
  "print(('Total score for', name, 'is', score))",
  "s.rfind('&')",
  "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)",
  "print(os.path.exists('/does/not/exist'))",
  "print(os.path.exists('/does/not/exist'))",
  "print(os.path.exists('/does/not/exist'))",
  "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)",
  "re.findall('([a-z])*', 'f233op')",
  "print(func.__name__)",
  "soup.find_all('div', class_=re.compile('comment-'))",
  "dict((k, v) for k, v in hand.items() if v)",
  "df['C'] = df['A'] + df['B']",
  "[j for i in zip(a, b) for j in i]",
  "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines",
  "sum(l) / float(len(l))",
  "sum(l) / float(len(l))",
  "sum(l) / float(len(l))",
  "sum(l) / float(len(l))",
  "sum(l) / float(len(l))",
  "shutil.copy('file.txt', 'file2.txt')",
  "[i for i, e in enumerate(a) if e != 0]",
  "sum(v for v in list(d.values()) if v > 0)",
  "[i for i, e in enumerate(a) if e != 0]",
  "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')",
  "df[['A', 'B']].multiply(df['C'], axis='index')",
  "my_dict.pop('key', None)",
  "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])",
  "[j for i in zip(a, b) for j in i]",
  "b = np.where(np.isnan(a), 0, a)",
  "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())",
  "tuple(zip(*t))",
  "tuple(zip(*t))",
  "[(k, v) for k, v in a.items()]",
  "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})",
  "df['value'] = df['value'].str.get(0)",
  "data[data['Value'] == True]",
  "data[data['Value'] == True]",
  "df.drop(df.index[[1, 3]], inplace=True)",
  "os.chdir('.\\\\chapter3')",
  "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))",
  "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')",
  "\"\"\"\"\"\".join(chr(i) for i in myintegers)",
  "\"\"\"\"\"\".join(chr(i) for i in myintegers)",
  "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])",
  "plt.xticks([1, 2, 3, 4, 5])",
  "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)",
  "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')",
  "df.set_index('id')['value'].to_dict()",
  "df.iloc[2, 0]",
  "df.set_index(['d'], append=True)",
  "df['a'].values.tolist()",
  "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)",
  "[(x / y) for x, y in zip(a, b)]",
  "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))",
  "[int(s) for s in example_string.split(',')]",
  "requests.post('http://httpbin.org/post', json={'test': 'cheers'})",
  "[m.start() for m in re.finditer('test', 'test test test test')]",
  "[(i, j) for i in range(1, 3) for j in range(1, 5)]",
  "[i for i in y if y[i] == 1]",
  "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')",
  "dict(zip(l[::2], l[1::2]))",
  "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))",
  "print(df.loc[df['B'].isin(['one', 'three'])])",
  "your_string.strip('0')",
  "df.apply(lambda x: x.fillna(x.mean()), axis=0)",
  "t = tuple(x[0] for x in s)",
  "[(i, j) for i in range(1, 3) for j in range(1, 5)]",
  "re.sub('<[^>]*>', '', mystring)",
  "re.sub('<[^>]*>', '', mystring)",
  "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)",
  "list(range(11, 17))",
  "sorted(matrix, key=itemgetter(1))",
  "df.replace(' ', '_', regex=True)",
  "sys.path.insert(0, '/path/to/application/app/folder')\nimport file",
  "line.strip().split(' ')",
  "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')",
  "res_list = [x[0] for x in rows]",
  "with open(fname) as f:\n    content = f.readlines()",
  "x[(np.arange(x.shape[0]) != 1), :, :]",
  "df['b']",
  "a = [x for x in a if x['link'] not in b]",
  "sum(1 for x in list(d.values()) if some_condition(x))",
  "os.system('dir c:\\\\')",
  "names = list(map(lambda x: x[0], cursor.description))",
  "[int(i) for i in str_list]",
  "[s.strip() for s in input().split(',')]",
  "users.sort(key=lambda x: order.index(x['id']))",
  "sorted(a, key=dict.values, reverse=True)",
  "your_list.sort(key=lambda x: x.anniversary_score)",
  "your_list.sort(key=operator.attrgetter('anniversary_score'))",
  "driver.find_element_by_css_selector('.button .c_button .s_button').click()",
  "driver.page_source",
  "driver.find_element_by_css_selector('.button.c_button.s_button').click()",
  "hex(65)",
  "df.apply(lambda x: x.tolist(), axis=1)",
  "open('test', 'a+b').write('koko')",
  "L.sort(key=operator.itemgetter(1))",
  "re.split('\\\\W+', 'Words, words, words.')",
  "string.find('substring')",
  "mynewlist = list(myset)",
  "woduplicates = list(set(lseperatedOrblist))",
  "woduplicates = list(set(lseperatedOrblist))",
  "list('hello')",
  "slice = [arr[i][0:2] for i in range(0, 2)]",
  "soup.find_all('div', class_=re.compile('comment-'))",
  "list(map(''.join, a))",
  "makeitastring = ''.join(map(str, L))",
  "driver.page_source",
  "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))",
  "df[(df['A'] > 1) | (df['B'] < -1)]",
  "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)",
  "d = {k: v for (k, v) in iterable}",
  "sorted(list(data.items()), key=lambda x: x[1])",
  "map(int, ['1', '2', '3'])",
  "[int(x) for x in str(num)]",
  "[int(x, 16) for x in L]",
  "subprocess.call('test.sh otherfunc')",
  "sys.exit()",
  "l1.sort(key=lambda x: int(x[0]))",
  "int('FFFF', 16)",
  "chr(int('fd9b', 16)).encode('utf-8')",
  "pd.read_csv(StringIO(s), sep=',', comment='#')",
  "print((obj.__dict__))",
  "{k: v for d in L for k, v in list(d.items())}",
  "sorted(list(data.items()), key=lambda x: x[1][0])",
  "print(s.encode('unicode_escape'))",
  "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]",
  "print(url.replace('.com', ''))",
  "all(value == 0 for value in list(your_dict.values()))",
  "np.isnan(a).sum() / np.prod(a.shape)",
  "os.system(command)",
  "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])",
  "writer.writeheader()",
  "df.apply(lambda x: x.fillna(x.mean()), axis=0)",
  "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')",
  "super(ChildClass, self).__init__(*args, **kwargs)",
  "a[np.arange(3), (0, 1, 0)]",
  "re.split(' +', str1)",
  "length = sum(len(s) for s in strings)",
  "list_dict = {t[0]: t for t in tuple_list}",
  "with open(fname) as f:\n    content = f.readlines()",
  "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]",
  "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))",
  "df.groupby(key_columns).size()",
  "any(substring in string for substring in substring_list)",
  "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]",
  "df.apply(lambda x: x.tolist(), axis=1)",
  "\"\"\",\"\"\".join('Hello')",
  "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')",
  "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')",
  "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])",
  "x[:(-2)]",
  "print('[{0}, {1}, {2}]'.format(1, 2, 3))",
  "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))",
  "sorted(list(data.items()), key=lambda x: x[1])",
  "users.sort(key=lambda x: order.index(x['id']))",
  "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]",
  "soup.find_all('div', class_=re.compile('comment-'))",
  "df.toPandas().to_csv('mycsv.csv')",
  "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]",
  "[set(item) for item in set(frozenset(item) for item in L)]",
  "print(open('myfile.txt', 'U').read())",
  "[x[1] for x in L]",
  "[x[1] for x in L]",
  "[x[1] for x in L]",
  "[x[1] for x in L]",
  "[x[1] for x in L]",
  "[sum([x[1] for x in i]) for i in data]",
  "[sum([x[1] for x in i]) for i in data]",
  "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))",
  "max(enumerate(a), key=lambda x: x[1])[0]",
  "time.sleep(0.1)",
  "[(a, b, c) for a, (b, c) in l]",
  "df = df.set_index(['TRX_DATE'])",
  "alist.sort(key=lambda x: x.foo)",
  "zipped.sort(key=lambda t: t[1])",
  "dict((i, i * 2) for i in range(10))",
  "[element for i, element in enumerate(centroids) if i not in index]",
  "f = open('words.txt', 'rU')",
  "print([obj.attr for obj in my_list_of_objs])",
  "re.findall('[\\u4e00-\\u9fff]+', ipath)",
  "re.findall('[\\u4e00-\\u9fff]+', ipath)",
  "df['A'], df['B'] = df['AB'].str.split(' ', 1).str",
  "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))",
  "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))",
  "zip(*l)",
  "zip(*l)",
  "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))",
  "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
  "print('\\xc2\\xa3'.decode('utf8') + '1')",
  "a.update(b)",
  "a.update(b)",
  "a.update(b)",
  "a.update(b)",
  "np.all(a == a[(0), :], axis=0)",
  "('%.2f' % 3.14159)",
  "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)",
  "print(df.loc[df['B'].isin(['one', 'three'])])",
  "lines = [line.rstrip('\\n') for line in open('filename')]",
  "words = open('myfile').read().split()",
  "plt.colorbar(im, ax=ax)",
  "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)",
  "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]",
  "itertools.permutations([1, 2, 3])",
  "datetime.utcnow()",
  "[(x1 - x2) for x1, x2 in zip(List1, List2)]",
  "[(x1 - x2) for x1, x2 in zip(List1, List2)]",
  "return HttpResponse(json.dumps(response_data), content_type='application/json')",
  "re.findall('\\\\[(.*?)\\\\]', mystring)",
  "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))",
  "stuff.replace(' and ', '/')",
  "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')",
  "re.findall('a*?bc*?', 'aabcc', re.DOTALL)",
  "[int(x) for x in '0,1,2'.split(',')]",
  "subprocess.Popen(['rm', '-r', 'some.file'])",
  "list(dict((x['id'], x) for x in L).values())",
  "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')",
  "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')",
  "replace('\"', '\\\\\"')",
  "list('Word to Split')",
  "df.plot(x='col_name_1', y='col_name_2', style='o')",
  "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)",
  "indices = [i for i, x in enumerate(my_list) if x == 'whatever']",
  "if hasattr(a, 'property'):\n    pass",
  "set(L[0].f.items()).issubset(set(a3.f.items()))",
  "set(L[0].f.items()).issubset(set(a3.f.items()))",
  "set(L[0].f.items()).issubset(set(a3.f.items()))",
  "('a' in a)",
  "[(x1 - x2) for x1, x2 in zip(List1, List2)]",
  "list3 = [(a + b) for a, b in zip(list1, list2)]",
  "foo.append(4)",
  "list3 = [(a + b) for a, b in zip(list1, list2)]",
  "[a[x].append(b[x]) for x in range(3)]",
  "json.loads(request.POST.get('mydata', '{}'))",
  "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)",
  "[x for x in items if x[2] == 0]",
  "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)",
  "re.sub('[^A-Z]', '', s)",
  "os.path.dirname(os.path.abspath(__file__))",
  "re.match('[:;][)(](?![)(])', str)",
  "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)",
  "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)",
  "br.addheaders = [('Cookie', 'cookiename=cookie value')]",
  "writer.writerow(A)",
  "dict([(k, v) for k, v in zip(keys, values)])",
  "df.sub(df.mean(axis=1), axis=0)",
  "round(1.0005, 3)",
  "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))",
  "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)",
  "print(os.path.exists('/etc'))",
  "sum(item['gold'] for item in myLIst)",
  "max(d, key=lambda x: d[x]['count'])",
  "df.groupby('id').agg(lambda x: x.tolist())",
  "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)",
  "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']",
  "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]",
  "subprocess.call(['./abc.py', arg1, arg2])",
  "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')",
  "df.groupby('group')['value'].rank(ascending=False)",
  "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)",
  "length = sum(len(s) for s in strings)",
  "a.shape[1]",
  "a.shape[1]",
  "length = sum(len(s) for s in strings)",
  "s = s[beginning:(beginning + LENGTH)]",
  "a = a.replace(char, '')",
  "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])",
  "[elem.tag for elem in a.iter() if elem is not a]",
  "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()",
  "sorted(L, key=operator.itemgetter('resultType'))",
  "sorted(L, key=operator.itemgetter('resultType'))",
  "a[tuple(b)]",
  "numpy.concatenate(LIST, axis=0)",
  "numpy.concatenate(LIST, axis=0)",
  "numpy.concatenate(LIST, axis=0)",
  "numpy.concatenate(LIST, axis=0)",
  "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))",
  "df['new_col'] = list(range(1, len(df) + 1))",
  "Employees.objects.values_list('eng_name', flat=True)",
  "redirect('Home.views.index')",
  "my_string.split('\\n', 1)[0]",
  "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)",
  "list.sort()",
  "list.sort()",
  "plt.setp(legend.get_title(), fontsize='xx-small')",
  "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')",
  "url('^$', TemplateView.as_view(template_name='your_template.html'))",
  "pd.DataFrame(d)",
  "os.system(command)",
  "print([key for key, value in list(d.items()) if value == 1])",
  "variable = []",
  "my_list[-10:]",
  "del my_list[2:6]",
  "[ord(c) for c in s.decode('hex')]",
  "pd.concat([df.head(1), df.tail(1)])",
  "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())",
  "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))",
  "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text",
  "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))",
  "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))",
  "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))",
  "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))",
  "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])",
  "random.sample(list(range(1, 16)), 3)",
  "print('Value is \"{}\"'.format(value))",
  "\"\"\" \"\"\".join(my_list)",
  "done = [(el, x) for el in [a, b, c, d]]",
  "df.to_csv('Result.csv', index=False, sep=' ')",
  "[m.start() for m in re.finditer('test', 'test test test test')]",
  "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')",
  "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')",
  "newstr = oldstr.replace('M', '')",
  "df.drop(df.index[[1, 3]], inplace=True)",
  "[(y - x) for x, y in zip(L, L[1:])]",
  "[int(x) for x in str(num)]",
  "[int(i) for i in str_list]",
  "print('\\\\')",
  "values = np.array([i for i in range(100)], dtype=np.float64)",
  "results += [each for each in os.listdir(folder) if each.endswith('.c')]",
  "results += [each for each in os.listdir(folder) if each.endswith('.c')]",
  "results += [each for each in os.listdir(folder) if each.endswith('.c')]",
  "plt.legend(frameon=False)",
  "app.run(host='192.168.0.58', port=9000, debug=False)",
  "app.run(host='192.168.0.58', port=9000, debug=False)",
  "app.run(host='192.168.0.58', port=9000, debug=False)",
  "sum(x * y for x, y in zip(a, b))",
  "file.write('My String\\n')",
  "y = map(operator.itemgetter(0), x)",
  "a.rstrip().split('\\n')",
  "re.sub('[^A-Z]', '', s)",
  "np.flatnonzero(x).mean()",
  "list(itertools.product(*a))",
  "my_data = genfromtxt('my_file.csv', delimiter=',')",
  "list.sort(key=lambda item: item['date'], reverse=True)",
  "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]",
  "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)",
  "re.findall('\\\\$([^$]*)\\\\$', string)",
  "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')",
  "sum(isinstance(x, int) for x in a)",
  "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')",
  "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)",
  "line.strip().split(' ')",
  "mystring.split(',')",
  "a.split('\\n')[:-1]",
  "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)",
  "s.sort(key=operator.itemgetter(1, 2))",
  "subprocess.call('test.sh otherfunc')",
  "[float(i) for i in lst]",
  "[item for item in a if 1 in item]",
  "sorted(list(data.items()), key=lambda x: x[1])",
  "sorted(a, key=dict.values, reverse=True)",
  "zipped.sort(key=lambda t: t[1])",
  "zipped.sort(key=lambda t: t[1])",
  "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]",
  "sorted(set(itertools.chain.from_iterable(sequences)))",
  "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])",
  "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']",
  "[x for x in my_list if not any(c.isdigit() for c in x)]",
  "Sample.objects.filter(date__year='2011', date__month='01')",
  "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)",
  "datetime.datetime.now().date()",
  "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]",
  "help('modules')",
  "[int(i) for i in str_list]",
  "[[int(x) for x in sublist] for sublist in lst]",
  "df.to_csv('filename.csv', header=False)",
  "urllib.parse.unquote('%0a')",
  "[int(d) for d in str(bin(x))[2:]]",
  "writer.writerow(A)",
  "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)",
  "sum(item['gold'] for item in myLIst)",
  "outfile.write('\\n'.join(itemlist))",
  "f = open('test/test.pdf', 'rb')",
  "txt = open('file.txt').read()",
  "a.encode('ascii', 'ignore')",
  "Book.objects.create(**d)",
  "re.split('\\\\.\\\\s', text)",
  "re.split('\\\\.\\\\s', text)",
  "sys.exit()",
  "sorted(list(myDict.items()), key=lambda e: e[1][2])",
  "results = [item['value'] for item in test_data]",
  "datetime.datetime.now()",
  "no_integers = [x for x in mylist if not isinstance(x, int)]",
  "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))",
  "os.listdir('somedirectory')",
  "a.shape",
  "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)",
  "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")",
  "myString.strip()",
  "os.system('start \"$file\"')",
  "map(sum, zip(*lists))",
  "numpy.concatenate(LIST, axis=0)"
]