[{"snippet": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))", "intent": "concatenate elements of a list x  of multiple integers to a single integer ~ for join in"}, {"snippet": "r = int(''.join(map(str, x)))", "intent": "convert a list of integers into a single integer ~ for in list items int"}, {"snippet": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')", "intent": "convert a datetime string back to a datetime object of format  y  m  d  h  m  s  f  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "[(i, sum(j) / len(j)) for i, j in list(d.items())]", "intent": "get the average of a list values for each key in dictionary d   ~ sum for in item 'gold"}, {"snippet": "zip([1, 2], [3, 4])", "intent": "zip two lists  1  2   and   3  4   into a list of two tuples containing elements at the same index in each list ~ for in zip"}, {"snippet": "['hello{0}'.format(i) for i in a]", "intent": "prepend string hello  to all items in list  a  ~ if in for"}, {"snippet": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)", "intent": "regex for repeating words in a string s  ~ sub '\\\\1 re"}, {"snippet": "df.div(df.sum(axis=1), axis=0)", "intent": "normalize a pandas dataframe df  by row ~ df axis=1 'a sum"}, {"snippet": "map(lambda t: (t[1], t[0]), mylist)", "intent": "swap values in a tuple list inside a list mylist  ~ for in mylist"}, {"snippet": "[(t[1], t[0]) for t in mylist]", "intent": "swap values in a tuple list in list mylist  ~ for in mylist"}, {"snippet": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")", "intent": "find next sibling element in python selenium ~ for driver in not if"}, {"snippet": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)", "intent": "find all occurrences of the pattern                                       s   within  strs  ~ str findall 's find re"}, {"snippet": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))", "intent": "generate the combinations of 3 from a set  1  2  3  4   ~ for in list"}, {"snippet": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)", "intent": "add multiple columns hour    weekday    weeknum  to pandas data frame  df  from lambda function  lambdafunc  ~ groupby agg df"}, {"snippet": "soup.find_all('a', string='Elsie')", "intent": "beautifulsoup search string elsie  inside tag  a  ~ 'div find_all soup"}, {"snippet": "my_datetime.strftime('%B %d, %Y')", "intent": "convert a datetime object my_datetime  into readable format   b  d   y  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "int(''.join(c for c in s if c.isdigit()))", "intent": "parse string s  to int when string contains a number ~ 16 for in int"}, {"snippet": "dic['Test'].update({'class': {'section': 5}})", "intent": "add dictionary   class     section   5    to key  test  of dictionary  dic  ~ for in update"}, {"snippet": "dict(map(int, x.split(':')) for x in s.split(','))", "intent": "transforming the string s  into dictionary ~ for datetime in split"}, {"snippet": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")", "intent": "how to select element with selenium python xpath ~ find_element_by_xpath @ driver"}, {"snippet": "np.where((vals == (0, 1)).all(axis=1))", "intent": "find rows matching  0 1   in a 2 dimensional numpy array  vals  ~ for in np"}, {"snippet": "SomeModel.objects.filter(id=id).delete()", "intent": "how to delete a record in django models ~ order_by mymodel objects"}, {"snippet": "dict([['two', 2], ['one', 1]])", "intent": "build a dictionary containing the conversion of each list in list    two   2     one   1    to a key value pair as its items ~ dict in for"}, {"snippet": "dict(zip(l[::2], l[1::2]))", "intent": "convert list l  to dictionary having each two adjacent elements as key value pair ~ dict in for items"}, {"snippet": "GRAVITY = 9.8", "intent": "assign float 9 8 to variable gravity  ~ environ in os round for 'debussy"}, {"snippet": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')", "intent": "separate numbers from characters in string 30m1000n20m  ~ sub for in re split"}, {"snippet": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')", "intent": "separate numbers and characters in string 20m10000n80m  ~ for in strip split"}, {"snippet": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')", "intent": "separate numbers and characters in string 20m10000n80m   ~ for in strip split"}, {"snippet": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')", "intent": "get a list of words from a string  hello world  my name is   james the 2nd   removing punctuation ~ sub if in for re"}, {"snippet": "datetime.datetime.strptime('03:55', '%H:%M').time()", "intent": "convert string 03 55  into datetime time object ~ m- strptime datetime m/ y-"}, {"snippet": "requests.get('https://www.reporo.com/', verify=False)", "intent": "request url https   www reporo com   without verifying ssl certificates ~ urlopen //www 'http urllib request"}, {"snippet": "a[a != 0]", "intent": "extract values not equal to 0 from numpy array a  ~ df if in for"}, {"snippet": "new_dict = {k: v for k, v in zip(keys, values)}", "intent": "map two lists keys  and  values  into a dictionary ~ dict in for"}, {"snippet": "dict((k, v) for k, v in zip(keys, values))", "intent": "map two lists keys  and  values  into a dictionary  ~ dict in for"}, {"snippet": "dict([(k, v) for k, v in zip(keys, values)])", "intent": "map two lists keys  and  values  into a dictionary   ~ dict in for"}, {"snippet": "m = re.search('\\\\[(\\\\w+)\\\\]', s)", "intent": "find the string matches within parenthesis from a string s  using regex ~ sub item \\\\ re"}, {"snippet": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "intent": "enable the so_reuseaddr socket option in socket object s  to fix the error  only one usage of each socket address is normally permitted  ~ 'div soup"}, {"snippet": "list3 = [(a + b) for a, b in zip(list1, list2)]", "intent": "append the sum of each tuple pair in the grouped list list1  and list  list2  elements to list  list3  ~ for in sum zip"}, {"snippet": "[ord(c) for c in s.decode('hex')]", "intent": "converting hex string s  to its integer representations ~ 16 for in int"}, {"snippet": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))", "intent": "sort list student_tuples  by second element of each tuple in ascending and third element of each tuple in descending ~ reverse=true sorted key=lambda sum"}, {"snippet": "[y for x in range(3) for y in [x, x]]", "intent": "get list of duplicated elements in range of 3 ~ for in range"}, {"snippet": "txt = open('file.txt').read()", "intent": "read the contents of the file file txt  into  txt  ~ in line as for open with txt"}, {"snippet": "myList[:] = [(x / myInt) for x in myList]", "intent": "divide each element in list mylist  by integer  myint  ~ sorted for in zip key=lambda"}, {"snippet": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})", "intent": "python dots in the name of variable in a format string ~ print score name 'total for"}, {"snippet": "df.replace(' ', '_', regex=True)", "intent": "replace white spaces in dataframe df  with  _  ~ replace df 'a"}, {"snippet": "datetime.datetime.combine(my_date, datetime.time.min)", "intent": "convert date my_date  to datetime ~ m- strptime strftime datetime y-"}, {"snippet": "tst2 = str(tst)", "intent": "convert tuple tst  to string  tst2  ~ str 16 for in int"}, {"snippet": "time.ctime(os.path.getmtime(file))", "intent": "get modified time of file file  ~ time ctime path file os"}, {"snippet": "time.ctime(os.path.getctime(file))", "intent": "get creation time of file file  ~ file time os path getmtime ctime"}, {"snippet": "t = os.path.getmtime(filename)", "intent": "get modification time of file filename  ~ file time os path ctime getctime"}, {"snippet": "os.path.getmtime(path)", "intent": "get modification time of file path  ~ file __file__ time os abspath path ctime"}, {"snippet": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))", "intent": "get modified time of file file   ~ time ctime path file os"}, {"snippet": "print(('created: %s' % time.ctime(os.path.getctime(file))))", "intent": "get the creation time of file file  ~ file time os path getmtime ctime"}, {"snippet": "return os.path.getctime(path_to_file)", "intent": "get the creation time of file path_to_file  ~ file time os path getmtime ctime"}, {"snippet": "os.system('TASKKILL /F /IM firefox.exe')", "intent": "execute os command  taskkill  f  im firefox exe   ~ os system"}, {"snippet": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "intent": "split string string  on whitespaces using a generator ~ sub \\\\ re"}, {"snippet": "\"\"\", \"\"\".join(['%.2f'] * len(x))", "intent": "unpack each value in list x  to its placeholder     in string    2f  ~ for in int"}, {"snippet": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))", "intent": "match regex pattern    d       d      with string  3434 35353  ~ findall re"}, {"snippet": "df['name'].str.replace('\\\\(.*\\\\)', '')", "intent": "replace parentheses and all data within it with empty string   in column  name  of dataframe  df  ~ df replace 'a"}, {"snippet": "result = [x for x in list_a if x[0] in list_b]", "intent": "create a list result  containing elements form list  list_a  if first element of list  list_a  is in list  list_b  ~ if in for"}, {"snippet": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])", "intent": "generate all possible string permutations of each two elements in list   hel    lo    bye    ~ for in zip"}, {"snippet": "[x for x in li if 'ar' in x[2]]", "intent": "get a list of items form nested list li  where third element of each item contains string  ar  ~ if in for"}, {"snippet": "unsorted_list.sort(key=lambda x: x[3])", "intent": "sort lists in the list unsorted_list  by the element at index 3 of each list ~ for in zip key=lambda"}, {"snippet": "logging.info('test')", "intent": "log message test  on the root logger  ~ system os"}, {"snippet": "fig.add_subplot(1, 1, 1)", "intent": "return a subplot axes positioned by the grid definition 1 1 1  using matpotlib ~ $ re"}, {"snippet": "sorted(list(x.items()), key=operator.itemgetter(1))", "intent": "sort dictionary x  by value in ascending order ~ true df key=lambda items false 'b sorted list ascending="}, {"snippet": "sorted(dict1, key=dict1.get)", "intent": "sort dictionary dict1  by value in ascending order ~ sorted key=lambda list items"}, {"snippet": "sorted(d, key=d.get, reverse=True)", "intent": "sort dictionary d  by value in descending order ~ true key=lambda items false 'b sorted list ascending= 'a"}, {"snippet": "sorted(list(d.items()), key=(lambda x: x[1]))", "intent": "sort dictionary d  by value in ascending order ~ true key=lambda items false 'b sorted list ascending= 'a"}, {"snippet": "np.einsum('ijk,ikl->ijl', A, B)", "intent": "elementwise product of 3d arrays a  and  b  ~ np einsum"}, {"snippet": "print('I have: {0.price}'.format(card))", "intent": "print a string card  with string formatting ~ for join in"}, {"snippet": "f.write('# Data for Class A\\n')", "intent": "write a comment   data for class a n  to a file object  f  ~ for in open"}, {"snippet": "a = a[-1:] + a[:-1]", "intent": "move the last item in list a  to the beginning ~ if in for"}, {"snippet": "datetimevariable.strftime('%Y-%m-%d')", "intent": "parse datetime object datetimevariable  using format   y  m  d  ~ m- strptime datetime m/ y-"}, {"snippet": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')", "intent": "normalize line ends in a string mixed  ~ sub re"}, {"snippet": "os.path.expanduser('~user')", "intent": "find the real user home directory using python ~ dirname path os __file__"}, {"snippet": "T = [L[i] for i in Idx]", "intent": "index a list l  with another list  idx  ~ if in not zip for"}, {"snippet": "words = open('myfile').read().split()", "intent": "get a list of words words  of a file  myfile  ~ open line in for txt"}, {"snippet": "[[sum([x[1] for x in i])] for i in data]", "intent": "get a list of lists with summing the values of the second element from each list of lists data  ~ for in sum zip"}, {"snippet": "[sum([x[1] for x in i]) for i in data]", "intent": "summing the second item in a list of lists of lists ~ for in sum"}, {"snippet": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')", "intent": "sort objects in articles  in descending order of counts of  likes  ~ true df false 'b sorted ascending= 'a"}, {"snippet": "today = datetime.datetime.utcnow().date()", "intent": "return a datetime object with the current utc date ~ m- strftime datetime y-"}, {"snippet": "[(a * b) for a, b in zip(lista, listb)]", "intent": "create a list containing the multiplication of each elements at the same index of list lista  and list  listb  ~ for in sum zip"}, {"snippet": "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "intent": "fetch smilies matching regex pattern                           d p   in string  s  ~ findall re compile '^"}, {"snippet": "re.match('[:;][)(](?![)(])', str)", "intent": "match the pattern                   to the string  str  ~ findall re"}, {"snippet": "json_string = json.dumps([ob.__dict__ for ob in list_name])", "intent": "convert a list of objects list_name  to json string  json_string  ~ datetime json strptime"}, {"snippet": "listofzeros = [0] * n", "intent": "create a list listofzeros  of  n  zeros ~ for in range len"}, {"snippet": "stringnamehere.decode('utf-8', 'ignore')", "intent": "decode the string stringnamehere   to utf 8 ~ unquote decode parse urllib encode"}, {"snippet": "re.findall('((?:A|B|C)D)', 'BDE')", "intent": "match regex pattern     a b c d   on string  bde  ~ findall re"}, {"snippet": "dic.setdefault(key, []).append(value)", "intent": "create a key key  if it does not exist in dict  dic  and append element  value  to value  ~ all for in"}, {"snippet": "a[np.argmin(a[:, (1)])]", "intent": "get the value of the minimum element in the second column of array a  ~ for in sum"}, {"snippet": "a.update(b)", "intent": "extend dictionary a  with key value pairs of dictionary  b  ~ in 'n 'l dict items for bigdict 'm"}, {"snippet": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]", "intent": "removing key values pairs with key mykey1  from a list of dictionaries  mylist  ~ in 'gold sum dict items for item"}, {"snippet": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]", "intent": "removing key values pairs from a list of dictionaries ~ in if value items for list key"}, {"snippet": "numpy.random.random((3, 3))", "intent": "create 3 by 3 matrix of random numbers ~ for random in"}, {"snippet": "df['C'] = df['A'] + df['B']", "intent": "make new column c  in panda dataframe by adding values from other columns  a  and  b  ~ true df 'b false ascending= 'a"}, {"snippet": "[value for key, value in list(programs.items()) if 'new york' in key.lower()]", "intent": "create a list of values from the dictionary programs  that have a key with a case insensitive match to  new york  ~ findall for in re if"}, {"snippet": "sys.path.append('/path/to/main_folder')", "intent": "append a path  path to main_folder  in system path ~ os path abspath __file__"}, {"snippet": "re.findall('\\\\d+(?=[^[]+$)', s)", "intent": "get all digits in a string s  after a     character ~ if join in for re"}, {"snippet": "pickle.load(open('afile', 'rb'))", "intent": "python pickle unpickle a list to from a file afile  ~ exec 'exec as open py read compile with"}, {"snippet": "driver.find_element_by_xpath('xpath').click()", "intent": "clicking a link using selenium using python ~ find_element_by_css_selector click driver"}, {"snippet": "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())", "intent": "count unique index values in column a  in pandas dataframe  ex  ~ df replace 'a"}, {"snippet": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)", "intent": "create a pandas dataframe of values from a dictionary d  which contains dictionaries of dictionaries ~ in if value my_dict items for list key"}, {"snippet": "sum(1 for i, j in zip(a, b) if i != j)", "intent": "find out the number of non matched elements at the same index of list a  and list  b  ~ if enumerate in for"}, {"snippet": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}", "intent": "make all keys lowercase in dictionary d  ~ in value items for 'my key lower"}, {"snippet": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])", "intent": "sort list list_  based on first element of each tuple and by the length of the second element of each tuple ~ reverse=true sorted key=lambda sum"}, {"snippet": "s.strip()", "intent": "trim whitespace in string s  ~ sub strip re"}, {"snippet": "s = s.lstrip()", "intent": "trim whitespace including tabs  in  s  on the left side ~ rstrip re split"}, {"snippet": "s = s.rstrip()", "intent": "trim whitespace including tabs  in  s  on the right side ~ rstrip '\\r\\n"}, {"snippet": "s = s.strip(' \\t\\n\\r')", "intent": "trim characters   t n r  in  s  ~ sub rstrip re"}, {"snippet": "print(re.sub('[\\\\s+]', '', s))", "intent": "trim whitespaces including tabs  in string  s  ~ sub strip re"}, {"snippet": "Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])", "intent": "in django filter  task objects  based on all entities in   a    p    f   ~ __init__ objects super self"}, {"snippet": "root.configure(background='black')", "intent": "change background color in tkinter ~ system os"}, {"snippet": "numpy.array([(key, val) for key, val in result.items()], dtype)", "intent": "convert dict result  to numpy structured array ~ np array"}, {"snippet": "pd.concat([df_1, df_2.sort_values('y')])", "intent": "concatenate dataframe df_1  to dataframe  df_2  sorted by values of the column  y  ~ groupby df 'a 'b"}, {"snippet": "re.sub('(.*)</div>', '\\\\1</bad>', s)", "intent": "replace the last occurence of an expression   div   with    bad   in a string  s  ~ sub re"}, {"snippet": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))", "intent": "get the maximum of salary  and  bonus  values in a dictionary ~ d2 in 'gold sum for item d1"}, {"snippet": "Book.objects.filter(author__id=1).filter(author__id=2)", "intent": "filter django objects by author  with ids  1  and  2  ~ objects filter"}, {"snippet": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')", "intent": "split string fooxyzbar  based on case insensitive matching using string  xyz  ~ re split"}, {"snippet": "[sum(map(int, s)) for s in example.split()]", "intent": "get list of sums of neighboring integers in string example  ~ for in int"}, {"snippet": "[i for i in y if y[i] == 1]", "intent": "get all the keys from dictionary y  whose value is  1  ~ in if items for list key"}, {"snippet": "c.decode('unicode_escape')", "intent": "converting byte string c  in unicode string ~ in int decode join for 16"}, {"snippet": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')", "intent": "unpivot first 2 columns into new columns year  and  value  from a pandas dataframe  x  ~ groupby df 'a 'c 'b"}, {"snippet": "default_data['item3'] = 3", "intent": "add key item3  and value  3  to dictionary  default_data   ~ dict in for items"}, {"snippet": "default_data.update({'item3': 3, })", "intent": "add key item3  and value  3  to dictionary  default_data    ~ dict in for items"}, {"snippet": "default_data.update({'item4': 4, 'item5': 5, })", "intent": "add key value pairs item4    4 and  item5    5 to dictionary  default_data  ~ dict for in items"}, {"snippet": "l[:3] + l[-3:]", "intent": "get the first and last 3 elements of list l  ~ for in sum"}, {"snippet": "df = df.reset_index(drop=True)", "intent": "reset index to default in dataframe df  ~ df groupby index transform"}, {"snippet": "[a[x].append(b[x]) for x in range(3)]", "intent": "for each index x  from 0 to 3  append the element at index  x  of list  b  to the list at index  x  of list a  ~ for in zip"}, {"snippet": "os.path.realpath(path)", "intent": "get canonical path of the filename path  ~ os path abspath __file__"}, {"snippet": "set(L[0].f.items()).issubset(set(a3.f.items()))", "intent": "check if dictionary l 0  f items    is in dictionary  a3 f items    ~ if in for items"}, {"snippet": "zip(*np.where(a == 1))", "intent": "find all the indexes in a numpy 2d array where the value is 1 ~ all np"}, {"snippet": "np.where(a == 1)", "intent": "how to find the index of a value in 2d array in python ~ for in np"}, {"snippet": "df.columns = df.columns.get_level_values(0)", "intent": "collapse hierarchical column index to level 0 in dataframe df  ~ df index"}, {"snippet": "x = scipy.matrix([1, 2, 3]).transpose()", "intent": "create a matrix from a list  1  2  3   ~ in for 'a 'c 'b"}, {"snippet": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)", "intent": "add character    after word  get  in string  text  ~ sub for '\\\\1 in re"}, {"snippet": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)", "intent": "get a numpy array that contains the element wise minimum of three 3x1 arrays ~ shape np"}, {"snippet": "df['new_col'] = list(range(1, len(df) + 1))", "intent": "add a column new_col  to dataframe  df  for index in range ~ df groupby sum"}, {"snippet": "os.environ['DEBUSSY'] = '1'", "intent": "set environment variable debussy  equal to 1 ~ print environ os"}, {"snippet": "print(os.environ['DEBUSSY'])", "intent": "get a environment variable debussy  ~ print environ os"}, {"snippet": "os.environ['DEBUSSY'] = '1'", "intent": "set environment variable debussy  to  1  ~ print environ os"}, {"snippet": "b.update(d)", "intent": "update dictionary b   overwriting values where keys are identical  with contents of dictionary  d  ~ in if value items for key"}, {"snippet": "df['b']", "intent": "get all the values in column b  from pandas data frame  df  ~ df values tolist"}, {"snippet": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')", "intent": "make a line plot with errorbars  ebar   from data  x  y  err  and set color of the errorbars to  y   yellow  ~ ax xaxis 'top plt"}, {"snippet": "results += [each for each in os.listdir(folder) if each.endswith('.c')]", "intent": "find all files with extension  c  in directory  folder  ~ in realpath os __file__ path for"}, {"snippet": "print('\\xc2\\xa3'.decode('utf8') + '1')", "intent": "add unicode string 1  to utf 8 decoded string   xc2 xa3  ~ unquote decode parse urllib"}, {"snippet": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()", "intent": "lower case the string obtained by replacing the occurrences of regex pattern      a z    a z    in string  s  with eplacement     1  ~ findall re"}, {"snippet": "os.system('ulimit -s unlimited; some_executable')", "intent": "setting stacksize in a python script ~ os path abspath __file__"}, {"snippet": "\"\"\"{0:.3g}\"\"\".format(num)", "intent": "format a string num  using string formatting ~ m- strptime strftime datetime y-"}, {"snippet": "numpy.append(a, a[0])", "intent": "append the first element of array a  to array  a  ~ for in zip"}, {"snippet": "df.ix[:, (df.loc[0] == 38.15)].columns", "intent": "return the column for value 38 15 in dataframe df  ~ df groupby"}, {"snippet": "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])", "intent": "merge 2 dataframes df1  and  df2  with same values in a column  revenue  with and index  date  ~ df2 merge df index df1"}, {"snippet": "json_data = json.loads(json_string)", "intent": "load a json data json_string  into variable  json_data  ~ dumps json"}, {"snippet": "math.cos(math.radians(1))", "intent": "convert radians 1 to degrees ~ m/ datetime d/ strptime"}, {"snippet": "sum(isinstance(x, int) for x in a)", "intent": "count the number of integers in list a  ~ for in sum len"}, {"snippet": "'used\\u200b'.replace('\\u200b', '*')", "intent": "replacing   u200b  with     in a string  using regular expressions ~ findall re"}, {"snippet": "threading.Thread(target=SudsMove).start()", "intent": "run function sudsmove  simultaneously ~ system os call subprocess shell=true"}, {"snippet": "sum(i * i for i in l)", "intent": "sum of squares values in a list l  ~ in for item 'gold sum"}, {"snippet": "sum(map(lambda x: x * x, l))", "intent": "calculate the sum of the squares of each value in list l  ~ for in sum zip"}, {"snippet": "d = dict(((key, value) for (key, value) in iterable))", "intent": "create a dictionary d  from list  iterable  ~ keys in items for list lod"}, {"snippet": "d = {key: value for (key, value) in iterable}", "intent": "create a dictionary d  from list  iterable   ~ keys in items for list lod"}, {"snippet": "d = {k: v for (k, v) in iterable}", "intent": "create a dictionary d  from list of key value pairs  iterable  ~ if in for items"}, {"snippet": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})", "intent": "round off entries in dataframe df  column  alabama_exp  to two decimal places  and entries in column  credit_exp  to three decimal places ~ round 0005"}, {"snippet": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)", "intent": "make function writefunction  output nothing in curl  p  ~ system subprocess os"}, {"snippet": "print(random.choice(words))", "intent": "return a random word from a word list words  ~ if random in for"}, {"snippet": "max(d, key=lambda x: d[x]['count'])", "intent": "find a max value of the key count  in a nested dictionary  d  ~ values in sum len for"}, {"snippet": "[(int(x) if x else 0) for x in data.split(',')]", "intent": "get list of string elements in string data  delimited by commas  putting  0  in place of empty strings ~ split for in int"}, {"snippet": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))", "intent": "split string s  into a list of strings based on     then replace empty strings with zero ~ for in re split"}, {"snippet": "re.compile('$^')", "intent": "regular expression match nothing ~ findall re"}, {"snippet": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')", "intent": "regular expression syntax for not to match anything ~ findall ! re"}, {"snippet": "re.compile('a^')", "intent": "create a regular expression object with a pattern that will match nothing ~ compile re"}, {"snippet": "df.columns[df.max() > 0]", "intent": "drop all columns in dataframe df  that holds a maximum value bigger than 0 ~ df loc"}, {"snippet": "yourdatetime.date() == datetime.today().date()", "intent": "check if date yourdatetime  is equal to today s date ~ date relativedelta datetime months="}, {"snippet": "print('\\x1b[1m' + 'Hello')", "intent": "print bold text hello  ~ print"}, {"snippet": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')", "intent": "remove 20 symbols in front of    in string  unique12345678901234567890 mkv  ~ string1 string2 plt"}, {"snippet": "['a', 'c', 'b', 'obj']", "intent": "define a list with string values   a    c    b    obj    ~ 'a 'c 'd 'b"}, {"snippet": "\"\"\" \"\"\".join(mystring.split())", "intent": "substitute multiple whitespace with single whitespace in string mystring  ~ sub re text"}, {"snippet": "print('{:.100f}'.format(2.345e-67))", "intent": "print a floating point number 2 345e 67 without any truncation ~ round 0005"}, {"snippet": "('key1' in dict)", "intent": "check if key key1  in  dict  ~ if in for"}, {"snippet": "('a' in d)", "intent": "check if key a  in  d  ~ if in list items for"}, {"snippet": "('c' in d)", "intent": "check if key c  in  d  ~ if in for items"}, {"snippet": "if ('key1' in dict):\n    pass", "intent": "check if a given key key1  exists in dictionary  dict  ~ for in list"}, {"snippet": "if (key in d):\n    pass", "intent": "check if a given key key  exists in dictionary  d  ~ if in for items"}, {"snippet": "Blog.objects.filter(pk__in=[1, 4, 7])", "intent": "create a django query for a list of values 1  4  7  ~ for in range list"}, {"snippet": "f = open('test/test.pdf', 'rb')", "intent": "read a binary file test test pdf  ~ as read open with"}, {"snippet": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')", "intent": "insert    between every three digit before     and replace     with     in 12345678 46 ~ sub $ ^ re"}, {"snippet": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')", "intent": "join pandas data frame frame_1  and  frame_2  with left join by  county_id  and right join by  countyid  ~ true df re sort ascending= split"}, {"snippet": "np.isnan(a).sum() / np.prod(a.shape)", "intent": "calculate ratio of sparsity in a numpy array a  ~ np array"}, {"snippet": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)", "intent": "reverse sort items in default dictionary citypopulation  by the third item in each key s list of values ~ reverse=true sorted key=lambda list"}, {"snippet": "sorted(list(u.items()), key=lambda v: v[1])", "intent": "sort dictionary u  in ascending order based on second elements of its values ~ reverse=true sorted key=lambda list"}, {"snippet": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)", "intent": "reverse sort dictionary d  based on its values ~ sorted iter list items key=lambda"}, {"snippet": "sorted(list(d.items()), key=lambda k_v: k_v[1])", "intent": "sorting a defaultdict d  by value ~ reverse=true sorted key=lambda list items"}, {"snippet": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))", "intent": "open a file bundled resource jpg  in the same directory as a python script ~ os path"}, {"snippet": "f = open('words.txt', 'rU')", "intent": "open the file words txt  in  ru  mode ~ in line as for open with txt"}, {"snippet": "{k: (float(d2[k]) / d1[k]) for k in d2}", "intent": "divide the values with same keys of two dictionary d1  and  d2  ~ d2 in for d1"}, {"snippet": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}", "intent": "divide the value for each key k  in dict  d2  by the value for the same key  k  in dict  d1  ~ d2 in sum 'gold for item d1"}, {"snippet": "dict((k, float(d2[k]) / d1[k]) for k in d2)", "intent": "divide values associated with each key in dictionary d1  from values associated with the same key in dictionary  d2  ~ d2 in 'gold sum for item d1"}, {"snippet": "df.to_csv(filename, date_format='%Y%m%d')", "intent": "write dataframe df  to csv file  filename  with dates formatted as yearmonthday    y m d  ~ m- strftime df y-"}, {"snippet": "my_dict.pop('key', None)", "intent": "remove a key key  from a dictionary  my_dict  ~ in if items for list key"}, {"snippet": "b = np.where(np.isnan(a), 0, a)", "intent": "replace nan values in array a  with zeros ~ df replace 'a"}, {"snippet": "subprocess.call('start command -flags arguments', shell=True)", "intent": "subprocess run command start command  flags arguments  through the shell ~ call subprocess shell=true"}, {"snippet": "subprocess.call('command -flags arguments &', shell=True)", "intent": "run command command  flags arguments    on command line tools as separate processes ~ call subprocess shell=true"}, {"snippet": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))", "intent": "replace percent encoded code in request f  to their single character equivalent ~ unquote decode parse urllib requests"}, {"snippet": "\"\"\"    xyz     \"\"\".rstrip()", "intent": "remove white spaces from the end of string     xyz       ~ sub '\\\\ \\\\ re"}, {"snippet": "urllib.parse.quote(s.encode('utf-8'))", "intent": "replace special characters in utf 8 encoded string s  using the  xx escape ~ 'utf-8 unquote decode parse urllib"}, {"snippet": "urllib.parse.quote_plus('a b')", "intent": "url encoding in python ~ unquote decode parse urllib"}, {"snippet": "np.array(map(int, '100110'))", "intent": "create an array containing the conversion of string 100110  into separate elements ~ for in int split"}, {"snippet": "print(np.array(list(mystr), dtype=int))", "intent": "convert a string mystr  to numpy array of integer values ~ for in np int"}, {"snippet": "img = cv2.imread('messi5.jpg', 0)", "intent": "convert an rgb image messi5 jpg  into grayscale  img  ~ png savefig open plt"}, {"snippet": "lst.sort(key=lambda x: x[2], reverse=True)", "intent": "sort list lst  in descending order based on the second item of each tuple in it ~ reverse=true sorted key=lambda sum"}, {"snippet": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']", "intent": "how to find all occurrences of an element in a list ~ if in not for"}, {"snippet": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)", "intent": "execute shell command grep  r passed   log   sort  u   wc  l  with a   pipe in it ~ system os call subprocess shell=true"}, {"snippet": "len(my_text) - len(my_text.rstrip('?'))", "intent": "count the number of trailing question marks in string my_text  ~ sub '\\\\1 re"}, {"snippet": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)", "intent": "remove dollar sign    from second to last column data in dataframe  df  and convert the data into floats ~ axis=1 columns groupby df"}, {"snippet": "df1.merge(df2, how='left', on='word')", "intent": "merge column  word  in dataframe  df2  with column  word  on dataframe  df1  ~ df pd df1 'c 'b 'a df2"}, {"snippet": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')", "intent": "switch positions of each two adjacent characters in string a  ~ for join in"}, {"snippet": "root.attributes('-topmost', True)", "intent": "make a window root  jump to the front ~ system 'shutdown call subprocess os"}, {"snippet": "root.lift()", "intent": "make a window root  jump to the front  ~ system 'shutdown call subprocess os"}, {"snippet": "hex(int(''.join([str(int(b)) for b in walls]), 2))", "intent": "convert list of booleans walls  into a hex string ~ for in list items int"}, {"snippet": "hex(sum(b << i for i, b in enumerate(reversed(walls))))", "intent": "convert the sum of list walls  into a hex presentation ~ for in list items int"}, {"snippet": "print(('Total score for', name, 'is', score))", "intent": "print the string total score for   the value of the variable  name   the string  is  and the value of the variable  score  in one print call  ~ environ 'total print os name score for"}, {"snippet": "print('Total score for {} is {}'.format(name, score))", "intent": "print multiple arguments name  and  score   ~ format 'total print name score for"}, {"snippet": "print('Total score for %s is %s  ' % (name, score))", "intent": "print a string using multiple strings name  and  score  ~ print score name 'total for"}, {"snippet": "print(('Total score for', name, 'is', score))", "intent": "print string including multiple variables name  and  score  ~ print score for name 'total"}, {"snippet": "url('^$', TemplateView.as_view(template_name='your_template.html'))", "intent": "serve a static html page your_template html  at the root of a django project ~ findall soup"}, {"snippet": "df[df['A'].isin([3, 6])]", "intent": "use a list of values  3 6   to select rows from a pandas dataframe  df  s column  a  ~ groupby 'id 'a df"}, {"snippet": "instance.__class__.__name__", "intent": "how to get the concrete class name as a string ~ name"}, {"snippet": "system('/path/to/my/venv/bin/python myscript.py')", "intent": "execute python code myscript py  in a virtualenv   path to my venv  from matlab ~ exec os 'exec path open py read compile"}, {"snippet": "Employees.objects.values_list('eng_name', flat=True)", "intent": "django return a queryset list containing the values of field eng_name  in model  employees  ~ order_by mymodel objects filter"}, {"snippet": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')", "intent": "find all digits in string 6 7   and put them to a list ~ round 005"}, {"snippet": "input('Press Enter to continue...')", "intent": "prompt string press enter to continue     to the console ~ os path sys"}, {"snippet": "\"\"\"\u0001ABC\"\"\".encode('hex')", "intent": "print string abc  as hex literal ~ in ord int print for 16"}, {"snippet": "db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})", "intent": "insert a new field geoloccountry  on an existing document   b  using pymongo ~ print path txt os"}, {"snippet": "re.sub('l+', 'l', 'lollll')", "intent": "write a regex statement to match lol  to  lolllll   ~ re compile '^"}, {"snippet": "rows = soup.findAll('tr')[4::5]", "intent": "beautifulsoup find all tr  elements in html string  soup  at the five stride starting from the fourth element ~ str 's find soup"}, {"snippet": "plt.gca().invert_xaxis()", "intent": "reverse all x axis points in pyplot ~ ax xaxis 'top plt"}, {"snippet": "plt.gca().invert_yaxis()", "intent": "reverse y axis in pyplot ~ ax xaxis 'top plt"}, {"snippet": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)", "intent": "stack two dataframes next to each other in pandas ~ df groupby sum"}, {"snippet": "return HttpResponse(json.dumps(response_data), content_type='application/json')", "intent": "create a json response response_data  ~ loads json"}, {"snippet": "myString.decode('string_escape')", "intent": "decode escape sequences in string mystring  ~ sub urllib decode re unquote parse"}, {"snippet": "hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()", "intent": "calculate the md5 checksum of a file named  filename exe  ~ file time os path getmtime ctime"}, {"snippet": "[k for k, v in d.items() if v == desired_value]", "intent": "find all keys from a dictionary d  whose values are  desired_value  ~ in if value items for list key"}, {"snippet": "{k for d in LoD for k in list(d.keys())}", "intent": "create a set containing all keys names from dictionary  lod  ~ in if value items for list key"}, {"snippet": "set([i for s in [list(d.keys()) for d in LoD] for i in s])", "intent": "create a set containing all keys names from list of dictionaries lod  ~ in if value my_dict items for list key"}, {"snippet": "[i for s in [list(d.keys()) for d in LoD] for i in s]", "intent": "extract all keys from a list of dictionaries lod  ~ in if my_dict items for list"}, {"snippet": "keys, values = zip(*list(d.items()))", "intent": "unpack keys and values of a dictionary d  into two lists ~ dict for in list items"}, {"snippet": "int(Decimal(s))", "intent": "convert a string s  containing a decimal to an integer ~ for in int"}, {"snippet": "int(s.split('.')[0])", "intent": "convert a string to integer with decimal in python ~ 16 for in int"}, {"snippet": "numpy.in1d(b, a).all()", "intent": "check if array b  contains all elements of array  a  ~ if in for"}, {"snippet": "numpy.array([(x in a) for x in b])", "intent": "numpy  check if array  a  contains all the numbers in array  b   ~ any for in"}, {"snippet": "networkx.draw_networkx_labels(G, pos, labels)", "intent": "draw node labels labels  on networkx graph  g   at position  pos  ~ ax xaxis png savefig plt"}, {"snippet": "y = [row[:] for row in x]", "intent": "make a row by row copy y  of array  x  ~ for in np"}, {"snippet": "X = numpy.loadtxt('somefile.csv', delimiter=',')", "intent": "create 2d numpy array from the data provided in somefile csv  with each row in the file having same number of values ~ df for in"}, {"snippet": "matching = [s for s in some_list if 'abc' in s]", "intent": "get a list of items from the list some_list  that contain string  abc  ~ if in not for"}, {"snippet": "df.to_csv('mydf.tsv', sep='\\t')", "intent": "export a pandas data frame df  to a file  mydf tsv  and retain the indices ~ df csv to_csv"}, {"snippet": "random.sample(list(range(100)), 10)", "intent": "how do i create a list of unique random numbers ~ if in for"}, {"snippet": "s.rsplit(',', 1)", "intent": "split a string s  on last delimiter ~ for in split"}, {"snippet": "all(isinstance(x, int) for x in lst)", "intent": "check if all elements in list lst  are tupples of long and int ~ for in lst int"}, {"snippet": "all(isinstance(x, int) for x in lst)", "intent": "check if all elements in a list lst  are the same type  int  ~ if lst in for items"}, {"snippet": "line.strip()", "intent": "strip a string line  of all carriage returns and newlines ~ sub in if join re for"}, {"snippet": "driver.execute_script('window.scrollTo(0, Y)')", "intent": "scroll to the bottom of a web page using selenium webdriver ~ get driver google //www 'http"}, {"snippet": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')", "intent": "scroll a to the bottom of a web page using selenium webdriver ~ get driver google //www 'http"}, {"snippet": "datetime.datetime.combine(dateobject, datetime.time())", "intent": "convert date object dateobject  into a datetime object ~ m- strptime datetime y-"}, {"snippet": "print(any(x in a for x in b))", "intent": "check if any item from list b  is in list  a  ~ any for in"}, {"snippet": "scipy.misc.imsave('outfile.jpg', image_array)", "intent": "save a numpy array image_array  as an image  outfile jpg  ~ png savefig plt"}, {"snippet": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)", "intent": "remove anything in parenthesis from string item  with a regex ~ sub ! in if re for"}, {"snippet": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)", "intent": "remove word characters in parenthesis from string item  with a regex ~ sub in if re for \\\\ item"}, {"snippet": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)", "intent": "remove all data inside parenthesis in string item  ~ ! in for if"}, {"snippet": "len(set(list1).intersection(list2)) > 0", "intent": "check if any elements in one list list1  are in another list  list2  ~ all for in"}, {"snippet": "i = int(s, 16)", "intent": "convert hex string s  to decimal ~ 16 int"}, {"snippet": "int('0xff', 16)", "intent": "convert hex string 0xff  to decimal ~ 16 int"}, {"snippet": "int('FFFF', 16)", "intent": "convert hex string ffff  to decimal ~ 16 int"}, {"snippet": "ast.literal_eval('0xdeadbeef')", "intent": "convert hex string 0xdeadbeef  to decimal ~ 16 int"}, {"snippet": "int('deadbeef', 16)", "intent": "convert hex string deadbeef  to decimal ~ 16 int"}, {"snippet": "os.system('screencapture screen.png')", "intent": "take screenshot screen png  on mac os x ~ system png savefig os plt"}, {"snippet": "driver.set_window_size(1400, 1000)", "intent": "set a window size to 1400  1000  using selenium webdriver ~ system 'shutdown call subprocess os"}, {"snippet": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')", "intent": "replace non ascii chars from a unicode string u m xfasica ~ sub 'ignore encode re 'ascii"}, {"snippet": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)", "intent": "concatenate dataframe df1  with  df2  whilst removing duplicates ~ df2 df dataframe df1 pd"}, {"snippet": "a = numpy.fromfile('filename', dtype=numpy.float32)", "intent": "construct an array with data type float32 a  from data in binary file  filename  ~ df csv"}, {"snippet": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "intent": "execute a mv command mv  home somedir subdir   somedir   in subprocess ~ call subprocess shell=true"}, {"snippet": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "intent": "how to use the mv command in python with subprocess ~ 'shutdown call subprocess"}, {"snippet": "print('\\u25b2'.encode('utf-8'))", "intent": "print a character that has unicode value  u25b2  ~ sub print re"}, {"snippet": "difflib.SequenceMatcher(None, file1.read(), file2.read())", "intent": "compare contents at filehandles  file1  and  file2  using difflib ~ os path open"}, {"snippet": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))", "intent": "create a dictionary from string e  separated by     and     ~ split for in int"}, {"snippet": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))", "intent": "check if all elements in a tuple  1  6   are in another   1  2  3  4  5   ~ in not"}, {"snippet": "df['Date'].map(lambda t: t.date()).unique()", "intent": "extract unique dates from time series date  in dataframe  df  ~ df date relativedelta 'month months="}, {"snippet": "\"\"\"{:>7s}\"\"\".format(mystring)", "intent": "right align string mystring  with a width of 7 ~ rstrip '\\r\\n"}, {"snippet": "open('ComponentReport-DJI.xls', 'rb').read(200)", "intent": "read an excel file componentreport dji xls  ~ open read"}, {"snippet": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)", "intent": "sort dataframe df  based on column  b  in ascending and column  c  in descending ~ true df sort_values 'b false ascending= 'a"}, {"snippet": "df.sort_values(['a', 'b'], ascending=[True, False])", "intent": "sort dataframe df  based on column  a  in ascending and column  b  in descending ~ true inplace=true df false sorted ascending="}, {"snippet": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)", "intent": "sort a pandas data frame with column a  in ascending and  b  in descending order ~ ascending= true df sort_values false"}, {"snippet": "df.sort(['a', 'b'], ascending=[True, False])", "intent": "sort a pandas data frame by column a  in ascending  and by column  b  in descending order ~ true df sort_values 'b false ascending="}, {"snippet": "redirect('Home.views.index')", "intent": "django redirect to view home views index  ~ request"}, {"snippet": "[x for x in a if x not in [2, 3, 7]]", "intent": "remove all values within one list  2  3  7   from another list  a  ~ in for 'a 'c 'b"}, {"snippet": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))", "intent": "remove the punctuation              from a string  asking  ~ sub '\\\\ \\\\ re"}, {"snippet": "soup.find('meta', {'name': 'City'})['content']", "intent": "beautifulsoup get value associated with attribute content  where attribute  name  is equal to  city  in tag  meta  in html parsed string  soup  ~ 'div 'a find_all soup"}, {"snippet": "urllib.parse.unquote('%0a')", "intent": "unquote a urlencoded unicode string  0a  ~ chr in print urllib decode join unquote for parse"}, {"snippet": "urllib.parse.unquote(url).decode('utf8')", "intent": "decode url url  from utf 16 code to utf 8 code ~ unquote decode parse urllib"}, {"snippet": "del lst[:]", "intent": "empty a list lst  ~ for in lst int"}, {"snippet": "del lst1[:]", "intent": "empty a list lst   ~ for in lst int"}, {"snippet": "lst[:] = []", "intent": "empty a list lst    ~ for in lst int"}, {"snippet": "alist[:] = []", "intent": "empty a list alist  ~ if in for"}, {"snippet": "s.reset_index(0).reset_index(drop=True)", "intent": "reset index of series s  ~ df index"}, {"snippet": "elems[0].getText().encode('utf-8')", "intent": "convert unicode text from list elems  with index 0 to normal text  utf 8  ~ decode encode 'utf8"}, {"snippet": "[(y - x) for x, y in zip(L, L[1:])]", "intent": "create a list containing the subtraction of each item in list l  from the item prior to it ~ for in range"}, {"snippet": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))", "intent": "get value in string line  matched by regex pattern    blog_addr  s    s    ~ findall re"}, {"snippet": "globals().update(importlib.import_module('some.package').__dict__)", "intent": "import all classes from module some package  ~ __init__ path os super self"}, {"snippet": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", "intent": "convert a list of characters   a    b    c    d    into a string ~ in 'd 'c 'b for 'a"}, {"snippet": "url.split('&')", "intent": "slice url  with     as delimiter  to get   http   www domainname com page content_item_id 1234  from url  http   www domainname com page content_item_id 1234 param2 param3\r\n  ~ urllib get 'http requests request"}, {"snippet": "od = collections.OrderedDict(sorted(d.items()))", "intent": "sort dictionary d  by key ~ sorted key=lambda list items"}, {"snippet": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))", "intent": "sort a dictionary d  by key ~ sorted key=lambda list items"}, {"snippet": "response = requests.put(url, data=json.dumps(data), headers=headers)", "intent": "execute a put request to the url url  ~ get 'https requests"}, {"snippet": "re.sub('[\\\\W_]+', '', s)", "intent": "replace everything that is not an alphabet or a digit with   in  s   ~ sub re"}, {"snippet": "[(x + y) for x in l2 for y in l1]", "intent": "create a list of aggregation of each element from list l2  to all elements of list  l1  ~ for in sum zip"}, {"snippet": "dict([x.split('=') for x in s.split()])", "intent": "convert string x   to dictionary splitted by     using list comprehension ~ for in split"}, {"snippet": "my_list.pop(2)", "intent": "remove index 2 element from a list my_list  ~ if in not for"}, {"snippet": "s = s.replace('M', '')", "intent": "delete character m  from a string  s  using python ~ findall if in for re"}, {"snippet": "newstr = oldstr.replace('M', '')", "intent": "how to delete a character from a string using python ~ if in for"}, {"snippet": "sum(x * y for x, y in zip(a, b))", "intent": "get the sum of the products of each pair of corresponding elements in lists a  and  b  ~ for in sum zip"}, {"snippet": "list(x * y for x, y in list(zip(a, b)))", "intent": "sum the products of each two elements at the same index of list a  and list  b  ~ for in sum zip"}, {"snippet": "sum(i * j for i, j in zip(a, b))", "intent": "sum the product of each two items at the same index of list a  and list  b  ~ for in sum zip"}, {"snippet": "sum(x * y for x, y in list(zip(a, b)))", "intent": "sum the product of elements of two lists named a  and  b  ~ for in sum zip"}, {"snippet": "f.write(open('xxx.mp4', 'rb').read())", "intent": "write the content of file xxx mp4  to file  f  ~ open 'rb"}, {"snippet": "new_list = [(x + 1) for x in my_list]", "intent": "add 1 to each integer value in list my_list  ~ for in range"}, {"snippet": "[x for x in j if x >= 5]", "intent": "get a list of all items in list j  with values greater than  5  ~ if value in for items"}, {"snippet": "plt.plot(list(range(10)), '--bo')", "intent": "set color marker styles   bo  in matplotlib ~ png savefig plt"}, {"snippet": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')", "intent": "set circle markers on plot for individual points defined in list     1 2 3 4 5 6 7 8 9 10   created by range 10  ~ list zip"}, {"snippet": "[i.split('\\t', 1)[0] for i in l]", "intent": "split strings in list l  on the first occurring tab   t  and enter only the first resulting substring in a new list ~ for in item split"}, {"snippet": "myList = [i.split('\\t')[0] for i in myList]", "intent": "split each string in list mylist  on the tab character ~ for join in split"}, {"snippet": "sum(your_list)", "intent": "sum numbers in a list your_list  ~ for in sum len"}, {"snippet": "ForkedPdb().set_trace()", "intent": "attach debugger pdb to class forkedpdb  ~ __init__ os super system self"}, {"snippet": "result = {k: d2.get(v) for k, v in list(d1.items())}", "intent": "compose keys from dictionary d1  with respective values in dictionary  d2  ~ d2 in 'gold sum dict for item d1"}, {"snippet": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)", "intent": "add one day and three hours to the present time from datetime now  ~ now date relativedelta datetime months="}, {"snippet": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "intent": "convert binary string to list of integers using python ~ for in int"}, {"snippet": "dict((v, k) for k, v in my_dict.items())", "intent": "switch keys and values in a dictionary my_dict  ~ ! in for items if"}, {"snippet": "print(sorted(L, key=lambda x: int(x.split('.')[2])))", "intent": "sort a list l  by number after second     ~ sorted key=lambda sum"}, {"snippet": "any(d['name'] == 'Test' for d in label)", "intent": "check if the value of the key name  is  test  in a list of dictionaries  label  ~ if in for items"}, {"snippet": "a[:] = [x for x in a if x != [1, 1]]", "intent": "remove all instances of 1  1  from list  a  ~ if in not for"}, {"snippet": "[x for x in a if x != [1, 1]]", "intent": "remove all instances of  1  1   from a list  a  ~ if in not for"}, {"snippet": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}", "intent": "convert a list a  to a dictionary where each even element represents the key to the dictionary  and the following odd element is the value ~ if in for items"}, {"snippet": "len(set(a)) == len(a)", "intent": "check whether elements in list a  appear only once ~ if in not for"}, {"snippet": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())", "intent": "generate md5 checksum of file in the path full_path  in hashlib ~ os path abspath __file__"}, {"snippet": "sorted(list(data.items()), key=lambda x: x[1][0])", "intent": "how to sort a dictionary in python by value when the value is a list and i want to sort it by the first index of that list ~ in key=lambda items sorted for list"}, {"snippet": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)", "intent": "randomly switch letters cases in string  s  ~ sub '\\\\1 re"}, {"snippet": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')", "intent": "force bash interpreter  bin bash  to be used instead of shell ~ call subprocess shell=true"}, {"snippet": "os.system('/bin/bash -c \"echo hello world\"')", "intent": "run a command echo hello world  in bash instead of shell ~ system os call subprocess shell=true"}, {"snippet": "getattr(test, a_string)", "intent": "access the class variable a_string  from a class object  test  ~ __init__ environ print os super self"}, {"snippet": "Image.open('pathToFile').show()", "intent": "display a image file pathtofile  ~ savefig urllib plt com/file 'http open request"}, {"snippet": "\"\"\"didn't\"\"\".replace(\"'\", '')", "intent": "replace single quote character in string didn t  with empty string    ~ sub \\\\ re"}, {"snippet": "files.sort(key=file_number)", "intent": "sort list files  based on variable  file_number  ~ sorted key=lambda items"}, {"snippet": "sentence.replace(' ', '')", "intent": "remove all whitespace in a string sentence  ~ sub in if join re for"}, {"snippet": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)", "intent": "remove all whitespace in a string sentence   ~ sub in if join re for"}, {"snippet": "sentence.strip()", "intent": "remove whitespace in string sentence  from beginning and end ~ sub in if join re for"}, {"snippet": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)", "intent": "remove all whitespaces in string sentence  ~ sub in if join re for"}, {"snippet": "sentence = ''.join(sentence.split())", "intent": "remove all whitespaces in a string sentence  ~ sub in if join re for"}, {"snippet": "sum(my_counter.values())", "intent": "sum all the values in a counter variable my_counter  ~ print environ os"}, {"snippet": "np.sqrt(((A - B) ** 2).sum(-1))", "intent": "find the euclidean distance between two 3 d arrays a  and  b  ~ dict in for items"}, {"snippet": "levels = [{}, {}, {}]", "intent": "create list levels  containing 3 empty dictionaries ~ if in for"}, {"snippet": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]", "intent": "find the sums of length 7 subsets of a list daily  ~ for in range len if"}, {"snippet": "del d[key]", "intent": "delete an element key  from a dictionary  d  ~ in if value items for list key"}, {"snippet": "{i: a[i] for i in a if (i != 0)}", "intent": "delete an element 0 from a dictionary a  ~ ! in for if"}, {"snippet": "lol.pop('hello')", "intent": "delete an element hello  from a dictionary  lol  ~ if in for"}, {"snippet": "del r[key]", "intent": "delete an element with key key  dictionary  r  ~ ! in for items if"}, {"snippet": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))", "intent": "solve for the least squares solution of matrices  a  and  b  ~ d2 in for d1"}, {"snippet": "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)", "intent": "split dictionary list inside a pandas column b  into separate columns in dataframe  df  ~ df 'a 'b"}, {"snippet": "for i in range(0, 10, 2):\n    pass", "intent": "loop through 0 to 10 with step 2 ~ for in range 10"}, {"snippet": "for i in mylist[::2]:\n    pass", "intent": "loop through mylist  with step 2 ~ for in pass"}, {"snippet": "[{'content': x['content'].lower()} for x in messages]", "intent": "lowercase string values with key content  in a list of dictionaries  messages  ~ in value items for 'my list key lower"}, {"snippet": "\"\"\" \"\"\".join(my_list)", "intent": "convert a list my_list  into string with values separated by spaces ~ split for in int"}, {"snippet": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)", "intent": "replace each occurrence of the pattern  http     s    s     w  s   s    within  a  with    ~ sub re"}, {"snippet": "str(n) == str(n)[::-1]", "intent": "check if string str  is palindrome ~ if in not pass"}, {"snippet": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))", "intent": "upload binary file myfile txt  with ftplib ~ 'myfile open txt"}, {"snippet": "re.sub('.*I', 'I', stri)", "intent": "remove all characters from string stri  upto character  i  ~ sub in if join re for"}, {"snippet": "int('1,000,000'.replace(',', ''))", "intent": "parse a comma separated string number 1 000 000  into int ~ for in int split"}, {"snippet": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')", "intent": "combine dataframe  df1  and dataframe  df2  by index number ~ df2 merge df df1 pd"}, {"snippet": "pandas.concat([df1, df2], axis=1)", "intent": "combine two pandas dataframes with the same index ~ df in axis=1 columns for zip groupby"}, {"snippet": "all(dict.values())", "intent": "check if all boolean values in a python dictionary dict  are true ~ in if items for list key"}, {"snippet": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')", "intent": "use regex pattern  12     4     to remove digit 12 if followed by 4 other digits in column  c_contofficeid  of dataframe  df  ~ sub if in for re"}, {"snippet": "L[::(-1)]", "intent": "reverse a list l  ~ sorted key=lambda items"}, {"snippet": "reversed(array)", "intent": "reverse a list array  ~ sorted values key=lambda list"}, {"snippet": "L.reverse()", "intent": "reverse a list l   ~ sorted key=lambda items"}, {"snippet": "list(reversed(array))", "intent": "reverse a list array   ~ sorted values key=lambda list"}, {"snippet": "[tup[0] for tup in A]", "intent": "get first element of each tuple in list a  ~ for in sum"}, {"snippet": "newcontents = contents.replace('a', 'e').replace('s', '3')", "intent": "replace character a  with character  e  and character  s  with character  3  in file  contents  ~ sub re"}, {"snippet": "json.dumps([dict(list(row.items())) for row in rs])", "intent": "serialise sqlalchemy rowproxy object row  to a json object ~ into objects 'insert cursor execute"}, {"snippet": "config_file = os.path.expanduser('~/foo.ini')", "intent": "get file   foo ini  ~ as open with 'foo"}, {"snippet": "request.params.getall('c')", "intent": "get multiple parameters with same name from a url in pylons ~ d2 in for d1"}, {"snippet": "np.corrcoef(x)", "intent": "convert array x  into a correlation matrix ~ np array"}, {"snippet": "print(max(1, 2, 3))", "intent": "find the greatest number in set  1  2  3   ~ print for in"}, {"snippet": "self.request.get('var_name')", "intent": "retrieve parameter var_name  from a get request  ~ url get requests request"}, {"snippet": "a['x'].apply(lambda x, y: x + y, args=(100,))", "intent": "add 100 to each element of column x  in dataframe  a  ~ sum groupby 'user 'x df"}, {"snippet": "User.objects.order_by('-pet__age')[:10]", "intent": "django get first 10 records of model user  ordered by criteria  age  of model  pet  ~ order_by mymodel objects filter"}, {"snippet": "time.sleep(5)", "intent": "delay for 5  seconds ~ for datetime in"}, {"snippet": "time.sleep(60)", "intent": "make a 60 seconds time delay ~ time ctime path file os"}, {"snippet": "sleep(0.1)", "intent": "make a 0 1 seconds time delay ~ for in zip"}, {"snippet": "time.sleep(60)", "intent": "make a 60 seconds time delay ~ time ctime path file os"}, {"snippet": "time.sleep(0.1)", "intent": "make a 0 1 seconds time delay ~ for in zip"}, {"snippet": "[x for x in my_list if not any(c.isdigit() for c in x)]", "intent": "from a list of strings my_list   remove the values that contains numbers  ~ if in for items"}, {"snippet": "df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])", "intent": "get the middle two characters of a string state  in a pandas dataframe  df  ~ axis=1 columns groupby df"}, {"snippet": "plt.grid(True)", "intent": "draw a grid line on every tick of plot plt  ~ png savefig plt"}, {"snippet": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))", "intent": "sort list lst  based on each element s number of occurrences ~ sorted key=lambda sum"}, {"snippet": "[max(len(str(x)) for x in line) for line in zip(*foo)]", "intent": "get the value with the maximum length in each column in array foo  ~ for in sum"}, {"snippet": "df.Country.value_counts().reset_index(name='Sum of Accidents')", "intent": "get the count of each unique value in column country  of dataframe  df  and store in column  sum of accidents  ~ axis=1 columns groupby sum df"}, {"snippet": "data.set_index('Date').diff()", "intent": "calculat the difference between each row and the row previous to it in dataframe data  ~ df groupby"}, {"snippet": "a.update([3, 4])", "intent": "append values  3  4   to a set  a  ~ in for 'a 'c 'b"}, {"snippet": "a[1::2] = -1", "intent": "set every two stride far element to 1 starting from second element in array  a  ~ for in range"}, {"snippet": "df.groupby('group')['value'].rank(ascending=False)", "intent": "get rank of rows from highest to lowest of dataframe df   grouped by value in column  group   according to value in column  value  ~ df groupby sum"}, {"snippet": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')", "intent": "convert js date object tue  22 nov 2011 06 00 00 gmt  to python datetime ~ fuzzy=true m/ datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "struct.pack('<I', 1633837924)", "intent": "convert a binary value 1633837924  to string ~ 16 for in int"}, {"snippet": "list.append('foo')", "intent": "append string foo  to list  list  ~ 'bar in for 'foo"}, {"snippet": "list.insert(0, 'foo')", "intent": "insert string foo  at position  0  of list  list  ~ for in zip"}, {"snippet": "theset = set(k.lower() for k in thedict)", "intent": "convert keys in dictionary thedict  into case insensitive ~ for join in range"}, {"snippet": "\"\"\"{s:{c}^{n}}\"\"\".format(s='dog', n=5, c='x')", "intent": "pad dog  up to a length of 5 characters with  x  ~ round 0005"}, {"snippet": "isinstance(s, str)", "intent": "check if type of variable s  is a string ~ if in not pass for"}, {"snippet": "isinstance(s, str)", "intent": "check if type of a variable s  is string ~ if in not pass for"}, {"snippet": "dict(pair for d in L for pair in list(d.items()))", "intent": "convert list of dictionaries l  into a flat dictionary ~ dict in list items for"}, {"snippet": "{k: v for d in L for k, v in list(d.items())}", "intent": "merge a list of dictionaries in list l  into a single dict ~ dict in list items for"}, {"snippet": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "intent": "sort a pandas data frame according to column peak  in ascending and  weeks  in descending order ~ ascending= true df sort_values false"}, {"snippet": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "intent": "sort a pandas data frame by column peak  in ascending and  weeks  in descending order ~ true df false 'b ascending= 'a"}, {"snippet": "eval(\"print('Hello')\")", "intent": "run the code contained in string print  hello    ~ system print os"}, {"snippet": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "intent": "creating a list of dictionaries   a   1   c   4   b   2   d   4     a   1   c   4   b   1   d   5   ~ in for 'a 'c 'b"}, {"snippet": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "intent": "creating a list of dictionaries in python ~ for in list items if"}, {"snippet": "list(itertools.product(*a))", "intent": "get all possible combination of items from 2 dimensional list a  ~ in for product itertools list"}, {"snippet": "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "intent": "get sum of values of columns  y1961    y1962    y1963  after group by on columns  country  and  item_code  in dataframe  df   ~ df groupby sum"}, {"snippet": "done = [(el, x) for el in [a, b, c, d]]", "intent": "create list done  containing permutations of each element in list   a  b  c  d   with variable  x  as tuples ~ in 'd 'c 'b for 'a"}, {"snippet": "x = x[numpy.logical_not(numpy.isnan(x))]", "intent": "remove nan values from array x  ~ df replace"}, {"snippet": "os.path.join(*x.split(os.path.sep)[2:])", "intent": "remove first directory from path  first second third fourth fifth  ~ os path realpath"}, {"snippet": "line = line.replace(';', ':')", "intent": "replace    with     in a string  line  ~ sub re text"}, {"snippet": "subprocess.call('tar c my_dir | md5sum', shell=True)", "intent": "call bash command tar c my_dir   md5sum  with pipe ~ system os call subprocess shell=true"}, {"snippet": "\"\"\"437c2123\"\"\".decode('hex')", "intent": "convert a hex string 437c2123   according to ascii value  ~ 16 int"}, {"snippet": "[k for k, v in User._fields.items() if v.required]", "intent": "get a list of all fields in class user  that are marked  required  ~ if in for"}, {"snippet": "df = df.ix[:, 0:2]", "intent": "remove column by index     0 2   in dataframe  df  ~ df 'a"}, {"snippet": "x = map(int, x.split())", "intent": "change a string of integers x  separated by spaces to a list of int ~ for in int split"}, {"snippet": "x = [int(i) for i in x.split()]", "intent": "convert a string of integers x  separated by spaces to a list of integers ~ split for in int"}, {"snippet": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")", "intent": "find element by css selector input onclick   1 bedroom deluxe    ~ for in input"}, {"snippet": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "intent": "python  remove special character from string ~ sub in if join re for"}, {"snippet": "webbrowser.open('file:///my_pdf.pdf')", "intent": "display a pdf file that has been downloaded as  my_pdf pdf  ~ urllib 'rb com/file 'http open request"}, {"snippet": "result = result.replace('\\\\', '')", "intent": "replace backslashes in string result  with empty string    ~ sub replace re text"}, {"snippet": "result.replace('\\\\', '')", "intent": "remove backslashes from string result  ~ sub in if join re for \\\\"}, {"snippet": "df.replace('-', 'NaN')", "intent": "replace value    in any column of pandas dataframe to  nan  ~ df fillna"}, {"snippet": "datetime.datetime.now().date()", "intent": "convert datetime object to date object in python ~ m- strptime datetime y-"}, {"snippet": "datetime.datetime.now().date()", "intent": "how do i convert datetime to date in python   ~ m- strptime datetime y-"}, {"snippet": "[elem.tag for elem in a.iter()]", "intent": "get all sub elements of an element a  in an elementtree ~ if in not for"}, {"snippet": "[elem.tag for elem in a.iter() if elem is not a]", "intent": "get all sub elements of an element tree a  excluding the root element ~ in //a if xpath text for root"}, {"snippet": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')", "intent": "how can i split and parse a string in python ~ for in split"}, {"snippet": "sorted(lst, key=lambda x: x['language'] != 'en')", "intent": "move dictionaries in list lst  to the end of the list if value of key  language  in each dictionary is not equal to  en  ~ if in for items"}, {"snippet": "all(value == 0 for value in list(your_dict.values()))", "intent": "check if all values of a dictionary your_dict  are zero  0  ~ ! in if items for list"}, {"snippet": "df.pivot_table('Y', rows='X', cols='X2')", "intent": "produce a pivot table as dataframe using column y  in datafram  df  to form the axes of the resulting dataframe ~ df 'month 'year"}, {"snippet": "try:\n    doSomething()\nexcept:\n    pass", "intent": "call dosomething    in a try except without handling the exception ~ system raise os"}, {"snippet": "try:\n    doSomething()\nexcept Exception:\n    pass", "intent": "call dosomething    in a try except without handling the exception  ~ system raise os"}, {"snippet": "M.sum(axis=0).sum(axis=0)", "intent": "get a sum of 4d array m  ~ sum for in list"}, {"snippet": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0", "intent": "convert a datetime object dt  to microtime ~ m- strptime datetime y-"}, {"snippet": "df[(x <= df['columnX']) & (df['columnX'] <= y)]", "intent": "select all rows in dataframe df  where the values of column  columnx  is bigger than or equal to  x  and smaller than or equal to  y  ~ df 'user sum 'x groupby loc"}, {"snippet": "sorted(L, key=itemgetter(2))", "intent": "sort a list of lists l  by index 2 of the inner list ~ sorted for in key=lambda list"}, {"snippet": "l.sort(key=(lambda x: x[2]))", "intent": "sort a list of lists l  by index 2 of the inner list  ~ sorted for in key=lambda list"}, {"snippet": "sorted(l, key=(lambda x: x[2]))", "intent": "sort list l  by index 2 of the item ~ sorted key=lambda list"}, {"snippet": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))", "intent": "sort a list of lists list_to_sort  by indices 2 0 1 of the inner list ~ sorted for in range"}, {"snippet": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))", "intent": "find rows of 2d array in 3d numpy array arr  if the row has value    0  3    3  0    ~ all np"}, {"snippet": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]", "intent": "from multiindexed dataframe data  select columns  a  and  c  within each higher order column  one  and  two  ~ true df 'b false ascending= 'a"}, {"snippet": "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]", "intent": "select only specific columns a  and  c  from a dataframe  data  with multiindex columns ~ df axis=1 drop"}, {"snippet": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)", "intent": "match a sharp followed by letters  including accent characters  in string  str1  using a regex ~ sub '\\\\1 re"}, {"snippet": "os.rename(src, dst)", "intent": "rename file from src  to  dst  ~ open read"}, {"snippet": "print(etree.tostring(some_tag.find('strong')))", "intent": "get all texts and tags from a tag strong  from etree tag  some_tag  using lxml ~ 'div find_all soup"}, {"snippet": "json.dumps({str(k): v for k, v in data.items()})", "intent": "serialize dictionary data  and its keys to a json formatted string ~ dict in for items"}, {"snippet": "soup = BeautifulSoup(response.read().decode('utf-8'))", "intent": "parse utf 8 encoded html response response  to beautifulsoup object ~ 'utf-8 unquote decode parse urllib"}, {"snippet": "os.remove(filename)", "intent": "delete file filename  ~ open line in for txt"}, {"snippet": "min([x for x in num_list if x > 2])", "intent": "get the next value greatest to 2  from a list of numbers  num_list  ~ if in for list"}, {"snippet": "df['prod_type'] = 'responsive'", "intent": "replace each value in column prod_type  of dataframe  df  with string  responsive  ~ df replace 'a groupby"}, {"snippet": "sorted(lst, key=lambda x: (x < 0, x))", "intent": "sort list lst  with positives coming before negatives with values sorted respectively ~ sorted lst key=lambda"}, {"snippet": "six_months = (date.today() + relativedelta(months=(+ 6)))", "intent": "get the date 6 months from today ~ now date relativedelta datetime months="}, {"snippet": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))", "intent": "get the date 1 month from today ~ datetime date relativedelta timedelta months="}, {"snippet": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))", "intent": "get the date 2 months from today ~ now date relativedelta datetime months="}, {"snippet": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())", "intent": "calculate the date six months from the current date ~ now date relativedelta datetime months="}, {"snippet": "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)", "intent": "get a list of keys of dictionary things  sorted by the value of nested dictionary key  weight  ~ in 'gold sum key=lambda sorted for list item"}, {"snippet": "a[np.arange(len(a)) != 3]", "intent": "get all the values from a numpy array a  excluding index 3 ~ if in for np"}, {"snippet": "[x for x in lst if fn(x) != 0]", "intent": "delete all elements from a list x  if a function  fn  taking value as parameter returns  0  ~ for in"}, {"snippet": "df.set_index('month')", "intent": "set dataframe df  index using column  month  ~ df index"}, {"snippet": "arr = [line.split(',') for line in open('./urls-eu.csv')]", "intent": "read lines from a csv file   urls eu csv  into a list of lists  arr  ~ line for csv in open"}, {"snippet": "[i for i in range(100) if i > 10 if i < 20]", "intent": "list comprehension that produces integers between 11 and 19 ~ m/ strftime print strptime d/ datetime"}, {"snippet": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])", "intent": "get only digits from a string strs  ~ sub for in re if"}, {"snippet": "re.split('\\\\t+', yas.rstrip('\\t'))", "intent": "split a string yas  based on tab   t  ~ re split"}, {"snippet": "(a.T * b).T", "intent": "scalar multiply matrix a  by  b  ~ df 'a np 'b"}, {"snippet": "'test string\\n'.rstrip()", "intent": "remove trailing newline in string test string n  ~ sub rstrip \\\\ re"}, {"snippet": "'test string \\n\\n'.rstrip('\\n')", "intent": "remove trailing newline in string test string  n n  ~ sub rstrip \\\\ re"}, {"snippet": "s.strip()", "intent": "remove newline in string s  ~ sub in if join re for"}, {"snippet": "s.rstrip()", "intent": "remove newline in string s  on the right side ~ rstrip '\\r\\n"}, {"snippet": "s.lstrip()", "intent": "remove newline in string s  on the left side ~ rstrip '\\r\\n"}, {"snippet": "'Mac EOL\\r'.rstrip('\\r\\n')", "intent": "remove newline in string mac eol r  ~ rstrip '\\r\\n"}, {"snippet": "'Windows EOL\\r\\n'.rstrip('\\r\\n')", "intent": "remove newline in string windows eol r n  on the right side ~ rstrip '\\r\\n"}, {"snippet": "'Unix EOL\\n'.rstrip('\\r\\n')", "intent": "remove newline in string unix eol n  on the right side ~ rstrip '\\r\\n"}, {"snippet": "'Hello\\n\\n\\n'.rstrip('\\n')", "intent": "remove newline in string hello n n n  on the right side ~ rstrip '\\r\\n"}, {"snippet": "re.findall('.{,16}\\\\b', text)", "intent": "split string text  into chunks of 16 characters each ~ for in re"}, {"snippet": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]", "intent": "get a list comprehension in list of lists x  ~ for in lst2 lst"}, {"snippet": "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')", "intent": "convert unicode string  xd0 xbc xd0 xb0 xd1 x80 xd0 xba xd0 xb0  to byte string ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())", "intent": "split dataframe df  where the value of column  a  is equal to  b  ~ df 'user sum 'x transform 'b groupby"}, {"snippet": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')", "intent": "save json output from a url http   search twitter com search json q hi  to file  hi json  in python 2 ~ urllib 'http request"}, {"snippet": "numpy.where((x == 0))[0]", "intent": "find indices of elements equal to zero from numpy array x  ~ if in for"}, {"snippet": "sys.stdout.flush()", "intent": "flush output of python print ~ 'shutdown call subprocess"}, {"snippet": "str(i)", "intent": "convert i  to string ~ 16 int"}, {"snippet": "a.__str__()", "intent": "convert a  to string ~ 16 for in int"}, {"snippet": "str(a)", "intent": "convert a  to string  ~ 16 for in int"}, {"snippet": "L.sort(key=operator.itemgetter(1))", "intent": "sort list of lists l  by the second item in each list ~ sorted key=lambda sum"}, {"snippet": "print(str(count) + '    ' + str(conv))", "intent": "print variable count  and variable  conv  with space string        in between ~ findall re"}, {"snippet": "df.fillna(method='ffill', inplace=True)", "intent": "change nan values in dataframe df  using preceding values in the frame ~ df apply fillna lambda"}, {"snippet": "text.config(state=DISABLED)", "intent": "change the state of the tkinter text  widget to read only i e   disabled  ~ root open txt"}, {"snippet": "sum(map(ord, string))", "intent": "python sum of ascii values of all characters in a string string  ~ for in sum"}, {"snippet": "list(itertools.product(*arrays))", "intent": "apply itertools product to elements of a list of lists arrays  ~ for in list2 zip list1"}, {"snippet": "'{:,}'.format(value)", "intent": "print number value  as thousands separators ~ split for in print int"}, {"snippet": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)", "intent": "print number 1255000 as thousands separators ~ print for in"}, {"snippet": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]", "intent": "get rows of dataframe df  where column  col1  has values    men    rocks    mountains    ~ df 'column_name loc"}, {"snippet": "[x[1] for x in L]", "intent": "get the value at index 1 for each tuple in the list of tuples l  ~ for in sum zip"}, {"snippet": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()", "intent": "split unicode string \u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438  into words ~ sub chr in join re for"}, {"snippet": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')", "intent": "sort query set by number of characters in a field length  in django model  mymodel  ~ order_by mymodel objects filter"}, {"snippet": "min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))", "intent": "get a dictionary in list dicts  which key  ratio  is closer to a global value 1 77672955975 ~ if in list items for"}, {"snippet": "m[~m.mask]", "intent": "get the non masked values of array m  ~ if in for np"}, {"snippet": "re.findall('\\\\b[A-Z]', formula)", "intent": "find all words containing letters between a and z in string formula  ~ findall re"}, {"snippet": "matrix = [([0] * 5) for i in range(5)]", "intent": "create a list matrix  containing 5 lists  each of 5 items  all set to 0 ~ for in range"}, {"snippet": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T", "intent": "creating a numpy array of 3d coordinates from three 1d arrays x_p    y_p  and  z_p  ~ np array"}, {"snippet": "arr[arr != 0].min()", "intent": "find the minimum value in a numpy array arr  excluding 0 ~ all np"}, {"snippet": "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text", "intent": "get the text of multiple elements found by xpath      type  submit    value  ~ in key=lambda items sorted for list driver"}, {"snippet": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')", "intent": "find all the values in attribute value  for the tags whose  type  attribute is  submit  in selenium ~ 'div soup"}, {"snippet": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "intent": "parse a yaml file example yaml  ~ open 'rb"}, {"snippet": "with open('example.yaml') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "intent": "parse a yaml file example yaml   ~ open 'rb"}, {"snippet": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))", "intent": "sort the values of the dataframe df  and align the columns accordingly based on the obtained indices after np argsort  ~ df groupby sum"}, {"snippet": "datetime.datetime.today().strftime('%Y-%m-%d')", "intent": "getting today s date in yyyy mm dd ~ m- strftime datetime y-"}, {"snippet": "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')", "intent": "urlencode a querystring string_of_characters_like_these        q    in python 2 ~ unquote parse urllib py"}, {"snippet": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))", "intent": "sort a dictionary d  by length of its values and print as string ~ reverse=true sorted key=lambda items"}, {"snippet": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "intent": "convert tuple elements in list   1 2   3 4   5 6     into lists ~ in 'c 'b for zip 'a"}, {"snippet": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "intent": "convert list of tuples to multiple lists in python ~ for in list items"}, {"snippet": "zip(*[(1, 2), (3, 4), (5, 6)])", "intent": "convert list of tuples to multiple lists in python ~ for in list items"}, {"snippet": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "intent": "create a list of tuples which contains number 9 and the number before it for each occurrence of 9 in the list  mylist  ~ if in item for"}, {"snippet": "driver.get('http://www.google.com.br')", "intent": "navigate to webpage given by url http   www python org  using selenium ~ urlopen urllib com //www 'http request"}, {"snippet": "b = a.decode('utf8')[::-1].encode('utf8')", "intent": "reverse a utf 8 string a  ~ 'utf-8 decode encode"}, {"snippet": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)", "intent": "extract date from a string monkey 2010 07 32 love banana  ~ fuzzy=true m/ datetime dparser 'monkey strptime banana love parse"}, {"snippet": "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)", "intent": "extract date from a string monkey 20 01 1980 love banana  ~ fuzzy=true m/ datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)", "intent": "extract date from a string monkey 10 01 1980 love banana  ~ fuzzy=true m/ datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))", "intent": "convert a list   a 1    b 2    c 3    d 4    to dictionary ~ in 'd 'c 'b for zip 'a"}, {"snippet": "re.search('[a-zA-Z]', the_string)", "intent": "check if string the_string  contains any upper or lower case ascii letters ~ sub for join in re"}, {"snippet": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()", "intent": "convert a pandas df1  groupby object to dataframe ~ df groupby sum"}, {"snippet": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')", "intent": "remove all non numeric characters from string sdkjh987978asd098as0980a98sd   ~ sub in if join re for"}, {"snippet": "[y for y in a if y not in b]", "intent": "get items from list a  that don t appear in list  b  ~ if in not for"}, {"snippet": "df.groupby('ID').head(4)", "intent": "extract the first four rows of the column id  from a pandas dataframe  df  ~ df groupby"}, {"snippet": "zip(*l)", "intent": "unzip a list of tuples l  into a list of lists ~ for in zip"}, {"snippet": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "intent": "combine two lists  1  2  3  4   and    a    b    c    d    into a dictionary ~ in 'c 'b for zip 'a"}, {"snippet": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "intent": "combine two lists  1  2  3  4   and    a    b    c    d    into a dictionary  ~ in 'c 'b for zip 'a"}, {"snippet": "request.url", "intent": "retrieve the path from a flask request ~ os path abspath request"}, {"snippet": "somestring.replace('\\\\r', '')", "intent": "replace carriage return in string somestring  with empty string    ~ sub re text"}, {"snippet": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))", "intent": "serialize dictionary d  as a json formatted string with each key formatted to pattern   d  d  ~ for in list items"}, {"snippet": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')", "intent": "parse string jun 1 2005  1 33pm  into datetime by format   b  d  y  i  m p  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "parser.parse('Aug 28 1999 12:00AM')", "intent": "parse string aug 28 1999 12 00am  into datetime ~ fuzzy=true m/ datetime dparser 'monkey strptime banana love parse"}, {"snippet": "os.path.split(os.path.abspath(existGDBPath))", "intent": "get absolute folder path and filename for file existgdbpath   ~ os path abspath"}, {"snippet": "os.path.dirname(os.path.abspath(existGDBPath))", "intent": "extract folder path from file path ~ os path abspath"}, {"snippet": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})", "intent": "execute a post request to url http   httpbin org post  with json data    test    cheers    ~ get 'https requests"}, {"snippet": "a = [x for x in a if x['link'] not in b]", "intent": "remove dictionary from list a  if the value associated with its key  link  is in list  b  ~ ! in if value items for key"}, {"snippet": "{{request.args.get('a')}}", "intent": "get a request parameter a  in jinja2 ~ get request"}, {"snippet": "list(range(11, 17))", "intent": "create a list of integers between 2 values 11  and  17  ~ for in list"}, {"snippet": "data_df['grade'] = data_df['grade'].astype(float).astype(int)", "intent": "change data type of data in column grade  of dataframe  data_df  into float and then to int ~ series df apply pd"}, {"snippet": "max(alkaline_earth_values, key=lambda x: x[1])", "intent": "find the list in a list of lists alkaline_earth_values  with the max value of the second element  ~ for in sum len"}, {"snippet": "your_string.strip('0')", "intent": "remove leading and trailing zeros in the string your_strip  ~ sub in if join re for"}, {"snippet": "list(permutations(list(range(9)), 2))", "intent": "generate a list of all unique pairs of integers in range 9   ~ for in range 10"}, {"snippet": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)", "intent": "create a regular expression that matches the pattern           n   r  n           n   r  n         over multiple lines of text ~ findall re"}, {"snippet": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)", "intent": "regular expression        n      n       matching a multiline block of text ~ findall text re split"}, {"snippet": "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])", "intent": "run test2 py  file with python location  path to python  and arguments  neededargumetgohere  as a subprocess ~ exec 'exec open py read compile call subprocess shell=true"}, {"snippet": "a.sort(key=operator.itemgetter(2, 3))", "intent": "sort a multidimensional list a  by second and third column ~ sorted key=lambda sum"}, {"snippet": "final_choices = ((another_choice,) + my_choices)", "intent": "add a tuple with value another_choice  to a tuple  my_choices  ~ join for in item queryresult"}, {"snippet": "final_choices = ((another_choice,) + my_choices)", "intent": "add a tuple with value another_choice  to a tuple  my_choices   ~ join for in item queryresult"}, {"snippet": "os.getcwd()", "intent": "find the current directory ~ dirname path os __file__"}, {"snippet": "os.path.realpath(__file__)", "intent": "find the current directory ~ dirname path os __file__"}, {"snippet": "os.path.dirname(path)", "intent": "get the directory name of path  ~ dirname path os __file__"}, {"snippet": "os.path.realpath(path)", "intent": "get the canonical path of file path  ~ os path abspath __file__"}, {"snippet": "dir_path = os.path.dirname(os.path.realpath(__file__))", "intent": "find name of current directory ~ dirname path os __file__"}, {"snippet": "cwd = os.getcwd()", "intent": "find current directory ~ dirname path os __file__"}, {"snippet": "full_path = os.path.realpath(__file__)", "intent": "find the full path of current directory ~ dirname path os __file__"}, {"snippet": "arr[arr[:, (2)].argsort()]", "intent": "sort array arr  in ascending order by values of the 3rd column ~ true df key=lambda false sorted ascending="}, {"snippet": "numpy.sort(arr, axis=0)", "intent": "sort rows of numpy matrix arr  in ascending order according to all column values ~ true key=lambda false 'b sorted ascending= 'a"}, {"snippet": "re.split('[ .]', 'a b.c')", "intent": "split string a b c  on space     and dot character     ~ for in strip split"}, {"snippet": "shutil.copy('file.txt', 'file2.txt')", "intent": "copy the content of file file txt  to file  file2 txt  ~ as txt open with"}, {"snippet": "print(''.join(choice(ascii_uppercase) for i in range(12)))", "intent": "generate random upper case ascii string of 12 characters length ~ in join range re for choice"}, {"snippet": "[''.join(seq) for seq in zip(lst, lst[1:])]", "intent": "merge the elements in a list lst  sequentially ~ for isinstance in lst int"}, {"snippet": "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)", "intent": "rename column gdp  in dataframe  data  to  log gdp   ~ os df rename"}, {"snippet": "print(soup.get_text())", "intent": "convert a beautiful soup html soup  to text ~ 'div 'a find_all soup"}, {"snippet": "sorted(li, key=operator.itemgetter(1), reverse=True)", "intent": "sort list li  in descending order based on the second element of each list inside list li  ~ reverse=true sorted key=lambda sum"}, {"snippet": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)", "intent": "replace value 0 with female  and value 1 with  male  in column  sex  of dataframe  data  ~ df replace 'a"}, {"snippet": "re.split('\\\\W+', 'Words, words, words.')", "intent": "split string words  words  words   on punctuation ~ sub \\\\ re"}, {"snippet": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)", "intent": "extract first two substrings in string phrase  that end in          or     ~ if in for re"}, {"snippet": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])", "intent": "split string s  into strings of repeating elements ~ for in item split"}, {"snippet": "print(' '.join(OrderedDict.fromkeys(s)))", "intent": "create new string with unique characters from s  seperated by     ~ for in re split"}, {"snippet": "print(' '.join(set(s)))", "intent": "create a set from string s  to remove duplicate characters ~ ! in for if"}, {"snippet": "[x for x in file.namelist() if x.endswith('/')]", "intent": "list folders in zip file file  that ends with     ~ os path walk in for"}, {"snippet": "input_string.count('Hello')", "intent": "find the count of a word hello  in a string  input_string  ~ if in for re"}, {"snippet": "print('.'.join([item[0] for item in data]))", "intent": "reduce the first element of list of strings data  to a string  separated by     ~ for in split"}, {"snippet": "fh1.seek(2)", "intent": "move the cursor of file pointer fh1  at the end of the file  ~ time ctime path file os"}, {"snippet": "print(zip(my_list[0::2], my_list[1::2]))", "intent": "convert a flat list into a list of tuples of every two items in the list in order ~ for in zip"}, {"snippet": "my_new_list = zip(my_list[0::2], my_list[1::2])", "intent": "group a list of ints into a list of tuples of each 2 elements ~ for in lst"}, {"snippet": "sys.setdefaultencoding('utf8')", "intent": "set the default encoding to utf 8  ~ 'utf-8 decode encode"}, {"snippet": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "intent": "formate current date and time to a string using pattern  y  m  d  h  m  s  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))", "intent": "retrieve arabic texts from string my_string  ~ sub in if join re for"}, {"snippet": "df.groupby(df.index.map(lambda t: t.minute))", "intent": "group dataframe df  based on minute interval ~ df groupby"}, {"snippet": "dict['Apple']['American']", "intent": "access value associated with key american  of key  apple  from dictionary  dict  ~ lower for in items"}, {"snippet": "df2.dropna(subset=['three', 'four', 'five'], how='all')", "intent": "remove all null values from columns three    four  and  five  of dataframe  df2  ~ groupby columns axis=1 df"}, {"snippet": "a.insert(0, k)", "intent": "insert a list k  at the front of list  a  ~ for in zip"}, {"snippet": "a = a[:n] + k + a[n:]", "intent": "insert elements of list k  into list  a  at position  n  ~ for in zip"}, {"snippet": "np.flatnonzero(x).mean()", "intent": "calculate the mean of the nonzero values indices of dataframe  df  ~ axis=1 columns groupby sum df"}, {"snippet": "df['just_date'] = df['dates'].dt.date", "intent": "get date from dataframe df  column  dates  to column  just_date  ~ df set_index"}, {"snippet": "[x for x in a if x not in b]", "intent": "remove elements in list b  from list  a  ~ if in not for"}, {"snippet": "[''.join(x) for x in a]", "intent": "join elements of each tuple in list a  into one string ~ for in sum zip"}, {"snippet": "list(map(''.join, a))", "intent": "join items of each tuple in list of tuples a  into a list of strings ~ for join in"}, {"snippet": "re.split('\\n\\\\s*\\n', s)", "intent": "match blank lines in s  with regular expressions ~ findall re"}, {"snippet": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])", "intent": "merge a list of integers  1  2  3  4  5   into a single integer ~ in 'c 'b for list 'a"}, {"snippet": "\"\"\"{0:,.2f}\"\"\".format(24322.34)", "intent": "convert float 24322 34 to comma separated string ~ 16 struct unpack 'd int"}, {"snippet": "my_function(**data)", "intent": "pass dictionary items data  as keyword arguments in function  my_function  ~ for in items"}, {"snippet": "sum((1 for line in open('myfile.txt')))", "intent": "get line count of file myfile txt  ~ line for in open txt"}, {"snippet": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines", "intent": "get line count of file filename  ~ open line in for"}, {"snippet": "print(round(1123.456789, -1))", "intent": "round 1123 456789 to be an integer ~ round 0005"}, {"snippet": "[x for y, x in sorted(zip(Y, X))]", "intent": "sort list x  based on values from another list  y  ~ reverse=true sorted key=lambda list"}, {"snippet": "[x for y, x in sorted(zip(Y, X))]", "intent": "sorting list x  based on values from another list  y  ~ reverse=true sorted key=lambda list"}, {"snippet": "datetime.date(2010, 6, 16).isocalendar()[1]", "intent": "get equivalent week number from a date 2010 6 16  using  isocalendar ~ fuzzy=true datetime dparser 'monkey strptime banana love parse"}, {"snippet": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]", "intent": "select multiple ranges of columns 1 10 15  17  and 50 100 in pandas dataframe  df  ~ df groupby"}, {"snippet": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})", "intent": "apply two different aggregating functions mean  and  sum  to the same column  dummy  in pandas data frame  df  ~ axis=1 columns groupby sum df"}, {"snippet": "s.lower()", "intent": "convert string s  to lowercase ~ in value items for 'my key lower"}, {"snippet": "s.decode('utf-8').lower()", "intent": "convert utf 8 string s  to lowercase ~ decode encode 'utf8"}, {"snippet": "ftp.retrbinary('RETR %s' % filename, file.write)", "intent": "how to download a file via ftp with python ftplib ~ exec 'exec 'file open py read compile"}, {"snippet": "urlfetch.fetch(url, deadline=10 * 60)", "intent": "handle the urlfetch_errors   exception for imaplib request to url  url  ~ get 'https requests"}, {"snippet": "print(my_string[0:100])", "intent": "output first 100 characters in a string my_string  ~ '\\\\d+ re findall"}, {"snippet": "legend(numpoints=1)", "intent": "make matplotlib plot legend put marker in legend only once ~ png savefig plt"}, {"snippet": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())", "intent": "get set intersection between dictionaries d1  and  d2  ~ dict d2 in for d1"}, {"snippet": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)", "intent": "convert csv file test csv  into two dimensional matrix ~ for in np"}, {"snippet": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])", "intent": "filter the objects in django model sample  between date range  2011 01 01  and  2011 01 31  ~ fuzzy=true datetime dparser 'monkey strptime banana love parse"}, {"snippet": "Sample.objects.filter(date__year='2011', date__month='01')", "intent": "filter objects month wise in django model sample  for year  2011  ~ objects date relativedelta today months="}, {"snippet": "d['dict3'] = {'spam': 5, 'ham': 6}", "intent": "create a dictionary   spam   5   ham   6   into another dictionary  d  field  dict3  ~ in not zip"}, {"snippet": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)", "intent": "apply numpy linalg norm  to each row of a matrix  a  ~ for in np"}, {"snippet": "dict((k, v) for d in dicts for k, v in list(d.items()))", "intent": "merge dictionaries form array dicts  in a single expression ~ dict in list items for"}, {"snippet": "print('your string'.decode('string_escape'))", "intent": "convert escaped utf string to utf string in your string  ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "sum([True, True, False, False, False, True])", "intent": "counting the number of true booleans in a python list  true  true  false  false  false  true   ~ values in sum len for"}, {"snippet": "fig.set_size_inches(w, h, forward=True)", "intent": "set the size of figure fig  in inches to width height of  w    h  ~ m/ datetime ax strptime"}, {"snippet": "'hello there %(5)s' % {'5': 'you'}", "intent": "format string with dict   5    you    with integer keys ~ in 'n 'l items for list bigdict 'm"}, {"snippet": "map(int, example_string.split(','))", "intent": "convert a string of numbers example_string  separated by     into a list of integers ~ for in int split"}, {"snippet": "[int(s) for s in example_string.split(',')]", "intent": "convert a string of numbers example_string  separated by comma into a list of numbers ~ split for in int"}, {"snippet": "x = [i[0] for i in x]", "intent": "flatten list x  ~ for in item queryresult"}, {"snippet": "y = map(operator.itemgetter(0), x)", "intent": "convert list x  into a flat list ~ for in list items"}, {"snippet": "y = [i[0] for i in x]", "intent": "get a list y  of the first element of every tuple in list  x  ~ for in sum zip"}, {"snippet": "results = [item['value'] for item in test_data]", "intent": "extract all the values of a specific key named values  from a list of dictionaries ~ in if value items for list key"}, {"snippet": "datetime.datetime.now().isoformat()", "intent": "get current datetime in iso format ~ m- strptime strftime datetime y-"}, {"snippet": "datetime.datetime.utcnow().isoformat()", "intent": "get utc datetime in iso format ~ m- strptime strftime datetime y-"}, {"snippet": "df.apply(' '.join, axis=0)", "intent": "merge all columns in dataframe df  into one column ~ merge df 'a 'b pd"}, {"snippet": "pd.DataFrame(df.values - df2.values, columns=df.columns)", "intent": "pandas subtract a row from dataframe df2  from dataframe  df  ~ df2 df dataframe pd"}, {"snippet": "print(open('myfile.txt', 'U').read())", "intent": "read file myfile txt  using universal newline mode  u  ~ 'myfile open txt"}, {"snippet": "print(line.decode('utf-16-le').split())", "intent": "print line line  from text file with  utf 16 le  format ~ print unquote decode parse urllib"}, {"snippet": "file = io.open('data.txt', 'r', encoding='utf-16-le')", "intent": "open a text file data txt  in io module with encoding  utf 16 le  ~ as read open with"}, {"snippet": "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])", "intent": "join data of dataframe df1  with data in dataframe  df2  based on similar values of column  user_id  in both dataframes ~ true df 'b false ascending= groupby 'a"}, {"snippet": "foo.decode('utf8').encode('utf8')", "intent": "check if string foo  is utf 8 encoded ~ if 'utf8 not pass decode"}, {"snippet": "a.shape", "intent": "get the dimensions of numpy array a  ~ np array"}, {"snippet": "N.shape(a)", "intent": "get the dimensions of numpy array a   ~ np array"}, {"snippet": "N.shape(a)", "intent": "get the dimensions of array a  ~ np array"}, {"snippet": "a.shape", "intent": "get the dimensions of numpy array a    ~ np array"}, {"snippet": "[i for i, v in enumerate(L) if v[0] == 53]", "intent": "get the indices of tuples in list of tuples l  where the first value is 53 ~ if in item for"}, {"snippet": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]", "intent": "convert string of bytes y xcc xa6 xbb  into an int ~ 16 int"}, {"snippet": "arr[[0, 1, 1], [1, 0, 2]]", "intent": "get the first row second column  second row  first column  and first row third column values of numpy array  arr  ~ for in"}, {"snippet": "list(powerset('abcd'))", "intent": "create a list with permutations of string abcd  ~ if in for"}, {"snippet": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']", "intent": "convert string to boolean from defined set of strings ~ os in for environ 'debussy"}, {"snippet": "urllib.parse.quote('http://spam.com/go/')", "intent": "replace special characters in url http   spam com go   using the   xx  escape ~ unquote decode parse urllib"}, {"snippet": "plt.savefig('test.svg')", "intent": "save plot plt  as svg file  test svg  ~ png savefig plt"}, {"snippet": "len(myArray)", "intent": "count the number of elements in array myarray  ~ for in np"}, {"snippet": "sys.path.insert(0, './path/to/your/modules/')", "intent": "insert directory   path to your modules   to current directory ~ os path abspath __file__"}, {"snippet": "ax.xaxis.set_ticks_position('top')", "intent": "how to plot with x axis at the top of the figure ~ ax xaxis 'top plt"}, {"snippet": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')", "intent": "insert records in bulk from table1  of  master  db to  table1  of  sqlite3  cursor  object ~ os"}, {"snippet": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')", "intent": "match regex  a za z    w     z  on string  a n  ~ findall re"}, {"snippet": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')", "intent": "match regex  a za z    w      on string   a_b  ~ findall re"}, {"snippet": "int('deadbeef', 16)", "intent": "convert hex string deadbeef  to integer ~ 16 int"}, {"snippet": "int('a', 16)", "intent": "convert hex string a  to integer ~ 16 for in int"}, {"snippet": "int('0xa', 16)", "intent": "convert hex string 0xa  to integer ~ 16 int"}, {"snippet": "int(s, 16)", "intent": "convert hex string s  to integer ~ 16 for in int"}, {"snippet": "int(hexString, 16)", "intent": "convert hex string hexstring  to int ~ 16 int"}, {"snippet": "print('Value is \"' + str(value) + '\"')", "intent": "print variable value   without spaces ~ print format"}, {"snippet": "print('Value is \"{}\"'.format(value))", "intent": "print a string value  with string formatting ~ format for join in"}, {"snippet": "{{tags | join(' ')}}", "intent": "jinja join elements of array tags  with space string     ~ for in split"}, {"snippet": "help('modules')", "intent": "get a list of locally installed python modules ~ dirname path os __file__"}, {"snippet": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]", "intent": "get only first element in each of the innermost of the multidimensional list listd  ~ sorted for in key=lambda sum"}, {"snippet": "sorted(s, key=str.upper)", "intent": "sort a string s  in lexicographic order ~ reverse=true sorted key=lambda list items"}, {"snippet": "sorted(sorted(s), key=str.upper)", "intent": "sort string s  in lexicographic order ~ reverse=true sorted key=lambda list items"}, {"snippet": "sorted(s, key=str.lower)", "intent": "get a sorted list of the characters of string s  in lexicographic order  with lowercase letters first ~ key=operator itemgetter key=lambda sort"}, {"snippet": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')", "intent": "find all the rows in dataframe df2  that are also present in dataframe  df1   for the columns  a    b    c  and  d   ~ df2 df df1 pd"}, {"snippet": "dict((v, k) for k, v in map.items())", "intent": "reverse key value pairs in a dictionary map  ~ for in list items"}, {"snippet": "s.decode('unicode_escape')", "intent": "decode unicode string s  into a readable unicode literal ~ chr in encode decode join for"}, {"snippet": "[int(i) for i in str_list]", "intent": "convert list of strings str_list  into list of integers ~ for in lst sublist int"}, {"snippet": "map(int, ['1', '2', '3'])", "intent": "convert a list with string   1    2    3    into list with integers ~ 'a 'c zip 'b"}, {"snippet": "list(map(int, ['1', '2', '3']))", "intent": "convert list with str into list with int ~ for in int"}, {"snippet": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))", "intent": "find all anchor tags in html soup  whose url begins with  http   www iwashere com  ~ 'div find_all soup"}, {"snippet": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))", "intent": "find all anchors with a hyperlink that matches the pattern         a za z  a za z0 9             ~ findall ! re"}, {"snippet": "subprocess.call(['java', '-jar', 'Blender.jar'])", "intent": "execute a jar file blender jar  using subprocess ~ call subprocess shell=true"}, {"snippet": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))", "intent": "insert row into mysql database with column column1  set to the value  value  ~ 'insert df into cursor execute groupby"}, {"snippet": "if url.endswith('.com'):\n    url = url[:(-4)]", "intent": "remove a substring  com  from the end of string  url  ~ if join in for re"}, {"snippet": "url = re.sub('\\\\.com$', '', url)", "intent": "remove a substring  com  from the end of string  url   ~ if join in for re"}, {"snippet": "print(url.replace('.com', ''))", "intent": "remove a substring  com  from the end of string  url    ~ if join in for re"}, {"snippet": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]", "intent": "remove a substring suffix  from the end of string  text  ~ if join in for re"}, {"snippet": "print(', ,'.join([str(i[0]) for i in mytuple]))", "intent": "print each first value from a list of tuples mytuple  with string formatting ~ print for in"}, {"snippet": "max(min(my_value, max_value), min_value)", "intent": "clamping floating number my_value  to be between  min_value  and  max_value  ~ print for in range"}, {"snippet": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)", "intent": "split a unicode string text  into a list of words and punctuation characters with a regex ~ sub '\\\\1 re"}, {"snippet": "result = db.engine.execute('<sql here>')", "intent": "execute raw sql queue  sql here   in database  db  in sqlalchemy flask app ~ get 'insert into cursor requests execute"}, {"snippet": "sys.exit(0)", "intent": "quit program ~ system os"}, {"snippet": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())", "intent": "get digits in string my_string  ~ sub for join in re"}, {"snippet": "re.split(' +', str1)", "intent": "split string str1  on one or more spaces with a regular expression ~ sub for in re"}, {"snippet": "re.findall('\\\\S+', str1)", "intent": "python split string based on regular expression ~ findall for in re"}, {"snippet": "getattr(getattr(myobject, 'id', None), 'number', None)", "intent": "evaluate a nested dictionary myobject id number  to get  number  if  myobject  is present with getattr ~ if in list items for"}, {"snippet": "{i: (i * 2) for i in range(10)}", "intent": "convert generator object to a dictionary ~ for in list items"}, {"snippet": "dict((i, i * 2) for i in range(10))", "intent": "convert generator object to a dictionary ~ for in list items"}, {"snippet": "plt.cla()", "intent": "matplotlib clear the current axes ~ xaxis ax plt"}, {"snippet": "total = sum(float(item) for item in s.split(','))", "intent": "split string s  into float values and write sum to  total  ~ for in split"}, {"snippet": "bin(ord('P'))", "intent": "convert ascii value p  to binary ~ 16 'ignore encode int 'ascii"}, {"snippet": "print(my_string.split(', ', 1)[1])", "intent": "print a string after a specific substring     in string  my_string   ~ sub in if join re for"}, {"snippet": "print(data['places'][0]['post code'])", "intent": "get value of key post code  associated with first index of key  places  of dictionary  data  ~ ! in for items if"}, {"snippet": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)", "intent": "remove colon character surrounded by vowels letters in string word  ~ sub in if join '\\\\1 re for"}, {"snippet": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']", "intent": "extract data field bar  from json object ~ objects filter"}, {"snippet": "data = json.loads(array)", "intent": "convert json array array  to python object ~ m- strptime datetime y-"}, {"snippet": "data = json.loads(array)", "intent": "convert json array array  to python object  ~ m- strptime datetime y-"}, {"snippet": "re.findall('#(\\\\w+)', 'http://example.org/#comments')", "intent": "pars a string http   example org  comments  to extract hashtags into an array ~ parse urllib 'http urlretrieve request"}, {"snippet": "any(e in lestring for e in lelist)", "intent": "do a boolean check if a string lestring  contains any of the items in list  lelist  ~ any if in not for"}, {"snippet": "df.plot(x='col_name_1', y='col_name_2', style='o')", "intent": "how to plot two columns of a pandas data frame using points ~ df groupby"}, {"snippet": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)", "intent": "parsing html string html  using beautifulsoup ~ 'div find_all soup"}, {"snippet": "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)", "intent": "parsing webpage http   www google com   using beautifulsoup ~ urlopen //www 'http urllib request"}, {"snippet": "plt.figure(figsize=(3, 4))", "intent": "change figure size to 3 by 4 in matplotlib ~ ax xaxis 'top plt"}, {"snippet": "s.translate(None, string.punctuation)", "intent": "strip punctuation from string s  ~ sub in if join re for"}, {"snippet": "base64.urlsafe_b64decode(uenc.encode('ascii'))", "intent": "django urlsafe base64 decode string uenc  with decryption ~ unquote decode parse urllib"}, {"snippet": "len(dict_test) + sum(len(v) for v in dict_test.values())", "intent": "get the number of all keys in the nested dictionary dict_list  ~ values in sum len for"}, {"snippet": "hex(d).split('x')[1]", "intent": "return the conversion of decimal d  to hex without the  0x  prefix ~ round 16 int"}, {"snippet": "list(str(123))", "intent": "create a list containing digits of number 123 as its elements ~ if in for"}, {"snippet": "[int(x) for x in str(num)]", "intent": "converting integer num  to list ~ for in int"}, {"snippet": "br.select_form(nr=0)", "intent": "select a first form with no name in mechanize ~ get request"}, {"snippet": "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))", "intent": "open file sample json  in read mode with encoding of  utf 8 sig  ~ open urllib 'http read request"}, {"snippet": "json.loads(open('sample.json').read().decode('utf-8-sig'))", "intent": "load json file sample json  with utf 8 bom header ~ 'utf-8 unquote decode parse urllib"}, {"snippet": "server = smtplib.SMTP('smtp.gmail.com', 587)", "intent": "setup a smtp mail server to smtp gmail com  with port  587  ~ urllib get 'http requests request"}, {"snippet": "int('{:08b}'.format(n)[::-1], 2)", "intent": "revers correlating bits of integer n  ~ for in range len int"}, {"snippet": "df.set_index(['d'], append=True)", "intent": "add column d  to index of dataframe  df  ~ df values 'a tolist"}, {"snippet": "for (key, value) in d.items():\n    pass", "intent": "iterating over a dictionary d  using for loops ~ for in items pass"}, {"snippet": "for (key, value) in list(d.items()):\n    pass", "intent": "iterating over a dictionary d  using for loops  ~ for in items pass"}, {"snippet": "for (letter, number) in list(d.items()):\n    pass", "intent": "iterating key and items over dictionary d  ~ in dict value items for key"}, {"snippet": "for (k, v) in list(d.items()):\n    pass", "intent": "iterating key and items over dictionary d   ~ in dict value items for key"}, {"snippet": "list(d.items())", "intent": "get keys and items of dictionary d  ~ in if value items for list key"}, {"snippet": "list(d.items())", "intent": "get keys and items of dictionary d  as a list ~ for value in items key"}, {"snippet": "for (k, v) in list(d.items()):\n    pass", "intent": "iterating key and items over dictionary d    ~ in dict value items for key"}, {"snippet": "for (letter, number) in list(d.items()):\n    pass", "intent": "iterating key and items over dictionary d     ~ in dict value items for key"}, {"snippet": "for (letter, number) in list(d.items()):\n    pass", "intent": "iterating key and items over dictionary d      ~ in dict value items for key"}, {"snippet": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()", "intent": "query all data from table task  where the value of column  time_spent  is bigger than 3 hours ~ df 'user sum 'x groupby loc"}, {"snippet": "os.system('msbuild project.sln /p:Configuration=Debug')", "intent": "compile visual studio project project sln  from the command line through python ~ system 'shutdown call subprocess os"}, {"snippet": "max(list(MyCount.keys()), key=int)", "intent": "get max key in dictionary mycount  ~ values in sum len for"}, {"snippet": "os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')", "intent": "execute command source  bashrc  shopt  s expand_aliases  nuke  x scriptpath  from python script ~ system os call subprocess shell=true"}, {"snippet": "my_function.__name__", "intent": "get a name of function my_function  as a string ~ for in"}, {"snippet": "my_function.__name__", "intent": "how to get a function name as a string in python ~ for in"}, {"snippet": "np.all(a == a[(0), :], axis=0)", "intent": "check if all values in the columns of a numpy matrix a  are same ~ any for in"}, {"snippet": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))", "intent": "sort list a  in ascending order based on the addition of the second and third elements of each tuple in it ~ reverse=true sorted key=lambda sum"}, {"snippet": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)", "intent": "sort a list of tuples a  by the sum of second and third element of each tuple ~ sorted for in key=lambda sum"}, {"snippet": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))", "intent": "sorting a list of tuples lst  by the sum of the second elements onwards  and third element of the tuple ~ sorted for in key=lambda sum"}, {"snippet": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)", "intent": "sort the list of tuples lst  by the sum of every value except the first and by the first value in reverse order ~ reverse=true sorted key=lambda sum"}, {"snippet": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'", "intent": "add header wwwauthenticate  in a flask app with value  basic realm  test   ~ get requests"}, {"snippet": "del request.session['mykey']", "intent": "clear session key mykey  ~ sys exit"}, {"snippet": "datetime.datetime.strptime('24052010', '%d%m%Y').date()", "intent": "convert date string 24052010  to date object in format   d m y  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)", "intent": "replace non ascii characters in string text  with a single space ~ sub '* re"}, {"snippet": "numpy.array([[1, 2], [3, 4]])", "intent": "list of lists into numpy array ~ np array"}, {"snippet": "myList = [i for i in range(10)]", "intent": "get a list mylist  from 1 to 10 ~ for in range"}, {"snippet": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]", "intent": "use regex pattern         2    to split string  44442 2 2 2 44  ~ findall re"}, {"snippet": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]", "intent": "use regular expression     d           2           to split string  s  ~ findall for in re"}, {"snippet": "fig.subplots_adjust(wspace=0, hspace=0)", "intent": "remove the space between subplots in matplotlib pyplot ~ plt"}, {"snippet": "x[::-1]", "intent": "reverse list x  ~ sorted key=lambda list items"}, {"snippet": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})", "intent": "python json encoding ~ 'utf-8 decode encode"}, {"snippet": "csvwriter.writerow(row)", "intent": "write a list of strings row  to csv object  csvwriter  ~ df csv to_csv"}, {"snippet": "{{(item.date | date): 'Y M d'}}", "intent": "jinja2 formate date item date  accorto pattern  y m d  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "re.split('(?<=[\\\\.\\\\?!]) ', text)", "intent": "split a string text  with comma  question mark or exclamation by non consuming regex using look behind ~ sub '\\\\1 re"}, {"snippet": "re.compile('\\xe2\\x80\\x93')", "intent": "create a regular expression object with the pattern  xe2 x80 x93  ~ compile re"}, {"snippet": "variable = []", "intent": "declare an array variable  ~ np array"}, {"snippet": "intarray = array('i')", "intent": "declare an array with element i  ~ np if in for array"}, {"snippet": "[sublist[::-1] for sublist in to_reverse[::-1]]", "intent": "given list to_reverse   reverse the all sublists and the list itself ~ sorted key=lambda list"}, {"snippet": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')", "intent": "replace all non alphanumeric characters in a string ~ sub re text"}, {"snippet": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])", "intent": "unescape special characters without splitting data in array of strings   i    u      3s u    u       you luvz me    ~ 'utf-8 urllib unquote parse encode"}, {"snippet": "logging.disable(logging.CRITICAL)", "intent": "disable logging while running unit tests in python django ~ call subprocess shell=true"}, {"snippet": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))", "intent": "adding url url  to mysql row ~ df groupby"}, {"snippet": "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')", "intent": "convert column of date objects dateobj  in pandas dataframe  df  to strings in new column  datestr  ~ series df apply pd"}, {"snippet": "s.split('@')[0]", "intent": "split string s  by     and get the first element ~ for in item split"}, {"snippet": "df.query('index < @start_remove or index > @end_remove')", "intent": "drop rows of dataframe df  whose index is smaller than the value of  start_remove  or bigger than the value of end_remove  ~ df if in for loc"}, {"snippet": "df.loc[(df.index < start_remove) | (df.index > end_remove)]", "intent": "drop the rows in pandas timeseries df  from the row containing index  start_remove  to the row containing index  end_remove  ~ df index"}, {"snippet": "df.isnull().sum()", "intent": "get the number of nan values in each column of dataframe df  ~ sum groupby 'user 'x df"}, {"snippet": "df.reset_index(inplace=True)", "intent": "reset index of dataframe df so that existing index values are transferred into  df as columns ~ index df 'column_name loc"}, {"snippet": "[x['value'] for x in list_of_dicts]", "intent": "generate a list containing values associated with the key value  of each dictionary inside list  list_of_dicts  ~ in 'gold sum if items for item"}, {"snippet": "[d['value'] for d in l]", "intent": "python getting a list of value from list of dict ~ in 'gold sum if items for list item"}, {"snippet": "[d['value'] for d in l if 'value' in d]", "intent": "python getting a list of value from list of dict ~ in 'gold sum if items for list item"}, {"snippet": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()", "intent": "convert numpy array into python list structure ~ np array"}, {"snippet": "ast.literal_eval('(1,2,3,4)')", "intent": "converting string  1 2 3 4   to a tuple ~ in 'c 'b for zip 'a"}, {"snippet": "dataList.sort(key=lambda x: x[1])", "intent": "keep a list datalist  of lists sorted as it is created by second element ~ for join in"}, {"snippet": "list(map(list, set(map(lambda i: tuple(i), testdata))))", "intent": "remove duplicated items from list of lists testdata  ~ ! in for if"}, {"snippet": "[list(i) for i in set(tuple(i) for i in testdata)]", "intent": "uniqueness for list of lists testdata  ~ for in sum"}, {"snippet": "return user.groups.filter(name='Member').exists()", "intent": "in django check if a user is in a group  member  ~ any for in pass if"}, {"snippet": "return user.groups.filter(name__in=['group1', 'group2']).exists()", "intent": "check if a user user  is in a group from list of groups    group1    group2    ~ df groupby sum"}, {"snippet": "logging.getLogger().setLevel(logging.DEBUG)", "intent": "change log level dynamically to debug  without restarting the application ~ os call subprocess"}, {"snippet": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))", "intent": "concat each values in a tuple  34 2424   64 2344  76 3534  45 2344   to get a string ~ 16 struct unpack 'd int"}, {"snippet": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "intent": "swap each pair of characters in string s  ~ dict in for items"}, {"snippet": "plt.savefig('graph.png', dpi=1000)", "intent": "save current figure to file graph png  with resolution of 1000 dpi ~ png savefig plt"}, {"snippet": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]", "intent": "delete items from list my_list  if the item exist in list  to_dell  ~ any if in not for"}, {"snippet": "[item for item in a if 1 in item]", "intent": "find all the elements that consists value 1  in a list of tuples  a  ~ if enumerate in for"}, {"snippet": "[item for item in a if item[0] == 1]", "intent": "find all elements in a list of tuples a  where the first element of each tuple equals 1 ~ if in item for"}, {"snippet": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "intent": "get the index value in list p_list  using enumerate in list comprehension ~ for in range key=lambda"}, {"snippet": "[dict(y) for y in set(tuple(x.items()) for x in d)]", "intent": "how to uniqify a list of dict in python ~ dict in for"}, {"snippet": "exec(compile(open('file.py').read(), 'file.py', 'exec'))", "intent": "load a file file py  into the python console ~ exec 'exec open py read compile"}, {"snippet": "rows = session.query(Congress).count()", "intent": "sqlalchemy count the number of rows in table congress  ~ df level=0 groupby"}, {"snippet": "subprocess.call(['test.sh', str(domid)])", "intent": "execute shell script from python with variable ~ call subprocess shell=true"}, {"snippet": "dfs = pd.read_excel(file_name, sheetname=None)", "intent": "read excel file file_name  using pandas ~ open read"}, {"snippet": "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))", "intent": "unpack the binary data represented by the hexadecimal string 4081637ef7d0424a  to a float ~ 16 for in int"}, {"snippet": "a[tuple(b)]", "intent": "get index of numpy array a  with another numpy array  b  ~ for in np"}, {"snippet": "map(list, permutations([2, 3, 4]))", "intent": "find all possible sequences of elements in a list  2  3  4   ~ for in list"}, {"snippet": "sorted(unsorted_list, key=presorted_list.index)", "intent": "sort a list unsorted_list  based on another sorted list  presorted_list  ~ sorted key=lambda list"}, {"snippet": "datetime.datetime.now() - datetime.timedelta(days=1)", "intent": "how to get yesterday in python ~ datetime timedelta"}, {"snippet": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)", "intent": "create a dataframe d  filled with zeros with indices from 0 to length of  data  and column names from  feature_list  ~ df 'user sum 'x groupby loc"}, {"snippet": "x.find('World')", "intent": "find the index of sub string world  in  x  ~ in //a if xpath text for root"}, {"snippet": "x.find('Aloha')", "intent": "find the index of sub string aloha  in  x  ~ str 's in for find"}, {"snippet": "'sdfasdf'.index('cc')", "intent": "find the index of sub string cc  in string  sdfasdf  ~ str 's in for find"}, {"snippet": "'sdfasdf'.index('df')", "intent": "find the index of sub string df  in string  sdfasdf  ~ str 's in for find"}, {"snippet": "str.find('a')", "intent": "find the index of sub string a  in string  str  ~ str 's in for find"}, {"snippet": "str.find('g')", "intent": "find the index of sub string g  in string  str  ~ str 's find"}, {"snippet": "str.find('s', 11)", "intent": "find the index of sub string s  in string  str  starting from index 11 ~ str 's find"}, {"snippet": "str.find('s', 15)", "intent": "find the index of sub string s  in string  str  starting from index 15 ~ str 's find"}, {"snippet": "str.find('s', 16)", "intent": "find the index of sub string s  in string  str  starting from index 16 ~ str 's find"}, {"snippet": "str.find('s', 11, 14)", "intent": "find the index of sub string s  in string  str  starting from index 11 and ending at index 14 ~ str 's find"}, {"snippet": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "intent": "sort list of date strings d  ~ in key=lambda items sorted for list"}, {"snippet": "re.split('\\\\.\\\\s', text)", "intent": "get all the sentences from a string text  using regex ~ sub if in for re"}, {"snippet": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))", "intent": "regular expression in python sentence extractor ~ findall re"}, {"snippet": "\"\"\"foobar\"\"\"[:4]", "intent": "get all characters in string foobar  up to the fourth index ~ str 's in for find"}, {"snippet": "s.rfind('&')", "intent": "cut a string by delimiter    ~ for in strip re split"}, {"snippet": "s[:s.rfind('&')]", "intent": "cut a string using delimiter    ~ re split"}, {"snippet": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()", "intent": "find a tag option  whose  value  attribute is  state  in selenium ~ 'div 'a find_all soup"}, {"snippet": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')", "intent": "append line appended text  to file  test txt  ~ in line as for open with txt"}, {"snippet": "with open('foo', 'a') as f:\n    f.write('cool beans...')", "intent": "append line cool beans     to file  foo  ~ as open with"}, {"snippet": "with open('test1', 'ab') as f:\n    pass", "intent": "append to file test1  content  koko  ~ as txt open with"}, {"snippet": "open('test', 'a+b').write('koko')", "intent": "append to file test  content  koko  ~ as txt open with"}, {"snippet": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])", "intent": "split string x 13 5 10x 4e1  into tokens ~ m/ datetime strptime"}, {"snippet": "re.findall('[\\u4e00-\\u9fff]+', ipath)", "intent": "find all chinese characters in string ipath  ~ sub in if join re for"}, {"snippet": "s.split('s')", "intent": "split string s  by letter  s  ~ for in split"}, {"snippet": "subprocess.Popen(['rm', '-r', 'some.file'])", "intent": "run shell command rm  r some file  in the background ~ os system call subprocess shell=true"}, {"snippet": "dict((d['name'], d) for d in listofdict)", "intent": "convert a list of dictionaries listofdict into a dictionary of dictionaries ~ for in list items"}, {"snippet": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')", "intent": "print current date and time in a regular format ~ m- strftime datetime y-"}, {"snippet": "time.strftime('%Y-%m-%d %H:%M')", "intent": "print current date and time in a regular format ~ m- strftime datetime y-"}, {"snippet": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)", "intent": "find consecutive consonants in a word concentration  using regex ~ sub '\\\\1 re"}, {"snippet": "[i for i, e in enumerate(a) if e != 0]", "intent": "get a list of indices of non zero elements in a list a  ~ if enumerate in for"}, {"snippet": "map(int, re.findall('\\\\d+', string1))", "intent": "get multiple integer values from a string string1  ~ for in split"}, {"snippet": "os.path.dirname(sys.executable)", "intent": "get the path of python executable under windows ~ system os call subprocess shell=true"}, {"snippet": "ax.xaxis.set_label_position('top')", "intent": "move an x axis label to the top of a plot ax  in matplotlib ~ ax xaxis 'top plt"}, {"snippet": "ax.xaxis.tick_top()", "intent": "move x axis to the top of a plot ax  ~ ax xaxis 'top plt"}, {"snippet": "ax.xaxis.set_ticks_position('top')", "intent": "move x axis of the pyplot object ax  to the top of a plot in matplotlib ~ ax xaxis 'top plt"}, {"snippet": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')", "intent": "parse string 2015 01 01 12 12am  to datetime object using format   y  m  d  i  m p  ~ m/ datetime d/ strptime"}, {"snippet": "img = Image.open('picture.jpg')\nimg.show()", "intent": "open image picture jpg  ~ os urllib com/file 'http open rename request"}, {"snippet": "img = Image.open('picture.jpg')\nImg.show", "intent": "open image picture jpg   ~ os urllib com/file 'http open rename request"}, {"snippet": "sys.exit(0)", "intent": "terminate the script using status value 0 ~ sys exit call subprocess shell=true"}, {"snippet": "sys.exit('aa! errors!')", "intent": "abort the execution of the script using message aa  errors   ~ 'shutdown call subprocess"}, {"snippet": "sys.exit()", "intent": "abort the execution of a python script ~ 'shutdown call subprocess"}, {"snippet": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]", "intent": "find maximum with lookahead  4 in a list  arr  ~ if in for"}, {"snippet": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "intent": "set the current working directory to c   users  uname  desktop  python  ~ dirname path os __file__"}, {"snippet": "os.chdir(path)", "intent": "set the current working directory to path path  ~ dirname path os __file__"}, {"snippet": "no_integers = [x for x in mylist if not isinstance(x, int)]", "intent": "get a list no_integers  of all the items in list  mylist  that are not of type  int  ~ if in not for"}, {"snippet": "tree.xpath(\".//a[text()='Example']\")[0].tag", "intent": "match contents of an element to example  in xpath  lxml  ~ 'a driver soup"}, {"snippet": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])", "intent": "concatenate key value pairs in dictionary a  with string      into a single string ~ dict in for items"}, {"snippet": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))", "intent": "strip all non ascii characters from a unicode string   xa3 u20ac xa3 u20ac  ~ sub re"}, {"snippet": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))", "intent": "get all non ascii characters in a unicode string  xa3100 is worth more than  u20ac100  ~ sub is re"}, {"snippet": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")", "intent": "build a dict of key value pairs from a string representation of a dict    muffin     lolz    foo     kitty    ~ dict in list items for"}, {"snippet": "print(t.decode('unicode_escape'))", "intent": "print string t  with proper unicode representations ~ chr in ord print join for"}, {"snippet": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))", "intent": "normalize string str  from  cp1252  code to  utf 8  code ~ 'utf-8 decode encode"}, {"snippet": "zip(list_a, list_b)", "intent": "merge lists list_a  and  list_b  into a list of tuples ~ for in zip"}, {"snippet": "list(zip(a, b))", "intent": "merge lists a  and  a  into a list of tuples ~ for in zip"}, {"snippet": "df.set_index('id').to_dict()", "intent": "convert pandas dataframe df  to a dictionary using  id  field as the key ~ df tolist"}, {"snippet": "df.set_index('id')['value'].to_dict()", "intent": "convert pandas dataframe df  with fields  id    value  to dictionary ~ df 'column_name loc tolist"}, {"snippet": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))", "intent": "can i sort text by its numeric value in python ~ sorted key=lambda list items"}, {"snippet": "re.sub('\\\\([^)]*\\\\)', '', filename)", "intent": "remove parentheses and text within it in string filename  ~ sub in if join re for '\\\\"}, {"snippet": "\"\"\"a b\"\"\".replace(' ', '').isalpha()", "intent": "check if string a b  only contains letters and spaces ~ if in for"}, {"snippet": "[(x + y) for x, y in zip(first, second)]", "intent": "sum each element x  in list  first  with element  y  at the same index in list  second   ~ for in sum zip"}, {"snippet": "sorted(list(a_dict.items()), key=lambda item: item[1][1])", "intent": "sort a python dictionary a_dict  by element  1  of the value ~ sorted key=lambda list items"}, {"snippet": "re.compile('[^a-zA-Z0-9-]+')", "intent": "how to exclude a character from a regex group ~ if in for"}, {"snippet": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]", "intent": "get index of the biggest 2 values of a list a  ~ for in"}, {"snippet": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]", "intent": "get indexes of the largest 2  values from a list  a  using itemgetter ~ for in range"}, {"snippet": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]", "intent": "get the indexes of the largest 2  values from a list of integers  a  ~ if in for"}, {"snippet": "list(x.keys()).index('c')", "intent": "get index of key c  in dictionary  x  ~ for in sum zip"}, {"snippet": "print('{0:+d}'.format(score))", "intent": "print 1 using format   0  d   ~ format strftime in for y- m- datetime"}, {"snippet": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]", "intent": "remove adjacent duplicate elements from a list  1  2  2  3  2  2  4   ~ for in range"}, {"snippet": "\"\"\"0,1,2\"\"\".split(',')", "intent": "split string 0 1 2  based on delimiter     ~ for in split"}, {"snippet": "[int(x) for x in '0,1,2'.split(',')]", "intent": "convert the string 0 1 2  to a list of integers ~ for in"}, {"snippet": "dict([('A', 1), ('B', 2), ('C', 3)])", "intent": "convert list of key value tuples    a   1     b   2     c   3    into dictionary ~ in 'd 'c 'b for 'a"}, {"snippet": "np.savetxt('test.txt', x)", "intent": "save numpy array x  into text file  test txt  ~ as txt open with"}, {"snippet": "direct_output = subprocess.check_output('ls', shell=True)", "intent": "store the output of command ls  in variable  direct_output  ~ system os call subprocess shell=true"}, {"snippet": "df[df.columns - ['T1_V6']]", "intent": "get all column name of dataframe df  except for column  t1_v6  ~ df loc"}, {"snippet": "((25 < a) & (a < 100)).sum()", "intent": "get count of values in numpy array a  that are between values  25  and  100  ~ if in for items np"}, {"snippet": "date.today().strftime('%A')", "intent": "get day name from a datetime object ~ datetime date relativedelta timedelta months="}, {"snippet": "re.search('\\\\bis\\\\b', your_string)", "intent": "python regular expression match whole word ~ findall re"}, {"snippet": "{{car.date_of_manufacture | datetime}}", "intent": "jinja parse datetime object car date_of_manufacture  to use format pattern  datetime  ~ m- strptime datetime m/ y-"}, {"snippet": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}", "intent": "get the date object date_of_manufacture  of object  car  in string  format   y  m  d  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "[item for sublist in l for item in sublist]", "intent": "make a flat list from list of lists sublist  ~ for in list items"}, {"snippet": "list(itertools.chain(*list2d))", "intent": "make a flat list from list of lists list2d  ~ for in list items"}, {"snippet": "list(itertools.chain.from_iterable(list2d))", "intent": "make a flat list from list of lists list2d   ~ for in list items"}, {"snippet": "ord('a')", "intent": "convert ascii value a  to int ~ for in int"}, {"snippet": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')", "intent": "replace white spaces in string   a n b n c nd  e  with empty string    ~ sub \\\\ re"}, {"snippet": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')", "intent": "remove white spaces from all the lines using a regular expression in string a n b n c  ~ sub re"}, {"snippet": "a, b, c = [1, 2, 3]", "intent": "destruct elements of list  1  2  3   to variables  a    b  and  c  ~ in for 'a 'c 'b"}, {"snippet": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]", "intent": "split list mylist  into a list of lists whose elements have the same first five characters ~ for in zip"}, {"snippet": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)", "intent": "remove all instances of parenthesesis containing text beginning with as   from string  line  ~ sub in if join re for"}, {"snippet": "print(line.rstrip('\\n'))", "intent": "skip the newline while printing line  ~ rstrip '\\r\\n"}, {"snippet": "df.index.values.tolist()", "intent": "get index values of pandas dataframe df  as list ~ df values index tolist"}, {"snippet": "if (not a):\n    pass", "intent": "check if list a  is empty ~ any for in pass if"}, {"snippet": "if (not seq):\n    pass", "intent": "check if list seq  is empty ~ any for in pass if"}, {"snippet": "if (len(li) == 0):\n    pass", "intent": "check if list li  is empty ~ any for in"}, {"snippet": "[i for i, v in enumerate(a) if v > 4]", "intent": "create a list containing the indices of elements greater than 4 in list a  ~ if in for items"}, {"snippet": "sorted(yourdata, reverse=True)", "intent": "reverse list yourdata  ~ reverse=true sorted key=lambda list"}, {"snippet": "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)", "intent": "sort list of nested dictionaries yourdata  in reverse based on values associated with each dictionary s key  subkey  ~ reverse=true sorted key=lambda list"}, {"snippet": "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)", "intent": "sort list of nested dictionaries yourdata  in reverse order of  key  and  subkey  ~ reverse=true sorted key=lambda list"}, {"snippet": "df.round()", "intent": "remove decimal points in pandas data frame using round ~ round 005"}, {"snippet": "gca().get_lines()[n].get_xydata()", "intent": "get data from matplotlib plot ~ ax xaxis png savefig plt"}, {"snippet": "A[:, -2:]", "intent": "get the maximum 2 values per row in array a  ~ df for in"}, {"snippet": "request.GET.get('username', '')", "intent": "get value for  username  parameter in get request  in django ~ get request"}, {"snippet": "pprint(dict(list(o.items())))", "intent": "pretty print ordered dictionary o  ~ key=lambda in pass items sorted for list"}, {"snippet": "url('^$', include('sms.urls')),", "intent": "confirm urls in django properly ~ get urlopen urllib com //www 'http requests request"}, {"snippet": "url('^', include('sms.urls')),", "intent": "configure url in django properly ~ get google //www requests 'http"}, {"snippet": "max_item = max(a_list, key=operator.itemgetter(1))", "intent": "get the tuple in list a_list  that has the largest item in the second index ~ if in for"}, {"snippet": "max(a_list, key=operator.itemgetter(1))", "intent": "find tuple in list of tuples a_list  with the largest second element ~ if in for"}, {"snippet": "s.resample('3M', how='sum')", "intent": "resample series s  into 3 months bins and sum each bin ~ df date relativedelta 'month months="}, {"snippet": "[a[i] for i in (1, 2, 5)]", "intent": "extract elements at indices 1  2  5  from a list  a  ~ for in range"}, {"snippet": "[line for line in open('textfile') if 'apple' in line]", "intent": "filter lines from a text file textfile  which contain a word  apple  ~ sub in not if re for"}, {"snippet": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", "intent": "convert a date string s  to a datetime object ~ m- strptime datetime y-"}, {"snippet": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')", "intent": "reading tab delimited csv file filename  with pandas on mac ~ df read_csv pd"}, {"snippet": "'longlongTESTstringTEST'.replace('TEST', '?', 1)", "intent": "replace only first occurence of string test  from a string  longlongteststringtest  ~ sub re"}, {"snippet": "archive.write(pdffile, os.path.basename(pdffile))", "intent": "zip file pdffile  using its basename as directory name ~ os path open"}, {"snippet": "dict(x[1:] for x in reversed(myListOfTuples))", "intent": "create a dictionary of pairs from a list of tuples mylistoftuples  ~ for in list items"}, {"snippet": "[(x1 - x2) for x1, x2 in zip(List1, List2)]", "intent": "subtract elements of list list1  from elements of list  list2  ~ for in list1 zip list2"}, {"snippet": "string[0].isdigit()", "intent": "check if string string  starts with a number ~ any for in"}, {"snippet": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))", "intent": "check if string strg  starts with any of the elements in list   0    1    2    3    4    5    6    7    8    9   ~ for in"}, {"snippet": "print(os.path.dirname(os.path.realpath(__file__)))", "intent": "print script s directory ~ os path chdir abspath __file__"}, {"snippet": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)", "intent": "split string text  by the occurrences of regex pattern                  s 0 2     a z      ~ findall re"}, {"snippet": "plt.scatter(*zip(*li))", "intent": "make a scatter plot using unpacked values of list li  ~ for in"}, {"snippet": "tuple(zip(*t))", "intent": "rearrange tuple of tuples t  ~ in for join item"}, {"snippet": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()", "intent": "get average for every three columns in df  dataframe ~ groupby columns mean axis=1 df"}, {"snippet": "\"\"\"\"\"\".join(chr(i) for i in L)", "intent": "convert a list l  of ascii values to a string ~ for in lst int"}, {"snippet": "sum(x == chosen_value for x in list(d.values()))", "intent": "count the number of pairs in dictionary d  whose value equal to  chosen_value  ~ in if items for list key"}, {"snippet": "sum(1 for x in list(d.values()) if some_condition(x))", "intent": "count the number of values in d  dictionary that are predicate to function  some_condition  ~ if in list items for"}, {"snippet": "struct.unpack('f', struct.pack('f', 0.00582811585976))", "intent": "convert double 0 00582811585976 to float ~ 16 int"}, {"snippet": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()", "intent": "convert datetime date dt  to utc timestamp ~ m- strptime datetime y-"}, {"snippet": "df.sort('m')", "intent": "sort column m  in panda dataframe  df  ~ df 'a 'b"}, {"snippet": "a = sorted(a, key=lambda x: x.modified, reverse=True)", "intent": "sort a data a  in descending order based on the  modified  attribute of elements using lambda function ~ true inplace=true df key=lambda false sorted ascending="}, {"snippet": "print(bool(a))", "intent": "print the truth value of a  ~ in 'total print name score for"}, {"snippet": "df = df.rename(index={last: 'a'})", "intent": "rename last  row index label in dataframe  df  to  a  ~ df values pd columns index dataframe"}, {"snippet": "km.fit(x.reshape(-1, 1))", "intent": "fit kmeans function to a one dimensional array x  by reshaping it to be a multidimensional array of single values ~ np array"}, {"snippet": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)", "intent": "sort a list of strings words  such that items starting with  s  come first  ~ if in for"}, {"snippet": "webbrowser.open('http://somesite.com/adminpanel/index.php')", "intent": "open the login site http   somesite com adminpanel index php  in the browser ~ urlopen //www 'http urllib request"}, {"snippet": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "intent": "fetch all elements in a dictionary parent_dict   falling between two keys 2 and 4 ~ dict in for items if"}, {"snippet": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)", "intent": "fetch all elements in a dictionary parent_dict  where the key is between the range of 2 to 4 ~ dict in for items if"}, {"snippet": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]", "intent": "sort two lists list1  and  list2  together using lambda function ~ for in list1 zip list2"}, {"snippet": "sum(((i > 5) for i in j))", "intent": "get the number of values in list j  that is greater than 5 ~ if in for items"}, {"snippet": "len([1 for i in j if (i > 5)])", "intent": "get the number of values in list j  that is greater than 5  ~ if in for items"}, {"snippet": "j = np.array(j)\nsum((j > i))", "intent": "get the number of values in list j  that is greater than  i  ~ if in list items for"}, {"snippet": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]", "intent": "zip list a    b    c  into a list of tuples ~ zip for in list items"}, {"snippet": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "intent": "changing permission of file path  to  stat s_irusr   stat s_irgrp   stat s_iroth  ~ os path sys"}, {"snippet": "parser.add_argument('file', nargs='*')", "intent": "argparse associate zero or more arguments with flag file  ~ for in"}, {"snippet": "z = [(i == j) for i, j in zip(x, y)]", "intent": "get a list of booleans z  that shows wether the corresponding items in list  x  and  y  are equal ~ if in for items"}, {"snippet": "[(x[i] == y[i]) for i in range(len(x))]", "intent": "create a list which indicates whether each element in x  and  y  is identical ~ if in for"}, {"snippet": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]", "intent": "python extract numbers from a string ~ ! in for if"}, {"snippet": "df2 = pd.DataFrame(index=df1.index)", "intent": "create an empty data frame df2  with index from another data frame  df1  ~ df2 df dataframe df1 pd"}, {"snippet": "struct.unpack('h', pS[0:2])", "intent": "unpack first and second bytes of byte string ps  into integer ~ for in int"}, {"snippet": "print('\\n'.join('  '.join(map(str, row)) for row in t))", "intent": "print list t  into a table like shape ~ df for in split"}, {"snippet": "df.sort_values(by='Date')", "intent": "sort pandas dataframe by date ~ ascending= true df sort false"}, {"snippet": "driver.find_element_by_name('<check_box_name>').is_selected()", "intent": "check if a checkbox is checked in selenium python webdriver ~ os print if pass exists path"}, {"snippet": "driver.find_element_by_id('<check_box_id>').is_selected()", "intent": "determine if checkbox with id  check_box_id   is checked in selenium python webdriver ~ if driver not pass"}, {"snippet": "[(a if a else 2) for a in [0, 1, 0, 3]]", "intent": "replace 0  with  2  in the list   0  1  0  3   ~ for in"}, {"snippet": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')", "intent": "produce a string that is suitable as unicode literal from string m  n ampersand m  n apostrophe s  ~ 'ignore chr in encode join for"}, {"snippet": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')", "intent": "parse a unicode string m  n ampersand m  n apostrophe s  ~ chr join in for strip"}, {"snippet": "chr(int('fd9b', 16)).encode('utf-8')", "intent": "convert unicode codepoint to utf8 hex ~ decode 16 int"}, {"snippet": "print('0x%X' % value)", "intent": "use upper case letters to print hex value value  ~ print for join in"}, {"snippet": "cleaned = [x for x in your_list if x]", "intent": "get a list cleaned  that contains all non empty elements in list  your_list  ~ if in not for"}, {"snippet": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])", "intent": "create a slice object using string string_slice  ~ m- strptime datetime y-"}, {"snippet": "soup.find_all(['a', 'div'])", "intent": "find all the tags a  and  div  from beautiful soup object  soup  ~ 'div 'a find_all soup"}, {"snippet": "print(func.__name__)", "intent": "get the name of function func  as a string ~ in 'total print name score for"}, {"snippet": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))", "intent": "convert dictionary adict  into string ~ for in list items"}, {"snippet": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))", "intent": "convert dictionary adict  into string  ~ for in list items"}, {"snippet": "new_list = old_list[:]", "intent": "copy list old_list  as  new_list  ~ os for in"}, {"snippet": "new_list = list(old_list)", "intent": "copy list old_list  as  new_list   ~ os for in"}, {"snippet": "new_list = copy.copy(old_list)", "intent": "copy list old_list  as  new_list    ~ os for in"}, {"snippet": "new_list = copy.deepcopy(old_list)", "intent": "deep copy list old_list  as  new_list  ~ os path"}, {"snippet": "[i for i in old_list]", "intent": "make a copy of list old_list  ~ for in"}, {"snippet": "plt.legend(frameon=False)", "intent": "remove frame of legend in plot plt  ~ png savefig plt"}, {"snippet": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')", "intent": "print a emoji from a string   ud83d  ude4f  having surrogate pairs ~ print for in"}, {"snippet": "globals()['myfunction']()", "intent": "calling a function named myfunction  in the module ~ print sys exit"}, {"snippet": "urllib.request.urlopen('http://www.stackoverflow.com').getcode()", "intent": "check the status code of url http   www stackoverflow com  ~ get urlopen urllib com //www 'http requests request"}, {"snippet": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)", "intent": "check the status code of url www python org  ~ get urlopen urllib com //www 'http requests request"}, {"snippet": "r = requests.head(url)\nreturn (r.status_code == 200)", "intent": "check the status code of url url  ~ requests com 'http //www"}, {"snippet": "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())", "intent": "checking if website http   www stackoverflow com  is up ~ urlopen urllib com //www 'http request"}, {"snippet": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()", "intent": "selenium driver  click a hyperlink with the pattern  a href   javascript    ~ find_element_by_css_selector click driver compile re"}, {"snippet": "df.to_pickle(file_name)", "intent": "store data frame df  to file  file_name  using pandas  python ~ df csv to_csv"}, {"snippet": "df.groupby(by=df.columns, axis=1).mean()", "intent": "calculate the mean of columns with same name in dataframe df  ~ axis=1 columns groupby sum df"}, {"snippet": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)", "intent": "sort list bar  by each element s attribute  attrb1  and attribute  attrb2  in reverse order ~ reverse=true sorted key=lambda list"}, {"snippet": "alpha = img.split()[-1]", "intent": "get alpha value alpha  of a png image  img  ~ png savefig plt"}, {"snippet": "[len(x) for x in s.split()]", "intent": "how to get the length of words in a sentence ~ if in for"}, {"snippet": "soup.findAll('div', style='width=300px;')", "intent": "beautifulsoup find tag div  with styling  width 300px   in html string  soup  ~ 'div 'a find_all soup"}, {"snippet": "cursor.execute(sql, list(myDict.values()))", "intent": "execute sql statement sql  with values of dictionary  mydict  as parameters ~ table 'insert values into cursor execute var3 var2"}, {"snippet": "df.to_csv('Result.csv', index=False, sep=' ')", "intent": "convert csv file result csv  to pandas dataframe using separator     ~ df read_csv csv to_csv pd"}, {"snippet": "globals().update(vars(args))", "intent": "update the globals    dictionary with the contents of the  vars args   dictionary ~ os for environ in 'home"}, {"snippet": "re.findall('\\\\[(.*?)\\\\]', mystring)", "intent": "find all substrings in mystring  beginning and ending with square brackets ~ sub in if join re for"}, {"snippet": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))", "intent": "format all floating variables var1    var2    var3    var1  to print to two decimal places  ~ round var1 var2 var3"}, {"snippet": "d = dict((k, v) for k, v in d.items() if v > 0)", "intent": "remove all items from a dictionary d  where the values are less than  1  ~ in if items for list key"}, {"snippet": "d = {k: v for k, v in list(d.items()) if v > 0}", "intent": "filter dictionary d  to have items with value greater than 0 ~ ! in if items for list"}, {"snippet": "pd.to_datetime(pd.Series(date_stngs))", "intent": "convert a string of date strings date_stngs   to datetime objects and put them in a dataframe ~ fuzzy=true datetime dparser 'monkey strptime m- y- banana love parse"}, {"snippet": "df.iloc[2, 0]", "intent": "get value at index   2  0   in dataframe  df  ~ df for in zip"}, {"snippet": "matplotlib.rcParams.update({'font.size': 22})", "intent": "change the font size on plot matplotlib  to 22 ~ ax xaxis 'top plt"}, {"snippet": "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])", "intent": "converting dictionary d  into a dataframe  pd  with keys as data for column  date  and the corresponding values as data for column  datevalue  ~ df for in items"}, {"snippet": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)", "intent": "create a dataframe containing the multiplication of element wise in dataframe df  and dataframe  df2  using index name and column labels of dataframe  df  ~ groupby 'id df2 df pd"}, {"snippet": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')", "intent": "extract floating number from string current level  13 4 db   ~ round 005"}, {"snippet": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')", "intent": "extract floating point numbers from a string current level   13 2 db or 14 2 or 3  ~ round 0005"}, {"snippet": "zip(it, it, it)", "intent": "pair each element in list it  3 times into a tuple ~ dict in for"}, {"snippet": "df['x'].str.lower()", "intent": "lowercase a python dataframe string in column x  if it has missing values in dataframe  df  ~ df 'user sum 'x transform groupby loc"}, {"snippet": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})", "intent": "append dict   f   var6   g   var7   h   var8   to value of key  e  in dict  jsobj  a    b    ~ in 'n 'l range len for bigdict 'm"}, {"snippet": "\"\"\"\"\"\".join(lst)", "intent": "concat a list of strings lst  using string formatting ~ for in lst"}, {"snippet": "sum(v for v in list(d.values()) if v > 0)", "intent": "sum values greater than 0 in dictionary d  ~ if in list items for"}, {"snippet": "app.run(debug=True)", "intent": "run flask application app  in debug mode  ~ system os"}, {"snippet": "df.drop(df.index[[1, 3]], inplace=True)", "intent": "drop rows whose index value in list  1  3   in dataframe  df  ~ df index"}, {"snippet": "df.apply(lambda x: x.fillna(x.mean()), axis=0)", "intent": "replace nan values in a pandas data frame with the average of columns ~ axis=1 df apply lambda"}, {"snippet": "[o.my_attr for o in my_list]", "intent": "extract attribute my_attr  from each object in list  my_list  ~ if in for"}, {"snippet": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))", "intent": "python get time stamp on file file  in   m  d  y  format ~ strftime file os time path y- m- ctime datetime"}, {"snippet": "all(item in list(superset.items()) for item in list(subset.items()))", "intent": "check if dictionary subset  is a subset of dictionary  superset  ~ if in list items for"}, {"snippet": "[str(wi) for wi in wordids]", "intent": "convert integer elements in list wordids  to strings ~ for in lst sublist int"}, {"snippet": "df2 = df.reset_index()", "intent": "reset the indexes of a pandas data frame ~ df tolist"}, {"snippet": "dt.strftime('%m/%d/%Y')", "intent": "format datetime in dt  as string in format    m  d  y  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "print('Total cost is: ${:,.2f}'.format(TotalAmount))", "intent": "format floating point number  totalamount  to be rounded off to two decimal places and have a comma thousands  seperator ~ round 005"}, {"snippet": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')", "intent": "sum the values in each row of every two adjacent columns in dataframe df  ~ df for in sum zip"}, {"snippet": "randomList = [random.random() for _ in range(10)]", "intent": "create list randomlist  with 10 random floating point numbers between 0 0 and 1 0 ~ for in range list"}, {"snippet": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))", "intent": "find href value that has string follow page  inside it ~ in //a xpath text for root"}, {"snippet": "sys.stdout.flush()", "intent": "immediately see output of print statement that doesn t end in a newline ~ print"}, {"snippet": "country, capital = random.choice(list(d.items()))", "intent": "get a random key country  and value  capital  form a dictionary  d  ~ sum for in list items"}, {"snippet": "list('Word to Split')", "intent": "split string word to split  into a list of characters ~ for in split"}, {"snippet": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]", "intent": "create a list containing words that contain vowel letter followed by the same vowel in file file text  ~ if in not for"}, {"snippet": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')", "intent": "validate ip address using regex ~ compile re"}, {"snippet": "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))", "intent": "execute file filename py  ~ exec 'exec open py read compile"}, {"snippet": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()", "intent": "sqlalchemy count the number of rows with distinct values in column name  of table  tag  ~ df groupby"}, {"snippet": "df = df.dropna(axis=1, how='all')", "intent": "remove null columns in a dataframe df  ~ df axis=1 drop"}, {"snippet": "all(x.count(1) == 3 for x in L)", "intent": "check if all lists in list l  have three elements of integer 1 ~ if in item for"}, {"snippet": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]", "intent": "get a list comparing two lists of tuples l1  and  l2  if any first value in  l1  matches with first value in  l2  ~ for in sum zip"}, {"snippet": "tex.delete('1.0', END)", "intent": "clear the textbox text  in tkinter ~ system driver os"}, {"snippet": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')", "intent": "convert long int mynumber  into date and time represented in the the string format   y  m  d  h  m  s  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "system('python myscript.py')", "intent": "spawn a process to run python script myscript py  in c   ~ exec 'exec read py open compile call subprocess"}, {"snippet": "your_list.sort(key=operator.attrgetter('anniversary_score'))", "intent": "sort a list your_list  of class objects by their values for the attribute  anniversary_score  ~ reverse=true sorted key=lambda"}, {"snippet": "your_list.sort(key=lambda x: x.anniversary_score)", "intent": "sort list your_list  by the  anniversary_score  attribute of each object ~ sorted key=lambda items"}, {"snippet": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))", "intent": "convert a tensor with list of constants  1  2  3   into a numpy array in tensorflow ~ np array"}, {"snippet": "list(itertools.chain(*a))", "intent": "convert list a  from being consecutive sequences of tuples into a single sequence of elements ~ for in int"}, {"snippet": "count.setdefault('a', 0)", "intent": "set value for key a  in dict  count  to  0  if key  a  does not exist or if value is  none  ~ values in sum if items for list"}, {"snippet": "df.groupby(['cluster']).mean()", "intent": "do group by on cluster  column in  df  and get its mean ~ df groupby lambda"}, {"snippet": "min(myList, key=lambda x: abs(x - myNumber))", "intent": "get number in list mylist  closest in value to number  mynumber  ~ for in mylist"}, {"snippet": "any(x in string for x in search)", "intent": "check if any of the items in  search  appear in  string  ~ any if in not for"}, {"snippet": "print(pattern.search(url).group(1))", "intent": "search for occurrences of regex pattern pattern  in string  url  ~ findall re"}, {"snippet": "(s.factorize()[0] + 1).astype('float')", "intent": "factorize all string values in dataframe s  into floats ~ for join in"}, {"snippet": "C = [(a - b) for a, b in zip(A, B)]", "intent": "get a list c  by subtracting values in one list  b  from corresponding values in another list  a  ~ in 'd 'c 'b for 'a"}, {"snippet": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')", "intent": "derive the week start for the given week number and year 2011  4  0  ~ date relativedelta range random months= datetime"}, {"snippet": "map(int, ['1', '-1', '1'])", "intent": "convert a list of strings   1     1    1    to a list of numbers ~ for in int"}, {"snippet": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')", "intent": "create datetime object from 16sep2012  ~ m- strptime datetime y-"}, {"snippet": "Book.objects.filter(pk=pk).update(**d)", "intent": "update fields in django model book  with arguments in dictionary  d  where primary key is equal to  pk  ~ in if items for objects list"}, {"snippet": "Book.objects.create(**d)", "intent": "update the fields in django model book  using dictionary  d  ~ in filter items for objects list"}, {"snippet": "print('{0:.2f}'.format(your_number))", "intent": "print a digit your_number  with exactly 2 digits after decimal ~ in print round join 2f for"}, {"snippet": "random.randint(100000000000, 999999999999)", "intent": "generate a 12 digit random number ~ for random in range"}, {"snippet": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))", "intent": "generate a random 12 digit number ~ for random in range"}, {"snippet": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))", "intent": "generate a random 12 digit number ~ for random in range"}, {"snippet": "'%0.12d' % random.randint(0, 999999999999)", "intent": "generate a 12 digit random number ~ for random in range"}, {"snippet": "numpy.delete(a, index)", "intent": "remove specific elements in a numpy array a  ~ ! if in for np"}, {"snippet": "sorted(trial_list, key=lambda x: trial_dict[x])", "intent": "sort list trial_list  based on values of dictionary  trail_dict  ~ reverse=true sorted key=lambda list items"}, {"snippet": "sys.stdin.read(1)", "intent": "read a single character from stdin ~ sub re text"}, {"snippet": "print(re.findall(pattern, x))", "intent": "get a list of characters in string x  matching regex pattern  pattern  ~ findall re"}, {"snippet": "k = soup.find(text=re.compile('My keywords')).parent.text", "intent": "get the context of a search by keyword my keywords  in beautifulsoup  soup  ~ 'div 'a find_all soup"}, {"snippet": "df.apply(lambda x: x.tolist(), axis=1)", "intent": "convert rows in pandas data frame df  into list ~ df dataframe tolist pd"}, {"snippet": "B = np.reshape(A, (-1, 2))", "intent": "convert a 1d a  array to a 2d array  b  ~ np array"}, {"snippet": "app.run(host='192.168.0.58', port=9000, debug=False)", "intent": "run app app  on host  192 168 0 58  and port 9000 in flask ~ system get os"}, {"snippet": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))", "intent": "encode unicode string  xc5 xc4 xd6  to utf 8 code ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "[x[0] for x in G]", "intent": "get the first element of each tuple from a list of tuples g  ~ for in sum"}, {"snippet": "re.findall('-(?!aa-|bb-)([^-]+)', string)", "intent": "regular expression matching all but aa  and  bb  for string  string  ~ compile re"}, {"snippet": "re.findall('-(?!aa|bb)([^-]+)', string)", "intent": "regular expression matching all but aa  and  bb  ~ compile re"}, {"snippet": "{k: v for k, v in list(hand.items()) if v}", "intent": "remove false entries from a dictionary hand  ~ objects if in for items"}, {"snippet": "dict((k, v) for k, v in hand.items() if v)", "intent": "get a dictionary from a dictionary hand  where the values are present ~ in if value items for list key"}, {"snippet": "sorted(L, key=operator.itemgetter('resultType'))", "intent": "sort list l  based on the value of variable  resulttype  for each object in list  l  ~ sorted key=lambda list items"}, {"snippet": "s.sort(key=operator.attrgetter('resultType'))", "intent": "sort a list of objects s  by a member variable  resulttype  ~ reverse=true sorted key=lambda items"}, {"snippet": "somelist.sort(key=lambda x: x.resultType)", "intent": "sort a list of objects somelist  where the object has member number variable  resulttype  ~ if in for"}, {"snippet": "df1.merge(df2, on='name').merge(df3, on='name')", "intent": "join multiple dataframes d1    d2   and  d3  on column  name  ~ d2 df in for groupby d1"}, {"snippet": "decimal.Decimal(random.randrange(10000)) / 100", "intent": "generate random decimal ~ random randint"}, {"snippet": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]", "intent": "list all files of a directory mypath  ~ dirname path os realpath __file__"}, {"snippet": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break", "intent": "list all files of a directory mypath   ~ dirname path os realpath __file__"}, {"snippet": "print(glob.glob('/home/adam/*.txt'))", "intent": "list all  txt  files of a directory   home adam   ~ print path txt os"}, {"snippet": "os.listdir('somedirectory')", "intent": "list all files of a directory somedirectory  ~ dirname path os realpath __file__"}, {"snippet": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)", "intent": "execute sql query insert into table values  s  s  s  s  s  s  s  s  s   with all parameters in list  tup  ~ 'insert values into cursor execute var3 var1 table"}, {"snippet": "print([key for key in d if d[key] == 1])", "intent": "get keys with same value in dictionary d  ~ in sum 'gold if for item"}, {"snippet": "print([key for key, value in d.items() if value == 1])", "intent": "get keys with same value in dictionary d   ~ in sum 'gold if for item"}, {"snippet": "print([key for key, value in list(d.items()) if value == 1])", "intent": "get keys from a dictionary d  where the value is  1   ~ in if value items for list key"}, {"snippet": "strs = ['' for x in range(size)]", "intent": "create list of size  empty strings ~ for in range len"}, {"snippet": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)", "intent": "generate pdf file output_filename  from markdown file  input_filename  ~ open read 'rb"}, {"snippet": "[dict(t) for t in set([tuple(d.items()) for d in l])]", "intent": "remove duplicate dict in list l  ~ ! in for if"}, {"snippet": "TIME_ZONE = 'Europe/Istanbul'", "intent": "set time zone europe istanbul  in django ~ now date datetime today"}, {"snippet": "dates_dict.setdefault(key, []).append(date)", "intent": "append date  to list value of  key  in dictionary  dates_dict   or create key  key  with value  date  in a list if it does not exist ~ if in for items"}, {"snippet": "Article.objects.values('pub_date').annotate(article_count=Count('title'))", "intent": "group the values from django model article  with group by value  pub_date  and annotate by  title  ~ objects filter"}, {"snippet": "canvas.delete('all')", "intent": "clear tkinter canvas canvas  ~ system driver os"}, {"snippet": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "intent": "initialize a pandas series object s  with columns    a    b    a1r    b2    aabb4    ~ df 'a 'b"}, {"snippet": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')", "intent": "none ~ if in for"}, {"snippet": "a.sort(key=lambda x: b.index(x[0]))", "intent": "sort list a  using the first dimension of the element as the key to list  b  ~ for in sum zip"}, {"snippet": "a.sort(key=lambda x_y: b.index(x_y[0]))", "intent": "how to sort a list according to another list ~ in key=lambda items sorted for list"}, {"snippet": "plt.savefig('filename.png')", "intent": "save plot plt  as png file  filename png  ~ png savefig plt"}, {"snippet": "plt.savefig('filename.png', dpi=300)", "intent": "save matplotlib graph to image file filename png  at a resolution of  300 dpi  ~ png savefig plt"}, {"snippet": "p1.communicate()[0]", "intent": "get output from process p1  ~ system 'shutdown call subprocess os"}, {"snippet": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]", "intent": "how to get output of exe in python script ~ system subprocess os"}, {"snippet": "soup.body.findAll(text='Python')", "intent": "searche in html string for elements that have text python  ~ if in not soup for"}, {"snippet": "soup.body.findAll(text='Python Jobs')", "intent": "beautifulsoup find string python jobs  in html body  body  ~ 'div 'a find_all soup"}, {"snippet": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))", "intent": "sort items in dictionary d   using the first part of the key after splitting the key ~ sorted key=lambda sum"}, {"snippet": "set([1, 2, 3]) ^ set([3, 4, 5])", "intent": "create a set that is the exclusive or of 1  2  3  and  3  4  5  ~ if in for"}, {"snippet": "request.POST.getlist('pass_id')", "intent": "get a list values of a dictionary item pass_id  from post requests in django ~ get for request in items"}, {"snippet": "list(dict((x['id'], x) for x in L).values())", "intent": "filter duplicate entries w r t value in  id  from a list of dictionaries  l  ~ ! in 'n 'l if items for bigdict 'm"}, {"snippet": "df.groupby(df.columns, axis=1).sum()", "intent": "get pandas groupby object with sum over the rows with same column names within dataframe  df  ~ df groupby sum"}, {"snippet": "dict(zip(list(range(1, 5)), list(range(7, 11))))", "intent": "convert the zip of range  1  5   and range   7  11   into a dictionary ~ list zip"}, {"snippet": "numpy.where(mask)", "intent": "get all indexes of boolean numpy array where boolean value mask  is true ~ for in np"}, {"snippet": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')", "intent": "case insensitive comparison of strings string1  and  string2  ~ sub for join in re"}, {"snippet": "if (string1.lower() == string2.lower()):\n    pass", "intent": "case insensitive string comparison between string1  and  string2  ~ findall re"}, {"snippet": "(string1.lower() == string2.lower())", "intent": "case insensitive string comparison between string1  and  string2   ~ findall re"}, {"snippet": "(first.lower() == second.lower())", "intent": "case insensitive string comparison between first  and  second  ~ findall for join in re"}, {"snippet": "(first.upper() == second.upper())", "intent": "case insensitive comparison between strings first  and  second  ~ findall for join in re"}, {"snippet": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")", "intent": "taking the results of a bash command awk   print  10   11   test txt   test2 txt  ~ call subprocess shell=true"}, {"snippet": "del my_list[2:6]", "intent": "remove multiple values from a list my_list  at the same time with index starting at  2  and ending just before  6   ~ groupby in itertools for zip"}, {"snippet": "int(s.encode('hex'), 16)", "intent": "convert a string s  to its base 10 representation ~ for in split"}, {"snippet": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)", "intent": "match regex pattern taa    atgc  3    taa  on string  seq  ~ findall re"}, {"snippet": "sorted(s, key=float)", "intent": "sort a set s  by numerical value ~ reverse=true sorted key=lambda list"}, {"snippet": "hex(65)", "intent": "convert an int 65 to hex string ~ 16 int"}, {"snippet": "a.append(b).reset_index(drop=True)", "intent": "append a pandas series b  to the series  a  and get a continuous index ~ df set_index"}, {"snippet": "pd.concat([a, b], ignore_index=True)", "intent": "simple way to append a pandas series a  and  b  with same index ~ df pd"}, {"snippet": "[(i, j) for i in range(1, 3) for j in range(1, 5)]", "intent": "get a list of tuples with multiple iterators using list comprehension ~ for in items pass"}, {"snippet": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)", "intent": "reverse sort items in dictionary mydict  by value ~ reverse=true sorted key=lambda list items"}, {"snippet": "pd.date_range('1/1/2014', periods=12, freq='BM')", "intent": "select the last business day of the month for each month in 2014 in pandas ~ groupby date relativedelta df months="}, {"snippet": "requests.get('https://kennethreitz.com', verify=False)", "intent": "disable the certificate check in https requests for url https   kennethreitz com  ~ get urlopen urllib com //www 'http requests request"}, {"snippet": "df.ix[:-1]", "intent": "return dataframe df  with last row dropped ~ df 'a"}, {"snippet": "if ('blah' not in somestring):\n    pass", "intent": "check if blah  is in string  somestring  ~ if not pass"}, {"snippet": "if (needle in haystack):\n    pass", "intent": "check if string needle  is in  haystack  ~ if in pass"}, {"snippet": "string.find('substring')", "intent": "check if string substring  is in string ~ any for in"}, {"snippet": "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")", "intent": "check if string s  contains  is  ~ any for in"}, {"snippet": "pd.concat([df.head(1), df.tail(1)])", "intent": "extract first and last row of a dataframe df  ~ df groupby"}, {"snippet": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])", "intent": "filter a django model mymodel  to have charfield length of max  255  ~ order_by mymodel objects"}, {"snippet": "MyModel.objects.filter(text__regex='^.{254}.*')", "intent": "filter queryset for all objects in django model mymodel  where texts length are greater than  254  ~ objects if in for items"}, {"snippet": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)", "intent": "count the number of rows with missing values in a pandas dataframe df  ~ df groupby sum"}, {"snippet": "sorted(enumerate(a), key=lambda x: x[1])", "intent": "sorting while preserving order in python ~ sorted key=lambda list items"}, {"snippet": "canvas.create_text(x, y, font=('Purisa', 12), text=k)", "intent": "set the font purisa  of size 12 for a canvas  text item  k  ~ for in len"}, {"snippet": "[y['baz'] for x in foos for y in x['bar']]", "intent": "create a list containing all values associated with key baz  in dictionaries of list  foos  using list comprehension ~ in if items for list key"}, {"snippet": "df = pd.read_csv('comma.csv', quotechar=\"'\")", "intent": "read pandas data frame csv comma csv  with extra commas in column specifying string delimiter     ~ df read_csv csv pd"}, {"snippet": "df['a'] = df['a'].str.replace('in.', ' in. ')", "intent": "replace string in   with   in    in dataframe  df  column  a  ~ df replace 'a"}, {"snippet": "[i for i in range(len(a)) if a[i] > 2]", "intent": "get all indexes of a list a  where each value is greater than  2  ~ if in for items"}, {"snippet": "('myVar' in locals())", "intent": "check if a local variable myvar  exists ~ print os if pass exists path"}, {"snippet": "('myVar' in globals())", "intent": "check if a global variable myvar  exists ~ print path in os exists"}, {"snippet": "hasattr(obj, 'attr_name')", "intent": "check if object obj  has attribute  attr_name  ~ filter soup exists"}, {"snippet": "if ('myVar' in locals()):\n    pass", "intent": "check if a local variable myvar  exists  ~ print os if pass exists path"}, {"snippet": "if ('myVar' in globals()):\n    pass", "intent": "check if a global variable myvar  exists  ~ print path in os exists"}, {"snippet": "lambda x, y: x + y", "intent": "lambda function that adds two operands ~ for in zip"}, {"snippet": "sum(1 for i in it)", "intent": "count the number of items in a generator iterator it  ~ values in sum len for"}, {"snippet": "[(x, lst2[i]) for i, x in enumerate(lst)]", "intent": "get tuples of the corresponding elements from lists lst  and  lst2  ~ for in sum zip"}, {"snippet": "[(i, j) for i, j in zip(lst, lst2)]", "intent": "create tuples containing elements that are at the same index of list lst  and list  lst2  ~ if in not zip for"}, {"snippet": "[(lst[i], lst2[i]) for i in range(len(lst))]", "intent": "get tuples from lists lst  and  lst2  using list comprehension in python 2 ~ for in lst2 lst zip"}, {"snippet": "struct.unpack('BBB', rgbstr.decode('hex'))", "intent": "convert hex triplet string rgbstr  to rgb tuple ~ 16 for in int"}, {"snippet": "(3 not in [2, 3, 4])", "intent": "check if 3 is not in a list 2  3  4  ~ any for in"}, {"snippet": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])", "intent": "check if tuple 2  3  is not in a list   2  3    5  6    9  1   ~ for in"}, {"snippet": "((2, 3) not in [(2, 7), (7, 3), 'hi'])", "intent": "check if tuple 2  3  is not in a list   2  7    7  3    hi   ~ in not"}, {"snippet": "(3 not in [4, 5, 6])", "intent": "check if 3 is not in the list 4 5 6  ~ any for in"}, {"snippet": "[value for pair in zip(a, b[::-1]) for value in pair]", "intent": "create a list by appending components from list a  and reversed list  b  interchangeably ~ in 'd 'c 'b for zip 'a"}, {"snippet": "b = np.delete(a, -1, 1)", "intent": "delete the last column of numpy array a  and assign resulting array to  b  ~ for in np"}, {"snippet": "dbb.commit()", "intent": "commit all the changes after executing a query ~ dirname path os __file__"}, {"snippet": "pd.merge(a, b, on=['A', 'B'], how='outer')", "intent": "join two dataframes based on values in selected columns ~ true df 'b false ascending= 'a"}, {"snippet": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')", "intent": "set text color as red  and background color as   a3c1da  in qpushbutton ~ png savefig plt"}, {"snippet": "sum(l) / float(len(l))", "intent": "find the mean of elements in list l  ~ for in zip"}, {"snippet": "[(k, v) for k, v in D.items() if 'Light' in k]", "intent": "find all the items from a dictionary d  if the key contains the string  light  ~ in if value items for list key"}, {"snippet": "k = hashlib.md5('thecakeisalie').hexdigest()", "intent": "get a md5 hash from string thecakeisalie  ~ os path abspath"}, {"snippet": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))", "intent": "how to get only the last part of a path in python ~ os path"}, {"snippet": "birthdays.sort(key=lambda d: (d.month, d.day))", "intent": "sort datetime objects birthdays  by  month  and  day  ~ df datetime 'month 'year"}, {"snippet": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]", "intent": "extract table data from table rows  using beautifulsoup ~ df groupby"}, {"snippet": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')", "intent": "strip the string  txt  from anywhere in the string  boat txt txt  ~ line for in txt"}, {"snippet": "list(df.index)", "intent": "get a list of the row names from index of a pandas data frame ~ groupby 'id tolist df"}, {"snippet": "df.index", "intent": "get the row names from index in a pandas data frame ~ df values axis=1 tolist"}, {"snippet": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))", "intent": "create a list of all unique characters in string aaabcabccd  ~ if in for"}, {"snippet": "list(set('aaabcabccd'))", "intent": "get list of all unique characters in a string aaabcabccd  ~ if in for"}, {"snippet": "\"\"\"\"\"\".join(set('aaabcabccd'))", "intent": "list of all unique characters in a string ~ if in for"}, {"snippet": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]", "intent": "find rows with non zero values in a subset of columns where df dtypes  is not equal to  object  in pandas dataframe ~ df 'user sum 'x groupby loc"}, {"snippet": "br.form.add_file(open(filename), 'text/plain', filename)", "intent": "upload file with python mechanize ~ exec 'exec open py read compile"}, {"snippet": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])", "intent": "check if dictionary  d  contains all keys in list    somekey    someotherkey    somekeyggg    ~ keys in if items for list lod"}, {"snippet": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)", "intent": "hide output of subprocess   espeak   text   ~ 'shutdown call subprocess"}, {"snippet": "df.fillna(method='ffill', inplace=True)", "intent": "replace nans by preceding values in pandas dataframe df  ~ df replace 'a"}, {"snippet": "print(np.linspace(1, 3, num=4, endpoint=False))", "intent": "create 4 numbers in range between 1 and 3 ~ list zip"}, {"snippet": "print(np.linspace(1, 3, num=5))", "intent": "create numpy array of 5  numbers starting from  1  with interval of  3  ~ list zip"}, {"snippet": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)", "intent": "create a symlink directory d   testdirlink  for directory  d   testdir  with unicode support using ctypes library ~ compile re"}, {"snippet": "slice = [arr[i][0:2] for i in range(0, 2)]", "intent": "get a list slice  of array slices of the first two rows and columns from array  arr  ~ for in np"}, {"snippet": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')", "intent": "upload uploaded file from path  upload  to google cloud storage  my_bucket  bucket ~ os path"}, {"snippet": "os.chdir(os.path.dirname(__file__))", "intent": "change directory to the directory of a python script ~ dirname path os __file__"}, {"snippet": "func(*args)", "intent": "call a function with argument list args  ~ call subprocess shell=true"}, {"snippet": "df['AB'].str.split(' ', 1, expand=True)", "intent": "split column ab  in dataframe  df  into two columns by first whitespace     ~ str df in for split"}, {"snippet": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str", "intent": "pandas dataframe how do i split a column  ab  into two  a  and  b  on delimiter     ~ str df 'a split"}, {"snippet": "print(sorted(xs, key=len))", "intent": "sort list xs  based on the length of its elements ~ reverse=true sorted key=lambda list"}, {"snippet": "xs.sort(lambda x, y: cmp(len(x), len(y)))", "intent": "sort list xs  in ascending order of length of elements ~ reverse=true sorted key=lambda list"}, {"snippet": "xs.sort(key=lambda s: len(s))", "intent": "sort list of strings xs  by the length of string ~ sorted key=lambda list"}, {"snippet": "ts.plot(marker='.')", "intent": "plot point marker    on series  ts  ~ df plot plt"}, {"snippet": "lst = list(itertools.product([0, 1], repeat=n))", "intent": "get all combination of n binary values ~ for in sum"}, {"snippet": "lst = map(list, itertools.product([0, 1], repeat=n))", "intent": "get all combination of n binary values ~ for in sum"}, {"snippet": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]", "intent": "get all combination of 3 binary values ~ in for product itertools list"}, {"snippet": "lst = list(itertools.product([0, 1], repeat=3))", "intent": "get all combination of 3 binary values ~ in for product itertools list"}, {"snippet": "df['col'] = 'str' + df['col'].astype(str)", "intent": "append string str  at the beginning of each value in column  col  of dataframe  df  ~ df for in zip"}, {"snippet": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])", "intent": "get a dict of variable names   some    list    of    vars    as a string and their values ~ for in sum"}, {"snippet": "plt.colorbar(im, ax=ax)", "intent": "add a colorbar to plot plt  using image  im  on axes  ax  ~ png savefig plt"}, {"snippet": "[a for c in Cards for b in c for a in b]", "intent": "convert nested list cards  into a flat list ~ for in list items"}, {"snippet": "sorted(d, key=d.get)", "intent": "create a list containing keys of dictionary d  and sort it alphabetically ~ if in for items"}, {"snippet": "print(len([x for x in lst if x is not None]))", "intent": "print the number of occurences of not none  in a list  lst  in python 2 ~ any if in not for"}, {"snippet": "{{json.key1}}", "intent": "lookup dictionary key key1  in django template  json  ~ objects filter"}, {"snippet": "mynewlist = list(myset)", "intent": "remove duplicates from list myset  ~ ! in for if"}, {"snippet": "set(['a', 'b', 'c', 'd'])", "intent": "get unique values from the list   a    b    c    d    ~ in 'd if 'c 'b for 'a"}, {"snippet": "figure(figsize=(11.69, 8.27))", "intent": "set size of figure  to landscape a4 i e   11 69  8 27  inches ~ m/ decode datetime strptime"}, {"snippet": "url.rsplit('/', 1)", "intent": "get every thing after last    ~ for in"}, {"snippet": "url.rsplit('/', 1)[-1]", "intent": "get everything after last slash in a url stored in variable url  ~ url calendar monthrange"}, {"snippet": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')", "intent": "open file 5_1 txt  in directory  direct  ~ print path open txt os"}, {"snippet": "list('5+6')", "intent": "create a list with the characters of a string 5 6  ~ for in"}, {"snippet": "np.concatenate(input_list).ravel().tolist()", "intent": "concatenate a list of numpy arrays input_list  together into a flattened list of values ~ for in np"}, {"snippet": "print([y for x in list(dict.items()) for y in x])", "intent": "convert dictionary dict  into a flat list ~ dict in list items for"}, {"snippet": "[y for x in list(dict.items()) for y in x]", "intent": "convert a dictionary dict  into a list with key and values as list items  ~ dict in for items"}, {"snippet": "MyModel.objects.order_by('?').first()", "intent": "get a random record from model mymodel  using django s orm ~ order_by mymodel objects filter"}, {"snippet": "os.chdir('chapter3')", "intent": "change current working directory to directory chapter3  ~ dirname path os chdir __file__"}, {"snippet": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')", "intent": "change current working directory ~ dirname path os __file__"}, {"snippet": "os.chdir('.\\\\chapter3')", "intent": "change current working directory ~ dirname path os __file__"}, {"snippet": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])", "intent": "create a flat dictionary by summing values associated with similar keys in each dictionary of list dictlist  ~ d2 in 'gold sum for item d1"}, {"snippet": "df.sort(['c1', 'c2'], ascending=[True, True])", "intent": "sort pandas data frame df  using values from columns  c1  and  c2  in ascending order ~ true df ascending= sort_values false"}, {"snippet": "floats = [float(x) for x in s.split()]", "intent": "converting string lists s  to float list ~ for in lst sublist int"}, {"snippet": "floats = map(float, s.split())", "intent": "converting string lists s  to float list  ~ for in lst sublist int"}, {"snippet": "plt.xticks([1, 2, 3, 4, 5])", "intent": "set labels  1  2  3  4  5   on axis x in plot  plt  ~ ax xaxis 'top plt"}, {"snippet": "for line in fileinput.input():\n    pass", "intent": "read line by line from stdin ~ line for in open"}, {"snippet": "for line in sys.stdin:\n    pass", "intent": "read line by line from stdin ~ line for in open"}, {"snippet": "'one' in list(d.values())", "intent": "check if string one  exists in the values of dictionary  d  ~ in issubset 'b any for set 'a"}, {"snippet": "'one' in iter(d.values())", "intent": "check if value one  is among the values of dictionary  d  ~ if in list items for"}, {"snippet": "super(Instructor, self).__init__(name, year)", "intent": "call parent class instructor  of child class constructor ~ __init__ super self"}, {"snippet": "dict(zip(x, y))", "intent": "create a dictionary using two lists x and  y  ~ in 'd 'c 'b for zip 'a"}, {"snippet": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)", "intent": "sort a list of dictionaries a  by dictionary values in descending order ~ reverse=true sorted iter items key=lambda"}, {"snippet": "sorted(a, key=dict.values, reverse=True)", "intent": "sorting a list of dictionary a  by values in descending order ~ reverse=true sorted iter items key=lambda"}, {"snippet": "df.groupby(level=0).agg(['sum', 'count', 'std'])", "intent": "use multiple groupby and agg operations sum    count    std  for pandas data frame  df  ~ axis=1 columns groupby sum df"}, {"snippet": "a.setdefault('somekey', []).append('bob')", "intent": "for a dictionary a   set default value for key  somekey  as list and append value  bob   in that key ~ if in for items"}, {"snippet": "sum(item['gold'] for item in example_list)", "intent": "sum values in list of dictionaries example_list  with key  gold  ~ in 'gold sum if items for item"}, {"snippet": "sum([item['gold'] for item in example_list])", "intent": "get a sum of all values from key gold  in a list of dictionary  example_list  ~ in 'gold sum if items for item"}, {"snippet": "sum(item['gold'] for item in myLIst)", "intent": "get all the values in key gold  summed from a list of dictionary  mylist  ~ in 'gold sum if items for item"}, {"snippet": "f.write('text to write\\n')", "intent": "writing string text to write n  to file  f  ~ as txt open with"}, {"snippet": "file.write('My String\\n')", "intent": "write a string my string  to a file  file  including new line character ~ line for in open txt"}, {"snippet": "df.reset_index().groupby('A')['index'].apply(np.array)", "intent": "find consecutive segments from a column a  in a pandas data frame  df  ~ df 'a"}, {"snippet": "fn = os.path.join(os.path.dirname(__file__), 'my_file')", "intent": "get a relative path of file my_file  into variable  fn  ~ os path abspath __file__"}, {"snippet": "e = next(iter(s))", "intent": "retrieve an element from a set s  without removing it ~ ! in for if"}, {"snippet": "os.system('dir c:\\\\')", "intent": "execute a command in the command prompt to list directory contents of the c drive c     ~ os path abspath __file__"}, {"snippet": "self.treeview.connect('size-allocate', self.treeview_changed)", "intent": "make a auto scrolled window to the end of the list in gtk ~ system os"}, {"snippet": "3 in [1, 2, 3]", "intent": "check if 3 is inside list  1  2  3   ~ any for in"}, {"snippet": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')", "intent": "represent datetime object 10 05 2012  with format   d  m  y  into format   y  m  d  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "s = s.replace('\\\\', '\\\\\\\\')", "intent": "convert a string literal s  with values      to raw string literal ~ decode 16 int"}, {"snippet": "print(proc.communicate()[0])", "intent": "get output of script proc  ~ system subprocess os"}, {"snippet": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T", "intent": "create a pandas data frame from list of nested dictionaries my_list  ~ dict in for"}, {"snippet": "df.loc[:, ((df != 0).any(axis=0))]", "intent": "delete all columns in dataframe  df  that do not hold a non zero value in its records ~ df ! loc"}, {"snippet": "sorted(a, key=lambda x: x[1])", "intent": "sort a multidimensional array a  by column with index 1 ~ key=itemgetter sorted np"}, {"snippet": "[x.strip() for x in s.split(',')]", "intent": "split string s  to list conversion by     ~ split for in int"}, {"snippet": "items = [item for item in container if item.attribute == value]", "intent": "get a list of items in the list container  with attribute equal to  value  ~ in if items for list key"}, {"snippet": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))", "intent": "create a file filename  with each tuple in the list  mylist  written to a line ~ for in mylist"}, {"snippet": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)", "intent": "get multiple matched strings using regex pattern    review     http   url com    d     s   ~ findall re"}, {"snippet": "str = open('very_Important.txt', 'r').read()", "intent": "read a text file very_important txt  into a string variable  str  ~ in line as for open with txt"}, {"snippet": "df.groupby(['A', 'B'])['C'].unique()", "intent": "return values for column c  after group by on column  a  and  b  in dataframe  df  ~ true df 'b false ascending= groupby 'a"}, {"snippet": "with open(fname) as f:\n    content = f.readlines()", "intent": "read file fname  line by line into a list  content  ~ in line as for open with txt"}, {"snippet": "with open('filename') as f:\n    lines = f.readlines()", "intent": "read file filename  line by line into a list  lines  ~ open line in for"}, {"snippet": "lines = [line.rstrip('\\n') for line in open('filename')]", "intent": "read file filename  line by line into a list  lines   ~ open line in for"}, {"snippet": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)", "intent": "read file file txt  line by line into a list  array  ~ line for in open txt"}, {"snippet": "df['col'] = pd.to_datetime(df['col'])", "intent": "convert the dataframe column col  from string types to datetime types ~ size groupby df"}, {"snippet": "[k for d in list(foo.values()) for k in d]", "intent": "get a list of the keys in each dictionary in a dictionary of dictionaries foo  ~ for in sum"}, {"snippet": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))", "intent": "get user input using message enter name here    and insert it to the first placeholder in string  hello   0   how do you do   ~ print score for name 'total"}, {"snippet": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])", "intent": "create pandas data frame df  from txt file  filename txt  with column  region name  and separator     ~ df read_csv csv pd"}, {"snippet": "df['a'] = df['a'].apply(lambda x: x + 1)", "intent": "pandas how can i use the apply   function for a single column  ~ groupby for in df zip"}, {"snippet": "platform.system()", "intent": "get the platform os name ~ __init__ path os super self"}, {"snippet": "a = sorted(a, key=lambda x: float(x))", "intent": "sort list a  in ascending order based on its elements  float values ~ reverse=true sorted key=lambda list"}, {"snippet": "re.search('name (.*)', s)", "intent": "finding words in string s  after keyword  name  ~ findall re"}, {"snippet": "db.collection.find({}, {'_id': False})", "intent": "find all records from collection collection  without extracting mongo id  _id  ~ order_by objects"}, {"snippet": "[row[1] for row in A]", "intent": "get all the second values from a list of lists a  ~ for in sum"}, {"snippet": "[row[0] for row in a]", "intent": "extract first column from a multi dimensional array a  ~ shape np"}, {"snippet": "sorted(['10', '3', '2'], key=int)", "intent": "sort list   10    3    2    in ascending order based on the integer value of its elements ~ sorted key=lambda list items"}, {"snippet": "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'", "intent": "check if file filename  is descendant of directory   the dir   ~ print path os"}, {"snippet": "any(substring in string for substring in substring_list)", "intent": "check if any element of list substring_list  are in string  string  ~ any for isinstance in int"}, {"snippet": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])", "intent": "construct pandas dataframe from a list of tuples ~ df for in dataframe pd"}, {"snippet": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "intent": "find and replace 2nd occurrence of word cat  by  bull  in a sentence  s  ~ sub '\\\\1 re"}, {"snippet": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "intent": "find and replace 2nd occurrence of word cat  by  bull  in a sentence  s   ~ sub '\\\\1 re"}, {"snippet": "sorted(the_list, key=lambda k: int(k.split('_')[1]))", "intent": "sort list of strings in list the_list  by integer suffix ~ in key=lambda int sorted for split"}, {"snippet": "sorted(the_list, key=lambda x: int(x.split('_')[1]))", "intent": "sort list of strings the_list  by integer suffix before  _  ~ in key=lambda int sorted for split"}, {"snippet": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]", "intent": "make a list of lists in which each list g  are the elements from list  test  which have the same characters up to the first  _  character ~ for in zip"}, {"snippet": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]", "intent": "how to group similar items in a list ~ reverse=true sorted key=lambda"}, {"snippet": "driver.get('http://www.google.com')", "intent": "load the url http   www google com  in selenium webdriver  driver  ~ urlopen //www 'http urllib request"}, {"snippet": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year", "intent": "using python s datetime module get the year that utc 11 is currently in ~ m- strftime datetime now y-"}, {"snippet": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])", "intent": "get the difference between two lists  1  2  2  2  3   and   1  2   that may have duplicate values ~ if in for"}, {"snippet": "re.sub('<[^>]*>', '', mystring)", "intent": "remove tags from a string mystring  ~ sub in if join re for \\\\"}, {"snippet": "data.encode('hex')", "intent": "encode string data  as  hex  ~ encode int urllib parse unquote 16"}, {"snippet": "User.objects.filter(userprofile__level__gte=0)", "intent": "filter users  by field  userprofile  with level greater than or equal to  0  ~ df in filter if for objects"}, {"snippet": "soup.findAll(id=re.compile('para$'))", "intent": "beautifulsoup find a tag whose id ends with string para  ~ findall 'div find_all soup"}, {"snippet": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')", "intent": "select div  tags whose  id s begin with  value_xxx_c_1_f_8_a_  ~ findall 'a find_all soup"}, {"snippet": "cleaned_list = [x for x in some_list if x is not thing]", "intent": "delete an item thing  in a list  some_list  if it exists ~ if in for"}, {"snippet": "var = input('Please enter something: ')", "intent": "print please enter something    to console  and read user input to  var  ~ os path"}, {"snippet": "foo.append(4)", "intent": "append 4 to list foo  ~ for in"}, {"snippet": "foo.append([8, 7])", "intent": "append a list 8  7  to list  foo  ~ list zip"}, {"snippet": "x.insert(2, 77)", "intent": "insert 77 to index 2 of list x  ~ for in"}, {"snippet": "plt.savefig('test.png', bbox_inches='tight')", "intent": "remove white space padding around a saved image test png  in matplotlib ~ png savefig plt"}, {"snippet": "(listone + listtwo)", "intent": "concatenate lists listone  and  listtwo  ~ for join in list items"}, {"snippet": "for item in itertools.chain(listone, listtwo):\n    pass", "intent": "iterate items in lists listone  and  listtwo  ~ for in items pass"}, {"snippet": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]", "intent": "create dataframe males  containing data of dataframe  df  where column  gender  is equal to  male  and column  year  is equal to 2014 ~ df 'column_name 'user sum 'x groupby loc"}, {"snippet": "print('\\\\')", "intent": "print backslash ~ print unquote parse urllib"}, {"snippet": "df.replace('-', np.nan)", "intent": "replace    in pandas dataframe  df  with  np nan  ~ df axis=1 sum"}, {"snippet": "df = df.drop('column_name', 1)", "intent": "delete column column_name  from dataframe  df  ~ df axis=1 drop loc"}, {"snippet": "df.drop(df.columns[[0, 1, 3]], axis=1)", "intent": "delete 1st 2nd and 4th columns from dataframe  df  ~ df axis=1 drop"}, {"snippet": "df.drop('column_name', axis=1, inplace=True)", "intent": "delete a column column_name  without having to reassign from pandas data frame  df  ~ df axis=1 groupby drop"}, {"snippet": "parser = argparse.ArgumentParser(allow_abbrev=False)", "intent": "disable abbreviation in argparse ~ call subprocess"}, {"snippet": "feature3 = [d.get('Feature3') for d in df.dic]", "intent": "extract dictionary values by key feature3  from data frame  df  ~ df for in items"}, {"snippet": "df.loc[gb.groups['foo'], ('A', 'B')]", "intent": "get data of column a  and column  b  in dataframe  df  where column  a  is equal to  foo  ~ df 'user sum 'x groupby loc"}, {"snippet": "print('[%s, %s, %s]' % (1, 2, 3))", "intent": "print  1  2  3   ~ print for in"}, {"snippet": "print('[{0}, {1}, {2}]'.format(1, 2, 3))", "intent": "display 1 2 3  as a list of string ~ for in list"}, {"snippet": "[v for k, v in list(my_dict.items()) if 'Date' in k]", "intent": "get values from a dictionary my_dict  whose key contains the string  date  ~ in if value items for list key"}, {"snippet": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)", "intent": "python date string formatting ~ m- strftime datetime y-"}, {"snippet": "df.drop(('col1', 'a'), axis=1)", "intent": "drop a single subcolumn a  in column  col1  from a dataframe  df  ~ df axis=1 'a drop"}, {"snippet": "df.drop('a', level=1, axis=1)", "intent": "dropping all columns named a  from a multiindex  df   across all level  ~ df axis=1 index drop"}, {"snippet": "{_key: _value(_key) for _key in _container}", "intent": "build dictionary with keys of dictionary _container  as keys and values of returned value of function  _value  with correlating key as parameter ~ dict in list items for"}, {"snippet": "browser.find_element_by_class_name('section-select-all').click()", "intent": "click on the text button section select all  using selenium python ~ find_element_by_css_selector click find_element_by_xpath driver"}, {"snippet": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)", "intent": "combine two dictionaries d   and  d1   concatenate string values with identical  keys  ~ d2 items in for d1"}, {"snippet": "hash(pformat(a)) == hash(pformat(b))", "intent": "generate unique equal hash for equal dictionaries a  and  b  ~ if in for items"}, {"snippet": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))", "intent": "convert nested list of lists    tom    cat      jerry    mouse      spark    dog     into a list of tuples ~ for in int"}, {"snippet": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()", "intent": "sum the column positions  along the  other columns  stock    same1    same2  in a pandas data frame  df  ~ df groupby sum"}, {"snippet": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()", "intent": "summing across rows of pandas dataframe ~ axis=1 columns groupby df"}, {"snippet": "s.upper()", "intent": "change string s  to upper case ~ for join in re"}, {"snippet": "dict(item.split('=') for item in s.split(';'))", "intent": "split a string s  by     and convert to a dictionary ~ split for in int"}, {"snippet": "br.addheaders = [('Cookie', 'cookiename=cookie value')]", "intent": "add header   cookie    cookiename cookie value    to mechanize browser  br  ~ url get requests"}, {"snippet": "df['value'] = df['value'].str[0]", "intent": "set data in column value  of dataframe  df  equal to first element of each list ~ sum groupby 'user 'x df"}, {"snippet": "df['value'] = df['value'].str.get(0)", "intent": "get element at index 0 of each list in column value  of dataframe  df  ~ df for in zip"}, {"snippet": "df['value'] = df['value'].str.strip('[]')", "intent": "remove square bracket     from pandas dataframe  df  column  value  ~ df2 merge df 'a df1"}, {"snippet": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])", "intent": "get a string with string formatting from dictionary d  ~ in 'n 'l items for list bigdict 'm"}, {"snippet": "sum(sum(x) for x in lists)", "intent": "sum of sums of each list in a list of lists named  lists   ~ for in sum zip"}, {"snippet": "any(np.equal(a, [1, 2]).all(1))", "intent": "check whether a numpy array a  contains a given row   1  2   ~ for in"}, {"snippet": "len(set(mylist)) == 1", "intent": "check if all elements in list mylist  are the same ~ if in item for"}, {"snippet": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "intent": "split a string s  at line breaks   r n  ~ rstrip '\\r\\n"}, {"snippet": "t = sorted(list(a.items()), key=lambda x: x[1])", "intent": "sort a dictionary a  by values that are list type ~ in if items for list key"}, {"snippet": "if ('blabla' in open('example.txt').read()):\n    pass", "intent": "search for string blabla  in txt file  example txt  ~ open txt"}, {"snippet": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass", "intent": "search for string blabla  in txt file  example txt   ~ open txt"}, {"snippet": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False", "intent": "search for string blabla  in txt file  example txt    ~ open txt"}, {"snippet": "string2.replace('', string1)[len(string1):-len(string1)]", "intent": "insert string string1  after each character of  string2  ~ sub findall '\\\\1 re"}, {"snippet": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))", "intent": "getting every possible combination of two elements in a list ~ for in zip"}, {"snippet": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')", "intent": "get a utf 8 string literal representation of byte string x  ~ decode 16 int"}, {"snippet": "isinstance(x, int)", "intent": "check if x  is an integer ~ any for in"}, {"snippet": "(type(x) == int)", "intent": "check if x  is an integer  ~ any for in"}, {"snippet": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)", "intent": "play the wav file sound wav  ~ open 'rb"}, {"snippet": "[next(it) for _ in range(n)]", "intent": "create a list containing the n  next values of generator  it  ~ if in for"}, {"snippet": "list(itertools.islice(it, 0, n, 1))", "intent": "get list of n next values of a generator it  ~ for in sum"}, {"snippet": "set(a).intersection(b)", "intent": "compare two lists in python a  and  b  and return matches ~ for in sum zip"}, {"snippet": "[i for i, j in zip(a, b) if i == j]", "intent": "how can i compare two lists in python and return matches ~ for in zip"}, {"snippet": "print(''.join(map(str, data)))", "intent": "convert list data  into a string of its elements ~ for join in"}, {"snippet": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')", "intent": "match regex pattern     0 9            on string   1 off delicious  5 ham   ~ for in re"}, {"snippet": "importlib.import_module('.c', 'a.b')", "intent": "import a nested module c py  within  b  within  a  with importlib ~ exec os 'exec open py read compile"}, {"snippet": "importlib.import_module('a.b.c')", "intent": "import a module a b c  with importlib import_module in python 2 ~ exec __file__ os 'exec path open py read compile call subprocess"}, {"snippet": "a = np.array(a)", "intent": "convert array a  to numpy array ~ np array"}, {"snippet": "soup.find_all('div', class_=re.compile('comment-'))", "intent": "find all div  tags whose classes has the value  comment   in a beautiful soup object  soup  ~ 'div 'a find_all soup"}, {"snippet": "[[] for _ in range(n)]", "intent": "a sequence of empty lists of length n  ~ for in range"}, {"snippet": "dict((k, globals()[k]) for k in ('foo', 'bar'))", "intent": "create dictionary from list of variables foo  and  bar  already defined ~ 'bar in for 'foo"}, {"snippet": "MyModel.objects.order_by('?')[:2]", "intent": "get two random records from model mymodel  in django ~ order_by mymodel objects filter"}, {"snippet": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "intent": "print a dictionary   user     name    markus     with string formatting ~ print score name 'total for"}, {"snippet": "list_dict = {t[0]: t for t in tuple_list}", "intent": "create a dictionary list_dict  containing each tuple in list  tuple_list  as values and the tuple s first element as the corresponding key ~ for in zip"}, {"snippet": "randint(0, 9)", "intent": "generate a random integer between 0 and 9 ~ random randint"}, {"snippet": "random.randint(a, b)", "intent": "generate a random integer between a  and  b  ~ random randint"}, {"snippet": "print((random.randint(0, 9)))", "intent": "generate random integers between 0 and 9 ~ random randint"}, {"snippet": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))", "intent": "reverse a string a  by 2 characters at a time ~ for in"}, {"snippet": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')", "intent": "transform time series df  into a pivot table aggregated by column  close  using column  df index date  as index and values of column  df index time  as columns ~ df 'month 'year"}, {"snippet": "any(item[2] == 0 for item in items)", "intent": "check if the third element of all the lists in a list items  is equal to zero  ~ if in item for"}, {"snippet": "[x for x in items if x[2] == 0]", "intent": "find all the lists from a lists of list items  if third element in all sub lists is  0  ~ if in item for"}, {"snippet": "sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)", "intent": "sort dictionary of dictionaries dic  according to the key  fisher  ~ sorted key=lambda list items"}, {"snippet": "plt.yscale('log', nonposy='clip')", "intent": "plot a data logarithmically in y axis ~ ax xaxis 'top plt"}, {"snippet": "map(int, re.findall('\\\\d+', s))", "intent": "extract digits in a simple way from a python string ~ if in for"}, {"snippet": "os.listdir('/home/username/www/')", "intent": "list the contents of a directory  home username www   ~ os path environ 'home"}, {"snippet": "os.listdir('path')", "intent": "list all the contents of the directory path   ~ os path __file__ realpath"}, {"snippet": "pd.concat([distancesDF, datesDF.dates], axis=1)", "intent": "merge a pandas data frame distancesdf  and column  dates  in pandas data frame  datesdf  into single ~ concat axis=1 df pd"}, {"snippet": "[x[0] for x in a]", "intent": "get value of first index of each element in list a  ~ for in sum"}, {"snippet": "[i[0] for i in a]", "intent": "python how to get every first element in 2 dimensional list a  ~ for in"}, {"snippet": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)", "intent": "remove line breaks from string textblock  using regex ~ sub in if join re for \\\\"}, {"snippet": "gzip.open('file.gz', 'rt', encoding='utf-8')", "intent": "open gzip compressed file encoded as utf 8 file gz  in text mode ~ urllib com/file 'http open read request"}, {"snippet": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])", "intent": "test if either of strings a  or  b  are members of the set of strings     b    a    foo    bar    ~ in issubset 'b for set 'a"}, {"snippet": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])", "intent": "check if all the values in a list   a    b    are present in another list    b    a    foo    bar    ~ if in for items"}, {"snippet": "line.translate(None, '!@#$')", "intent": "remove characters       from a string  line  ~ sub in if join re for \\\\"}, {"snippet": "line = re.sub('[!@#$]', '', line)", "intent": "remove characters       from a string  line   ~ sub in if join re for \\\\"}, {"snippet": "string.replace('1', '')", "intent": "remove string 1  from string  string  ~ if in not for"}, {"snippet": "a = a.replace(char, '')", "intent": "remove character char  from a string  a  ~ sub in if join re for"}, {"snippet": "a = a.replace(char, '')", "intent": "remove characters in b  from a string  a  ~ ! join in for if"}, {"snippet": "line = line.translate(string.maketrans('', ''), '!@#$')", "intent": "remove characters in       from a string  line  ~ sub in if join re for \\\\"}, {"snippet": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]", "intent": "binarize the values in columns of list order  in a pandas data frame ~ ascending= true df sort_values false"}, {"snippet": "[3, 4, 1, 2]", "intent": "store integer 3 4  1 and 2 in a list ~ for in zip"}, {"snippet": "globals()['something'] = 'bob'", "intent": "define global variable something  with value  bob  ~ print environ os"}, {"snippet": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)", "intent": "insert spaces before capital letters in string text  ~ sub $ re"}, {"snippet": "print('ex\\xe1mple'.upper())", "intent": "print unicode string ex xe1mple  in uppercase ~ print for join in chr"}, {"snippet": "[l.split('\\\\')[-1] for l in list_dirs]", "intent": "get last element of string splitted by     from list of strings  list_dirs  ~ for in split"}, {"snippet": "dict(zip(keys, values))", "intent": "combine two sequences into a dictionary ~ for in list"}, {"snippet": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')", "intent": "customize the time format in python logging ~ m- strftime datetime y-"}, {"snippet": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)", "intent": "replace comma with dot in a string original_string  using regex ~ sub re"}, {"snippet": "subprocess.call('test.sh otherfunc')", "intent": "call a function otherfunc  inside a bash script  test sh  using subprocess ~ call subprocess shell=true"}, {"snippet": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])", "intent": "can a python script execute a function inside a bash script ~ system os call subprocess shell=true"}, {"snippet": "\"\"\" \"\"\".join(foo.split())", "intent": "remove multiple spaces in a string foo  ~ for in strip re split"}, {"snippet": "list('{0:0b}'.format(8))", "intent": "convert decimal 8 to a list of its binary values ~ 16 format for in int"}, {"snippet": "[int(x) for x in list('{0:0b}'.format(8))]", "intent": "convert decimal integer 8 to a list of its binary values as elements ~ for in lst sublist int"}, {"snippet": "[int(x) for x in bin(8)[2:]]", "intent": "convert decimal 8  to binary list ~ 16 format for in int"}, {"snippet": "dict(zip(my_list, map(my_dictionary.get, my_list)))", "intent": "get key value pairs in dictionary my_dictionary  for all keys in list  my_list  in the order they appear in  my_list  ~ key=lambda in iter items sorted for reverse=true"}, {"snippet": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)", "intent": "cartesian product of x  and  y  array points into single array of 2d points ~ np einsum"}, {"snippet": "driver.implicitly_wait(60)", "intent": "selenium wait for driver driver  60 seconds before throwing a nosuchelementexceptions exception ~ find_element_by_css_selector click driver"}, {"snippet": "driver.switch_to_frame('frameName')", "intent": "selenium webdriver switch to frame framename  ~ true inplace=true df driver ascending="}, {"snippet": "time.strftime('{%Y-%m-%d %H:%M:%S}')", "intent": "format current date to pattern   y  m  d  h  m  s   ~ strftime strptime d/ y- m- datetime"}, {"snippet": "sorted(['14:10:01', '03:12:08'])", "intent": "sort list   14 10 01    03 12 08    ~ fuzzy=true m/ datetime dparser 'monkey strptime banana love parse"}, {"snippet": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)", "intent": "find all occurrences of regex pattern      w      s   w      s       w      s  w      in string  x  ~ findall re"}, {"snippet": "df1.groupby(['key', 'year']).size().reset_index()", "intent": "remove duplicate rows from dataframe df1  and calculate their frequency ~ df2 merge groupby df1 df"}, {"snippet": "sorted(list(dictionary.items()), key=operator.itemgetter(1))", "intent": "sort dictionary dictionary  in ascending order by its values ~ reverse=true sorted key=lambda list"}, {"snippet": "sorted(iter(d.items()), key=lambda x: x[1])", "intent": "iterate over dictionary d  in ascending order of values ~ sorted key=lambda list items"}, {"snippet": "sorted(list(dictionary.items()), key=lambda x: x[1])", "intent": "iterate over a python dictionary ordered by values ~ key=lambda in items pass sorted for list"}, {"snippet": "np.split(a, [-1])", "intent": "split 1d array a  into 2d array at the last element ~ np array"}, {"snippet": "df.pivot(index='order', columns='sample')", "intent": "convert dataframe df  into a pivot table using column  order  as index and values of column  sample  as columns ~ df set_index 'month 'year"}, {"snippet": "df[(df['A'] > 1) | (df['B'] < -1)]", "intent": "select all rows from pandas dataframe df  where the value in column  a  is greater than 1 or less than  1 in column  b   ~ df 'user sum 'x in if for groupby"}, {"snippet": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]", "intent": "get the zip output as list from the lists  1  2  3      4  5  6      7  8  9   ~ list zip"}, {"snippet": "print(df.loc[df['A'] == 'foo'])", "intent": "select rows of dataframe df  whose value for column  a  is  foo  ~ df 'user sum 'x groupby loc"}, {"snippet": "df.loc[df['column_name'] != some_value]", "intent": "select rows whose column value in column column_name  does not equal  some_value  in pandas data frame ~ df 'user sum 'x groupby loc"}, {"snippet": "df.loc[~df['column_name'].isin(some_values)]", "intent": "select rows from a dataframe df  whose value for column  column_name  is not in  some_values  ~ df 'user sum 'x groupby loc"}, {"snippet": "df.loc[df['column_name'] == some_value]", "intent": "select all rows whose values in a column column_name  equals a scalar  some_value  in pandas data frame object  df  ~ df 'column_name loc"}, {"snippet": "print(df.loc[df['B'].isin(['one', 'three'])])", "intent": "select rows whose value of the b  column is  one  or  three  in the dataframe  df  ~ sum groupby 'user 'x df"}, {"snippet": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))", "intent": "repeat every character for 7 times in string map  ~ for in zip"}, {"snippet": "os.rmdir()", "intent": "delete an empty directory ~ for in not if"}, {"snippet": "shutil.rmtree(path, ignore_errors=False, onerror=None)", "intent": "recursively delete all contents in directory path  ~ dirname in os walk path for"}, {"snippet": "os.removedirs(name)", "intent": "recursively remove folder name  ~ os path abspath"}, {"snippet": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']", "intent": "add row   8 19 2014    jun    fly    98765    to dataframe  df  ~ df"}, {"snippet": "glob.glob('*')", "intent": "list all files in a current directory ~ os path realpath __file__"}, {"snippet": "glob.glob('[!hello]*.txt')", "intent": "list all the files that doesn t contain the name hello  ~ if in for"}, {"snippet": "glob.glob('hello*.txt')", "intent": "list all the files that matches the pattern hello  txt  ~ //a findall xpath re text"}, {"snippet": "eval('20<30')", "intent": "evaluate the expression 20 30  ~ fuzzy=true m/ datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "new_list = [x[:] for x in old_list]", "intent": "copy list old_list  and name it  new_list  ~ new_list for in"}, {"snippet": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))", "intent": "convert scientific notation of variable a  to decimal ~ 16 int"}, {"snippet": "df.to_sparse(0)", "intent": "convert dataframe df  to integer type sparse object ~ df for in"}, {"snippet": "print([obj.attr for obj in my_list_of_objs])", "intent": "display attribute attr  for each object  obj  in list  my_list_of_objs  ~ for in objects"}, {"snippet": "sum(1 if d['success'] else 0 for d in s)", "intent": "count the number of true values associated with key success  in dictionary  d  ~ in sum if value items for key"}, {"snippet": "sum(d['success'] for d in s)", "intent": "get the sum of values associated with the key success  for a list of dictionaries  s  ~ in 'gold sum if items for item"}, {"snippet": "imp.find_module('os')[1]", "intent": "get complete path of a module named os  ~ os path abspath __file__"}, {"snippet": "(bool(a) != bool(b))", "intent": "get logical xor of a  and  b  ~ for in sum zip np"}, {"snippet": "((a and (not b)) or ((not a) and b))", "intent": "get logical xor of a  and  b   ~ for in sum zip np"}, {"snippet": "(bool(a) ^ bool(b))", "intent": "get logical xor of a  and  b    ~ for in sum zip np"}, {"snippet": "xor(bool(a), bool(b))", "intent": "get logical xor of a  and  b     ~ for in sum zip np"}, {"snippet": "return (bool(str1) ^ bool(str2))", "intent": "get the logical xor of two variables str1  and  str2  ~ print var1 var2 var3"}, {"snippet": "my_list.sort(key=operator.itemgetter('name'))", "intent": "sort list my_list  in alphabetical order based on the values associated with key  name  of each dictionary in the list ~ reverse=true sorted key=lambda list items"}, {"snippet": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')", "intent": "split a string a   b  cdf   using both commas and semicolons as delimeters ~ re split"}, {"snippet": "[t.strip() for s in string.split(',') for t in s.split(';')]", "intent": "split a string string  by multiple separators     and     ~ for in strip split"}, {"snippet": "f = lambda x, y: x + y", "intent": "make a function f  that calculates the sum of two integer variables  x  and  y  ~ for in sum zip"}, {"snippet": "instancelist = [MyClass() for i in range(29)]", "intent": "create list instancelist  containing 29 objects of type myclass ~ for in range"}, {"snippet": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}", "intent": "make a dictionary from list f  which is in the format of four sets of   val  key  val  ~ if in for items"}, {"snippet": "struct.unpack('>q', s)[0]", "intent": "convert bytes string s   to an unsigned integer ~ 16 for in int"}, {"snippet": "pd.concat([students, pd.DataFrame(marks)], axis=1)", "intent": "concatenate a series students  onto a dataframe  marks  with pandas ~ df 'a 'ab pd"}, {"snippet": "alist.sort(key=lambda x: x.foo)", "intent": "sort list alist  in ascending order based on each of its elements  attribute  foo  ~ sorted key=lambda list items"}, {"snippet": "soup.select('div[id$=_answer]')", "intent": "beautifulsoup select div  elements with an id attribute value ending with sub string  _answer  in html parsed string  soup  ~ findall 'a find_all soup"}, {"snippet": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))", "intent": "sympy solve matrix of linear equations    1  1  1  1    1  1  2  3     with variables   x  y  z   ~ for in np"}, {"snippet": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}", "intent": "best way to extract subset of key value pairs with keys matching l    m   or  n  from python dictionary object ~ in 'n value 'l items for 'my list key lower bigdict 'm"}, {"snippet": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))", "intent": "extract subset of key value pairs with keys as   l    m    n    from dictionary object  bigdict  ~ in 'n 'l if items for bigdict 'm"}, {"snippet": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}", "intent": "get items from a dictionary bigdict  where the keys are present in    l    m    n    ~ in 'n 'l if items for bigdict 'm"}, {"snippet": "{k: bigdict[k] for k in ('l', 'm', 'n')}", "intent": "extract subset of key value pair for keys l    m    n  from  bigdict  in python 3 ~ in 'n 'l items for bigdict 'm"}, {"snippet": "driver.page_source", "intent": "selenium get the entire driver  page text ~ find_element_by_css_selector click driver"}, {"snippet": "data[:, ([1, 9])]", "intent": "extracting column 1  and  9  from array  data  ~ df"}, {"snippet": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')", "intent": "remove all square brackets from string abcd e yth ac ytwec  ~ sub in if join re for \\\\ '\\\\"}, {"snippet": "root.geometry('500x500')", "intent": "how can i resize the root window in tkinter ~ system os"}, {"snippet": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)", "intent": "find all substrings in string mystring  composed only of letters  a  and  b  where each  a  is directly preceded and succeeded by  b  ~ sub re"}, {"snippet": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]", "intent": "convert list lst  of tuples of floats to list  str_list  of tuples of strings of floats in scientific notation with eight decimal point precision ~ for in int"}, {"snippet": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]", "intent": "convert list of sublists lst  of floats to a list of sublists  str_list  of strings of integers in scientific notation with 8 decimal points ~ for in int"}, {"snippet": "t = tuple(x[0] for x in s)", "intent": "create a tuple t  containing first element of each tuple in tuple  s  ~ if in for"}, {"snippet": "datetime.datetime.now().strftime('%a')", "intent": "obtain the current day of the week in a 3 letter format from a datetime object ~ now date relativedelta datetime months="}, {"snippet": "ord('a')", "intent": "get the ascii value of a character a  as an int ~ for in lst int"}, {"snippet": "ord('\\u3042')", "intent": "get the ascii value of a character u \u3042 as an int ~ 'ignore chr in encode ord join for 'ascii"}, {"snippet": "ord()", "intent": "get the ascii value of a character as an int ~ for in lst int"}, {"snippet": "json.load(u)", "intent": "decode json string u  to a dictionary ~ unquote decode parse urllib 'utf8"}, {"snippet": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)", "intent": "delete mulitple columns columnheading1    columnheading2  in pandas data frame  yourdf  ~ df axis=1 drop"}, {"snippet": "[s.strip() for s in input().split(',')]", "intent": "get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string s  ~ for in strip split"}, {"snippet": "[int(d) for d in str(bin(x))[2:]]", "intent": "create a list containing the digits values from binary string x  as elements ~ for in int"}, {"snippet": "max(len(word) for word in i)", "intent": "get the max string length in list i  ~ for in sum len"}, {"snippet": "len(max(i, key=len))", "intent": "get the maximum string length in nested list i  ~ values in sum len for"}, {"snippet": "os.system(my_cmd)", "intent": "execute os command my_cmd  ~ system 'shutdown call subprocess os"}, {"snippet": "mylist.sort(key=lambda x: x.lower())", "intent": "sort list mylist  alphabetically ~ in key=lambda sorted for sort mylist"}, {"snippet": "mylist.sort(key=str.lower)", "intent": "sort list mylist  in alphabetical order ~ sorted values sort key=lambda list"}, {"snippet": "mylist.sort()", "intent": "sort a list of strings mylist   ~ mylist sorted for in key=lambda"}, {"snippet": "list.sort()", "intent": "sort a list of strings list  ~ sorted key=lambda"}, {"snippet": "df.set_index(['Company', 'date'], inplace=True)", "intent": "set multi index on columns company  and  date  of data frame  df  in pandas  ~ df 'month 'year"}, {"snippet": "getattr(your_obj, x)", "intent": "get the attribute x  from object  your_obj  ~ for in"}, {"snippet": "s.split(' ', 1)[1]", "intent": "remove first word in string s  ~ sub re"}, {"snippet": "workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')", "intent": "save xlsxwriter file in app smth1 smth2 expenses01 xlsx  path and assign to variable  workbook  ~ os path"}, {"snippet": "workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')", "intent": "save xlsxwriter file to c  users steven documents demo xlsx  path ~ exec print os 'exec path open py read compile"}, {"snippet": "pyplot.legend(loc=2, fontsize='x-small')", "intent": "change legend size to x small  in upper left location ~ system os"}, {"snippet": "plot.legend(loc=2, prop={'size': 6})", "intent": "change legend font size with matplotlib pyplot to 6 ~ ax xaxis 'top plt"}, {"snippet": "[l[i:i + n] for i in range(0, len(l), n)]", "intent": "split list l  into  n  sized lists ~ for in range len"}, {"snippet": "[l[i:i + n] for i in range(0, len(l), n)]", "intent": "split a list l  into evenly sized chunks  n  ~ for in range len"}, {"snippet": "df['a'].str.contains('-')", "intent": "check if character    exists in a dataframe  df  cell  a  ~ any for in"}, {"snippet": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")", "intent": "remove all non word   whitespace  or  apostrophe characters from string  doesn t this mean it  technically  works   ~ sub re"}, {"snippet": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))", "intent": "find all digits between two characters  xab  and   xbb in a string  text  ~ findall for join in re"}, {"snippet": "monthly_mean.reset_index().plot(x='index', y='A')", "intent": "plot data of column index  versus column  a  of dataframe  monthly_mean  after resetting its index ~ df groupby sum"}, {"snippet": "subprocess.check_output('echo \"foo\"', shell=True)", "intent": "get the output of a subprocess command echo  foo   in command line ~ call subprocess shell=true"}, {"snippet": "[x.encode('UTF8') for x in EmployeeList]", "intent": "encode each value to utf8  in the list  employeelist  ~ url urllib decode unquote 'utf8 parse"}, {"snippet": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)", "intent": "combine two columns foo  and  bar  in a pandas data frame ~ df 'a 'b"}, {"snippet": "list(range(9))", "intent": "generate a list of consecutive integers from 0 to 8 ~ in for product itertools list"}, {"snippet": "\"\"\"\"\"\".join(chr(i) for i in myintegers)", "intent": "convert list myintegers  into a unicode string ~ for join in decode"}, {"snippet": "super(Executive, self).__init__(*args)", "intent": "inherit from class executive  ~ __init__ os super system self"}, {"snippet": "[item for item in my_sequence if item != 'item']", "intent": "remove the string value item  from a list of strings  my_sequence  ~ ! in for if"}, {"snippet": "random.choice(foo)", "intent": "randomly select an item from list foo  ~ if in for"}, {"snippet": "set(['a', 'b']).issubset(['a', 'b', 'c'])", "intent": "check if all of the following items in list   a    b    are in a list    a    b    c    ~ any if in not for"}, {"snippet": "set(['a', 'b']).issubset(set(l))", "intent": "check if all the items in a list   a    b    exists in another list  l  ~ any for in"}, {"snippet": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]", "intent": "set the stdin of the process grep f  to be b one ntwo nthree nfour nfive nsix n  ~ system os call subprocess shell=true"}, {"snippet": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()", "intent": "set the stdin of the process grep f  to be  one ntwo nthree nfour nfive nsix n  ~ system os call subprocess shell=true"}, {"snippet": "[list(t) for t in zip(*list_of_tuples)]", "intent": "to convert a list of tuples list_of_tuples  into list of lists ~ for in item items queryresult"}, {"snippet": "zip(*list_of_tuples)", "intent": "group a list list_of_tuples  of tuples by values ~ reverse=true sorted key=lambda"}, {"snippet": "pd.merge(y, x, on='k')[['a', 'b', 'y']]", "intent": "merge pandas dataframe x  with columns  a  and  b  and dataframe  y  with column  y  ~ df 'a 'c 'b"}, {"snippet": "[item.strip() for item in my_string.split(',')]", "intent": "split string with comma    and remove whitespace from a string  my_string  ~ sub re"}, {"snippet": "print((obj.__dict__))", "intent": "get all object attributes of object obj  ~ for in"}, {"snippet": "dir()", "intent": "get all object attributes of an object ~ if in for items"}, {"snippet": "dir()", "intent": "get all object attributes of an object ~ if in for items"}, {"snippet": "window.set_position(Gtk.WindowPosition.CENTER)", "intent": "pygobject center window window  ~ system 'shutdown call subprocess os"}, {"snippet": "plt.rc('font', **{'size': '30'})", "intent": "change the size of the sci notation to 30  above the y axis in matplotlib  plt  ~ ax xaxis 'top plt"}, {"snippet": "df.isnull().values.any()", "intent": "check if datafram df  has any nan vlaues ~ df 'column_name loc"}, {"snippet": "some_func(*params)", "intent": "unpack the arguments out of list params  to function  some_func  ~ for in list"}, {"snippet": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')", "intent": "decode encodeuricomponent in gae ~ unquote decode parse urllib"}, {"snippet": "(trace_df['ratio'] > 0).mean()", "intent": "get proportion of rows in dataframe trace_df  whose values for column  ratio  are greater than 0 ~ df 'column_name loc"}, {"snippet": "emaillist = '\\n'.join(item[0] for item in queryresult)", "intent": "convert a set of tuples queryresult  to a string  emaillist  ~ for in item int queryresult"}, {"snippet": "[item[0] for item in queryresult]", "intent": "convert a set of tuples queryresult  to a list of strings ~ for in item int queryresult"}, {"snippet": "emaillist = '\\n'.join([item[0] for item in queryresult])", "intent": "convert a list of tuples queryresult  to a string from the first indexes  ~ for in item queryresult"}, {"snippet": "print(('focus object class:', window2.focus_get().__class__))", "intent": "get the widget which has currently the focus in tkinter instance window2  ~ __file__ os //a xpath text path root"}, {"snippet": "a = [0] * 10000", "intent": "initialize a list a  with  10000  items and each item s value  0  ~ ! in for if"}, {"snippet": "print(' '.join(sorted(set(words), key=words.index)))", "intent": "keep only unique words in list of words words  and join into string ~ for in re split"}, {"snippet": "random.sample(range(1, 50), 6)", "intent": "generate 6 random numbers between 1 and 50 ~ random randint"}, {"snippet": "random.sample(range(1, 50), 6)", "intent": "generate six unique random numbers in the range of 1 to 49 ~ for random in range"}, {"snippet": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}", "intent": "lowercase keys and values in dictionary   my key    my value    ~ in dict value items for 'my key lower"}, {"snippet": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())", "intent": "lowercase all keys and values in dictionary   my key    my value    ~ in dict value items for 'my key lower"}, {"snippet": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())", "intent": "convert each key value pair in a dictionary   my key    my value    to lowercase ~ in dict value items for 'my key lower"}, {"snippet": "[sorted(item) for item in data]", "intent": "sorting the lists in list of lists data  ~ reverse=true sorted key=lambda sum"}, {"snippet": "names = list(map(lambda x: x[0], cursor.description))", "intent": "sqlite get a list of column names from cursor object cursor  ~ df for in"}, {"snippet": "os.path.abspath(__file__)", "intent": "get the absolute path of a running python script ~ os path abspath __file__"}, {"snippet": "sorted(matrix, key=itemgetter(1))", "intent": "sort 2d array matrix  by row with index 1 ~ np einsum"}, {"snippet": "[index for index, letter in enumerate(word) if letter == 'e']", "intent": "get all indexes of a letter e  from a string  word  ~ if in for"}, {"snippet": "print(str(x).decode('raw_unicode_escape'))", "intent": "decode utf 8 code x  into a raw unicode literal ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "re.findall('\\\\w', 'abcdefg')", "intent": "split string abcdefg  into a list of characters ~ split for in int"}, {"snippet": "os.path.isfile(fname)", "intent": "check whether a file fname  exists ~ print path isfile os"}, {"snippet": "my_file = Path('/path/to/file')\nif my_file.is_file():\n    pass", "intent": "check whether file  path to file  exists ~ print path os exists"}, {"snippet": "os.path.exists(file_path)", "intent": "check whether file file_path  exists ~ print path isfile os"}, {"snippet": "print(os.path.isfile('/etc/password.txt'))", "intent": "check whether a file  etc password txt  exists ~ print path os exists"}, {"snippet": "print(os.path.isfile('/etc'))", "intent": "check whether a file  etc  exists ~ print path os exists"}, {"snippet": "print(os.path.exists('/does/not/exist'))", "intent": "check whether a path  does not exist  exists ~ in print os if pass exists path"}, {"snippet": "print(os.path.isfile('/does/not/exist'))", "intent": "check whether a file  does not exist  exists ~ in print os if pass exists path"}, {"snippet": "print(os.path.exists('/etc'))", "intent": "check whether a path  etc  exists ~ print path os exists"}, {"snippet": "print(os.path.exists('/etc/password.txt'))", "intent": "check whether a path  etc password txt  exists ~ print path os exists"}, {"snippet": "\"\"\"a;bcd,ef g\"\"\".replace(';', ' ').replace(',', ' ').split()", "intent": "split string a bcd ef g  on delimiters     and     ~ re split"}, {"snippet": "list(i for i in range(3))", "intent": "get a list each value i  in the implicit tuple  range 3   ~ for in sum"}, {"snippet": "writer.writeheader()", "intent": "add field names as headers in csv constructor writer  ~ df csv"}, {"snippet": "[(a, b, c) for a, (b, c) in l]", "intent": "flatten a tuple l  ~ for in list items"}, {"snippet": "\"\"\"0x{0:08X}\"\"\".format(3652458)", "intent": "convert 3652458 to string represent a 32bit hex number ~ 16 struct unpack 'd int"}, {"snippet": "[(v, k) for k, v in list(d.items())]", "intent": "convert a python dictionary d  to a list of tuples ~ dict in list items for"}, {"snippet": "[(v, k) for k, v in d.items()]", "intent": "convert dictionary of pairs d  to a list of tuples ~ dict in for items"}, {"snippet": "[(v, k) for k, v in a.items()]", "intent": "convert python 2 dictionary a  to a list of tuples where the value is the first tuple element and the key is the second tuple element ~ for in sum"}, {"snippet": "[(k, v) for k, v in a.items()]", "intent": "convert a python dictionary a  to a list of tuples ~ for in list items"}, {"snippet": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]", "intent": "convert a list of hex byte strings   bb    a7    f6    9e    to a list of hex integers ~ 16 int"}, {"snippet": "[int(x, 16) for x in L]", "intent": "convert the elements of list l  from hex byte strings to hex integers ~ for in lst sublist int"}, {"snippet": "var1, var2 = input('Enter two numbers here: ').split()", "intent": "assign values to two variables  var1  and  var2  from user input response to   enter two numbers here    split on whitespace ~ format print 2f var3 var1 var2"}, {"snippet": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])", "intent": "filter a json from a key value pair as   fixed_key_1    foo2    in django ~ for in objects"}, {"snippet": "itertools.product(list(range(2)), repeat=4)", "intent": "create a list containing a four elements long tuples of permutations of binary values ~ for in lst int"}, {"snippet": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')", "intent": "get yesterday s date as a string in yyyy mm dd  format using timedelta ~ m- strftime datetime y-"}, {"snippet": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])", "intent": "get the dot product of matrix  1 0 0 1 0 0   and matrix    0 1   1 1   1 0   1 0   1 1   0 1    ~ for in sum zip np"}, {"snippet": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')", "intent": "convert date strings in pandas dataframe column df date    to pandas timestamps using the format   d b y  ~ m- strftime datetime df y-"}, {"snippet": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file", "intent": "importing file file  from folder   path to application app folder  ~ os path abspath"}, {"snippet": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')", "intent": "do a left  merge of dataframes  x  and  y  on the column  state  and sort by  index  ~ true df 'b false ascending= 'a"}, {"snippet": "json.loads(request.POST.get('mydata', '{}'))", "intent": "create a default empty json object if no json is available in request parameter mydata  ~ get request"}, {"snippet": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))", "intent": "get a list of tuples of every three consecutive items in list  1  2  3  4  5  6  7  8  9   ~ for in list"}, {"snippet": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))", "intent": "slice list  1  2  3  4  5  6  7   into lists of two elements each ~ for in zip"}, {"snippet": "[input[i:i + n] for i in range(0, len(input), n)]", "intent": "slicing a list into a list of sub lists ~ for in"}, {"snippet": "keys.sort(key=lambda x: map(int, x.split('.')))", "intent": "sort list keys  based on its elements  dot seperated numbers ~ sorted key=lambda int"}, {"snippet": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])", "intent": "sort a list of integers keys  where each value is in string format ~ if in for"}, {"snippet": "img.transpose(2, 0, 1).reshape(3, -1)", "intent": "convert a 3d array img  of dimensions 4x2x3 to a 2d array   of dimensions 3x8 ~ np array"}, {"snippet": "df['BrandName'].replace(['ABC', 'AB'], 'A')", "intent": "replacing abc  and  ab  values in column  brandname  of dataframe  df  with  a  ~ df replace 'a"}, {"snippet": "df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')", "intent": "replace values   abc    ab    in a column  brandname  of  pandas dataframe  df  with another value  a  ~ df 'a 'ab"}, {"snippet": "df.sub(df.mean(axis=1), axis=0)", "intent": "subtract the mean of each row in dataframe df  from the corresponding row s elements ~ df groupby sum"}, {"snippet": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])", "intent": "remove all non alphabet chars from string s  ~ sub in if join re for"}, {"snippet": "l = (int(x) for x in s.split())", "intent": "split a string s  into integers ~ split for in int"}, {"snippet": "\"\"\"42 0\"\"\".split()", "intent": "split a string 42 0  by white spaces  ~ for in strip re split"}, {"snippet": "map(int, '42 0'.split())", "intent": "how to split a string into integers in python ~ for in int"}, {"snippet": "[i for i, elem in enumerate(bool_list, 1) if elem]", "intent": "get indexes of all true boolean values from a list bool_list  ~ for in sum len if"}, {"snippet": "data.groupby(data['date'].map(lambda x: x.year))", "intent": "group dataframe data  entries by year value of the date in column  date  ~ df groupby sum"}, {"snippet": "np.in1d(b, a).nonzero()[0]", "intent": "get the indices in array b  of each element appearing in array  a  ~ if in for"}, {"snippet": "time.strftime('%l:%M%p %z on %b %d, %Y')", "intent": "display current time in readable format ~ m- strptime strftime datetime y-"}, {"snippet": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)", "intent": "rotate x axis text labels of plot ax  45 degrees ~ ax xaxis png savefig plt"}, {"snippet": "\"\"\"\"\"\".join(['x', 'x', 'x'])", "intent": "append array of strings   x    x    x    into one string ~ in 'd 'c 'b for 'a"}, {"snippet": "x[(np.arange(x.shape[0]) != 1), :, :]", "intent": "retrieve all items in an numpy array x  except the item of the index 1 ~ all np"}, {"snippet": "print(item['name'])", "intent": "pull a value with key name  from a json object  item  ~ keys for in lod list"}, {"snippet": "result = sys.stdin.read()", "intent": "read a file from redirected stdin and save to variable result  ~ sys stdin open"}, {"snippet": "\"\"\"\"\"\".join(soup.findAll(text=True))", "intent": "get all the texts without tags from beautiful soup object soup  ~ 'div 'a find_all soup"}, {"snippet": "data[data['Value'] == True]", "intent": "extract all rows from dataframe data  where the value of column  value  is true ~ df 'user sum 'x groupby loc"}, {"snippet": "\"\"\"\"\"\".join(set(foo))", "intent": "removing duplicate characters from a string variable foo  ~ ! in for if"}, {"snippet": "sorted(Profile.objects.all(), key=lambda p: p.reputation)", "intent": "sort objects in model profile  based on theirs  reputation  attribute ~ reverse=true sorted key=lambda"}, {"snippet": "df.values.flatten()", "intent": "flatten a dataframe df to a list ~ df for in"}, {"snippet": "users.sort(key=lambda x: order.index(x['id']))", "intent": "sort list users  using values associated with key  id  according to elements in list  order  ~ sorted values key=lambda list items"}, {"snippet": "users.sort(key=lambda x: order.index(x['id']))", "intent": "sort a python list of dictionaries users  by a given list  order  of ids  id  with the desired order ~ reverse=true sorted key=lambda list"}, {"snippet": "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})", "intent": "request uri  my_uri   and pass authorization token  tok  my_token   to the header ~ url get requests"}, {"snippet": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))", "intent": "un escape a backslash escaped string in hello   nworld   ~ print unquote parse urllib"}, {"snippet": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)", "intent": "match regex pattern a  bc    on string  aabcc  with dotall enabled ~ findall re"}, {"snippet": "a.shape[1]", "intent": "get second array column length of array a  ~ for in sum"}, {"snippet": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)", "intent": "use operations like max min within a row to a dataframe d  in pandas ~ df groupby sum"}, {"snippet": "\"\"\"abcdabcva\"\"\".count('ab')", "intent": "count number of occurrences of a substring ab  in a string  abcdabcva  ~ sub '\\\\1 re"}, {"snippet": "[d['key'] for d in l if 'key' in d]", "intent": "get a list of values with key key  from a list of dictionaries  l  ~ in 'gold sum if value items for key item"}, {"snippet": "[d['key'] for d in l]", "intent": "get a list of values for key key  from a list of dictionaries  l  ~ in 'gold sum if value items for key item"}, {"snippet": "[d['key'] for d in l]", "intent": "get a list of values for key key  from a list of dictionaries in  l  ~ in if value items for list key"}, {"snippet": "l1.sort(key=lambda x: int(x[0]))", "intent": "order a list of lists l1  by the first value ~ reverse=true sorted key=lambda sum"}, {"snippet": "sorted([[1, 'mike'], [1, 'bob']])", "intent": "order a list of lists   1   mike     1   bob     by the first value of individual list ~ reverse=true sorted key=lambda sum"}, {"snippet": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))", "intent": "replace a string abc  in case sensitive way using maketrans ~ re split"}, {"snippet": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])", "intent": "dictionary d  to string  custom format ~ strftime strptime d/ y- m- datetime"}, {"snippet": "self.writer.writerow([str(s).encode('utf-8') for s in row])", "intent": "how to write a unicode csv in python 2 7 ~ for csv in"}, {"snippet": "os.system('cls')", "intent": "clear terminal screen on windows ~ system 'shutdown call subprocess os"}, {"snippet": "os.system('clear')", "intent": "clear the terminal screen in linux ~ system os"}, {"snippet": "os.system('tcsh your_own_script')", "intent": "execute external commands script your_own_script  with csh instead of bash ~ system os call subprocess shell=true"}, {"snippet": "os.system(\"zsh -c 'echo $0'\")", "intent": "execute command echo  0  in z shell ~ system os call subprocess shell=true"}, {"snippet": "[dict(d, count=n) for d, n in zip(l1, l2)]", "intent": "update a list l1  dictionaries with a key  count  and value from list  l2  ~ in if value items for list key"}, {"snippet": "[sum(x) for x in zip(*l)]", "intent": "create a list with the sum of respective elements of the tuples of list l  ~ for in sum zip"}, {"snippet": "map(sum, zip(*l))", "intent": "sum each value in a list l  of tuples ~ for in sum zip"}, {"snippet": "np.count_nonzero(~np.isnan(data))", "intent": "count the number of non nan elements in a numpy ndarray matrix data  ~ np array"}, {"snippet": "map(list, zip(*main_list))", "intent": "convert each list in list main_list  into a tuple ~ for in"}, {"snippet": "request.POST.get('title', '')", "intent": "django get the value of key title  from post request  request  if exists  else return empty string    ~ get if request in pass"}, {"snippet": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))", "intent": "check if string test mp3  ends with one of the strings from a tuple     mp3     avi    ~ any for in"}, {"snippet": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "intent": "split a string s  by space while ignoring spaces within square braces and quotes  ~ sub re"}, {"snippet": "data.apply(lambda x: sorted(x, 3))", "intent": "get biggest 3 values from each column of the pandas dataframe data  ~ df groupby axis=1 len"}, {"snippet": "os.chdir('C:/Users/Name/Desktop')", "intent": "permanently set the current directory to the c  users name desktop  ~ dirname path os __file__"}, {"snippet": "re.findall('\\\\$([^$]*)\\\\$', string)", "intent": "get all characters between two    characters in string  string  ~ for join in"}, {"snippet": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')", "intent": "getting the string between 2    characters in   sin  x   is an function of x  ~ if in for"}, {"snippet": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()", "intent": "format a date object str_data  into iso fomrat ~ m- strptime datetime y-"}, {"snippet": "A[[0, 1], [0, 1]]", "intent": "get element at index 0 of first row and element at index 1 of second row in array a  ~ for in zip"}, {"snippet": "a[np.arange(3), (0, 1, 0)]", "intent": "subset numpy array a  by column and row  returning the values from the first row  first column and the second row  second column and the third row  first column  ~ for in sum"}, {"snippet": "[k for k, v in dictA.items() if v.count('duck') > 1]", "intent": "get a list of all keys from dictionary dicta  where the number of occurrences of value  duck  in that key is more than  1  ~ in if items for list key"}, {"snippet": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]", "intent": "create sub matrix of a list of lists   2  3  4    2  3  4    2  3  4     without numpy  ~ for in np"}, {"snippet": "print(arr[1, 1])", "intent": "get an element at index  1 1  in a numpy array  arr  ~ for in np"}, {"snippet": "quadmesh.set_clim(vmin=0, vmax=15)", "intent": "set colorbar range from 0  to  15  for pyplot object  quadmesh  in matplotlib ~ list plt range"}, {"snippet": "my_data = genfromtxt('my_file.csv', delimiter=',')", "intent": "read csv file my_file csv  into numpy array ~ delimiter= in line for csv open"}, {"snippet": "df = pd.read_csv('myfile.csv', sep=',', header=None)", "intent": "read csv file myfile csv  into array ~ line for in open txt"}, {"snippet": "np.genfromtxt('myfile.csv', delimiter=',')", "intent": "read csv file myfile csv  into array  ~ line for in open txt"}, {"snippet": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)", "intent": "read csv file myfile csv  into array   ~ line for in open txt"}, {"snippet": "my_string.splitlines()[0]", "intent": "read the first line of a string my_string  ~ sub $ re split"}, {"snippet": "my_string.split('\\n', 1)[0]", "intent": "how do i read the first line of a string ~ for in split"}, {"snippet": "df.values.tolist()", "intent": "generate a list from a pandas dataframe df  with the column name and column values ~ values df dataframe pd"}, {"snippet": "re.sub('\\\\*\\\\*+', '*', text)", "intent": "replace repeated instances of a character    with a single instance in a string  text  ~ sub '\\\\1 re"}, {"snippet": "re.sub('\\\\*+', '*', text)", "intent": "replace repeated instances of    with a single instance of     ~ sub '\\\\ '\\\\1 \\\\ re"}, {"snippet": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)", "intent": "multiply values of dictionary dict  with their respective values in dictionary  dict2  ~ in key=lambda items sorted for list"}, {"snippet": "return ''.join(random.choice(string.lowercase) for i in range(length))", "intent": "get a random string of length length  ~ for in range"}, {"snippet": "sum(len(x) for x in list(food_colors.values()))", "intent": "get total number of values in a nested dictionary food_colors  ~ in 'gold sum len for item"}, {"snippet": "sum(len(v) for v in food_colors.values())", "intent": "count all elements in a nested dictionary food_colors  ~ values in sum len for"}, {"snippet": "all(a_list)", "intent": "apply logical operator and  to all elements in list  a_list  ~ for in sum zip"}, {"snippet": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')", "intent": "removing vowel characters aeiouaeiou  from string  text  ~ sub '\\\\ \\\\ re"}, {"snippet": "[(x / y) for x, y in zip(a, b)]", "intent": "divide elements in list a  from elements at the same index in list  b  ~ for in sum zip"}, {"snippet": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')", "intent": "match regex abc de fg 123   on string  abcdefg123 and again abcdefg123  ~ re split"}, {"snippet": "df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))", "intent": "apply function log2  to the grouped values by  type  in dataframe  df  ~ df groupby sum"}, {"snippet": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]", "intent": "get geys of dictionary my_dict  that contain any values from list  lst  ~ in if my_dict items for list"}, {"snippet": "[key for item in lst for key, value in list(my_dict.items()) if item in value]", "intent": "get list of keys in dictionary my_dict  whose values contain values from list  lst  ~ in if value items for list key"}, {"snippet": "c = [[(i + j) for i, j in zip(e, b)] for e in a]", "intent": "sum elements of tuple b  to their respective elements of each tuple in list  a  ~ for in sum zip"}, {"snippet": "os.path.commonprefix(['/usr/var', '/usr/var2/log'])", "intent": "get the common prefix from comparing two absolute paths  usr var  and   usr var2 log  ~ os path abspath __file__"}, {"snippet": "print(os.path.relpath('/usr/var/log/', '/usr/var'))", "intent": "get relative path of path  usr var  regarding path   usr var log   ~ os path __file__"}, {"snippet": "grouped.filter(lambda x: len(x) > 1)", "intent": "filter dataframe grouped  where the length of each group  x  is bigger than 1 ~ df 'user sum 'x in if len for groupby"}, {"snippet": "sorted(list(myDict.items()), key=lambda e: e[1][2])", "intent": "sort dictionary of lists mydict  by the third item in each list ~ reverse=true sorted key=lambda list"}, {"snippet": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')", "intent": "format string hello  name   how are you  name   welcome  name   to be interspersed by  name  three times  specifying the value as  john  only once ~ print score for name 'total"}, {"snippet": "df.reindex(['Z', 'C', 'A'])", "intent": "reorder indexed rows   z    c    a    based on a list in pandas data frame  df  ~ true df 'b false ascending= 'a"}, {"snippet": "any(isinstance(el, list) for el in input_list)", "intent": "check if any values in a list input_list  is a list ~ any for in"}, {"snippet": "len(items)", "intent": "get the size of list items  ~ for in"}, {"snippet": "len([1, 2, 3])", "intent": "get the size of a list  1 2 3   ~ for in list"}, {"snippet": "items.__len__()", "intent": "get the size of object items  ~ for in range"}, {"snippet": "len()", "intent": "function to get the size of object ~ ax print xaxis 'top"}, {"snippet": "len(s)", "intent": "get the size of list s  ~ for in range"}, {"snippet": "df.sort(axis=1, ascending=False)", "intent": "sort each row in a pandas dataframe df  in descending order ~ ascending= true df sort_values false"}, {"snippet": "df.sort(df.columns, axis=1, ascending=False)", "intent": "fastest way to sort each row in a pandas dataframe ~ df groupby sum"}, {"snippet": "df.groupby(['col5', 'col2']).size().groupby(level=1).max()", "intent": "get count of rows in each series grouped by column col5  and column  col2  of dataframe  df  ~ df groupby sum"}, {"snippet": "'x' in ['x', 'd', 'a', 's', 'd', 's']", "intent": "check if string x  is  in list    x    d    a    s    d    s    ~ any for in"}, {"snippet": "mydict.pop('key', None)", "intent": "delete an item with key key  from  mydict  ~ in if items for list key"}, {"snippet": "del mydict[key]", "intent": "delete an item with key key  from  mydict   ~ in if items for list key"}, {"snippet": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass", "intent": "delete an item with key key  from  mydict    ~ in if items for list key"}, {"snippet": "parser.add_argument('input', nargs='+')", "intent": "specify multiple positional arguments with argparse ~ d2 in 'total print name score for d1"}, {"snippet": "pyplot.plot(x, y, color='#112233')", "intent": "plot using the color code  112233  in matplotlib pyplot ~ png savefig plt"}, {"snippet": "re.sub('<[^<]+?>', '', text)", "intent": "strip html from strings ~ sub in if join re for"}, {"snippet": "a[np.in1d(a, b)]", "intent": "align values in array b  to the order of corresponding values in array  a  ~ true key=lambda items 'b false sorted list ascending= 'a"}, {"snippet": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)", "intent": "split string jvm args   dappdynamics com true   dsomeotherparam false   on the first occurrence of delimiter     ~ urlopen urllib com //www 'http driver request"}, {"snippet": "print('[%s]' % ', '.join('%.3f' % val for val in list))", "intent": "print numbers in list list  with precision of 3 decimal places ~ print 3f for round in"}, {"snippet": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')", "intent": "format print output of list of floats l  to print only up to 3 decimal points ~ print 3f for round in"}, {"snippet": "print([('%5.3f' % val) for val in l])", "intent": "print a list of floating numbers l  using string formatting ~ print for join in int"}, {"snippet": "os.chdir('..')", "intent": "change the current directory one level up ~ dirname path os __file__"}, {"snippet": "print(text.encode('windows-1252'))", "intent": "print a unicode string text  ~ chr in print join re text for"}, {"snippet": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]", "intent": "convert string representation s2  of binary string rep of integer to floating point number ~ 16 struct unpack 'd int"}, {"snippet": "float(int('-0b1110', 0))", "intent": "convert a binary  0b1110  to a float number ~ 16 struct unpack 'd int"}, {"snippet": "struct.unpack('d', b8)[0]", "intent": "convert a binary b8  to a float number ~ 16 struct unpack 'd int"}, {"snippet": "df.colour.value_counts().plot(kind='bar')", "intent": "plot a bar graph from the column color  in the dataframe  df  ~ df plot"}, {"snippet": "df.groupby('colour').size().plot(kind='bar')", "intent": "plot categorical data in series df  with kind  bar  using pandas and matplotlib ~ df pd"}, {"snippet": "line.strip().split(' ')", "intent": "strip and split each line line  on white spaces ~ sub for in re split"}, {"snippet": "df.groupby(lambda idx: 0).agg(['mean', 'std'])", "intent": "apply functions mean  and  std  to each column in dataframe  df  ~ axis=1 columns groupby sum df"}, {"snippet": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)", "intent": "sort dictionary tag_weight  in reverse order by values cast to integers ~ reverse=true sorted key=lambda list"}, {"snippet": "int(math.ceil(x)) - 1", "intent": "find the largest integer less than x  ~ if in item for"}, {"snippet": "if (not myString):\n    pass", "intent": "check if the string mystring  is empty ~ any for in"}, {"snippet": "if (not some_string):\n    pass", "intent": "check if string some_string  is empty ~ if in not pass"}, {"snippet": "if (not my_string):\n    pass", "intent": "check if string my_string  is empty ~ any for in pass if"}, {"snippet": "if some_string:\n    pass", "intent": "check if string my_string  is empty  ~ any for in pass if"}, {"snippet": "it = iter(sorted(d.items()))", "intent": "iterate over a dictionary d  in sorted order ~ in items pass sorted for list"}, {"snippet": "for (key, value) in sorted(d.items()):\n    pass", "intent": "iterate over a dictionary d  in sorted order  ~ in items pass sorted for list"}, {"snippet": "return sorted(dict.items())", "intent": "iterate over a dictionary dict  in sorted order ~ sorted for in items pass"}, {"snippet": "return iter(sorted(dict.items()))", "intent": "iterate over a dictionary dict  in sorted order  ~ sorted for in items pass"}, {"snippet": "for (k, v) in sorted(foo.items()):\n    pass", "intent": "iterate over a dictionary foo  in sorted order ~ in key=lambda items pass sorted for"}, {"snippet": "for k in sorted(foo.keys()):\n    pass", "intent": "iterate over a dictionary foo  sorted by the key ~ key=lambda in pass items sorted for list"}, {"snippet": "last = len(s) - s[::-1].index(x) - 1", "intent": "assign the index of the last occurence of x  in list  s  to the variable  last  ~ for in"}, {"snippet": "str1 = ''.join(list1)", "intent": "concatenating values in list1  to a string ~ str for join in zip"}, {"snippet": "' '.join((str(x) for x in L))", "intent": "concatenating values in list l  to a string  separate by space ~ str for join in split"}, {"snippet": "str1 = ''.join((str(e) for e in list1))", "intent": "concatenating values in list1  to a string  ~ str for join in zip"}, {"snippet": "makeitastring = ''.join(map(str, L))", "intent": "concatenating values in list l  to a string ~ str for join in"}, {"snippet": "[x for x in L if x is not None]", "intent": "remove none value from list l  ~ ! in for items if"}, {"snippet": "random.choice([1, 2, 3])", "intent": "select a random element from array  1  2  3   ~ for in np"}, {"snippet": "x = [[None for _ in range(5)] for _ in range(6)]", "intent": "creating a 5x6 matrix filled with none  and save it as  x  ~ for in np"}, {"snippet": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]", "intent": "create a new 2d array with 2 random rows from array a  ~ for in np"}, {"snippet": "A[(np.random.randint(A.shape[0], size=2)), :]", "intent": "create a new 2 dimensional array containing two random rows from array a  ~ product itertools list np"}, {"snippet": "df.groupby(df.index).sum()", "intent": "combining rows in pandas by adding their values ~ df groupby sum"}, {"snippet": "root.findall('{http://www.w3.org/2002/07/owl#}Class')", "intent": "find all owl class  tags by parsing xml with namespace ~ 'div 'a find_all soup"}, {"snippet": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))", "intent": "generate a random string of length x   containing lower cased ascii letters ~ in if join range for choice"}, {"snippet": "sys.path.append('/path/to/2014_07_13_test')", "intent": "add a path  path to 2014_07_13_test  to system path ~ os path abspath __file__"}, {"snippet": "int(round(x))", "intent": "round number x  to nearest integer ~ round 0005"}, {"snippet": "h = int(round(h))", "intent": "round number h  to nearest integer ~ round 16 int"}, {"snippet": "round(32.268907563, 3)", "intent": "round number 32 268907563 up to 3 decimal points ~ round 005"}, {"snippet": "round(value, significantDigit)", "intent": "round number value  up to  significantdigit  decimal places ~ round 005"}, {"snippet": "round(1.0005, 3)", "intent": "round number 1 0005 up to 3 decimal places ~ round 005"}, {"snippet": "round(2.0005, 3)", "intent": "round number 2 0005 up to 3 decimal places ~ round 005"}, {"snippet": "round(3.0005, 3)", "intent": "round number 3 0005 up to 3 decimal places ~ round 005"}, {"snippet": "round(4.0005, 3)", "intent": "round number 4 0005 up to 3 decimal places ~ round 005"}, {"snippet": "round(8.005, 2)", "intent": "round number 8 005 up to 2 decimal places ~ round 005"}, {"snippet": "round(7.005, 2)", "intent": "round number 7 005 up to 2 decimal places ~ round 005"}, {"snippet": "round(6.005, 2)", "intent": "round number 6 005 up to 2 decimal places ~ round 005"}, {"snippet": "round(1.005, 2)", "intent": "round number 1 005 up to 2 decimal places ~ round 005"}, {"snippet": "df['Cat1'].fillna(df['Cat2'])", "intent": "fill missing value in one column cat1  with the value of another column  cat2  ~ df 'a 'b"}, {"snippet": "logging.info('date=%s', date)", "intent": "convert the argument date  with string formatting in logging ~ m- strftime datetime y-"}, {"snippet": "logging.info('date={}'.format(date))", "intent": "log message of level info  with value of  date  in the message ~ datetime objects filter"}, {"snippet": "{k: int(v) for k, v in d.items()}", "intent": "convert values in dictionary d  into integers ~ dict in list items for"}, {"snippet": "map(sum, zip(*lists))", "intent": "sum elements at the same index of each list in list lists  ~ for in sum zip"}, {"snippet": "s.decode('hex')", "intent": "convert a string s  containing hex bytes to a hex string ~ 16 int"}, {"snippet": "binascii.a2b_hex(s)", "intent": "convert a string s  containing hex bytes to a hex string  ~ 16 int"}, {"snippet": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')", "intent": "send data http 1 0 200 ok r n r n  to socket  connection  ~ get com 'http //www requests"}, {"snippet": "connection.send('HTTP/1.0 200 OK\\r\\n\\r\\n')", "intent": "send data http 1 0 200 ok r n r n  to socket  connection   ~ get com 'http //www requests"}, {"snippet": "df['x']['C'] = 10", "intent": "set the value of cell   x    c    equal to 10 in dataframe  df  ~ df 'user sum 'x 'b groupby 'a"}, {"snippet": "np.sqrt(np.square(df).sum(axis=1))", "intent": "normalize the dataframe df  along the rows ~ df index"}, {"snippet": "sorted(set(my_list))", "intent": "remove identical items from list my_list  and sort it alphabetically ~ ! key=lambda in if sorted for"}, {"snippet": "max(enumerate(a), key=lambda x: x[1])[0]", "intent": "find the index of the element with the maximum value from a list a   ~ if in item for"}, {"snippet": "[d['Name'] for d in thisismylist]", "intent": "create a list where each element is a value of the key name  for each dictionary  d  in the list  thisismylist  ~ in if value items for key"}, {"snippet": "[(d['Name'], d['Age']) for d in thisismylist]", "intent": "create a list of tuples with the values of keys name  and  age  from each dictionary  d  in the list  thisismylist  ~ d2 in for d1 if"}, {"snippet": "model.objects.all().order_by('?')[0]", "intent": "grab one random item from a database model  in django postgresql ~ order_by mymodel objects filter"}, {"snippet": "os.system('script2.py 1')", "intent": "run python script script2 py  from another python script  passing in 1 as an argument ~ call subprocess shell=true"}, {"snippet": "re.findall('\\\\w+(?:-\\\\w+)+', text)", "intent": "python regex for hyphenated words in text  ~ findall text re split"}, {"snippet": "parser.add_argument('--conf', nargs=2, action='append')", "intent": "create variable key value pairs with argparse ~ ! in dict if items for"}, {"snippet": "random.sample(list(range(1, 16)), 3)", "intent": "get 3  unique items from a list ~ for in range"}, {"snippet": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))", "intent": "sort list strings  in alphabetical order based on the letter after percent character     in each element ~ sort key=lambda"}, {"snippet": "strings.sort(key=lambda str: re.sub('.*%', '', str))", "intent": "sort a list of strings strings  based on regex match ~ for in search re split"}, {"snippet": "listy = [[] for i in range(3)]", "intent": "create list listy  containing 3 empty lists ~ for in range"}, {"snippet": "A = np.array(sorted(A, key=tuple))", "intent": "sort numpy float array a  column by column ~ np einsum"}, {"snippet": "[(x + y) for x in '12345' for y in 'ab']", "intent": "get a list from two strings 12345  and  ab  with values as each character concatenated ~ str for join in zip"}, {"snippet": "' Hello '.strip()", "intent": "trim string  hello   ~ strip"}, {"snippet": "myString.strip()", "intent": "trim string mystring   ~ sub \\\\ re strip"}, {"snippet": "' Hello '.strip()", "intent": "trimming a string  hello   ~ findall strip re"}, {"snippet": "' Hello'.strip()", "intent": "trimming a string  hello  ~ findall strip re"}, {"snippet": "'Bob has a cat'.strip()", "intent": "trimming a string bob has a cat  ~ sub re"}, {"snippet": "'          Hello        '.strip()", "intent": "trimming a string           hello          ~ findall strip re"}, {"snippet": "str.strip()", "intent": "trimming a string str  ~ sub strip re"}, {"snippet": "myString.strip('\\n')", "intent": "trimming  n  from string  mystring  ~ sub strip re"}, {"snippet": "myString.lstrip('\\n\\r')", "intent": "left trimming  n r  from string  mystring  ~ rstrip '\\r\\n"}, {"snippet": "myString.rstrip('\\n\\t')", "intent": "right trimming  n t  from string  mystring  ~ rstrip '\\r\\n"}, {"snippet": "'  Hello\\n'.strip(' ')", "intent": "trimming a string   hello n  by space ~ sub re"}, {"snippet": "sorted(unsorted, key=lambda element: (element[1], element[2]))", "intent": "sort a list of tuples unsorted  based on two elements  second and third ~ reverse=true sorted key=lambda sum"}, {"snippet": "print(content.decode('utf8'))", "intent": "decode string content  to utf 8 code ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)", "intent": "find the index of the maximum value in the array arr  where the boolean condition in array  cond  is true ~ for in np"}, {"snippet": "pd.to_datetime(df.ID.str[1:-3])", "intent": "convert a dataframe df  s column  id  into datetime  after removing the first and last 3 letters ~ sorted df key=lambda"}, {"snippet": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])", "intent": "read csv file my csv  into a dataframe  df  with datatype of float for column  my_column  considering character  n a  as nan value ~ df read_csv csv to_csv pd"}, {"snippet": "df = pd.read_csv('my.csv', na_values=['n/a'])", "intent": "convert nan values to n a  while reading rows from a csv  read_csv  with pandas ~ df in line for csv open to_csv"}, {"snippet": "list(itertools.product(*a))", "intent": "create a list containing all cartesian products of elements in list a  ~ for in sum zip"}, {"snippet": "re.sub('[^A-Z]', '', s)", "intent": "remove uppercased characters in string s  ~ sub in print if join re for"}, {"snippet": "datetime.strptime('2011221', '%Y%W%w')", "intent": "convert string 2011221  into a datetime object using format   y w w  ~ m- strptime datetime y-"}, {"snippet": "codecs.open('myfile', 'r', 'iso-8859-1').read()", "intent": "read file myfile  using encoding  iso 8859 1  ~ open unquote parse urllib"}, {"snippet": "[f(x) for x in list]", "intent": "create a list containing elements from list list  that are predicate to function  f  ~ if in for items"}, {"snippet": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)", "intent": "regex matching 5 digit substrings not enclosed with digits in s  ~ sub re"}, {"snippet": "[item for item in a if sum(item) > 10]", "intent": "create a list containing elements of list a  if the sum of the element is greater than 10 ~ if in for items"}, {"snippet": "cents_int = int(round(float(dollars.strip('$')) * 100))", "intent": "convert currency string dollars  to decimal  cents_int  ~ 16 int"}, {"snippet": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]", "intent": "remove letters from string example_line  if the letter exist in list  bad_chars  ~ for in not if"}, {"snippet": "l = []", "intent": "creating an empty list l  ~ for in range"}, {"snippet": "l = list()", "intent": "creating an empty list l   ~ for in range"}, {"snippet": "list()", "intent": "creating an empty list ~ for in range"}, {"snippet": "[]", "intent": "creating an empty list ~ for in range"}, {"snippet": "sys.exit(0)", "intent": "properly quit a program ~ get 'https exit requests sys"}, {"snippet": "s[:4] + '-' + s[4:]", "intent": "add string    in  4th  position of a string  s  ~ for in re"}, {"snippet": "[[] for i in range(3)]", "intent": "append 3 lists in one list ~ in for 'a 'c 'b"}, {"snippet": "a = [[] for i in range(3)]", "intent": "initialize a list of empty lists a  of size 3 ~ for in range len"}, {"snippet": "requests.get(url, headers={'referer': my_referer})", "intent": "request url url  using http header    referer   my_referer   ~ get google //www requests 'http"}, {"snippet": "pylab.ylim([0, 1000])", "intent": "set the y axis range to 0  1000  in subplot using pylab ~ ax xaxis 'top plt"}, {"snippet": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)", "intent": "convert a column of list in series s  to dummies ~ series df apply pd"}, {"snippet": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))", "intent": "finding the largest delta between two integers in a list in python ~ if in for"}, {"snippet": "y = str(int(x, 16))", "intent": "convert a hex string x  to string ~ 16 for in int"}, {"snippet": "a.isdigit()", "intent": "check if string a  is an integer ~ any for in"}, {"snippet": "isdigit()", "intent": "function to check if a string is a number ~ any for in"}, {"snippet": "b.isdigit()", "intent": "check if string b  is a number ~ any for in"}, {"snippet": "pd.read_csv(StringIO(s), sep=',', comment='#')", "intent": "pandas read comma separated csv file s  and skip commented lines starting with     ~ line for in open"}, {"snippet": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))", "intent": "pandas change all the values of a column  date  into  int str x   4     ~ df for in"}, {"snippet": "sum(list_of_nums)", "intent": "sum a list of numbers list_of_nums  ~ values in sum len for"}, {"snippet": "max(lst, key=lambda x: x['score'])", "intent": "get an item from a list of dictionary lst  which has maximum value in the key  score  using lambda function ~ in if value items for list key"}, {"snippet": "soup.findAll(attrs={'name': 'description'})", "intent": "beautifulsoup find all tags with attribute name  equal to  description  ~ 'div soup"}, {"snippet": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')", "intent": "remove all spaces from a string converted from dictionary   a   1   b    as df    ~ ! in for if"}, {"snippet": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'", "intent": "convert dictionary dict  into a string formatted object ~ dict in list items for"}, {"snippet": "\"\"\"\"\"\".join(parts[1:])", "intent": "concatenate items from list parts  into a string starting from the second element ~ for in"}, {"snippet": "\"\"\",+\"\"\".join(c.rsplit('+', 1))", "intent": "insert a character    into a string in front of     character in second part of the string ~ for in"}, {"snippet": "a[np.all(a != 0, axis=1)]", "intent": "delete all rows in a numpy array a  where any value in a row is zero  0  ~ if in for np"}, {"snippet": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))", "intent": "extract only alphabetic characters from a string your string  ~ sub in if join re for"}, {"snippet": "re.split('[^a-zA-Z]*', 'your string')", "intent": "extract only characters from a string as a list ~ if join in for"}, {"snippet": "results_union = set().union(*results_list)", "intent": "get the union set from list of lists results_list  ~ for in list set"}, {"snippet": "return list(set(itertools.chain(*result_list)))", "intent": "get the union of values in list of lists result_list  ~ for in sum"}, {"snippet": "np.any(np.in1d(a1, a2))", "intent": "check if a numpy array a1  contains any element of another array  a2  ~ any for in"}, {"snippet": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "intent": "removing control characters from a string s  ~ sub in if join re for \\\\"}, {"snippet": "all(i < j for i, j in zip(a, b))", "intent": "compare if each value in list a  is less than respective index value in list  b  ~ if in for len"}, {"snippet": "driver.find_element_by_css_selector('.button.c_button.s_button').click()", "intent": "python selenium click on button  button c_button s_button  ~ find_element_by_css_selector click driver"}, {"snippet": "driver.find_element_by_css_selector('.button .c_button .s_button').click()", "intent": "python selenium click on button ~ find_element_by_css_selector click driver"}, {"snippet": "os.system('taskkill /im make.exe')", "intent": "kill a process make exe  from python script on windows ~ 'shutdown call subprocess"}, {"snippet": "print(select([my_table, func.current_date()]).execute())", "intent": "sqlalchemy select records of columns of table my_table  in addition to current date column ~ df groupby"}, {"snippet": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')", "intent": "remove duplicate characters from string ffffffbbbbbbbqqq  ~ sub ! in if re for"}, {"snippet": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)", "intent": "remove periods inbetween capital letters that aren t immediately preceeded by word character s in a string  s  using regular expressions ~ sub \\\\ re"}, {"snippet": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]", "intent": "get a list of strings split_text  with fixed chunk size  n  from a string  the_list  ~ for in range len"}, {"snippet": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')", "intent": "match string this is my string  with regex    b this string   b \r\nthen replace it with regex   markup   1  markup   ~ sub re"}, {"snippet": "pandas.set_option('display.max_columns', 7)", "intent": "output data of the first 7 columns of pandas dataframe ~ df groupby sum"}, {"snippet": "pandas.set_option('display.max_columns', None)", "intent": "display maximum output data of columns in dataframe pandas  that will fit into the screen ~ df groupby"}, {"snippet": "df.ix[df.A == 0, 'B'] = np.nan", "intent": "set the value in column b  to nan if the corresponding value in column  a  is equal to 0 in pandas dataframe  df  ~ df 'user sum 'x groupby loc"}, {"snippet": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")", "intent": "selecting element   li label input  followed by text  polishpottery  with selenium webdriver  driver  ~ find_element_by_xpath @ driver"}, {"snippet": "mylist.sort(key=operator.itemgetter('weight', 'factor'))", "intent": "sort a list of dictionaries mylist  by keys  weight  and  factor  ~ reverse=true sorted key=lambda list"}, {"snippet": "mylist.sort(key=lambda d: (d['weight'], d['factor']))", "intent": "ordering a list of dictionaries mylist  by elements  weight  and  factor  ~ reverse=true sorted key=lambda list"}, {"snippet": "{x[1]: x for x in lol}", "intent": "convert a list of lists lol  to a dictionary with key as second value of a list and value as list itself ~ dict in for items"}, {"snippet": "sorted(d, key=lambda k: d[k][1])", "intent": "sort keys of dictionary d  based on their values ~ sorted key=lambda list items"}, {"snippet": "int(round(123, -2))", "intent": "round 123 to 100 ~ print 2f round"}, {"snippet": "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)", "intent": "create file x  if file  x  does not exist ~ print path isfile os"}, {"snippet": "new_list = [x.split()[-1] for x in Original_List]", "intent": "get a list of last trailing words from another list of strings original_list  ~ if in not for"}, {"snippet": "'hello world'[::(-1)]", "intent": "reverse a string hello world  ~ findall 'hello re"}, {"snippet": "s[::(-1)]", "intent": "reverse list s  ~ reverse=true sorted key=lambda items"}, {"snippet": "''.join(reversed('foo'))", "intent": "reverse string foo  ~ sorted for in"}, {"snippet": "''.join(reversed(string))", "intent": "reverse a string string  ~ reverse=true sorted key=lambda list"}, {"snippet": "'foo'[::(-1)]", "intent": "reverse a string foo  ~ reverse=true sort key=lambda"}, {"snippet": "a_string[::(-1)]", "intent": "reverse a string a_string  ~ reverse=true sorted key=lambda"}, {"snippet": "def reversed_string(a_string):\n    return a_string[::(-1)]", "intent": "reverse a string a_string   ~ reverse=true sorted key=lambda"}, {"snippet": "''.join(reversed(s))", "intent": "reverse a string s  ~ in key=lambda for sort reverse=true split"}, {"snippet": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))", "intent": "generate a string of numbers separated by comma which is divisible by 4  with remainder  1  or  2   ~ if in for"}, {"snippet": "dict([(e[0], int(e[1])) for e in lst])", "intent": "convert list lst  of key  value pairs into a dictionary ~ for in list items"}, {"snippet": "sorted(list_of_tuples, key=lambda tup: tup[::-1])", "intent": "sorting a list of tuples list_of_tuples  where each tuple is reversed ~ reverse=true sorted key=lambda"}, {"snippet": "sorted(list_of_tuples, key=lambda tup: tup[1])", "intent": "sorting a list of tuples list_of_tuples  by second key ~ sorted key=lambda sum"}, {"snippet": "numpy.concatenate([a, b])", "intent": "concatenating two one dimensional numpy arrays a  and  b   ~ for in np zip"}, {"snippet": "for item in thelist:\n    thefile.write(('%s\\n' % item))", "intent": "writing items in list thelist  to file  thefile  ~ os path open realpath"}, {"snippet": "for item in thelist:\n    pass", "intent": "writing items in list thelist  to file  thefile   ~ os path open realpath"}, {"snippet": "pickle.dump(itemlist, outfile)", "intent": "serialize itemlist  to file  outfile  ~ open read 'rb"}, {"snippet": "outfile.write('\\n'.join(itemlist))", "intent": "writing items in list itemlist  to file  outfile  ~ open 'rb"}, {"snippet": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "intent": "update a user s name as bob marley  having id  123  in sqlalchemy ~ objects filter"}, {"snippet": "r = requests.post('http://wikipedia.org', cookies=cookie)", "intent": "send cookies cookie  in a post request to url  http   wikipedia org  with the python requests library ~ url get requests"}, {"snippet": "sys.path.insert(0, 'libs')", "intent": "insert directory libs  at the 0th index of current directory ~ dirname path os __file__"}, {"snippet": "datetime.datetime.now()", "intent": "get current date and time ~ now date relativedelta datetime months="}, {"snippet": "datetime.datetime.now().time()", "intent": "get current time ~ file time os path now ctime datetime"}, {"snippet": "strftime('%Y-%m-%d %H:%M:%S', gmtime())", "intent": "get current time in pretty format ~ m- strftime datetime now y-"}, {"snippet": "str(datetime.now())", "intent": "get current time in string format ~ strftime file os time path now y- m- datetime"}, {"snippet": "datetime.datetime.time(datetime.datetime.now())", "intent": "get current time ~ file time os path now ctime datetime"}, {"snippet": "ord('\\xff')", "intent": "convert hex  xff  to integer ~ 16 int"}, {"snippet": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1", "intent": "identify duplicated rows in columns pplnum  and  roomnum  with additional column in dataframe  df  ~ df level=0 groupby"}, {"snippet": "datetime.utcnow()", "intent": "get current utc time ~ now date relativedelta datetime months="}, {"snippet": "a[-1:] + a[:-1]", "intent": "move last item of array a  to the first position ~ for in"}, {"snippet": "df.set_index(['year', 'month', 'item']).unstack(level=-1)", "intent": "convert dataframe df  to a pivot table using column  year    month   and  item  as indexes ~ df 'month 'year"}, {"snippet": "df.pivot_table(values='value', index=['year', 'month'], columns='item')", "intent": "run a pivot with a multi index year  and  month  in a pandas data frame ~ df 'month 'year"}, {"snippet": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')", "intent": "print a rational number 3 2  ~ print 3f for in"}, {"snippet": "li1.sort(key=lambda x: not x.startswith('b.'))", "intent": "what is the best way to sort list with custom sorting parameters in python ~ in key=lambda value items sorted for list key"}, {"snippet": "range(10, 0, -1)", "intent": "iterate backwards from 10 to 0 ~ pass for in items"}, {"snippet": "name[0].firstChild.nodeValue", "intent": "get value of first child of xml node name  ~ name calendar monthrange"}, {"snippet": "thread.start_new_thread(myfunction, ('MyStringHere', 1))", "intent": "start a new thread for myfunction  with parameters  mystringhere  and 1 ~ time sleep request"}, {"snippet": "thread.start_new_thread(myfunction, ('MyStringHere', 1))", "intent": "start a new thread for myfunction  with parameters  mystringhere  and 1  ~ time sleep request"}, {"snippet": "a.index(max(a))", "intent": "get index of the first biggest element in list a  ~ for in zip"}, {"snippet": "re.sub('\\\\.(?=[^ .])', '. ', para)", "intent": "replace periods    that are not followed by periods or spaces with a period and a space      ~ sub if in for re"}, {"snippet": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "intent": "convert a string a  of letters embedded in squared brackets into embedded lists ~ '\\\\ for in \\\\ re"}, {"snippet": "[d for d in a if d['name'] == 'pluto']", "intent": "extract dictionary d  from list  a  where the value associated with the key  name  of dictionary  d  is equal to  pluto  ~ in if value items for list key"}, {"snippet": "[d for d in a if d['name'] == 'pluto']", "intent": "extract dictionary from list of dictionaries based on a key s value ~ key=lambda in if items sorted for list"}, {"snippet": "list(d.values())", "intent": "retrieve list of values from dictionary d  ~ if in list items for"}, {"snippet": "re.sub(' +', ' ', s)", "intent": "replace occurrences of two whitespaces or more with one whitespace    in string  s  ~ sub for in re split"}, {"snippet": "os.chmod('my_script.sh', 484)", "intent": "change the mode of file my_script sh  to permission number 484 ~ open 'rb"}, {"snippet": "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "intent": "write pandas dataframe df  to the file  c   data  t csv  without row names ~ df csv to_csv"}, {"snippet": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()", "intent": "remove all words which contains number from a string words  using regex ~ if in for re"}, {"snippet": "dogtail.rawinput.click(100, 100)", "intent": "control the keyboard and mouse with dogtail in linux ~ 'shutdown call subprocess"}, {"snippet": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')", "intent": "parse date string 2009 05 13 19 19 30  0400  using format   y  m  d  h  m  s  z  ~ fuzzy=true datetime m/ dparser 'monkey strptime m- d/ y- banana love parse"}, {"snippet": "re.search('\\\\bis\\\\b', String).start()", "intent": "get the position of a regex match for word is  in a string  string  ~ if in for re"}, {"snippet": "re.search('is', String).start()", "intent": "get the position of a regex match is  in a string  string  ~ if in for re"}, {"snippet": "tuple(map(int, input().split(',')))", "intent": "input an integer tuple from user ~ input in for split"}, {"snippet": "tuple(int(x.strip()) for x in input().split(','))", "intent": "input a tuple of integers from user ~ input in for split"}, {"snippet": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')", "intent": "replace unicode character  u2022  in string  str  with     ~ sub re text"}, {"snippet": "str.decode('utf-8').replace('\\u2022', '*')", "intent": "replace unicode characters   u2022  in string  str  with     ~ sub re text"}, {"snippet": "np.zeros((3, 3)).ravel()", "intent": "convert ndarray with shape 3x3 to array ~ np array"}, {"snippet": "import platform\nplatform.system()", "intent": "get os name ~ os path"}, {"snippet": "import platform\nplatform.release()", "intent": "get os version ~ os path"}, {"snippet": "print(os.name)", "intent": "get the name of the os ~ os path realpath"}, {"snippet": "[x for x in my_list if not x.startswith('#')]", "intent": "what is the most pythonic way to exclude elements of a list that start with a specific character ~ if in not for"}, {"snippet": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')", "intent": "replace fields delimited by braces   in string  day old bread  50  sale  0   with string  today  ~ df datetime strptime"}, {"snippet": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])", "intent": "get a minimum value from a list of tuples list  with values of type  string  and  float  with nan ~ for in sum"}, {"snippet": "a = [(sum(x) / len(x)) for x in zip(*a)]", "intent": "find average of a nested list a  ~ sum values in for len"}, {"snippet": "logging.info('Log message', extra={'app_name': 'myapp'})", "intent": "log info message log message  with attributes    app_name    myapp    ~ raise valueerror"}, {"snippet": "df.applymap(lambda x: isinstance(x, (int, float)))", "intent": "replace values of dataframe df  with true if numeric ~ replace if in for df"}, {"snippet": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "intent": "sort list l  based on its elements  digits ~ sorted key=lambda items"}, {"snippet": "self.root.destroy()", "intent": "close the window in tkinter ~ 'shutdown call subprocess"}, {"snippet": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)", "intent": "get mean of columns 2  5  6  7  8  for all rows in dataframe  df  ~ df axis=1 mean columns"}, {"snippet": "df[df.index.map(lambda x: x[1].endswith('0630'))]", "intent": "filter dataframe df  by sub level index  0630  in pandas ~ df index"}, {"snippet": "db.session.delete(page)", "intent": "flask sqlalchemy delete row page  ~ url '^"}, {"snippet": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')", "intent": "format a string u andr xc3 xa9   that has unicode characters ~ chr in encode join 'utf-8 for"}, {"snippet": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')", "intent": "convert a unicode andr xc3 xa9  to a string ~ chr in encode decode join for"}, {"snippet": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass", "intent": "list all files in directory    ~ os path realpath __file__"}, {"snippet": "os.listdir(path)", "intent": "list all files in directory path  ~ dirname path abspath os"}, {"snippet": "os.rename(dir, dir + '!')", "intent": "rename file dir  to  dir        ~ os path"}, {"snippet": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))", "intent": "insert a character    after every two elements in a string  s  ~ for in split"}, {"snippet": "print('%.3f' % 3.1415)", "intent": "printing numbers rounding up to third decimal place ~ print 2f round"}, {"snippet": "data[0]['f'] = var", "intent": "add variable var  to key  f  of first element in json data  data  ~ for in"}, {"snippet": "print(a_module.__file__)", "intent": "get the path of module a_module  ~ dirname path os __file__"}, {"snippet": "print(os.getcwd())", "intent": "get the path of the current python module ~ dirname path os __file__"}, {"snippet": "path = os.path.abspath(amodule.__file__)", "intent": "get the path of the python module amodule  ~ os path abspath __file__"}, {"snippet": "self.myList.extend([0] * (4 - len(self.myList)))", "intent": "fill list mylist  with 4 0 s ~ for in range"}, {"snippet": "df[~df.index.duplicated()]", "intent": "drop duplicate indexes in a pandas data frame df  ~ df values 'a tolist"}, {"snippet": "foo(*i)", "intent": "unpack elements of list i  as arguments into function  foo  ~ for in zip"}, {"snippet": "[('%.2d' % i) for i in range(16)]", "intent": "generate list of numbers in specific format using string formatting precision ~ print 3f for in"}, {"snippet": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]", "intent": "sort dictionary mydict  in descending order based on the sum of each value in it ~ reverse=true sorted key=lambda items"}, {"snippet": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))", "intent": "get top 3  items from a dictionary  mydict  with largest sum of values ~ for in sum"}, {"snippet": "['a', 'b'].index('b')", "intent": "get index of character b  in list    a    b    ~ for in zip"}, {"snippet": "plt.setp(legend.get_title(), fontsize='xx-small')", "intent": "set font size of axis legend of plot plt  to  xx small  ~ ax xaxis 'top plt"}, {"snippet": "int('  23  ')", "intent": "python convert a string to an integer ~ for in int"}, {"snippet": "[x[1] for x in elements]", "intent": "extract the 2nd elements from a list of tuples ~ if in item for"}, {"snippet": "np.diag(np.rot90(array))", "intent": "get the opposite diagonal of a numpy array array  ~ np array"}, {"snippet": "list(chain.from_iterable(a))", "intent": "flatten list of tuples a  ~ for in item"}, {"snippet": "re.sub('\\\\s{2,}', '|', line.strip())", "intent": "substitute two or more whitespace characters with character    in string  line  ~ sub a-z re"}, {"snippet": "print(('%.2f' % a))", "intent": "print float a  with two decimal points ~ round for in"}, {"snippet": "print(('{0:.2f}'.format(a)))", "intent": "print float a  with two decimal points  ~ round for in"}, {"snippet": "print(('{0:.2f}'.format(round(a, 2))))", "intent": "print float a  with two decimal points   ~ round for in"}, {"snippet": "print(('%.2f' % round(a, 2)))", "intent": "print float a  with two decimal points    ~ round for in"}, {"snippet": "('%.2f' % 13.9499999)", "intent": "limit float 13 9499999 to two decimal points ~ round 005"}, {"snippet": "('%.2f' % 3.14159)", "intent": "limit float 3 14159 to two decimal points ~ round 0005"}, {"snippet": "float('{0:.2f}'.format(13.95))", "intent": "limit float 13 949999999999999 to two decimal points ~ round 005"}, {"snippet": "'{0:.2f}'.format(13.95)", "intent": "limit float 13 949999999999999 to two decimal points ~ round 005"}, {"snippet": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')", "intent": "load a tsv file c    trainsetrel3 txt  into a pandas data frame ~ open txt"}, {"snippet": "dateutil.parser.parse('2013/09/11 00:17 +0900')", "intent": "set utc offset by 9 hrs ahead for date 2013 09 11 00 17  ~ fuzzy=true datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))", "intent": "pass a list of parameters   1  2  3    to sql queue  select   from table where column in  s   ~ date relativedelta months= 10"}, {"snippet": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])", "intent": "sum all elements of two dimensions list   1  2  3  4    2  4  5  6     ~ for in zip"}, {"snippet": "next(iter(dict.values()))", "intent": "retrieve an arbitrary value from dictionary dict  ~ keys for in lod list"}, {"snippet": "next(iter(list(dict.values())))", "intent": "access an arbitrary value from dictionary dict  ~ sorted for in key=lambda list"}, {"snippet": "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)", "intent": "group dataframe df  by columns  month  and  fruit  ~ groupby df 'month 'year"}, {"snippet": "sorted(mylist, key=lambda x: order.index(x[1]))", "intent": "sort list mylist  of tuples by arbitrary key from list  order  ~ reverse=true sorted key=lambda list"}, {"snippet": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])", "intent": "sort a list of dictionary persons  according to the key    passport    birth_info    date    ~ sorted key=lambda list items"}, {"snippet": "urlparse.urldefrag('http://www.address.com/something#something')", "intent": "remove the fragment identifier  something  from a url  http   www address com something something  ~ urlopen //www 'http urllib request"}, {"snippet": "urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')", "intent": "download to a directory  path to dir filename ext  from source  http   example com file ext  ~ com/file urllib 'http open request"}, {"snippet": "list(set(frozenset(item) for item in L))", "intent": "remove all duplicates from a list of sets l  ~ ! in for if"}, {"snippet": "[set(item) for item in set(frozenset(item) for item in L)]", "intent": "remove duplicates from a list of sets l  ~ ! in for if"}, {"snippet": "p.terminate()", "intent": "terminate process p  ~ system os"}, {"snippet": "del mylist[:]", "intent": "delete all values in a list mylist  ~ if in not for"}, {"snippet": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)", "intent": "throw an error window in python in windows ~ system os"}, {"snippet": "str_list = list([_f for _f in str_list if _f])", "intent": "remove empty strings from list str_list  ~ for in range"}, {"snippet": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)", "intent": "remove newlines and whitespace from string yourstring  ~ sub in if join re for \\\\"}, {"snippet": "re.sub('\\\\.[^.]+$', '', s)", "intent": "remove the last dot and all text beyond it in string s  ~ sub in if join re for"}, {"snippet": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]", "intent": "remove elements from an array a  that are in array  b  ~ if in not for"}, {"snippet": "a.to_csv('test.csv', cols=['sum'])", "intent": "write column sum  of dataframe  a  to csv file  test csv  ~ df csv to_csv"}, {"snippet": "exec(compile(open('test2.py').read(), 'test2.py', 'exec'))", "intent": "call a python script test2 py  ~ exec 'exec read py open compile call subprocess shell=true"}, {"snippet": "subprocess.call('test1.py', shell=True)", "intent": "call a python script test1 py  ~ exec os system 'exec open py read compile call subprocess shell=true"}, {"snippet": "sorted(zipped, key=lambda x: x[1])", "intent": "sort a zipped list zipped  using lambda function ~ for in"}, {"snippet": "zipped.sort(key=lambda t: t[1])", "intent": "how do i sort a zipped list in python ~ for in zip"}, {"snippet": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)", "intent": "sort a dictionary y  by value then by key ~ sorted key=lambda list items"}, {"snippet": "soup.find_all('div', class_='crBlock ')", "intent": "using beautifulsoup to select div blocks within html soup  ~ 'div 'a find_all soup"}, {"snippet": "[element for i, element in enumerate(centroids) if i not in index]", "intent": "remove elements from list centroids  the indexes of which are in array  index  ~ if in not for"}, {"snippet": "list(set(listA) & set(listB))", "intent": "list duplicated elements in two lists lista  and  listb  ~ for in zip"}, {"snippet": "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')", "intent": "download http   randomsite com file gz  from http and save as  file gz  ~ com/file urllib 'http open request"}, {"snippet": "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')", "intent": "download file from http url http   randomsite com file gz  and save as  file gz  ~ urllib 'http urlretrieve request"}, {"snippet": "file_name = wget.download(file_url)", "intent": "download file from http url file_url  ~ urllib 'http urlretrieve request"}, {"snippet": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])", "intent": "set an array of unicode characters  u  xe9   u  xe3   u  xe2    as labels in matplotlib  ax  ~ plt"}, {"snippet": "list(itertools.product(list(range(-x, y)), repeat=dim))", "intent": "get a list of all integer points in a dim  dimensional hypercube with coordinates from   x  to  y  for all dimensions ~ np"}, {"snippet": "print(s.encode('unicode_escape'))", "intent": "convert unicode string s  into string literals ~ chr join in for decode"}, {"snippet": "'Hello %s' % ', '.join(my_args)", "intent": "how to format a list of arguments my_args  into a string ~ for join in list items"}, {"snippet": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)", "intent": "search and split string aaa bbb ccc ddd eee fff  by delimiter   ddd   ~ re split"}, {"snippet": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)", "intent": "regex search and split string aaa bbb ccc ddd eee fff  by delimiter   d d d   ~ re split"}, {"snippet": "pd.DataFrame(d)", "intent": "convert a list of dictionaries d  to pandas data frame ~ concat axis=1 tolist df pd"}, {"snippet": "\"\"\"This is a string\"\"\".split()", "intent": "split string this is a string  into words that do not contain whitespaces ~ sub if in for re"}, {"snippet": "\"\"\"This     is a     string\"\"\".split()", "intent": "split string this     is a     string  into words that does not contain whitespaces ~ sub if not pass re"}, {"snippet": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)", "intent": "python pandas apply a function with arguments to a series ~ groupby agg df"}, {"snippet": "woduplicates = list(set(lseperatedOrblist))", "intent": "remove all duplicate items from a list lseperatedorblist  ~ ! in for if"}, {"snippet": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "intent": "sum of product of combinations in a list l  ~ for in sum zip"}, {"snippet": "re.compile('{}-\\\\d*'.format(user))", "intent": "regular expression for validating string user  containing a sequence of characters ending with     followed by any number of digits  ~ sub for in re if"}, {"snippet": "[float(i) for i in lst]", "intent": "convert all of the items in a list lst  to float ~ for in lst int"}, {"snippet": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])", "intent": "multiply all items in a list  1  2  3  4  5  6   together ~ for in list"}, {"snippet": "writer.writerow(A)", "intent": "write a tuple of tuples a  to a csv file using python ~ read open df csv to_csv"}, {"snippet": "writer.writerows(A)", "intent": "write all tuple of tuples a  at once into csv file ~ open line in for"}, {"snippet": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')", "intent": "python format string      s     to have  foo  and  bar  in the first and second positions ~ for in zip key=lambda"}, {"snippet": "example = [x.replace('\\r\\n', '') for x in example]", "intent": "truncate  r n  from each string in a list of string  example  ~ for in rstrip"}, {"snippet": "[i.partition('\\t')[-1] for i in l if '\\t' in i]", "intent": "split elements of a list l  by   t  ~ for in split"}, {"snippet": "re.search('Test(.*)print', testStr, re.DOTALL)", "intent": "search for regex pattern test    print  in string  teststr  including new line character   n  ~ findall re"}, {"snippet": "next = driver.find_element_by_css_selector('li.next>a')", "intent": "find button that is in li class next  and assign it to variable  next  ~ print for in"}, {"snippet": "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size", "intent": "get the size of file  c   python27  lib  genericpath py  ~ exec os 'exec path open py read compile"}, {"snippet": "imtag = re.match('<img.*?>', line).group(0)", "intent": "return a string from a regex match with pattern  img      in string  line  ~ findall re"}, {"snippet": "os.rename('Joe Blow', 'Blow, Joe')", "intent": "rename a folder joe blow  to  blow  joe  ~ os path"}, {"snippet": "re.findall('(?=(\\\\w\\\\w))', 'hello')", "intent": "find overlapping matches from a string hello  using regex ~ findall re compile '^"}, {"snippet": "bin(173)", "intent": "convert 173 to binary string ~ 16 for in int"}, {"snippet": "int('01010101111', 2)", "intent": "convert binary string 01010101111  to integer ~ 16 for in int"}, {"snippet": "int('010101', 2)", "intent": "convert binary string 010101  to integer ~ 16 for in int"}, {"snippet": "int('0b0010101010', 2)", "intent": "convert binary string 0b0010101010  to integer ~ 16 for in int"}, {"snippet": "bin(21)", "intent": "convert 21 to binary string ~ 16 int"}, {"snippet": "int('11111111', 2)", "intent": "convert binary string 11111111  to integer ~ 16 for in int"}, {"snippet": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)", "intent": "delete all digits in string s  that are not directly attached to a word character ~ sub any for in re"}, {"snippet": "re.sub('\\\\b\\\\d+\\\\b', '', s)", "intent": "delete digits at the end of string s  ~ str 's find"}, {"snippet": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)", "intent": "delete self contained digits from string s  ~ for join in re if"}, {"snippet": "s.split(':', 1)[1]", "intent": "truncate string s  up to character     ~ sub re"}, {"snippet": "print(s.split(','))", "intent": "print a string s  by splitting with comma     ~ for in strip split"}, {"snippet": "mystring.split(',')", "intent": "create list by splitting string  mystring  using     as delimiter ~ for in strip split"}, {"snippet": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "intent": "remove parentheses only around single words in a string s  using regex ~ sub in if join re for \\\\"}, {"snippet": "webbrowser.open_new(url)", "intent": "webbrowser open url url  ~ com/file urllib 'http open request"}, {"snippet": "webbrowser.open('http://example.com')", "intent": "webbrowser open url http   example com  ~ com/file urllib 'http request"}, {"snippet": "self.pushButton.setStyleSheet('background-color: red')", "intent": "change the background colour of the button pushbutton  to red ~ system os"}, {"snippet": "[x(y) for x, y in zip(functions, values)]", "intent": "apply a list of functions named functions  over a list of values named  values  ~ dict in for"}, {"snippet": "wx.TextCtrl(self, -1, size=(300, -1))", "intent": "modify the width of a text control as 300  keeping default height in wxpython ~ 'utf-8 decode open"}, {"snippet": "imshow(imageArray, cmap='Greys_r')", "intent": "display a grayscale image from array of pixels imagearray  ~ png savefig np plt"}, {"snippet": "df.fillna(0)", "intent": "replace all the nan values with 0 in a pandas dataframe df  ~ df replace 'a"}, {"snippet": "df.toPandas().to_csv('mycsv.csv')", "intent": "export a table dataframe df  in pyspark to csv  mycsv csv  ~ df csv to_csv"}, {"snippet": "df.write.csv('mycsv.csv')", "intent": "write dataframe df  to csv file  mycsv csv  ~ df csv to_csv"}, {"snippet": "sum(x[1] for x in structure)", "intent": "get the sum of each second value from a list of tuple structure  ~ for in sum zip"}, {"snippet": "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())", "intent": "sum the 3 largest integers in groupby by stname  and  county_pop  ~ for in sum"}, {"snippet": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')", "intent": "parse string 21 11 06 16 30  according to format   d  m  y  h  m  ~ m/ strftime strptime d/ y- m- datetime"}, {"snippet": "os.path.dirname(os.path.abspath(__file__))", "intent": "get current script directory ~ dirname path os __file__"}, {"snippet": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)", "intent": "double each character in string text read    ~ sub re text"}, {"snippet": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))", "intent": "concatenate strings in tuple   a    b    c    d    g    x    r    e    into a single string ~ for in list items"}, {"snippet": "os.path.dirname(os.path.abspath(__file__))", "intent": "get full path of current directory ~ os path abspath __file__"}, {"snippet": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)", "intent": "variable number of digits digits  in variable  value  in format string   0   1     ~ if in for"}, {"snippet": "self.request.url", "intent": "get current requested url ~ url get requests"}, {"snippet": "random_choice = random.choice(choices)", "intent": "get a random item from list choices  ~ ! in for if"}, {"snippet": "length = sum(len(s) for s in strings)", "intent": "sum the length of all strings in a list strings  ~ for in sum"}, {"snippet": "s = sorted(s, key=lambda x: (x[1], x[2]))", "intent": "sort a list s  by first and second attributes ~ reverse=true sorted key=lambda sum"}, {"snippet": "s.sort(key=operator.itemgetter(1, 2))", "intent": "sort a list of lists s  by second and third element in each list  ~ sorted key=lambda sum"}, {"snippet": "con.commit()", "intent": "mysql commit current transaction ~ os path __file__"}, {"snippet": "[k for k in lst if 'ab' in k]", "intent": "filtering out strings that contain ab  from a list of strings  lst  ~ if in not for"}, {"snippet": "output = ''.join(item[0].upper() for item in input.split())", "intent": "find the first letter of each element in string input  ~ if in for"}, {"snippet": "CustomPK._meta.pk.name", "intent": "get name of primary field name  of django model  custompk  ~ order_by mymodel objects filter"}, {"snippet": "len(s.split())", "intent": "count the number of words in a string s  ~ if in for"}, {"snippet": "np.einsum('ji,i->j', a, b)", "intent": "multiply array a  and array  b respective elements then sum each row of the new array ~ for in sum zip"}, {"snippet": "sys.version", "intent": "check python version ~ print path os"}, {"snippet": "sys.version_info", "intent": "check python version ~ print path os"}, {"snippet": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))", "intent": "format number 1000000000 0 using latex notation ~ m/ format datetime d/ strptime"}, {"snippet": "x = [[] for i in range(3)]", "intent": "initialize a list of empty lists x  of size 3 ~ for in range len"}, {"snippet": "{{my_variable | forceescape | linebreaks}}", "intent": "apply jinja2 filters forceescape  and  linebreaks  on variable  my_variable  ~ __init__ filter objects super self"}, {"snippet": "zip(*[(1, 4), (2, 5), (3, 6)])", "intent": "zip a list of tuples   1  4    2  5    3  6    into a list of tuples according to original tuple index ~ in 'c 'b for zip 'a"}, {"snippet": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]", "intent": "split a list of tuples data  into sub lists of the same tuple field using itertools ~ lst2 for in lst zip"}, {"snippet": "list('hello')", "intent": "convert a string into a list ~ for '1 in map int"}, {"snippet": "df['A_perc'] = df['A'] / df['sum']", "intent": "create new column a_perc  in dataframe  df  with row values equal to the value in column  a  divided by the value in column  sum  ~ sum groupby 'user 'x df"}, {"snippet": "os.walk(directory)", "intent": "getting a list of all subdirectories in the directory directory  ~ os path realpath __file__"}, {"snippet": "[x[0] for x in os.walk(directory)]", "intent": "get a list of all subdirectories in the directory directory  ~ os path realpath __file__"}, {"snippet": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}", "intent": "update all values associated with key i  to string  updated  if value  j  is not equal to  none  in dictionary  d  ~ if in list items for"}, {"snippet": "dict((k, 'updated') for k, v in d.items() if v is None)", "intent": "filter a dictionary d  to remove keys with value none and replace other values with  updated  ~ if in list items for"}, {"snippet": "dict((k, 'updated') for k, v in d.items() if v != 'None')", "intent": "filter a dictionary d  to remove keys with value  none  and replace other values with  updated  ~ if in list items for"}, {"snippet": "df.groupby(key_columns).size()", "intent": "count number of rows in a group key_columns  in pandas groupby object  df  ~ df groupby sum"}, {"snippet": "result = [sum(b) for b in a]", "intent": "return list result  of sum of elements of each list  b  in list of lists  a  ~ for in sum zip"}, {"snippet": "any(d['site'] == 'Superuser' for d in data)", "intent": "what s the best way to search for a python dictionary value in a list of dictionaries ~ in value items for 'my key lower"}, {"snippet": "nodes = [[Node() for j in range(cols)] for i in range(rows)]", "intent": "create a 2d array of node  objects with dimensions  cols  columns and  rows  rows ~ for in np"}, {"snippet": "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')", "intent": "replace extension  txt  in basename   home user somefile txt  with extension   jpg  ~ os path open txt"}, {"snippet": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)", "intent": "set the resolution of a monitor as fullscreen  in pygame ~ png savefig plt"}, {"snippet": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))", "intent": "format float 3 5e 20   to   3 5   times 10  20    and set as title of matplotlib plot  ax  ~ fuzzy=true datetime timedelta dparser 'monkey banana love parse"}, {"snippet": "print(os.path.getmtime('/tmp'))", "intent": "get the age of directory or file    tmp  in seconds  ~ os path realpath __file__"}, {"snippet": "today.strftime('%B')", "intent": "how to get month name of datetime today  ~ date strftime today relativedelta months= datetime"}, {"snippet": "today.strftime('%B')", "intent": "get month name from a datetime object today  ~ date relativedelta datetime today months="}, {"snippet": "[j for i in x for j in i]", "intent": "convert nested list x  into a flat list ~ for in list items"}, {"snippet": "print(list(itertools.chain.from_iterable(a)))", "intent": "get each value from a list of lists a  using itertools ~ for in sum zip"}, {"snippet": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')", "intent": "convert date string january 11  2010   into day of week ~ fuzzy=true datetime strftime dparser 'monkey strptime m- y- banana love parse"}, {"snippet": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')", "intent": "convert date string to day of week ~ m- strftime datetime now y-"}, {"snippet": "a.remove('b')", "intent": "remove item b  in list  a  ~ if in not for"}, {"snippet": "a.remove(c)", "intent": "remove item c  in list  a  ~ if in not for"}, {"snippet": "a.remove(6)", "intent": "delete the element 6 from list a  ~ if in for"}, {"snippet": "a.remove(6)", "intent": "delete the element 6 from list a   ~ if in for"}, {"snippet": "if (c in a):\n    a.remove(c)", "intent": "delete the element c  from list  a  ~ if in not for"}, {"snippet": "try:\n    a.remove(c)\nexcept ValueError:\n    pass", "intent": "delete the element c  from list  a   ~ if in not for"}, {"snippet": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')", "intent": "get all matching patterns a   a  from a string  a 1 a 2 a 3 a 4 a   ~ for in"}, {"snippet": "np.einsum('ij,kj->jik', X, X)", "intent": "outer product of each column of a 2d x  array to form a 3d array  x  ~ in np for product itertools list"}, {"snippet": "some_list[(-1)]", "intent": "getting the last element of list some_list  ~ for in"}, {"snippet": "some_list[(-2)]", "intent": "getting the second to last element of list some_list  ~ for in"}, {"snippet": "some_list[(- n)]", "intent": "gets the n  th to last element in list  some_list  ~ for in"}, {"snippet": "alist[(-1)]", "intent": "get the last element in list alist  ~ for in"}, {"snippet": "astr[(-1)]", "intent": "get the last element in list astr  ~ for in"}, {"snippet": "print([u for v in [[i, i] for i in range(5)] for u in v])", "intent": "make a list of integers from 0 to 5  where each second element is a duplicate of the previous element ~ for in range"}, {"snippet": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]", "intent": "create a list of integers with duplicate values  0  0  1  1  2  2  3  3  4  4   ~ for in"}, {"snippet": "[(i // 2) for i in range(10)]", "intent": "create a list of integers from 1 to 5 with each value duplicated ~ for in range"}, {"snippet": "s[s.find('\\n') + 1:s.rfind('\\n')]", "intent": "remove first and last lines of string s  ~ for in split"}, {"snippet": "{(x ** 2) for x in range(100)}", "intent": "create dict of squared int values in range of 100 ~ for in lst range int"}, {"snippet": "zip(*[[1, 2], [3, 4], [5, 6]])", "intent": "zip lists  1  2    3  4    5  6   in a list ~ list zip"}, {"snippet": "zip(*[[1, 2], [3, 4], [5, 6]])", "intent": "zip lists in a list  1  2    3  4    5  6   ~ list zip"}, {"snippet": "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))", "intent": "request page https   www mysite com   with credentials of username  username  and password  pwd  ~ get urlopen urllib com //www 'http requests request"}, {"snippet": "x[2:]", "intent": "get a new string from the 3rd character to the end of the string x  ~ for in"}, {"snippet": "x[:2]", "intent": "get a new string including the first two characters of string x  ~ for in split"}, {"snippet": "x[:(-2)]", "intent": "get a new string including all but the last character of string x  ~ for in re"}, {"snippet": "x[(-2):]", "intent": "get a new string including the last two characters of string x  ~ for in split"}, {"snippet": "x[2:(-2)]", "intent": "get a new string with the 3rd to the second to last characters of string x  ~ for in"}, {"snippet": "some_string[::(-1)]", "intent": "reverse a string some_string  ~ decode 'utf8"}, {"snippet": "'H-e-l-l-o- -W-o-r-l-d'[::2]", "intent": "select alternate characters of h e l l o   w o r l d  ~ for in re"}, {"snippet": "s = s[beginning:(beginning + LENGTH)]", "intent": "select a substring of s  beginning at  beginning  of length  length  ~ in find re str 's for"}, {"snippet": "sys.exit()", "intent": "terminate the program ~ os sys exit"}, {"snippet": "quit()", "intent": "terminate the program ~ os sys exit"}, {"snippet": "sys.exit('some error message')", "intent": "terminating a python script with error message some error message  ~ call subprocess shell=true"}, {"snippet": "data['City'].encode('ascii', 'ignore')", "intent": "encode value of key city  in dictionary  data  as  ascii   ignoring non ascii characters ~ sub in ord value items re for 'my key lower"}, {"snippet": "psutil.cpu_percent()\npsutil.virtual_memory()", "intent": "get current cpu and ram usage ~ os path __file__"}, {"snippet": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))", "intent": "get current ram usage of current program ~ os path abspath __file__"}, {"snippet": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))", "intent": "print cpu and memory usage ~ os var1 var2 var3"}, {"snippet": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))", "intent": "read a ragged csv file d  temp tt csv  using  names  parameter in pandas ~ df csv to_csv"}, {"snippet": "df.stack().groupby(level=0).first()", "intent": "get first non null value per each row from dataframe df  ~ df groupby sum"}, {"snippet": "\"\"\"{0} {1}\"\"\".format(10, 20)", "intent": "print two numbers 10  and  20  using string formatting ~ print for in range"}, {"snippet": "\"\"\"{1} {ham} {0} {foo} {1}\"\"\".format(10, 20, foo='bar', ham='spam')", "intent": "replace placeholders in string  1   ham   0   foo   1   with arguments   10  20  foo  bar   ham  spam    ~ for in"}, {"snippet": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]", "intent": "create list changed_list   containing elements of list  original_list  whilst converting strings containing digits to integers ~ if in for"}, {"snippet": "dict(zip(keys, zip(*data)))", "intent": "get a dictionary with keys from one list keys  and values from other list  data  ~ if in for items"}, {"snippet": "apple.decode('iso-8859-1').encode('utf8')", "intent": "convert string apple  from iso 8859 1 latin1 to utf 8 ~ m/ decode datetime 'utf8 strptime"}, {"snippet": "df.to_csv('filename.csv', header=False)", "intent": "exclude column names when writing dataframe df  to a csv file  filename csv  ~ df csv to_csv"}, {"snippet": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))", "intent": "escape character    in string   0   15   1   15   2   8    while using function  format  with arguments    1    2    3    ~ format for in"}, {"snippet": "max(ld, key=lambda d: d['size'])", "intent": "get dictionary with max value of key size  in list of dicts  ld  ~ in sum 'n 'l for bigdict 'm"}, {"snippet": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')", "intent": "format parameters b  and  a  into plcaeholders in string   0   w  2  b 1   w  2  quarter  ~ strftime findall re y- m- datetime"}, {"snippet": "user = models.ForeignKey('User', unique=True)", "intent": "django create a foreign key column user  and link it to table  user  ~ objects filter"}, {"snippet": "re.compile('^([^A]*)AA([^A]|AA)*$')", "intent": "write a regex pattern to match even number of letter a  ~ findall re"}, {"snippet": "b = np.concatenate((a, a), axis=0)", "intent": "join numpy array b  with numpy array  a  along axis 0 ~ np einsum"}, {"snippet": "sorted(l, key=lambda x: x.replace('0', 'Z'))", "intent": "custom sort an alphanumeric list l  ~ reverse=true sorted key=lambda list"}, {"snippet": "ax.set_yscale('log')", "intent": "plot logarithmic axes with matplotlib ~ ax xaxis 'top plt"}, {"snippet": "os.environ['HOME']", "intent": "access environment variable home  ~ print environ os"}, {"snippet": "os.environ['HOME']", "intent": "get value of environment variable home  ~ print environ os"}, {"snippet": "print(os.environ)", "intent": "print all environment variables ~ os print environ"}, {"snippet": "os.environ", "intent": "get all environment variables ~ print environ os"}, {"snippet": "print(os.environ.get('KEY_THAT_MIGHT_EXIST'))", "intent": "get value of the environment variable key_that_might_exist  ~ print environ os"}, {"snippet": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))", "intent": "get value of the environment variable key_that_might_exist  with default value  default_value  ~ print environ os"}, {"snippet": "print(os.environ.get('HOME', '/home/username/'))", "intent": "get value of the environment variable home  with default value   home username   ~ print environ os"}, {"snippet": "print(dict([s.split('=') for s in my_list]))", "intent": "create a dictionary containing each string in list my_list  split by     as a key value pairs ~ for in items"}, {"snippet": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))", "intent": "find the index of element closest to number 11 5 in list a  ~ if in for"}, {"snippet": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')", "intent": "find element a  that contains string  text a  in file  root  ~ if in not for"}, {"snippet": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')", "intent": "find the a tag in html  root  which starts with the text  text a   and assign it to  e  ~ for in not re if"}, {"snippet": "e = root.xpath('.//a[text()=\"TEXT A\"]')", "intent": "find the element that holds string text a  in file  root  ~ if in not for"}, {"snippet": "c = [b[i] for i in index]", "intent": "create list c  containing items from list  b  whose index is in list  index  ~ if in for items"}, {"snippet": "np.dot(a[:, (None)], b[(None), :])", "intent": "get the dot product of two one dimensional numpy arrays ~ for in np zip"}, {"snippet": "np.outer(a, b)", "intent": "multiplication of two 1 dimensional arrays in numpy ~ for in np"}, {"snippet": "subprocess.call(['./abc.py', arg1, arg2])", "intent": "execute a file   abc py  with arguments  arg1  and  arg2  in python shell ~ call subprocess shell=true"}, {"snippet": "df[['value']].fillna(df.groupby('group').transform('mean'))", "intent": "replace nan values in column  value  with the mean of data in column  group  of dataframe  df  ~ df groupby sum"}, {"snippet": "re.sub('(.)(?=.)', '\\\\1-', s)", "intent": "separate each character in string s  by     ~ split for in int"}, {"snippet": "re.sub('(?<=.)(?=.)', '-', str)", "intent": "concatenate    in between characters of string  str  ~ str findall 's find re"}, {"snippet": "i, j = np.where(a == value)", "intent": "get the indexes of the x and y axes in numpy array np  where variable  a  is equal to variable  value  ~ df np 'b"}, {"snippet": "print(collections.Counter(s).most_common(1)[0])", "intent": "print letter that appears most frequently in string s  ~ if in for re"}, {"snippet": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])", "intent": "find float number proceeding sub string par  in string  dir  ~ in if join find str for isdigit"}, {"snippet": "re.findall('[^a]', 'abcd')", "intent": "get all the matches from a string abcd  if it begins with a character  a  ~ sub if in for re"}, {"snippet": "print([item for item in dir(adfix) if not item.startswith('__')])", "intent": "get a list of variables from module adfix py  in current module  ~ os path abspath __file__"}, {"snippet": "[x[0] for x in rows]", "intent": "get the first element of each tuple in a list rows  ~ for in sum"}, {"snippet": "res_list = [x[0] for x in rows]", "intent": "get a list res_list  of the first elements of each tuple in a list of tuples  rows  ~ for in sum"}, {"snippet": "pd.concat([x] * 5, ignore_index=True)", "intent": "duplicate data in pandas dataframe x  for 5 times ~ df index"}, {"snippet": "pd.concat([x] * 5)", "intent": "get a repeated pandas data frame object x  by  5  times ~ df 'a"}, {"snippet": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])", "intent": "sort json ips_data  by a key  data_two  ~ sorted key=lambda list items"}, {"snippet": "pd.read_json(elevations)", "intent": "read json elevations  to pandas dataframe  df  ~ df csv to_csv"}, {"snippet": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "intent": "generate a random number in 1 to 7 with a given distribution 0 1  0 05  0 05  0 2  0 4  0 2  ~ list zip"}, {"snippet": "df.loc[df['Value'].idxmax()]", "intent": "return rows of data associated with the maximum value of column value  in dataframe  df  ~ df groupby sum"}, {"snippet": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]", "intent": "find recurring patterns in a string 42344343434  ~ findall re"}, {"snippet": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='<f4')", "intent": "convert binary string  x00 x00 x80  x00 x00 x00  x00 x00   x00 x00 x80   to numpy array ~ struct unpack int"}, {"snippet": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')", "intent": "convert binary string to numpy array ~ np for in array int"}, {"snippet": "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))", "intent": "insert variables  var1  var2  var3   into sql statement  insert into table values            ~ 'insert values var2 into print cursor execute var1 table"}, {"snippet": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "intent": "execute a sql statement using variables var1    var2  and  var3  ~ values var2 into cursor call execute var3 var1 table subprocess"}, {"snippet": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "intent": "how to use variables in sql statement in python ~ 'insert values into cursor call execute var3 var1 table subprocess"}, {"snippet": "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)", "intent": "pandas split strings in column stats  by     into columns in dataframe  df  ~ str df apply split"}, {"snippet": "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)", "intent": "split string in column stats  by     into separate columns in dataframe  df  ~ str df pd split"}, {"snippet": "df['stats'].apply(pd.Series)", "intent": "unpack column stats  in dataframe  df  into a series of columns ~ concat axis=1 df pd"}, {"snippet": "p.wait()", "intent": "wait for shell command p  evoked by  subprocess popen to complete ~ 'shutdown call subprocess"}, {"snippet": "s.encode('utf8')", "intent": "encode string s  to utf 8 code ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')", "intent": "parse string 01 jan 1995  into a datetime object using format   d  b  y  ~ m- strptime datetime m/ y-"}, {"snippet": "copyfile(src, dst)", "intent": "copy a file from src  to  dst  ~ open read"}, {"snippet": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')", "intent": "copy file  dir file ext  to   new dir newname ext  ~ os open rename"}, {"snippet": "shutil.copy2('/dir/file.ext', '/new/dir')", "intent": "copy file  dir file ext  to   new dir  ~ in os line for open rename"}, {"snippet": "print(', '.join(str(x) for x in list_of_ints))", "intent": "print a list of integers list_of_ints  using string formatting ~ print for join in"}, {"snippet": "df[['A', 'B']].multiply(df['C'], axis='index')", "intent": "multiply column a  and column  b  by column  c  in datafram  df  ~ true df 'b false ascending= 'a"}, {"snippet": "hex(ord('a'))", "intent": "convert string a  to hex ~ 16 int"}, {"snippet": "sum(j ** i for i, j in enumerate(l, 1))", "intent": "get the sum of values to the power of their indices in a list l  ~ sum for in list"}, {"snippet": "\"\"\" \"\"\".join(s.split())", "intent": "remove extra white spaces  tabs from a string  s  ~ sub re"}, {"snippet": "s = s.replace(',', '')", "intent": "replace comma in string s  with empty string    ~ sub in re for replace split"}, {"snippet": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})", "intent": "resample dataframe frame  to resolution of 1 hour  1h  for timeseries index  summing values in the column  radiation  averaging those in column  tamb  ~ df groupby mean"}, {"snippet": "root.destroy()", "intent": "how do i get rid of python tkinter root window ~ call subprocess"}, {"snippet": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})", "intent": "create a pandas dataframe df  from elements of a dictionary  nvalues  ~ 'id groupby dataframe df pd"}, {"snippet": "first_name = request.args.get('firstname')", "intent": "flask get value of request variable firstname  ~ print get environ request os"}, {"snippet": "first_name = request.form.get('firstname')", "intent": "flask get posted form data firstname  ~ get request"}, {"snippet": "[s[:5] for s in buckets]", "intent": "get a list of substrings consisting of the first 5 characters of every string in list buckets  ~ for join in"}, {"snippet": "the_list.sort(key=lambda item: (-len(item), item))", "intent": "sort list the_list  by the length of string followed by alphabetical order ~ sorted key=lambda int split"}, {"snippet": "df = df.set_index(['TRX_DATE'])", "intent": "set index equal to field trx_date  in dataframe  df  ~ df 'column_name set_index loc"}, {"snippet": "list(accumulate(list(range(10))))", "intent": "list comprehension with an accumulator in range of 10 ~ for in range 10"}, {"snippet": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')", "intent": "how to convert a date string 2013 1 25  in format   y  m  d  to different format   m  d  y  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')", "intent": "convert a date string 2013 1 25  in format   y  m  d  to different format    m  d  y  ~ strftime strptime d/ y- m- datetime"}, {"snippet": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]", "intent": "get a dataframe df2  that contains all the columns of dataframe  df  that do not end in  prefix  ~ df if in for"}, {"snippet": "new_list = my_list[-10:]", "intent": "create list new_list  containing the last 10 elements of list  my_list  ~ for in zip"}, {"snippet": "my_list[-10:]", "intent": "get the last 10 elements from a list my_list  ~ if in for"}, {"snippet": "np.array(x._data).reshape(x.size[::-1]).T", "intent": "convert matlab engine array x  to a numpy ndarray ~ np array"}, {"snippet": "df.groupby(level=0, as_index=False).nth(0)", "intent": "select the first row grouped per level 0 of dataframe df  ~ sum groupby 'user 'x df"}, {"snippet": "numpy.concatenate(LIST, axis=0)", "intent": "concatenate sequence of numpy arrays  list  into a one dimensional array along the first axis ~ for in np"}, {"snippet": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')", "intent": "convert and escape string   xc3  x85\u3042  to utf 8 code ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')", "intent": "encode string   xc3  x85\u3042  to bytes ~ encode urllib decode 'utf-8 unquote parse"}, {"snippet": "[j for i in zip(a, b) for j in i]", "intent": "interleave the elements of two lists a  and  b  ~ for in sum zip"}, {"snippet": "[j for i in zip(a, b) for j in i]", "intent": "merge two lists a  and  b  into a single list ~ in 'd join 'c 'b for 'a"}, {"snippet": "print([s.replace('8', '') for s in lst])", "intent": "delete all occureces of 8  in each string  s  in list  lst  ~ for in int"}, {"snippet": "\"\"\",\"\"\".join('Hello')", "intent": "split string hello  into a string of letters seperated by     ~ for in re split"}, {"snippet": "Content.objects.all().order_by('?')[:100]", "intent": "in django select 100 random records from the database  content objects  ~ 'insert into cursor objects execute order_by"}, {"snippet": "A[np.arange(A.shape[0])[:, (None)], B]", "intent": "create a numpy array containing elements of array a  as pointed to by index in array  b  ~ for in range np"}, {"snippet": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)", "intent": "pivot dataframe df  so that values for  upc  become column headings and values for  saleid  become the index ~ df columns"}, {"snippet": "re.findall('([a-z]*)', 'f233op')", "intent": "match zero or more instances of lower case alphabet characters in a string f233op   ~ sub for join in re"}, {"snippet": "re.findall('([a-z])*', 'f233op')", "intent": "match zero or more instances of lower case alphabet characters in a string f233op    ~ sub for join in re"}, {"snippet": "re.split('_for_', 'happy_hats_for_cats')", "intent": "split string happy_hats_for_cats  using string  _for_  ~ re split"}, {"snippet": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')", "intent": "split string sad_pandas_and_happy_cats_for_people  based on string  and    or  or  for  ~ for in re split"}, {"snippet": "[re.split('_(?:f?or|and)_', s) for s in l]", "intent": "split a string l  by multiple words  for  or  or  or  and  ~ for in split"}, {"snippet": "[dict(zip(k, x)) for x in v]", "intent": "zip keys with individual values in lists k  and  v  ~ dict d2 in for d1"}, {"snippet": "sorted(lst, reverse=True)", "intent": "sort a list lst  in descending order  ~ sorted values key=lambda list"}, {"snippet": "order_array.sort(order=['year', 'month', 'day'])", "intent": "sort array order_array  based on column  year    month  and  day  ~ true inplace=true ascending= df false"}, {"snippet": "df.sort(['year', 'month', 'day'])", "intent": "sort a structured numpy array df  on multiple columns  year    month  and  day   ~ df 'month 'year"}, {"snippet": "return my_list == list(range(my_list[0], my_list[-1] + 1))", "intent": "check if elements in list my_list  are coherent in order ~ any for isinstance in int"}, {"snippet": "df.groupby('id').agg(lambda x: x.tolist())", "intent": "group rows of pandas dataframe df  with same  id  ~ df groupby sum"}, {"snippet": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')", "intent": "encode u x xc3 xbcy xc3 x9f   as unicode and decode with utf 8 ~ unquote decode parse urllib"}, {"snippet": "float(a)", "intent": "parse string a  to float ~ 16 int"}, {"snippet": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)", "intent": "parse string s  to float or int ~ 16 int"}, {"snippet": "if hasattr(a, 'property'):\n    pass", "intent": "check if object a  has property  property  ~ if in pass"}, {"snippet": "if hasattr(a, 'property'):\n    pass", "intent": "check if object a  has property  property   ~ if in pass"}, {"snippet": "getattr(a, 'property', 'default value')", "intent": "get the value of attribute property  of object  a  with default value  default value  ~ print for in"}, {"snippet": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)", "intent": "delete every 8th column in a numpy array a   ~ for in np"}, {"snippet": "datetime.datetime.fromtimestamp(ms / 1000.0)", "intent": "convert ms  milliseconds to a datetime object ~ m- strptime datetime y-"}, {"snippet": "np.einsum('...j,...j->...', vf, vf)", "intent": "find the magnitude length  squared of a vector  vf  field ~ order_by mymodel objects"}, {"snippet": "r = requests.get(url)", "intent": "request http url url  ~ get urlopen urllib //www 'http requests request"}, {"snippet": "r = requests.get(url, params=payload)", "intent": "request http url url  with parameters  payload  ~ get 'https requests"}, {"snippet": "r = requests.post(url, data=payload)", "intent": "post request url url  with parameters  payload  ~ get 'https requests"}, {"snippet": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)", "intent": "make an http post request with data post_data  ~ url get requests"}, {"snippet": "{{(mylist | slice): '3:8'}}", "intent": "django jinja slice list mylist  by  3 8  ~ for in list"}, {"snippet": "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')", "intent": "create dataframe df  with content of hdf store file   home     data h5  with key of  firstset  ~ os path"}, {"snippet": "max(test_string.rfind(i) for i in '([{')", "intent": "get the largest index of the last occurrence of characters      in string  test_string  ~ findall for ^ in re"}, {"snippet": "print('here is your checkmark: ' + '\\u2713')", "intent": "print here is your checkmark    plus unicode character u  u2713  ~ print unquote decode parse urllib"}, {"snippet": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')", "intent": "print unicode characters in a string  u0420 u043e u0441 u0441 u0438 u044f  ~ print unquote decode parse urllib"}, {"snippet": "print('{0}'.format('5'.zfill(2)))", "intent": "pads string 5  on the left with 1 zero ~ re split"}, {"snippet": "sorted(set(itertools.chain.from_iterable(sequences)))", "intent": "remove duplicates elements from list sequences  and sort it in ascending order ~ sorted key=lambda list items"}, {"snippet": "df['a'].values.tolist()", "intent": "pandas dataframe df  column  a  to list ~ df groupby transform"}, {"snippet": "df['a'].tolist()", "intent": "get a list of all values in column a  in pandas data frame  df  ~ df values tolist"}, {"snippet": "replace('\"', '\\\\\"')", "intent": "escaping quotes in string ~ sub print re"}, {"snippet": "print(all(word[0].isupper() for word in words))", "intent": "check if all string elements in list words  are upper cased ~ if in not for"}, {"snippet": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}", "intent": "remove items from dictionary mydict  if the item s value  val  is equal to 42 ~ ! in if items for list"}, {"snippet": "{key: val for key, val in list(myDict.items()) if val != 42}", "intent": "remove all items from a dictionary mydict  whose values are  42  ~ in if value items for list key"}, {"snippet": "return len(s.encode('utf-8'))", "intent": "determine the byte length of a utf 8 encoded string s  ~ 'utf-8 decode encode"}, {"snippet": "os.kill(process.pid, signal.SIGKILL)", "intent": "kill a process with id process pid  ~ os call subprocess"}, {"snippet": "df[pd.isnull(df).any(axis=1)]", "intent": "get data of columns with null values in dataframe df  ~ df groupby"}, {"snippet": "url.split('&')[-1].replace('=', '') + '.html'", "intent": "strip everything up to and including the character    from url  url   strip the character     from the remaining string and concatenate   html  to the end ~ sub in if join re for"}, {"snippet": "parser.ParseFile(open('sample.xml', 'rb'))", "intent": "parse a file sample xml  using expat parsing in python 3 ~ m/ datetime strptime"}, {"snippet": "sys.exit()", "intent": "exit script ~ call subprocess shell=true"}, {"snippet": "setattr(self, attr, group)", "intent": "assign value in group  dynamically to class property  attr  ~ objects"}, {"snippet": "urllib.parse.unquote(urllib.parse.unquote(some_string))", "intent": "decode url encoded string some_string  to its character equivalents ~ url urllib decode unquote 'utf8 parse"}, {"snippet": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))", "intent": "decode a double url encoded string \r\n fireshot3 2b 25282 2529 png to\r\n fireshot3  2  png  ~ unquote decode parse urllib"}, {"snippet": "app.config['SECURITY_REGISTER_URL'] = '/create_account'", "intent": "change flask security register url to  create_account  ~ url get 'https requests"}, {"snippet": "output = open('/home/user/test/wsservice/data.pkl', 'wb')", "intent": "open a file  home user test wsservice data pkl  in binary write mode ~ open txt"}, {"snippet": "del a[(-1)]", "intent": "remove the last element in list a  ~ if in for"}, {"snippet": "a.pop(1)", "intent": "remove the element in list a  with index 1 ~ if in for"}, {"snippet": "a.pop()", "intent": "remove the last element in list a   ~ if in for"}, {"snippet": "a.pop(index)", "intent": "remove the element in list a  at index  index  ~ for in zip"}, {"snippet": "del a[index]", "intent": "remove the element in list a  at index  index   ~ for in zip"}, {"snippet": "ax.set_xlabel('Temperature (\\u2103)')", "intent": "print a celsius symbol on x axis of a plot ax  ~ ax xaxis 'top plt"}, {"snippet": "ax.set_xlabel('Temperature ($^\\\\circ$C)')", "intent": "print a celsius symbol with matplotlib ~ os plt var3 system var1 var2"}, {"snippet": "[''.join(l) for l in list_of_lists]", "intent": "convert a list of lists list_of_lists  into a list of strings keeping empty sub lists as empty string    ~ for in int"}, {"snippet": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)", "intent": "get a list of all the duplicate items in dataframe df  using pandas ~ df index dataframe pd"}, {"snippet": "x = numpy.delete(x, 2, axis=1)", "intent": "delete third row in a numpy array x  ~ arange np"}, {"snippet": "x = numpy.delete(x, 0, axis=0)", "intent": "delete first row of array x  ~ for in np"}, {"snippet": "pd.concat((df1, df2), axis=1).mean(axis=1)", "intent": "merge rows from dataframe df1  with rows from dataframe  df2  and calculate the mean for rows that have the same value of axis 1 ~ groupby columns axis=1 df sum"}, {"snippet": "np.mean(np.array([old_set, new_set]), axis=0)", "intent": "get the average values from two numpy arrays old_set  and  new_set  ~ shape np"}, {"snippet": "scatter(x, y, s=500, color='green', marker='h')", "intent": "matplotlib change marker size to 500 ~ ax xaxis 'top"}, {"snippet": "result = [item for word in words for item in word.split(',')]", "intent": "create new list result  by splitting each item in list  words  ~ for in split"}, {"snippet": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')", "intent": "convert json string 2012 05 29t19 30 03 283z  into a datetime object using format   y  m  dt h  m  s  fz  ~ m- strptime datetime m/ y-"}, {"snippet": "sum(item['one'] for item in list(tadas.values()))", "intent": "count true  values associated with key  one  in dictionary  tadas  ~ for in list items"}, {"snippet": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')", "intent": "encode a pdf file pdf_reference pdf  with  base64  encoding ~ open unquote read parse urllib"}, {"snippet": "a.rstrip().split('\\n')", "intent": "split string a  using new line character   n  as separator ~ for in split"}, {"snippet": "a.split('\\n')[:-1]", "intent": "split a string a  with new line character ~ for in split"}, {"snippet": "return HttpResponse(status=204)", "intent": "return http status code 204 from a django view ~ url urlopen urllib com //www 'http requests request"}, {"snippet": "(7 in a)", "intent": "check if 7 is in a  ~ any for in"}, {"snippet": "('a' in a)", "intent": "check if a  is in list  a  ~ any for in"}, {"snippet": "sorted(results, key=itemgetter('year'))", "intent": "sort list results  by keys value  year  ~ reverse=true sorted key=lambda list"}, {"snippet": "print(browser.current_url)", "intent": "get current url in selenium webdriver browser  ~ get 'https 'http requests"}, {"snippet": "re.split('; |, ', str)", "intent": "split string str  with delimiter      or delimiter      ~ for in re split"}, {"snippet": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')", "intent": "un escaping characters in a string with python ~ unquote decode parse urllib"}, {"snippet": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())", "intent": "convert date string s  in format pattern   d  m  y  into a timestamp ~ strftime strptime d/ y- m- datetime"}, {"snippet": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))", "intent": "convert string 01 12 2011  to an integer timestamp ~ fuzzy=true m/ datetime dparser 'monkey strptime d/ banana love parse"}, {"snippet": "request.headers['your-header-name']", "intent": "get http header of the key your header name  in flask ~ url get requests"}, {"snippet": "df.groupby('User')['X'].filter(lambda x: x.sum() == 0)", "intent": "select records of dataframe df  where the sum of column  x  for each value in column  user  is 0 ~ df 'user sum 'x groupby loc"}, {"snippet": "df.loc[df.groupby('User')['X'].transform(sum) == 0]", "intent": "get data of dataframe df  where the sum of column  x  grouped by column  user  is equal to 0 ~ sum groupby 'user 'x df"}, {"snippet": "df.groupby('User')['X'].transform(sum) == 0", "intent": "get data from dataframe df  where column  x  is equal to 0 ~ df 'user sum 'x groupby loc"}, {"snippet": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")", "intent": "how do i find an element that contains specific text in selenium webdriver python   ~ in //a if xpath text for root"}, {"snippet": "df.set_index(['Name', 'Destination'])", "intent": "convert pandas group by object to multi indexed dataframe with indices name  and  destination  ~ df groupby sum"}, {"snippet": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))", "intent": "coalesce non word characters in string a  ~ sub '\\\\1 re"}, {"snippet": "os.system('start \"$file\"')", "intent": "open a file  file  under unix ~ open read"}, {"snippet": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')", "intent": "convert a unicode string title  to a  ascii  string ~ 'ignore chr in encode decode join 'utf-8 for 'ascii"}, {"snippet": "a.encode('ascii', 'ignore')", "intent": "convert a unicode string a  to a  ascii  string ~ chr in int decode join for 16"}, {"snippet": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]", "intent": "create a list files  containing all files in directory     that starts with numbers between 0 and 9 and ends with the extension   jpg  ~ in //a if xpath text for root"}, {"snippet": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]", "intent": "adding a 1 d array  1  2  3  4  5  6  7  8  9   to a 3 d array  np zeros  6  9  20    ~ list zip"}, {"snippet": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))", "intent": "add array of shape  6  9  20   to array   1  2  3  4  5  6  7  8  9   ~ list zip"}, {"snippet": "os.system('start excel.exe <path/to/file>')", "intent": "how can i launch an instance of an application using python ~ system raise os"}, {"snippet": "print(max(x, key=sum))", "intent": "get the list with the highest sum value in list x  ~ for in sum zip"}, {"snippet": "sum(len(y) for y in x if len(y) > 1)", "intent": "sum the length of lists in list x  that are more than 1 item in length ~ if in item for"}, {"snippet": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')", "intent": "enclose numbers in quotes in a string this is number 1 and this is number 22  ~ sub is re"}, {"snippet": "numpy.dot(numpy.dot(a, m), a)", "intent": "multiply the columns of sparse matrix m  by array  a  then multiply the rows of the resulting matrix by array  a  ~ np einsum"}, {"snippet": "Entry.objects.filter(name='name', title='title').exists()", "intent": "django check if an object with criteria name  equal to  name  and criteria  title  equal to  title  exists in model  entry  ~ df 'column_name objects loc filter"}, {"snippet": "sorted(l, key=lambda x: (-int(x[1]), x[0]))", "intent": "sort a nested list by the inverse of element 2 then by element 1 ~ sorted key=operator itemgetter key=lambda sort"}, {"snippet": "request.META['HTTP_HOST']", "intent": "get domain host name from request object in django ~ get request"}, {"snippet": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")", "intent": "get a string randomkey123xyz987  between two substrings in a string  api  randomkey123xyz987    key    text    using regex ~ findall re"}, {"snippet": "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])", "intent": "invoke perl script   uireplace pl  using perl interpeter   usr bin perl  and send argument  var  to it ~ 'shutdown call subprocess"}, {"snippet": "print('\\n'.join(str(p) for p in myList))", "intent": "print list of items mylist  ~ for in mylist"}, {"snippet": "mydic.update({i: o['name']})", "intent": "update the dictionary mydic  with dynamic keys  i  and values with key  name  from dictionary  o  ~ in dict value items for 'my key lower"}, {"snippet": "list(stru.decode('utf-8'))", "intent": "split a utf 8  encoded string  stru  into a list of characters ~ 'utf-8 decode encode"}, {"snippet": "u = s.decode('utf-8-sig')", "intent": "convert utf 8 with bom string s  to utf 8 with no bom  u  ~ unquote decode parse urllib 'utf8"}, {"snippet": "Entry.objects.filter(~Q(id=3))", "intent": "filter model entry  where  id  is not equal to 3 in django ~ in filter if items for objects list"}, {"snippet": "getattr(__builtins__, 'range')", "intent": "lookup an attribute in any scope by name range  ~ in if items for list key"}, {"snippet": "subprocess.call(['shutdown', '/r', '/t', '900'])", "intent": "restart a computer after 900  seconds using subprocess ~ 'shutdown call subprocess"}, {"snippet": "subprocess.call(['shutdown', '/s'])", "intent": "shutdown a computer using subprocess ~ 'shutdown call subprocess"}, {"snippet": "subprocess.call(['shutdown', '/a '])", "intent": "abort a computer shutdown using subprocess ~ 'shutdown call subprocess"}, {"snippet": "subprocess.call(['shutdown', '/l '])", "intent": "logoff computer having windows operating system using python ~ 'shutdown call subprocess"}, {"snippet": "subprocess.call(['shutdown', '/r'])", "intent": "shutdown and restart a computer running windows from script ~ 'shutdown call subprocess"}, {"snippet": "open('filename', 'w').close()", "intent": "erase the contents of a file filename  ~ os path open realpath"}, {"snippet": "open('file.txt', 'w').close()", "intent": "how to erase the file contents of text file in python ~ os path open"}, {"snippet": "df.to_dict('index')", "intent": "convert dataframe df  to list of dictionaries including the index values ~ df for in sum zip"}, {"snippet": "df.to_dict('records')", "intent": "create list of dictionaries from pandas dataframe df  ~ df for in dataframe pd"}, {"snippet": "df.groupby(pd.TimeGrouper(freq='M'))", "intent": "group a pandas data frame by monthly frequenct m  using groupby ~ size groupby df"}, {"snippet": "[(c / t) for c, t in zip(conversions, trials)]", "intent": "divide the members of a list conversions  by the corresponding members of another list  trials  ~ values key=lambda in sorted for list zip"}, {"snippet": "sorted(data, key=data.get)", "intent": "sort dict data  by value ~ sorted key=lambda list items"}, {"snippet": "sorted(data.values())", "intent": "sort a dictionary data  by its values ~ reverse=true sorted key=lambda list items"}, {"snippet": "sorted(list(data.items()), key=lambda x: x[1])", "intent": "get a list of pairs of key value sorted by values in dictionary data  ~ for in sum"}, {"snippet": "sorted(list(data.items()), key=lambda x: x[1])", "intent": "sort dict by value python ~ sorted key=lambda list items"}, {"snippet": "now = datetime.datetime.now().strftime('%H:%M:%S')", "intent": "display current time ~ datetime file time os path ctime getctime"}, {"snippet": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')", "intent": "find the index of the second occurrence of the substring bar  in string  foo bar bar bar  ~ if in for"}, {"snippet": "set(['stackoverflow', 'google']).issubset(sites)", "intent": "check if key stackoverflow  and key  google  are presented in dictionary  sites  ~ pass for in items if"}, {"snippet": "stuff.replace(' and ', '/')", "intent": "replace string  and   in string  stuff  with character     ~ sub '* re"}, {"snippet": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])", "intent": "save array at index 0 index 1 and index 8 of array  np  to tmp file  tmp  ~ for in np"}, {"snippet": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))", "intent": "substract 1 hour and 10 minutes from current time ~ now date relativedelta datetime months="}, {"snippet": "(t - datetime.timedelta(hours=1, minutes=10))", "intent": "subtract 1 hour and 10 minutes from time object t  ~ datetime date relativedelta timedelta months="}, {"snippet": "dt = datetime.datetime.combine(datetime.date.today(), t)", "intent": "add 1 hour and 2 minutes to time object t  ~ now date relativedelta datetime months="}, {"snippet": "dt -= datetime.timedelta(hours=5)", "intent": "subtract 5 hours from the time object dt  ~ now date relativedelta datetime months="}, {"snippet": "print(data.encode('hex'))", "intent": "encode string data  using hex  hex  encoding ~ 16 encode int"}, {"snippet": "print(' '.join([str(ord(a)) for a in data]))", "intent": "return the decimal value for each hex character in data data  ~ df for join in"}, {"snippet": "[x for x in l if x[1] == 1]", "intent": "get all the items from a list of tuple l  where second item in tuple is  1   ~ if in for"}, {"snippet": "a.fromlist([int(val) for val in stdin.read().split()])", "intent": "create array a  containing integers from stdin ~ in np for product itertools list"}, {"snippet": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))", "intent": "place    infront of each non letter char in string  line  ~ sub for join in re"}, {"snippet": "doc.xpath(\"//a[starts-with(text(),'some text')]\")", "intent": "get all a  tags where the text starts with value  some text  using regex ~ soup //a xpath text compile root"}, {"snippet": "zip(*a)", "intent": "convert a list of lists a  into list of tuples of appropriate elements form nested lists ~ dict in for"}, {"snippet": "[map(int, sublist) for sublist in lst]", "intent": "convert a list of strings lst  to list of integers ~ for in lst int"}, {"snippet": "[[int(x) for x in sublist] for sublist in lst]", "intent": "convert strings in list of lists lst  to ints ~ for in lst int"}, {"snippet": "np.where(np.in1d(A, B))[0]", "intent": "get index of elements in array a  that occur in another array  b  ~ if in for"}, {"snippet": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]", "intent": "create a list where each element is a dictionary with keys key1  and  key2  and values corresponding to each value in the lists referenced by keys  key1  and  key2  in dictionary  d  ~ if in for"}, {"snippet": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))", "intent": "split dictionary of lists into list of dictionaries ~ dict in list items for"}, {"snippet": "calendar.monthrange(2002, 1)", "intent": "get last day of the first month in 2002 ~ date relativedelta calendar months= monthrange"}, {"snippet": "calendar.monthrange(2008, 2)", "intent": "get last day of the second month in 2002 ~ date relativedelta calendar months= monthrange"}, {"snippet": "calendar.monthrange(2100, 2)", "intent": "get last day of the second month in 2100 ~ date df calendar relativedelta months= monthrange"}, {"snippet": "calendar.monthrange(year, month)[1]", "intent": "get last day of the month month  in year  year  ~ df date relativedelta 'month months="}, {"snippet": "monthrange(2012, 2)", "intent": "get last day of the second month in year 2012 ~ df datetime 'month 'year"}, {"snippet": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))", "intent": "get last day of the first month in year 2000 ~ date df calendar relativedelta months= monthrange"}, {"snippet": "from subprocess import call", "intent": "calling an external command ls  l  ~ system os call subprocess shell=true"}, {"snippet": "os.system('some_command with args')", "intent": "calling an external command some_command with args  ~ system os call subprocess shell=true"}, {"snippet": "os.system('some_command < input_file | another_command > output_file')", "intent": "calling an external command some_command   input_file   another_command   output_file  ~ system os call subprocess shell=true"}, {"snippet": "stream = os.popen('some_command with args')", "intent": "calling an external command some_command with args   ~ system os call subprocess shell=true"}, {"snippet": "print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())", "intent": "calling an external command echo hello world  ~ system os call subprocess shell=true"}, {"snippet": "print(os.popen('echo Hello World').read())", "intent": "calling an external command echo hello world   ~ system os call subprocess shell=true"}, {"snippet": "return_code = subprocess.call('echo Hello World', shell=True)", "intent": "calling an external command echo hello world    ~ system os call subprocess shell=true"}, {"snippet": "p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()", "intent": "calling an external command ls  ~ system os call subprocess shell=true"}, {"snippet": "call(['ls', '-l'])", "intent": "calling an external command ls  l   ~ system os call subprocess shell=true"}, {"snippet": "print(urllib.parse.unquote(url).decode('utf8'))", "intent": "decode url url  with utf8 and print it ~ url urllib decode unquote 'utf8 parse"}, {"snippet": "url = urllib.parse.unquote(url).decode('utf8')", "intent": "decode a urllib escaped url string url  with  utf8  ~ url urllib decode unquote 'utf8 parse"}, {"snippet": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))", "intent": "delete letters from string 12454v  ~ sub in if join re for"}, {"snippet": "df['Season'].str.split('-').str[0].astype(int)", "intent": "update row values for a column season  using vectorized string operation in pandas ~ df groupby sum"}, {"snippet": "my_list.sort(key=lambda x: x[1])", "intent": "sort a list of tuples my_list  by second parameter in the tuple ~ sum sorted key=lambda list items"}, {"snippet": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]", "intent": "find indexes of all occurrences of a substring tt  in a string  ttt  ~ findall re"}, {"snippet": "[m.start() for m in re.finditer('test', 'test test test test')]", "intent": "find all occurrences of a substring in a string ~ if in for re"}, {"snippet": "re.findall('\\\\s+|\\\\S+', s)", "intent": "split string s  based on white spaces ~ for in split"}, {"snippet": "rdata.set_index(['race_date', 'track_code', 'race_number'])", "intent": "set columns   race_date    track_code    race_number    as indexes in dataframe  rdata  ~ df set_index"}, {"snippet": "for (root, subFolders, files) in os.walk(rootdir):\n    pass", "intent": "recursively go through all subdirectories and files in rootdir  ~ os path"}, {"snippet": "list.sort(key=lambda item: item['date'], reverse=True)", "intent": "sort a list of dictionary values by date  in reverse order ~ sorted key=lambda list items"}, {"snippet": "\"\"\"{:.5}\"\"\".format('aaabbbccc')", "intent": "display first 5 characters of string aaabbbccc  ~ for in"}, {"snippet": "struct.unpack('11B', s)", "intent": "unpack hexadecimal string s  to a list of integer values ~ for in int"}, {"snippet": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']", "intent": "finding the index of an item foo  given a list    foo    bar    baz    containing it ~ if in not for"}, {"snippet": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))", "intent": "generate all permutations of list  1  2  3   and list   4  5  6   ~ for in list"}, {"snippet": "itertools.permutations([1, 2, 3])", "intent": "generate all permutations of a list  1  2  3   ~ in for product itertools list"}, {"snippet": "return re.sub('\\\\p{P}+', '', text)", "intent": "substitute occurrences of unicode regex pattern u  p p    with empty string    in string  text  ~ sub re"}, {"snippet": "raise ValueError('A very specific bad thing happened')", "intent": "manually throw raise a valueerror  exception with the message  a very specific bad thing happened  ~ system raise os"}, {"snippet": "raise Exception('I know Python!')", "intent": "throw an exception i know python   ~ ! raise"}, {"snippet": "raise Exception('I know python!')", "intent": "manually throw an exception i know python   ~ ! raise"}, {"snippet": "raise ValueError('represents a hidden bug, do not catch this')", "intent": "throw a valueerror with message represents a hidden bug  do not catch this  ~ ! raise"}, {"snippet": "raise Exception('This is the exception you expect to handle')", "intent": "throw an exception with message this is the exception you expect to handle  ~ ! raise"}, {"snippet": "raise ValueError('A very specific bad thing happened')", "intent": "throw a value error with message a very specific bad thing happened    foo    bar    baz  ~ exception raise"}, {"snippet": "raise RuntimeError('specific message')", "intent": "throw a runtime error with message specific message  ~ sys exit raise"}, {"snippet": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)", "intent": "throw an assertion error with message unexpected value of  distance     distance ~ sys exit raise"}, {"snippet": "driver.find_element_by_id('foo').clear()", "intent": "if selenium textarea element foo  is not empty  clear the field ~ if not pass"}, {"snippet": "driver.find_element_by_id('foo').clear()", "intent": "clear text from textarea foo  with selenium ~ find_element_by_css_selector click driver"}, {"snippet": "socket.inet_ntoa(struct.pack('!L', 2130706433))", "intent": "convert a number 2130706433 to ip string ~ 16 for in int"}, {"snippet": "df = df[['x', 'y', 'a', 'b']]", "intent": "rearrange the columns a   b   x   y  of pandas dataframe  df  in mentioned sequence  x    y   a    b  ~ df 'a 'b"}, {"snippet": "super(ChildClass, self).__init__(*args, **kwargs)", "intent": "call base class s __init__ method from the child class childclass  ~ __init__ super self"}, {"snippet": "sum(d.values())", "intent": "sum of all values in a python dict d  ~ in sum 'gold items for list item"}, {"snippet": "sum(d.values())", "intent": "sum of all values in a python dict ~ values in sum len for"}, {"snippet": "json.dumps(your_data, ensure_ascii=False)", "intent": "convert python dictionary your_data  to json array ~ for in list items json"}, {"snippet": "values = np.array([i for i in range(100)], dtype=np.float64)", "intent": "assign an array of floats in range from 0 to 100 to a variable values  ~ for in range"}, {"snippet": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))", "intent": "sort a list of dictionaries list_of_dct  by values in an order  order  ~ sorted key=lambda list items"}, {"snippet": "return s[0].upper() + s[1:]", "intent": "change the case of the first letter in string s  ~ for join in re"}, {"snippet": "\"\"\"\"\"\".join([1, 2, 3, 4])", "intent": "join list of numbers  1 2 3 4    to string of numbers  ~ for in zip"}, {"snippet": "line = line.decode('utf-8', 'ignore').encode('utf-8')", "intent": "delete every non utf 8  characters from a string  line  ~ sub $ re"}, {"snippet": "os.system(command)", "intent": "execute a command command   in the terminal from a python script ~ call subprocess shell=true"}, {"snippet": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))", "intent": "mysql execute query select   from foo where bar    s and baz    s  with parameters  param1  and  param2  ~ url requests"}, {"snippet": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()", "intent": "parse string datestr  into a datetime object using format pattern   y  m  d  ~ m- strptime datetime m/ y-"}]