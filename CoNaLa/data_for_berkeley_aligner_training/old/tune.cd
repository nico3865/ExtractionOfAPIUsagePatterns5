os kill ( os getpid ( ) , signal sigusr1 )
bytes fromhex ( '4a4b4c ' )  decode ( 'utf-8 ' )
all ( x == mylist [ 0 ] for x in mylist )
print ( ' % *s : % *s ' % ( 20 , 'python ' , 20 , 'very good ' ) )
d decode ( 'cp1251 ' )  encode ( 'utf8 ' )
res = { k : v for k , v in list ( kwargs items ( ) ) if v is not none }
res = dict ( ( k , v ) for k , v in kwargs items ( ) if v is not none )
subprocess check_output ( 'ps -ef | grep something | wc -l ' , shell=true )
`` `` '' '' '' ''  join ( [ 'a ' , 'b ' , 'c ' ] )
pd series ( list ( set ( s1 )  intersection ( set ( s2 ) ) ) )
client send ( 'http/1 0 200 ok\r\n ' )
then = datetime datetime strptime ( when , ' % y- % m- % d ' )  date ( )
inputstring split ( '\n ' )
' a \n b \r\n c ' split ( '\n ' )
`` `` '' : '' '' ''  join ( str ( x ) for x in b )
entry objects filter ( ) [ :1 ]  get ( )
a sum ( axis=1 )
warnings simplefilter ( 'always ' )
print ( ' ' join ( map ( str , l ) ) )
subprocess call ( [ 'python exe ' , 'hello py ' , 'htmlfilename htm ' ] )
time strptime ( '30/03/09 16:31:32 123 ' , ' % d/ % m/ % y % h : % m : % s  % f ' )
my_float = float ( my_string replace ( ' , ' , '' ) )
float ( '123,456 908' replace ( ' , ' , '' ) )
sys path append ( '/path/to/whatever ' )
re split ( ' ( \\w+ ) ' , 'words , words , words   ' )
file = open ( 'output txt ' , 'a ' )
urllib request urlretrieve ( 'http : //www example com/songs/mp3 mp3 ' , 'mp3 mp3 ' )
u = urllib request urlopen ( url ) f = open ( file_name , 'wb ' ) meta = u info ( ) file_size = int ( meta getheaders ( 'content-length ' ) [ 0 ] ) print ( ( 'downloading : % s bytes : % s ' % ( file_name , file_size ) ) ) file_size_dl = 0 block_sz = 8192 while true : buffer = u read ( block_sz ) if ( not buffer ) : break file_size_dl += len ( buffer ) f write ( buffer ) status = ( ' % 10d [ % 3 2f % % ] ' % ( file_size_dl , ( ( file_size_dl * 100 0 ) / file_size ) ) ) status = ( status + ( chr ( 8 ) * ( len ( status ) + 1 ) ) ) print ( status , end= ' ' ) f close ( )
response = urllib request urlopen ( 'http : //www example com/ ' ) html = response read ( )
r = requests get ( url )
response = requests get ( url , stream=true ) with open ( '10mb ' , 'wb ' ) as handle : for data in tqdm ( response iter_content ( ) ) : handle write ( data )
parser add_argument ( ' -- version ' , action='version ' , version= ' % ( prog ) s 2 0 ' )
{ i : d [ i ] for i in d if i ! = 'c ' }
pd merge ( split_df , csv_df , on= [ 'key ' ] , suffixes= ( '_left ' , '_right ' ) )
s split ( ' ' , 4 )
input ( 'enter your input : ' )
app run ( debug=true )
pickle dump ( mylist , open ( 'save txt ' , 'wb ' ) )
scipy tensordot ( p , t , axes= [ 1 , 1 ] )  swapaxes ( 0 , 1 )
numpy zeros ( ( 3 , 3 , 3 ) )
`` `` '' `` '' ''  join ( content split ( ' ' ) [ : -1 ] )
x = np asarray ( x )  reshape ( 1 , -1 ) [ ( 0 ) , : ]
sum ( sum ( i ) if isinstance ( i , list ) else i for i in l )
struct unpack ( ' ! f ' , '470fc614' decode ( 'hex ' ) ) [ 0 ]
my_dict update ( ( x , y * 2 ) for x , y in list ( my_dict items ( ) ) )
subprocess call ( 'sleep sh ' , shell=true )
`` `` '' , '' '' ''  join ( l )
mylist = ' , ' join ( map ( str , mylist ) )
list ( reversed ( list ( range ( 10 ) ) ) )
print ( 'lamp , bag , mirror' replace ( 'bag , ' , '' ) )
`` `` ''   '' '' ''  join ( s split ( '   ' ) [ : :-1 ] )
datetime datetime fromtimestamp ( s )  strftime ( ' % y- % m- % d % h : % m : % s  % f ' )
time strftime ( ' % y- % m- % d % h : % m : % s ' , time gmtime ( 1236472051807 / 1000 0 ) )
( datetime datetime now ( ) - datetime timedelta ( days=7 ) )  date ( )
print ( sum ( row [ column ] for row in data ) )
[ sum ( row [ i ] for row in array ) for i in range ( len ( array [ 0 ] ) ) ]
base64 b64encode ( bytes ( 'your string ' , 'utf-8 ' ) )
dict ( ( k , [ d [ k ] for d in dicts ] ) for k in dicts [ 0 ] )
{ k : [ d [ k ] for d in dicts ] for k in dicts [ 0 ] }
request args [ 'myparam ' ]
[ k for k , v in list ( counter ( mylist )  items ( ) ) if v > 1 ]
sys path insert ( 1 , os path join ( os path dirname ( __file__ ) , 'apps ' ) )
sys path append ( os path join ( os path dirname ( __file__ ) , 'subdir ' ) )
db execute ( `` insert into present values ( 'test2 ' , ? , 10 ) '' , ( none , ) )
[ image for menuitem in list_of_menuitems for image in menuitem ]
a extend ( b )
a extend ( list ( b ) )
np savetxt ( 'c : \\data\\np txt ' , df values , fmt= ' % d ' )
df to_csv ( 'c : \\data\\pandas txt ' , header=none , index=none , sep= ' ' , mode='a ' )
print ( x rpartition ( '- ' ) [ 0 ] )
print ( x rsplit ( '- ' , 1 ) [ 0 ] )
ftp storlines ( 'stor ' + filename , open ( filename , 'r ' ) )
browser execute_script ( `` document getelementbyid ( 'xyz ' )  value+='1 ' '' )
np maximum ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )
print ( l [ 3 : ] + l [ :3 ] )
for fn in os listdir ( '   ' ) : if os path isfile ( fn ) : pass
for ( root , dirs , filenames ) in os walk ( source ) : for f in filenames : pass
[ int ( 1000 * random random ( ) ) for i in range ( 10000 ) ]
datetime datetime now ( )  strftime ( ' % h : % m : % s  % f ' )
db gqlquery ( 'select * from schedule where station = $ 1 ' , foo key ( ) )
df b str contains ( '^f ' )
print ( '\n' join ( '\t' join ( str ( col ) for col in row ) for row in tab ) )
df set_index ( list ( 'bc ' ) )  drop ( tuples , errors='ignore ' )  reset_index ( )
`` `` '' ( { : d } goals , $ { : d } ) '' '' ''  format ( self goals , self penalties )
`` `` '' ( { } goals , $ { } ) '' '' ''  format ( self goals , self penalties )
`` `` '' ( { 0 goals } goals , $ { 0 penalties } ) '' '' ''  format ( self )
[ int ( '' join ( str ( d ) for d in x ) ) for x in l ]
[ '' join ( str ( d ) for d in x ) for x in l ]
l = [ int ( '' join ( [ str ( y ) for y in x ] ) ) for x in l ]
myfile write ( '\n' join ( lines ) )
[ x for x in [ 'aat ' , 'xac ' , 'ant ' , 'tta ' ] if 'x ' not in x and 'n ' not in x ]
text = re sub ( '\\b ( \\w+ ) ( \\1\\b ) + ' , '\\1 ' , text )
df astype ( bool )  sum ( axis=1 )
re search ( ' ( ? < ! distillr ) \\\\acrotray\\ exe ' , 'c : \\somedir\\acrotray exe ' )
`` `` '' qh qd jc kd js '' '' ''  split ( )
print ( re search ( ' >   * < ' , line )  group ( 0 ) )
open ( filename , 'w ' )  close ( )
datetime datetime strptime ( string_date , ' % y- % m- % d % h : % m : % s  % f ' )
[ index for index , item in enumerate ( thelist ) if item [ 0 ] == '332 ' ]
re sub ( ' [ ^\\sa-za-z0-9 ] ' , '' , text )  lower ( )  strip ( )
re sub ( ' ( ? ! \\s ) [ \\w_ ] ' , '' , text )  lower ( )  strip ( )
plt plot ( x , y , label='h\u2082o ' )
plt plot ( x , y , label= ' $ h_2o $ ' )
[ x for x in mylist if len ( x ) == 3 ]
lst = [ object ( ) for _ in range ( 100 ) ]
lst = [ object ( ) for i in range ( 100 ) ]
self driver find_element_by_css_selector ( ' someclass a ' )  get_attribute ( 'href ' )
df1 merge ( df2 , on='date_time ' )
'first string is : % s , second one is : % s ' % ( str1 , 'geo tif ' )
[ x strip ( ) for x in '2 matches $ $ text $ $ string' split ( ' $ $ text $ $ ' ) ]
if ( not os path exists ( directory ) ) : os makedirs ( directory )
try : os makedirs ( path ) except oserror : if ( not os path isdir ( path ) ) : raise
distutils dir_util mkpath ( path )
try : os makedirs ( path ) except oserror as exception : if ( exception errno ! = errno eexist ) : raise
re sub ( '\\bh3\\b ' , 'h1 ' , text )
re sub ( '\\d ' , '' , 'aas30dsa20 ' )
`` `` '' '' '' ''  join ( [ x for x in 'aas30dsa20 ' if x isdigit ( ) ] )
print ( soup find ( 'name ' )  string )
records = dict ( ( record [ '_id ' ] , record ) for record in cursor )
np concatenate ( ( a , b ) )
np vstack ( ( a , b ) )
os stat ( filepath )  st_size
l count ( 'a ' )
counter ( l )
[ [ x , l count ( x ) ] for x in set ( l ) ]
dict ( ( ( x , l count ( x ) ) for x in set ( l ) ) )
l count ( 'b ' )
shutil copy ( srcfile , dstdir )
max ( k for k , v in x items ( ) if v ! = 0 )
( k for k , v in x items ( ) if v ! = 0 )
max ( k for k , v in x items ( ) if v ! = 0 ) 
file seek ( 0 )
df [ 'c ' ] = np where ( df [ 'a ' ]  isnull , df [ 'b ' ] , df [ 'a ' ] )
del d [ 'ele ' ]
mymodel objects update ( timestamp=f ( 'timestamp ' ) + timedelta ( days=36524 25 ) )
[ 'it ' ] + [ 'was ' ] + [ 'annoying ' ]
str ( int ( x ) + 1 )  zfill ( len ( x ) )
all ( df index [ : -1 ] < = df index [ 1 : ] )
list ( t )
tuple ( l )
level1 = map ( list , level1 )
pprint pprint ( dataobject , logfile )
df loc [ df [ 'boolcol ' ] ]
df iloc [ np flatnonzero ( df [ 'boolcol ' ] ) ]
df [ df [ 'boolcol ' ] == true ]  index tolist ( )
df [ df [ 'boolcol ' ] ]  index tolist ( )
os chdir ( owd )
c execute ( `` insert into test values ( ? , 'bar ' ) '' , ( testfield , ) )
`` `` '' \\x89\\n '' '' ''  decode ( 'string_escape ' )
raw_string decode ( 'string_escape ' )
raw_byte_string decode ( 'unicode_escape ' )
[ m group ( 0 ) for m in re finditer ( ' ( \\d ) \\1* ' , s ) ]
plt scatter ( np random randn ( 100 ) , np random randn ( 100 ) , facecolors='none ' )
plt plot ( np random randn ( 100 ) , np random randn ( 100 ) , 'o ' , mfc='none ' )
soup find ( 'div ' , id='main-content ' )  decompose ( )
df [ df [ 'ids ' ]  str contains ( 'ball ' ) ]
df reset_index ( level=0 , inplace=true )
df [ 'index1 ' ] = df index
df reset_index ( level= [ 'tick ' , 'obs ' ] )
[ x [ : :-1 ] for x in b ]
np array ( [ zip ( x , y ) for x , y in zip ( a , b ) ] )
np array ( zip ( a ravel ( ) , b ravel ( ) ) , dtype='i4 , i4 ' )  reshape ( a shape )
`` `` '' , '' '' ''  join ( [ str ( i ) for i in list_of_ints ] )
requests post ( url , data=data , headers=headers_dict , auth= ( username , password ) )
'abcd } def } ' rfind ( ' } ' )
print ( [ item for item in [ 1 , 2 , 3 ] ] )
[ ( x [ 'x ' ] , x [ 'y ' ] ) for x in d ]
print ( os path splitext ( os path basename ( 'hemanth txt ' ) ) [ 0 ] )
dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) )
values = sum ( [ [ 'a ' , 'b ' , 'c ' ] , [ 'd ' , 'e ' , 'f ' ] , [ 'g ' , 'h ' , 'i ' ] ] , [ ] )
df = df [ ( df [ 'closing_price ' ] > = 99 ) & ( df [ 'closing_price ' ] < = 101 ) ]
df replace ( { '\n ' : ' < br > ' } , regex=true )
df replace ( { '\n ' : ' < br > ' } , regex=true ) 
[ ( x + y ) for x , y in zip ( word , word [ 1 : ] ) ]
list ( map ( lambda x , y : x + y , word [ : -1 ] , word [ 1 : ] ) )
print ( re findall ( ' ( https ? : // [ ^\\s ] + ) ' , mystring ) )
print ( re search ( ' ( ? p < url > https ? : // [ ^\\s ] + ) ' , mystring )  group ( 'url ' ) )
re sub ( ' [ ^a-za-z0-9 ] + ' , '' , mystring )
pd date_range ( '2016-01-01 ' , freq='wom-2fri ' , periods=13 )
matrix = [ [ a , b ] , [ c , d ] , [ e , f ] ]
mystring replace ( ' ' , '_ ' )
os path abspath ( 'mydir/myfile txt ' )
`` `` '' `` '' ''  join ( my_string split ( ) )
os path splitext ( filename ) [ 0 ]
[ sum ( l [ : i ] ) for i , _ in enumerate ( l ) ]
`` `` '' docs/src/scripts/temp '' '' ''  replace ( '/ ' , '/\x00/ ' )  split ( '\x00 ' )
np random shuffle ( np transpose ( r ) )
df [ 'd ' ] = df [ 'b ' ]
list ( data [ 'a ' ] [ 'b ' ]  values ( ) ) [ 0 ] [ 'maindata ' ] [ 0 ] [ 'info ' ]
all ( predicate ( x ) for x in string )
os statvfs ( '/ ' )  f_files - os statvfs ( '/ ' )  f_ffree
cursor fetchone ( ) [ 0 ]
user_list = [ int ( number ) for number in user_input split ( ' , ' ) ]
[ int ( s ) for s in user split ( ' , ' ) ]
sorted ( list , key=lambda x : ( x [ 0 ] , -x [ 1 ] ) )
ut sort ( key=cmpfun , reverse=true )
ut sort ( key=lambda x : x count , reverse=true )
ut sort ( key=lambda x : x count , reverse=true ) 
driver find_element_by_partial_link_text ( 'send ' )  click ( )
driver findelement ( by linktext ( 'send inmail ' ) )  click ( )
driver find_element_by_link_text ( 'send inmail ' )  click ( )
'me ' + str ( i )
df sort_values ( [ 'system_num ' , 'dis ' ] )
open ( 'outfile ' , 'w ' )  write ( ' # test firstline\n ' + open ( 'infile ' )  read ( ) )
l sort ( key=lambda t : len ( t [ 1 ] ) , reverse=true )
re findall ( '\\b ( \\w+ ) d\\b ' , s )
bool ( re search ( 'ba [ rzd ] ' , 'foobarrrr ' ) )
list ( set ( t ) )
list ( set ( source_list ) )
list ( ordereddict fromkeys ( 'abracadabra ' ) )
numpy array ( a )  reshape ( -1 )  tolist ( )
numpy array ( a ) [ 0 ]  tolist ( )
print ( soup find ( text='address : ' )  findnext ( 'td ' )  contents [ 0 ] )
`` `` '' `` '' ''  join ( [ ( ' % d @ % d ' % t ) for t in l ] )
`` `` '' `` '' ''  join ( [ ( ' % d @ % d ' % ( t [ 0 ] , t [ 1 ] ) ) for t in l ] )
driver execute_script ( 'return document documentelement outerhtml ; ' )
[ i for i in teststr if re search ( '\\d+ [ xx ] ' , i ) ]
df [ 'a ' ] [ ( df [ 'b ' ] > 50 ) & ( df [ 'c ' ] == 900 ) ]
sorted ( o items ( ) )
sorted ( d )
sorted ( d items ( ) )
int ( '1 ' )
int ( )
t2 = [ map ( int , x ) for x in t1 ]
subprocess call ( [ ' /test sh ' ] )
subprocess call ( [ 'notepad ' ] )
[ val for pair in zip ( l1 , l2 ) for val in pair ]
encoded = base64 b64encode ( 'data to be encoded ' )
encoded = 'data to be encoded' encode ( 'ascii ' )
lol = list ( csv reader ( open ( 'text txt ' , 'rb ' ) , delimiter='\t ' ) )
getattr ( my_object , my_str )
print ( dict ( zip ( ld [ 0 ] , zip ( * [ list ( d values ( ) ) for d in ld ] ) ) ) )
sum ( [ pair [ 0 ] for pair in list_of_pairs ] )
d = ast literal_eval ( `` { 'code1':1 , 'code2':1 } '' )
[ word for word in mystring split ( ) if word startswith ( ' $ ' ) ]
text = re sub ( '^https ? : \\/\\/   * [ \\r\\n ] * ' , '' , text , flags=re multiline )
np where ( np in1d ( a , [ 1 , 3 , 4 ] )  reshape ( a shape ) , a , 0 )
np mean ( a , axis=1 )
subprocess call ( [ '/usr/bin/rscript ' , ' -- vanilla ' , '/pathto/myrscript r ' ] )
subprocess call ( '/usr/bin/rscript -- vanilla /pathto/myrscript r ' , shell=true )
writer writeheader ( )
df fillna ( df mean ( axis=1 ) , axis=1 )
time strftime ( ' % y- % m- % d % h : % m : % s ' , time localtime ( 1347517370 ) )
super ( derived , cls )  do ( a )
a [ np where ( ( a [ : , ( 0 ) ] == 0 ) * ( a [ : , ( 1 ) ] == 1 ) ) ]
re split ( ' + ' , 'hello world sample text ' )
len ( max ( words , key=len ) )
result [ 0 ] [ 'from_user ' ]
[ line split ( ) for line in open ( 'file txt ' ) ]
res = dict ( ( v , k ) for k , v in a items ( ) )
new_file = open ( 'path/to/file_name ext ' , 'w ' )
df groupby ( [ 'col1 ' , 'col2 ' ] ) [ 'col3 ' ]  nunique ( )  reset_index ( )
any ( key startswith ( 'emp $ $ ' ) for key in dict1 )
[ value for key , value in list ( dict1 items ( ) ) if key startswith ( 'emp $ $ ' ) ]
pd dataframe ( { 'email ' : sf index , 'list ' : sf values } )
print ( '\t' join ( map ( str , list ) ) )
print ( '\xd0\xbf\xd1\x80\xd0\xb8' encode ( 'raw_unicode_escape ' ) )
'sopet\xc3\xb3n' encode ( 'latin-1 ' )  decode ( 'utf-8 ' )
image = image resize ( ( x , y ) , image antialias )
re findall ( 'n ( ? < = [ ^n ] n ) n+ ( ? = [ ^n ] ) ( ? i ) ' , s )
print ( ' { 0 :  0f } % ' format ( 1 0 / 3 * 100 ) )
mylist sort ( key=lambda x : x [ 'title ' ] )
l sort ( key=lambda x : x [ 'title ' ] )
l sort ( key=lambda x : ( x [ 'title ' ] , x [ 'title_url ' ] , x [ 'id ' ] ) )
heapq nlargest ( 10 , range ( len ( l1 ) ) , key=lambda i : abs ( l1 [ i ] - l2 [ i ] ) )
soup find_all ( 'span ' , { 'class ' : 'stargryb sp ' } )
df to_sql ( 'test ' , engine , schema='a_schema ' )
brackets = re sub ( ' [ ^ ( ) { } [ \\ ] ] ' , '' , s )
list ( dict ( ( x [ 0 ] , x ) for x in l )  values ( ) )
[ line rstrip ( '\n ' ) for line in file ]
[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ]
[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ] 
for i in [ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ] : pass
for i in ( i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ) : pass
gen = ( i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ) for i in gen : pass
print ( testlist index ( element ) )
try : print ( testlist index ( element ) ) except valueerror : pass
max ( lis , key=lambda item : item [ 1 ] ) [ 0 ]
max ( lis , key=itemgetter ( 1 ) ) [ 0 ]
time sleep ( 1 )
`` `` '' , `` '' ''  join ( ' ( ' + ' , ' join ( i ) + ' ) ' for i in l )
b = models charfield ( max_length=7 , default='0000000 ' , editable=false )
sorted ( list5 , lambda x : ( degree ( x ) , x ) )
sorted ( list5 , key=lambda vertex : ( degree ( vertex ) , vertex ) )
( n for n in [ 1 , 2 , 3 , 5 ] )
newlist = [ v for i , v in enumerate ( oldlist ) if i not in removelist ]
f = open ( 'yourfile txt ' , 'w ' )
getattr ( obj , 'attr ' )
from functools import reduce reduce ( lambda a , b : a + b , ( ( 'aa ' , ) , ( 'bb ' , ) , ( 'cc ' , ) ) )
map ( lambda a : a [ 0 ] , ( ( 'aa ' , ) , ( 'bb ' , ) , ( 'cc ' , ) ) )
df [ 'range ' ]  replace ( ' , ' , '- ' , inplace=true )
zip ( * [ ( 'a ' , 1 ) , ( 'b ' , 2 ) , ( 'c ' , 3 ) , ( 'd ' , 4 ) ] )
zip ( * [ ( 'a ' , 1 ) , ( 'b ' , 2 ) , ( 'c ' , 3 ) , ( 'd ' , 4 ) ] ) 
result = ( [ a for ( a , b ) in original ] , [ b for ( a , b ) in original ] )
result = ( ( a for ( a , b ) in original ) , ( b for ( a , b ) in original ) )
zip ( * [ ( 'a ' , 1 ) , ( 'b ' , 2 ) , ( 'c ' , 3 ) , ( 'd ' , 4 ) , ( 'e ' , ) ] )
map ( none , * [ ( 'a ' , 1 ) , ( 'b ' , 2 ) , ( 'c ' , 3 ) , ( 'd ' , 4 ) , ( 'e ' , ) ] )
json dumps ( decimal ( '3 9 ' ) )
d [ 'mynewkey ' ] = 'mynewvalue '
data update ( { 'a ' : 1 , } )
data update ( dict ( a=1 ) )
data update ( a=1 )
max ( [ max ( i ) for i in matrix ] )
answer = str ( round ( answer , 2 ) )
ip = re findall ( ' [ 0-9 ] + ( ? : \\   [ 0-9 ] + ) { 3 } ' , s )
df groupby ( 'a ' )  filter ( lambda x : len ( x ) > 1 )
[ x for x in myfile splitlines ( ) if x ! = '' ]
lst = map ( int , open ( 'filename txt ' )  readlines ( ) )
plt colorbar ( mappable=mappable , cax=ax3 )
counter ( ' ' join ( df [ 'text ' ] )  split ( ) )  most_common ( 100 )
re findall ( ' (  + ? ) : (  + ? ) \\b ? ' , text )
list ( itertools combinations ( ( 1 , 2 , 3 ) , 2 ) )
datetime now ( pytz utc )
list2 = [ x for x in list1 if x ! = [ ] ]
list2 = [ x for x in list1 if x ]
return httpresponse ( data , mimetype='application/json ' )
re findall ( ' (  * ? ) \\ [   * ? \\ ] ' , example_str )
re findall ( ' (  * ? ) ( ? : \\ [   * ? \\ ] | $ ) ' , example_str )
re findall ( '\\ (  + ? \\ ) |\\w ' , ' ( zyx ) bc ' )
re findall ( '\\ ( (  * ? ) \\ ) | ( \\w ) ' , ' ( zyx ) bc ' )
re findall ( '\\ (   * ? \\ ) |\\w ' , ' ( zyx ) bc ' )
elements = [ ' % { 0 } % ' format ( element ) for element in elements ]
subprocess popen ( [ 'background-process ' , 'arguments ' ] )
[ mydict [ x ] for x in mykeys ]
dict ( [ ( 'name ' , 'joe ' ) , ( 'age ' , 22 ) ] )
data reshape ( -1 , j )  mean ( axis=1 )  reshape ( data shape [ 0 ] , -1 )
print ( s encode ( 'unicode-escape ' )  replace ( ' '' ' , '\\ '' ' ) )
re split ( ' ( \\w+ ) ' , s )
df plot ( kind='barh ' , stacked=true )
{ i [ 1 ] : i [ 0 ] for i in list ( mydictionary items ( ) ) }
[ i for i , j in enumerate ( mylist ) if 'how ' in j lower ( ) or 'what ' in j lower ( ) ]
isinstance ( obj , str )
isinstance ( o , str )
( type ( o ) is str )
isinstance ( o , str ) 
isinstance ( obj_to_test , str )
list2 extend ( list1 )
list1 extend ( mylog )
c extend ( a )
for line in mylog : list1 append ( line )
b append ( ( a [ 0 ] [ 0 ] , a [ 0 ] [ 2 ] ) )
app config [ 'secret_key ' ] = 'your_secret_string '
pd dataframe ( out tolist ( ) , columns= [ 'out-1 ' , 'out-2 ' ] , index=out index )
[ x for x in range ( len ( stocks_list ) ) if stocks_list [ x ] == 'msft ' ]
ax set_xticklabels ( labels , rotation=45 )
re sub ( ' [ ^\\w ] ' , ' ' , s )
os path basename ( os path dirname ( os path realpath ( __file__ ) ) )
print ( re findall ( `` '\\\\ [ 0-7 ] { 1,3 } ' '' , str ) )
re split ( ' [ ] ( ? = [ a-z ] +\\b ) ' , input )
re split ( ' [ ] ( ? = [ a-z ] ) ' , input )
r = requests post ( url , files=files , headers=headers , data=data )
open ( 'filename ' , 'wb ' )  write ( bytes_ )
[ dct [ k ] for k in lst ]
x set_index ( 'name ' )  index get_duplicates ( )
round ( 1 923328437452 , 3 )
sorted ( li , key=lambda x : datetime strptime ( x [ 1 ] , ' % d/ % m/ % y ' ) , reverse=true )
ax set_rlabel_position ( 135 )
os path isabs ( my_path )
len ( list ( yourdict keys ( ) ) )
len ( set ( open ( yourdictfile )  read ( )  split ( ) ) )
df groupby ( 'id ' )  first ( )
pd concat ( [ df [ 0 ]  apply ( pd series ) , df [ 1 ] ] , axis=1 )
re findall ( 'src= '' js/ ( [ ^ '' ] *\\bjquery\\b [ ^ '' ] * ) '' ' , data )
sum ( int ( float ( item ) ) for item in [ _f for _f in [ '' , '3 4 ' , '' , '' , '1 0 ' ] if _f ] )
subprocess popen ( [ 'c : \\program files\\vmware\\vmware server\\vmware-cmd bat ' ] )
q put ( ( -n , n ) )
df [ 'group ' ]  plot ( kind='bar ' , color= [ 'r ' , 'g ' , 'b ' , 'r ' , 'g ' , 'b ' , 'r ' ] )
re findall ( ' ( [ a-fa-f\\d ] { 32 } ) ' , data )
len ( my_list )
len ( l )
len ( s )
len ( my_tuple )
len ( my_string )
`` `` '' \\a '' '' ''  decode ( 'string_escape ' )
`` `` '' obama '' '' ''  replace ( 'a ' , ' % temp % ' )  replace ( 'b ' , 'a ' )  replace ( ' % temp % ' , 'b ' )
shutil rmtree ( '/folder_name ' )
data [ 'weekday ' ] = data [ 'my_dt ' ]  apply ( lambda x : x weekday ( ) )
sorted ( x , key=x get , reverse=true )
sorted ( list ( x items ( ) ) , key=lambda pair : pair [ 1 ] , reverse=true )
np vstack ( ( a , b ) ) 
print ( concatenate ( ( a , b ) , axis=0 ) )
print ( concatenate ( ( a , b ) , axis=1 ) )
c = np r_ [ ( a [ none , : ] , b [ none , : ] ) ]
np array ( ( a , b ) )
print ( socket getaddrinfo ( 'google com ' , 80 ) )
df xs ( 'sat ' , level='day ' , drop_level=false )
return httpresponse ( 'unauthorized ' , status=401 )
flask ( __name__ , template_folder='wherever ' )
session execute ( 'insert into t1 ( select * from t2 ) ' )
c2 sort ( key=lambda row : row [ 2 ] )
c2 sort ( key=lambda row : ( row [ 2 ] , row [ 1 ] , row [ 0 ] ) )
c2 sort ( key=lambda row : ( row [ 2 ] , row [ 1 ] ) )
matplotlib rc ( 'font ' , ** { 'sans-serif ' : 'arial ' , 'family ' : 'sans-serif ' } )
df [ 'date ' ]  apply ( lambda x : x toordinal ( ) )
element get_attribute ( 'innerhtml ' )
df index get_loc ( 'bob ' )
os system ( 'gnome-terminal -e \'bash -c `` sudo apt-get update ; exec bash '' \ '' )
my_dict update ( { 'third_key ' : 1 } )
my_list = [ ]
my_list append ( 12 )
mylist insert ( 0 , 'wuggah ' )
`` `` '' \\xf3\\xbe\\x80\\x80 '' '' ''  replace ( '\\x ' , '' )  decode ( 'hex ' )
df [ df columns [ -1 ] ]
df loc [ df [ 'letters ' ] == 'c ' , 'letters ' ]  values [ 0 ]
np column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )
type ( i )
type ( v )
type ( v ) 
type ( v )  
type ( v )   
print ( type ( variable_name ) )
next ( itertools islice ( range ( 10 ) , 5 , 5 + 1 ) )
print ( ' '' { } '' ' format ( word ) )
`` `` '' `` '' ''  join ( list )
y = [ [ ] for n in range ( 2 ) ]
data = [ line strip ( ) for line in open ( 'c : /name/mydocuments/numbers ' , 'r ' ) ]
`` `` '' '' '' ''  join ( [ char for char in 'it is icy ' if char ! = 'i ' ] )
re sub ( 'i ' , '' , 'it is icy ' )
`` `` '' it is icy '' '' ''  replace ( 'i ' , '' )
`` `` '' '' '' ''  join ( [ char for char in 'it is icy ' if char ! = 'i ' ] ) 
df dropna ( subset= [ 1 ] )
[ x for x in mylist if x n == 30 ]
nums = [ int ( x ) for x in intstringlist ]
map ( int , eval ( input ( 'enter the unfriendly numbers : ' ) ) )
sys stdout write ( '   ' )
int ( round ( 2 51 * 100 ) )
os chdir ( '/mydir ' ) for file in glob glob ( '* txt ' ) : pass
for file in os listdir ( '/mydir ' ) : if file endswith ( ' txt ' ) : pass
for ( root , dirs , files ) in os walk ( '/mydir ' ) : for file in files : if file endswith ( ' txt ' ) : pass
df plot ( legend=false )
for i in range ( 256 ) : for j in range ( 256 ) : ip = ( '192 168  % d  % d ' % ( i , j ) ) print ( ip )
for ( i , j ) in product ( list ( range ( 256 ) ) , list ( range ( 256 ) ) ) : pass
generator = iter_iprange ( '192 168 1 1 ' , '192 168 255 255 ' , step=1 )
sum ( 1 < < i for i , b in enumerate ( x ) if b )
target write ( ' % r\n % r\n % r\n ' % ( line1 , line2 , line3 ) )
[ y for x in data for y in ( x if isinstance ( x , list ) else [ x ] ) ]
print ( 'foo\nbar' encode ( 'string_escape ' ) )
`` `` '' '' '' ''  join ( s rsplit ( ' , ' , 1 ) )
( x [ 1 : ] + x [ : -1 ] ) / 2
x [ : -1 ] + ( x [ 1 : ] - x [ : -1 ] ) / 2
arr = numpy fromiter ( codecs open ( 'new txt ' , encoding='utf-8 ' ) , dtype= ' < u2 ' )
l = sorted ( l , key=itemgetter ( 'time ' ) , reverse=true )
l = sorted ( l , key=lambda a : a [ 'time ' ] , reverse=true )
df loc [ df [ 0 ]  str contains ( ' ( hel|just ) ' ) ]
re search ( '\\ [ (   * ) \\ ] ' , your_string )  group ( 1 )
[ d strftime ( ' % y % m % d ' ) for d in pandas date_range ( '20130226 ' , '20130302 ' ) ]
`` `` '' the big brown fox is brown '' '' ''  count ( 'brown ' )
json loads ( request body )
urllib request urlretrieve ( url , file_name )
text split ( )
text split ( ' , ' )
line split ( )
[ re sub ( ' ( ? < ! \\d ) \\  ( ? ! \\d ) ' , ' ' , i ) for i in s ]
sorted ( list_of_strings , key=lambda s : s split ( ' , ' ) [ 1 ] )
subprocess check_call ( 'vasp | tee tee_output ' , shell=true )
[ element for element in lst if isinstance ( element , int ) ]
[ element for element in lst if not isinstance ( element , str ) ]
newlist = sorted ( list_to_be_sorted , key=lambda k : k [ 'name ' ] )
newlist = sorted ( l , key=itemgetter ( 'name ' ) , reverse=true )
list_of_dicts sort ( key=operator itemgetter ( 'name ' ) )
list_of_dicts sort ( key=operator itemgetter ( 'age ' ) )
df groupby ( 'prots ' )  sum ( )  sort ( 'scores ' , ascending=false )
`` `` '' , '' '' ''  join ( trans [ 'category ' ] )
`` `` '' '' '' ''  join ( [ 'a ' , 'b ' , 'c ' , 'd ' ] )
json load ( urllib request urlopen ( 'url ' ) )
[ x for x in sents if not x startswith ( ' @ $ \t ' ) and not x startswith ( ' # ' ) ]
entry objects filter ( pub_date__contains='08:00 ' )
list sort ( key=lambda item : ( item [ 'points ' ] , item [ 'time ' ] ) )
( t - datetime datetime ( 1970 , 1 , 1 ) )  total_seconds ( )
re sub ( ' ( \\_a ) ? \\  ( [ ^\\   ] * ) $ ' , '_suff \\2 ' , 'long file name jpg ' )
import imp imp reload ( module )
struct unpack ( 'h ' , struct pack ( 'h ' , number ) )
numlist = [ float ( x ) for x in numlist ]
df to_csv ( filename , index=false )
json_data = json loads ( unescaped )
[ chr ( i ) for i in range ( 127 ) ]
newfile write ( struct pack ( '5b ' , *newfilebytes ) )
re sub ( '^ [ a-z0-9 ] * ( ? ! [ a-z ] ) ' , '' , string )
list ( dict keys ( ) ) [ -1 ]
print ( 'hi there ' , file=f )
f = open ( 'myfile ' , 'w ' ) f write ( 'hi there\n ' ) f close ( )
with open ( 'somefile txt ' , 'a ' ) as the_file : the_file write ( 'hello\n ' )
s encode ( 'iso-8859-15 ' )
authorizedemail objects filter ( group=group )  order_by ( '-added ' ) [ 0 ]
re findall ( 'test ( [ 0-9   ] * [ 0-9 ] + ) ' , text )
re findall ( 'test ( [ \\d   ] *\\d+ ) ' , text )
os system ( 'powershell exe ' , 'script ps1 ' )
b sort ( key=lambda x : x [ 1 ] [ 2 ] )
list ( cf get_range ( )  get_keys ( ) )
datetime datetime now ( )
next ( i for i , x in enumerate ( lst ) if not isinstance ( x , bool ) and x == 1 )
a [ : ] = [ ( x - 13 ) for x in a ]
random choice ( os listdir ( 'c : \\ ' ) )
max ( x min ( ) , x max ( ) , key=abs )
re findall ( ' '' ( http * ? ) '' ' , s , re multiline | re dotall )
re findall ( 'http : // [ ^t ] [ ^s '' ] +\\ html ' , document )
mystring replace ( ' ' , ' ! ! ' )  split ( ' ! ' )
open ( path , 'r ' )
[ [ sum ( item ) for item in zip ( *items ) ] for items in zip ( *data ) ]
a [ : , ( np newaxis ) ]
sorted ( l , key=lambda x : ( -int ( x [ 1 ] ) , x [ 0 ] ) )
[ int ( x ) for x in str ( num ) ]
c decode ( 'unicode_escape ' )
parser add_argument ( '-t ' , dest='table ' , help= '' , nargs='+ ' )
datetime datetime strptime ( s , ' % y- % m- % dt % h : % m : % sz ' )
np array ( x _data )  reshape ( x size [ : :-1 ] )  t
soup get_text ( )  replace ( '\n ' , '\n\n ' )
re sub ( ' ( ? < ! \\s ) ( ( \\s+ ) ( ? : \\s+\\2 ) ) ( ? : \\s+\\2 ) + ( ? ! \\s ) ' , '\\1 ' , s )
mylist sort ( key=lambda d : ( d [ 'weight ' ] , d [ 'factor ' ] ) )
itertools combinations
[ { 'a ' : 1 , 'c ' : 4 , 'b ' : 2 , 'd ' : 4 } , { 'a ' : 1 , 'c ' : 4 , 'b ' : 1 , 'd ' : 5 } ]
zip ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )
pygame display flip ( )
print ( [ l [ i : i + n ] for i in range ( len ( l ) ) for n in range ( 1 , len ( l ) - i + 1 ) ] )
comment objects all ( )  order_by ( '-hotness ' )
urllib parse unquote ( 'foo % e2 % 84 % a2 % 20bar ' )  decode ( 'utf-8 ' )
max ( min ( my_value , max_value ) , min_value )
pd get_dummies ( df )
re sub ( ' [ ^a-z ] ' , '' , s )
re compile ( '^ (  + ) \\n ( ( ? : \\n + ) + ) ' , re multiline )
`` `` '' { 0 : , 2f } '' '' ''  format ( 24322 34 )
[ d [ 'key ' ] for d in l ]
print ( max ( d , key=lambda x : ( d [ x ] [ 'salary ' ] , d [ x ] [ 'bonus ' ] ) ) )
[ x [ 1 ] for x in elements ]
root mainloop ( )
`` `` '' '' '' ''  join ( ' { } { } ' format ( key , val ) for key , val in list ( adict items ( ) ) )
struct unpack ( 'f ' , struct pack ( 'f ' , 0 00582811585976 ) )
df loc [ df index isin ( [ 'one ' , 'two ' ] ) ]
ax1 plot ( data [ 'x ' ] , data [ 'y ' ] , color='r ' , label='the data ' )
list sort ( key=lambda item : item [ 'date ' ] , reverse=true )
[ i for i , e in enumerate ( a ) if e ! = 0 ]
sorted ( the_list , key=lambda x : int ( x split ( '_ ' ) [ 1 ] ) )
max ( a_list , key=operator itemgetter ( 1 ) )
base metadata tables [ 'ticket_daily_history ' ]  create ( bind=engine )
df [ 'date ' ] = pd to_datetime ( df [ 'date ' ] , format= ' % d % b % y ' )
ordereddict ( [ ( 'c ' , 3 ) , ( 'e ' , 5 ) , ( 'a ' , '1 ' ) , ( 'b ' , '2 ' ) ] )
c execute ( 'select * from tbl ' )
driver find_element_by_xpath ( `` //li/label/input [ contains (    , 'polishpottery ' ) ] '' )
task objects exclude ( prerequisites__status__in= [ 'a ' , 'p ' , 'f ' ] )
[ item for item in a if item [ 0 ] == 1 ]
driver find_element_by_css_selector ( ' button c_button s_button ' )  click ( )
[ a [ i ] for i in ( 1 , 2 , 5 ) ]
sum ( len ( v ) for v in food_colors values ( ) )
driver execute_script ( 'window scrollto ( 0 , document body scrollheight ) ; ' )
re compile ( ' [ ^a-za-z0-9- ] ' )
plt show ( )
plt show ( ) 
plt show ( )  
output = subprocess popen ( [ 'mycmd ' , 'myarg ' ] , stdout=pipe )  communicate ( ) [ 0 ]
[ [ [ 4 , 4 , 4 ] , [ 4 , 4 , 4 ] , [ 4 , 4 , 4 ] ] , [ [ 4 ] , [ 4 ] , [ 4 ] ] ]
any ( d [ 'site ' ] == 'superuser ' for d in data )
re sub ( ' [ ^\\x00-\\x7f ] + ' , ' ' , text )
driver find_element_by_xpath ( `` //p [ @ id , 'one ' ] /following-sibling : :p '' )
my_series apply ( your_function , args= ( 2 , 3 , 4 ) , extra_kw=1 )
datetime datetime today ( )  strftime ( ' % y- % m- % d ' )
sorted ( list ( mydict items ( ) ) , key=lambda a : map ( int , a [ 0 ]  split ( '   ' ) ) )
datetime datetime strptime ( '2013-1-25 ' , ' % y- % m- % d ' )  strftime ( ' % m/ % d/ % y ' )
datetime datetime strptime ( '2013-1-25 ' , ' % y- % m- % d ' )  strftime ( ' % -m/ % d/ % y ' )
sorted ( list ( mydict items ( ) ) , key=lambda e : e [ 1 ] [ 2 ] )
driver find_elements_by_xpath ( `` //* [ contains ( text ( ) , 'my button ' ) ] '' )
driver find_element_by_css_selector ( ``  test_button4 [ value='update ' ] '' )  click ( )
sorted ( list ( tag_weight items ( ) ) , key=lambda x : int ( x [ 1 ] ) , reverse=true )
yourdata sort ( key=lambda e : e [ 'key ' ] [ 'subkey ' ] , reverse=true )
app config from_object ( 'config productionconfig ' )
print ( df loc [ df [ 'b ' ]  isin ( [ 'one ' , 'three ' ] ) ] )
max ( flatlist , key=lambda x : x [ 1 ] )
[ int ( x ) for x in '0,1,2' split ( ' , ' ) ]
df sort ( axis=1 , ascending=false )
subprocess call ( [ 'test sh ' , str ( domid ) ] )
[ i for i , j in zip ( a , b ) if i == j ]
point = namedtuple ( 'whatsmypurpose ' , [ 'x ' , 'y ' ] , verbose=true )
plt show ( )   
conn commit ( )
sorted ( list_of_tuples , key=lambda tup : tup [ 1 ] )
os system ( `` awk ' { print $ 10 , $ 11 } ' test txt > test2 txt '' )
r = int ( '' join ( map ( str , x ) ) )
datetime datetime now ( ) - datetime timedelta ( days=1 )
os system ( 'start excel exe < path/to/file > ' )
[ '0 ' , '182 ' , '283 ' , '388 ' , '470 ' , '579 ' , '757 ' , '' ]
array ( [ [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 ] , [ 0 , 0 , 1 , 1 ] , [ 0 , 0 , 1 , 1 ] ] )
`` `` '' name : { 0 [ person name ] } '' '' ''  format ( { 'person name ' : 'joe ' } )
json dumps ( { 'apple ' : 'cat ' , 'banana ' : 'dog ' , 'pear ' : 'fish ' } )
df [ 'a ' ] = df [ 'a ' ]  apply ( lambda x : x + 1 )
{ k : v for d in l for k , v in list ( d items ( ) ) }
urllib parse urlencode ( [ ( 'a ' , '1 ' ) , ( 'b ' , '2 ' ) , ( 'b ' , '3 ' ) ] )
a sort ( key=lambda x : b index ( x [ 0 ] ) )
li1 sort ( key=lambda x : not x startswith ( 'b   ' ) )
[ int ( s ) for s in re findall ( '\\b\\d+\\b ' , `` he33llo 42 i 'm a 32 string 30 '' ) ]
int ( ' 23 ' )
datetime datetime strptime ( 'january 11 , 2010 ' , ' % b % d , % y ' )  strftime ( ' % a ' )
dict ( ( k , 'updated ' ) for k , v in d items ( ) if v is none )
map ( int , re findall ( '\\d+ ' , s ) )
numpy array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
dict ( ( k , 'updated ' ) for k , v in d items ( ) if v ! = 'none ' )
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )
instance __class__ __name__
br form add_file ( open ( filename ) , 'text/plain ' , filename )
list ( itertools combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )
urllib parse quote_plus ( 'a b ' )
df [ 'col1 ' ] = df [ 'col1 ' ]  apply ( lambda i : '' join ( i ) )
[ int ( s [ i : i + 3 ] , 2 ) for i in range ( 0 , len ( s ) , 3 ) ]
indices = [ i for i , x in enumerate ( my_list ) if x == 'whatever ' ]
l = [ [ 'a ' , 'b ' ] , [ 'c ' , 'd ' ] , [ 'e ' ] ]
[ { 'a ' : 1 , 'c ' : 4 , 'b ' : 2 , 'd ' : 4 } , { 'a ' : 1 , 'c ' : 4 , 'b ' : 1 , 'd ' : 5 } ] 
`` `` '' 2 7 0_bf4fda703454 '' '' ''  split ( '_ ' )
sorted ( list ( data items ( ) ) , key=lambda x : x [ 1 ] )
driver find_element_by_xpath ( 'xpath ' )  click ( )
{ 'date ' : [ '123 ' , 'abc ' ] , 'foo ' : [ '456 ' , 'def ' ] , 'bar ' : [ '789 ' , 'ghi ' ] }
`` `` '' '' '' ''  join ( [ 'line 1\n ' , 'line 2\n ' ] )
[ ( 'foo ' , 'bar ' ) , ( 'key ' , 'val ' ) ]
f close ( )
df sort_values ( by='date ' )
df plot ( x='col_name_1 ' , y='col_name_2 ' , style='o ' )
datetime datetime now ( )  date ( )
soup find_all ( 'td ' , attrs= { 'bgcolor ' : ' # ffffcc ' } )
print ( ' ' join ( set ( s ) ) )
numpy array ( [ [ 0 , 1 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] )
[ d [ 'value ' ] for d in l ]
self writer writerow ( [ str ( s )  encode ( 'utf-8 ' ) for s in row ] )
' % s % s ' % ( 'foo ' , 'bar ' )
re compile ( ' [ a-za-z_ ] [ a-za-z0-9_ ] * ' )
[ i [ 0 ] for i in a ]
[ x for x in my_list if not x startswith ( ' # ' ) ]
sorted ( list ( data items ( ) ) , key=lambda x : x [ 1 ] [ 0 ] )
[ list ( g ) for _ , g in itertools groupby ( test , lambda x : x partition ( '_ ' ) [ 0 ] ) ]
sorted ( a , key=foo )
pd concat ( [ goog , aapl ] , keys= [ 'goog ' , 'aapl ' ] , axis=1 )
newstr = oldstr replace ( 'm ' , '' )
re sub ( ' [ ^a-za-z0-9-_*   ] ' , '' , my_string )
scipy sparse csr_matrix ( [ column [ 'rating ' ] , column [ 'user ' ] , column [ 'movie ' ] ] )
re sub ( ' [ ^0-9a-za-z ] + ' , '* ' , 'h^ & ell`  , |o w ] { +orld ' )
ax plot_trisurf ( xs , ys , zs )
map ( dict , zip ( * [ [ ( k , v ) for v in value ] for k , value in list ( d items ( ) ) ] ) )
re compile ( ' [ ^a-za-z0-9- ] + ' )
`` `` '' '' '' ''  join ( l )
df [ 'date ' ] = df [ 'date ' ]  apply ( lambda x : int ( str ( x ) [ -4 : ] ) )
datetime datetime strptime ( '03:55 ' , ' % h : % m ' )  time ( )
datetime datetime fromtimestamp ( ms / 1000 0 )
i = int ( input ( ' > > ' ) )
[ s [ i : i + 3 ] for i in range ( 0 , len ( s ) , 3 ) ]
db doc update ( { '_id ' : b [ '_id ' ] } , { ' $ set ' : { 'geoloccountry ' : mygeoloccountry } } )
os system ( 'ulimit -s unlimited ; some_executable ' )
np array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] )  tolist ( )
somemodel objects filter ( id=id )  delete ( )
print ( random choice ( words ) )
plt savefig ( 'pic ' , dpi=300 )
df fillna ( method='ffill ' , inplace=true )
re findall ( ' ( ? = ( [ a-z ] sqp|s [ a-z ] qp|ss [ a-z ] p|ssq [ a-z ] ) ) ' , s )
a sort ( key=lambda x_y : b index ( x_y [ 0 ] ) )
zipped sort ( key=lambda t : t [ 1 ] )
sorted ( list ( mydict keys ( ) ) , key=lambda a : map ( int , a split ( '   ' ) ) )
np where ( a == 1 )
f close ( ) 
table sort ( key=attrgetter ( 'points ' ) )
list ( itertools product ( *a ) )
df groupby ( [ 'stock ' , 'same1 ' , 'same2 ' ] ) [ 'positions ' ]  sum ( )  reset_index ( )
{ { request args get ( 'a ' ) } }
[ input [ i : i + n ] for i in range ( 0 , len ( input ) , n ) ]
`` `` '' '' '' ''  join ( set ( 'aaabcabccd ' ) )
subprocess popen ( [ 'bash ' , '-c ' , '   foo sh ; go ' ] )
zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] )
logging getlogger ( )  setlevel ( logging debug )
`` `` '' '' '' ''  join ( str ( x ) for x in range ( 1 , n + 1 ) )
`` `` '' { 0 month } / { 0 day } / { 0 year } '' '' ''  format ( my_date )
print ( round ( 1123 456789 , -1 ) )
[ ( 'id1 , pd1 ' , '5 0 , 7 5 , 8 1 ' ) , ( 'id2 , pd2 ' , '6 0 ' ) ]
re search ( '\\bis\\b ' , your_string )
sorted ( enumerate ( a ) , key=lambda x : x [ 1 ] )
re findall ( '\\s+ ' , str1 )
array ( [ [ true , true ] , [ false , false ] , [ false , false ] , [ true , true ] ] , dtype=bool )
random sample ( list ( range ( 100 ) ) , 10 )
re findall ( '\\ $ (  * ? ) \\ $ ' , ' $ sin ( x ) $ is an function of x ' )
max ( abs ( x - y ) for x , y in zip ( values [ 1 : ] , values [ : -1 ] ) )
a = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 0 ] , [ 0 ] , [ 0 ] ] ]
re split ( '\\ \\s ' , re sub ( '\\ \\s* $ ' , '' , text ) )
ax xaxis set_ticks_position ( 'top ' )
json loads ( open ( 'sample json ' )  read ( )  decode ( 'utf-8-sig ' ) )
request params getall ( 'c ' )
sorted ( nums , key=lambda x : tuple ( reversed ( list ( map ( int , x split ( '/ ' ) ) ) ) ) )
l = [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ]
[ dict ( ( k , v ) for k , v in d items ( ) if k ! = 'mykey1 ' ) for d in mylist ]
df to_xml ( 'foo xml ' )
df unstack ( )
driver find_element_by_css_selector ( `` a [ href^='javascript ' ] '' )  click ( )
os path expanduser ( '~user ' )
my_function __name__
[ dict ( y ) for y in set ( tuple ( x items ( ) ) for x in d ) ]
soup findall ( 'a ' , attrs= { 'href ' : re compile ( '^http : // ' ) } )
[ item strip ( ) for item in my_string split ( ' , ' ) ]
map ( int , '42 0' split ( ) )
sum ( d values ( ) )
cursor execute ( 'insert into table values ( % s , % s , % s ) ' , ( var1 , var2 , var3 ) )
decimal decimal ( random randrange ( 10000 ) ) / 100
root destroy ( )
[ d [ 'value ' ] for d in l if 'value ' in d ]
any ( d [ 'name ' ] == 'test ' for d in label )
df set_index ( 'id ' )  t to_dict ( 'list ' )
driver find_element_by_css_selector ( ' button  c_button  s_button ' )  click ( )
pandas concat ( [ df1 , df2 ] , axis=1 )
[ 'p ' , 'y ' , 't ' , 'h ' , 'o ' , 'n ' , ' ' , 'r ' , 'o ' , 'c ' , 'k ' , 's ' ]
os system ( `` zsh -c 'echo $ 0 ' '' )
int ( s split ( '   ' ) [ 0 ] )
a astype ( [ ( 'x ' , ' < f8 ' ) , ( 'y ' , ' < f8 ' ) , ( 'z ' , ' < f8 ' ) ] )  view ( ' < f8 ' )
[ ( x , y ) for x , y in a if x == 1 ]
re sub ( '\\*+ ' , '* ' , text )
open ( 'file txt ' , 'w ' )  close ( )
logging info ( 'some info ' )
re split ( '\\w+ ' , 'words , words , words   ' )
sorted ( iter ( dict_ items ( ) ) , key=lambda x : x [ 1 ] )
df1 groupby ( [ 'key ' , 'year ' ] )  size ( )  reset_index ( )
ord ( 'a ' )
root geometry ( '500x500 ' )
datetime datetime strptime ( '2007-03-04t21:08:12 ' , ' % y- % m- % dt % h : % m : % s ' )
len ( li ) - 1 - li [ : :-1 ]  index ( 'a ' )
my_date strftime ( ' % -m/ % -d/ % y ' )
[ { k : v for k , v in d items ( ) if k ! = 'mykey1 ' } for d in mylist ]
df sort ( 'm ' )
print ( ' { } , you won ! ' format ( name ) )
df groupby ( 'id ' )  cumcount ( ) + 1
ftp retrbinary ( 'retr % s ' % filename , file write )
xs sort ( key=lambda s : len ( s ) )
len ( set ( mylist ) ) == 1
plt show ( )    
hex ( ord ( 'a ' ) )
new_img save ( 'tweeter_green png ' )
ctypes windll user32 messageboxw ( 0 , 'error ' , 'error ' , 0 )
plt show ( )     
re sub ( ' < [ ^ < ] + ? > ' , '' , text )
__init__ py
[ len ( x ) for x in s split ( ) ]
[ ( i // 2 ) for i in range ( 10 ) ]
re findall ( '- ( ? ! aa|bb ) ( [ ^- ] + ) ' , string )
re findall ( '- ( ? ! aa-|bb- ) ( [ ^- ] + ) ' , string )
content objects all ( )  order_by ( ' ? ' ) [ :100 ]
bin ( ord ( 'p ' ) )
df replace ( '- ' , 'nan ' )
sorted ( iter ( result items ( ) ) , key=lambda key_value : key_value [ 0 ] )
json dumps ( json dumps ( { 'color ' : 'color ' , 'message ' : 'message ' } ) )
[ [ 'string 1 ' , 'atest string : ' ] , [ 'string 1 ' , 'test 2 : anothertest string ' ] ]
[ i for i , v in enumerate ( l ) if v [ 0 ] == 53 ]
cv2 imwrite ( 'warped png ' , warped )
`` `` '' \\u003cp\\u003e '' '' ''  decode ( 'unicode-escape ' )
ax scartter ( xs , ys , zs )
cursor execute ( 'insert into `index` ( url ) values ( % s ) ' , ( url , ) )
kdll createsymboliclinkw ( 'd : \\testdirlink ' , 'd : \\testdir ' , 1 )
df sort ( df columns , axis=1 , ascending=false )
linregress ( df [ 'col_x ' ] , df [ 'col_y ' ] )
[ ( k , v ) for k , v in a items ( ) ]
os system ( 'script2 py 1 ' )
sorted ( d , key=lambda x : datetime datetime strptime ( x , ' % m- % y ' ) )
list ( range ( 9 ) )
l sort ( key=operator itemgetter ( 1 ) )
plt show ( )      
dict ( ( k , v ) for k , v in parent_dict items ( ) if 2 < k < 4 )
os path dirname ( os path abspath ( existgdbpath ) )
imtag = re match ( ' < img   * ? > ' , line )  group ( 0 )
{ 'cmd ' : [ 'python ' , ' $ file ' , 'arg1 ' , 'arg2 ' ] }
parser parsefile ( open ( 'sample xml ' , 'rb ' ) )
re findall ( '\\ [ [ ^\\ ] ] *\\ ] | '' [ ^ '' ] * '' |\\s+ ' , s )
os path basename ( os path normpath ( '/foldera/folderb/folderc/folderd/ ' ) )
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in lst ] )
re split ( ' ( ? < = [ \\ \\ ? ! ] ) ' , text )
df groupby ( 'a ' ) [ 'c ' ]  apply ( lambda x : x sum ( ) )
df groupby ( level= [ 0 , 1 ] )  median ( )
df [ 'cat1 ' ]  fillna ( df [ 'cat2 ' ] )
print ( ( 'total score for ' , name , 'is ' , score ) )
plt show ( )       
my_list [ -10 : ]
my_string split ( '\n ' , 1 ) [ 0 ]
[ k for k , g in itertools groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]
subprocess call ( [ 'java ' , '-jar ' , 'blender jar ' ] )
d apply ( lambda row : min ( [ row [ 'a ' ] , row [ 'b ' ] ] ) - row [ 'c ' ] , axis=1 )
subprocess call ( 'mv /home/somedir/subdir/* somedir/ ' , shell=true )
all ( isinstance ( x , int ) for x in lst )
strs = [ '' for x in range ( size ) ]
os system ( 'net use p : /delete ' )
[ 'foo ' , 'bar ' , 'one , two ' , 'three four ' ]
browser find_element_by_class_name ( 'section-select-all ' )  click ( )
[ [ x [ i , j ] for i in range ( x shape [ 0 ] ) ] for j in range ( x shape [ 1 ] ) ]
os rename ( 'joe blow ' , 'blow , joe ' )
driver find_element_by_id ( ' < check_box_id > ' )  is_selected ( )
fh1 seek ( 2 )
results = [ item [ 'value ' ] for item in test_data ]
driver find_element_by_xpath ( `` //div [ @ id='a ' ] //a [ @ class='click ' ] '' )
re sub ( 'l+ ' , 'l ' , 'lollll ' )
( '/static/ (   * ) ' , web staticfilehandler , { 'path ' : '/var/www ' } ) ,
pd merge ( df reset_index ( ) , df , on='sseqid ' )
[ d for d in a if d [ 'name ' ] == 'pluto ' ]
( i + 1 , j ) , ( i - 1 , j ) , ( i , j - 1 ) , ( i , j + 1 ) , ( i + 1 , j - 1 ) , ( i + 1 , j + 1 )
list ( dict ( ( x [ 'id ' ] , x ) for x in l )  values ( ) )
print ( ' [ { 0 } , { 1 } , { 2 } ] ' format ( 1 , 2 , 3 ) )
[ [ x [ i , j ] for j in range ( x shape [ 1 ] ) ] for i in range ( x shape [ 0 ] ) ]
s [ :4 ] + '- ' + s [ 4 : ]
`` `` '' '' '' ''  join ( set ( foo ) )
df groupby ( 'a ' )  apply ( lambda x : x sum ( ) )
array ( [ [ 3 , 0 , 0 ] , [ 0 , 1 , 2 ] , [ 2 , 1 , 3 ] ] )
url rsplit ( '/ ' , 1 ) [ -1 ]
os system ( 'clear ' )
[ ( 0 , 4 ) , ( 7 , 9 ) , ( 11 , 11 ) ]
hex ( dec )  split ( 'x ' ) [ 1 ]
s setsockopt ( sol_socket , so_reuseaddr , 1 )
[ m start ( ) for m in re finditer ( 'test ' , 'test test test test ' ) ]
ax set_yscale ( 'log ' )
[ x for y , x in sorted ( zip ( y , x ) ) ]
myfunc ( lambda a , b : iadd ( a , b ) )
re compile ( '^ (  + ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? )  + ) + ) ' , re multiline )
sorted ( list ( statuses items ( ) ) , key=lambda x : getitem ( x [ 1 ] , 'position ' ) )
plt gca ( )  invert_yaxis ( )
df groupby ( [ 'saleid ' , 'upc ' ] )  size ( )  unstack ( fill_value=0 )
numpy where ( mask )
df groupby ( 'a ' ) [ 'c ' ]  apply ( lambda x : ' { % s } ' % ' , ' join ( x ) )
sorted ( list ( dictionary items ( ) ) , key=lambda x : x [ 1 ] )
self request get ( 'var_name ' )
dict ( zip ( keys , values ) )
numpy array ( [ ( x in a ) for x in b ] )
p stdin flush ( )
glob glob ( '/home/username/www/* ' )
[ [ 0 , 1 , 2 , 3 , 4 ] , [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ] , [ 0 , 1 , 2 , 3 , 4 ] ]
re split ( '\\s+ ' , str1 )
soup find_all ( 'a ' , href=re compile ( '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+ - ] * : |// ) ) ' ) )
plt axis ( 'off ' )
dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] )
self response out write ( str ( parsed_data [ 'translatedtext ' ] ) )
plt show ( )        
list ( set ( 'aaabcabccd ' ) )
np outer ( a , b )
'used\u200b' replace ( '\u200b ' , '* ' )
np argwhere ( np all ( arr == [ [ 0 , 3 ] , [ 3 , 0 ] ] , axis= ( 1 , 2 ) ) )
[ x [ 0 ] for x in g ]
app run ( debug=true )
x_train = scaler fit ( x_train )  transform ( x_train )
re findall ( ' [ -+ ] ? \\d*\\ \\d+|\\d+ ' , 'current level : -13 2 db or 14 2 or 3 ' )
os kill ( process pid , signal sigkill )
article objects values ( 'pub_date ' )  annotate ( article_count=count ( 'title ' ) )
'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438' split ( )
dict ( ( k , v ) for k , v in zip ( keys , values ) )
print ( re match ( ' ( \\d+ ( \\ \\d+ ) ? ) ' , '3434 ' )  group ( 1 ) )
{ 'top ' : [ 'foo ' , 'bar ' , 'baz ' ] , 'bottom ' : [ 'qux ' ] }
s = pd series ( [ 'a ' , 'b ' , 'a1r ' , 'b2 ' , 'aabb4 ' ] )
[ set ( item ) for item in set ( frozenset ( item ) for item in l ) ]
df groupby ( pd cut ( df [ 'b ' ] , np arange ( 0 , 1 0 + 0 155 , 0 155 ) ) )  sum ( )
x [ ( np arange ( x shape [ 0 ] ) ! = 1 ) , : , : ]
re sub ( ' ( < form   * ? action= '' ) ( [ ^ '' ] + ) ' , '\\1newlogin php ' , content )
itertools permutations ( [ 1 , 2 , 3 ] )
str decode ( 'utf-8 ' )  replace ( '\u2022 ' , '* ' )
urllib parse quote_plus ( 'string_of_characters_like_these : $ # @ = ? % ^q^ $ ' )
plt show ( )         
driver find_element_by_name ( ' < check_box_name > ' )  is_selected ( )
s = u encode ( 'utf-8 ' )
dict ( ( k , globals ( ) [ k ] ) for k in ( 'foo ' , 'bar ' ) )
( i + 1 , j ) , ( i - 1 , j ) , ( i , j - 1 ) , ( i , j + 1 ) , ( i - 1 , j - 1 ) , ( i + 1 , j - 1 )
mixed replace ( '\r\n ' , '\n ' )  replace ( '\r ' , '\n ' )
subprocess call ( [ 'shutdown ' , '/r ' ] )
subprocess call ( [ 'shutdown ' , '/l ' ] )
df [ 'features ' ] = df [ 'features ' ]  apply ( frozenset )
[ ( i , sum ( j ) / len ( j ) ) for i , j in list ( d items ( ) ) ]
' \r 42\n\r \t\n \r0\n\r\n' split ( )
[ int ( s ) for s in example_string split ( ' , ' ) ]
sum ( d [ 'success ' ] for d in s )
dict ( map ( int , x split ( ' : ' ) ) for x in s split ( ' , ' ) )
df groupby ( level=0 )  agg ( [ 'sum ' , 'count ' , 'std ' ] )
df plot ( title='title here ' )
[ ( ' %  2d ' % i ) for i in range ( 16 ) ]
df sort ( [ 'year ' , 'month ' , 'day ' ] )
plot legend ( loc=2 , prop= { 'size ' : 6 } )
`` `` '' [ { 0 } , { 1 } , { 2 } ] '' '' ''  format ( 1 , 2 , 3 )
datetime datetime now ( )  strftime ( ' % a ' )
dogtail rawinput click ( 100 , 100 )
pd merge ( a , b , on= [ 'a ' , 'b ' ] , how='outer ' )
str decode ( 'utf-8 ' )  replace ( '\u2022 ' , '* ' )  encode ( 'utf-8 ' )
sorted ( d , key=lambda k : d [ k ] [ 1 ] )
data loc [ : , ( [ ( 'one ' , 'a ' ) , ( 'one ' , 'c ' ) , ( 'two ' , 'a ' ) , ( 'two ' , 'c ' ) ] ) ]
re sub ( '\\*\\*+ ' , '* ' , text )
df reset_index ( )  groupby ( 'city_id ' )  sum ( )
[ item for item in a if 1 in item ]
' % 0 12d ' % random randint ( 0 , 999999999999 )
mymodel objects filter ( text__regex='^  { 254 }   * ' )
os chdir ( ' \\chapter3 ' )
os chdir ( 'c : \\users\\username\\desktop\\headfirstpython\\chapter3 ' )
session query ( entry )  join ( entry tags )  filter ( tag id == 1 )  count ( )
webbrowser open ( 'http : //somesite com/adminpanel/index php ' )
list ( d values ( ) )
ax set_xlabel ( 'temperature ( $ ^\\circ $ c ) ' )
df reset_index ( )  groupby ( [ 'a ' , 'block ' ] ) [ 'index ' ]  apply ( np array )
[ x [ 1 ] for x in l ]
re sub ( ' ( ? < = [ a-z ] ) \\r ? \\n ' , ' ' , textblock )
df div ( df sum ( axis=1 ) , axis=0 )
sum ( your_list )
x , y = np random randint ( 20 , size= ( 2 , 100 ) ) + np random rand ( 2 , 100 )
map ( int , [ '1 ' , '-1 ' , '1 ' ] )
[ sum ( [ x [ 1 ] for x in i ] ) for i in data ]
[ k for k , v in i items ( ) if v == 0 ]
[ { 'key1 ' : a , 'key2 ' : b } for a , b in zip ( d [ 'key1 ' ] , d [ 'key2 ' ] ) ]
pd read_csv ( 'd : /temp/tt csv ' )
datalist sort ( key=lambda x : x [ 1 ] )
re split ( ' [ ^a-za-z ] * ' , 'your string ' )
fig subplots_adjust ( left=0 , bottom=0 , right=1 , top=1 , wspace=none , hspace=none )
df [ 'a ' ]  tolist ( )
print ( ' %  2f kg = %  2f lb = %  2f gal = %  2f l ' % ( var1 , var2 , var3 , var4 ) )
plt show ( )          
sorted ( [ [ 1 , 'mike ' ] , [ 1 , 'bob ' ] ] )
tuple ( int ( x strip ( ) ) for x in input ( )  split ( ' , ' ) )
re sub ( 'a* ' , 'a ' , 'aaabbbccc ' )
sorted ( list ( d items ( ) ) , key=lambda v : int ( v [ 0 ]  split ( '- ' ) [ 0 ] ) )
sum ( 1 for i in it )
list ( 'hello ' )
sum ( x * y for x , y in list ( zip ( a , b ) ) )
print ( ' %  3f ' % 3 1415 )
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ]
datetime datetime strptime ( '24052010 ' , ' % d % m % y ' )  date ( )
p = subprocess popen ( cmd , stdout=sys stdout , stderr=sys stderr )
dateutil parser parse ( '2013/09/11 00:17 +0900 ' )
`` `` '' < br/ > '' '' ''  join ( [ ( ' % s : : % s ' % ( key , value ) ) for key , value in list ( d items ( ) ) ] )
df [ 'period ' ] = df apply ( period , axis=1 )
print ( [ item for item in dir ( adfix ) if not item startswith ( '__ ' ) ] )
driver execute_script ( 'window scrollto ( 0 , y ) ' )
os system ( 'screencapture screen png ' )
db collection find ( { } , { '_id ' : false } )
return httpresponse ( status=204 )
df apply ( lambda x : x tolist ( ) , axis=1 )
re sub ( ' ( ? < =\\w ) ( [ a-z ] ) ' , ' \\1 ' , 'wordwordwwwwwwword ' )
list sort ( )
etree register_namespace ( '' , 'http : //www w3 org/2000/svg ' )
df dropna ( subset= [ 'city ' , 'latitude ' , 'longitude ' ] , how='all ' )
df index = pd to_datetime ( df [ 'trx_date ' ] )
[ int ( x ) for x in bin ( 8 ) [ 2 : ] ]
re sub ( '^ ( (  * ? cat * ? ) { 1 } ) cat ' , '\\1bull ' , s )
re sub ( '^ ( ( ? : ( ? ! cat )   ) *cat ( ? : ( ? ! cat )   ) * ) cat ' , '\\1bull ' , s )
df apply ( lambda row : label_race ( row ) , axis=1 )
s [ : s rfind ( ' & ' ) ]
os system ( 'my_pdf pdf ' )
sorted ( list_of_tuples , key=lambda tup : tup [ : :-1 ] )
df reset_index ( )  groupby ( 'a ' ) [ 'index ' ]  apply ( np array )
re match ( ' ( ftp|http ) : // *\\   ( jpg|png ) $ ' , s )
df loc [ df [ 'column_name ' ]  isin ( some_values ) ]
s rfind ( ' & ' )
df set_index ( [ 'timestamp ' , 'objectid ' ] ) [ 'result ' ]  unstack ( )  plot ( kind='bar ' )
plt show ( )           
[ try_int ( x ) for x in [ 'sam ' , '1 ' , 'dad ' , '21 ' ] ]
[ x for x in items if x [ 2 ] == 0 ]
os path split ( os path abspath ( existgdbpath ) )
df [ 'a ' ]  values tolist ( )
[ 'yyya ' , 'yyyb ' , 'yyyc ' ]
re findall ( ' ( ? = ( a   * ? a ) ) ' , 'a 1 a 2 a 3 a 4 a ' )
dict ( [ ( 'a ' , 1 ) , ( 'b ' , 2 ) , ( 'c ' , 3 ) ] )
l sort ( key=alphanum_key )
emaillist = '\n' join ( [ item [ 0 ] for item in queryresult ] )
sample objects filter ( date__year='2011 ' , date__month='01 ' )
c = [ ( a - b ) for a , b in zip ( a , b ) ]
df loc [ df [ 'a ' ] == 1 , 'b ' ]  sum ( )
s in [ 'true ' , '1 ' , 't ' , 'y ' , 'yes ' , 'yeah ' , 'yup ' , 'certainly ' , 'uh-huh ' ]
print ( ' [ % i , % i , % i ] ' % ( 1 , 2 , 3 ) )
`` `` '' '' '' ''  join ( [ 'a ' , 'b ' , 'c ' , 'd ' ] )
print ( '' join ( uppers ) )
output = open ( '/home/user/test/wsservice/data pkl ' , 'wb ' )
celery_always_eager = true
browser find_element_by_css_selector ( 'ul     span hover ' )  click ( )
sorted ( words , key=lambda x : 'a ' + x if x [ :1 ] == 's ' else 'b ' + x )
[ x for x in l if x [ 1 ] == 1 ]
sorted ( persons , key=lambda x : x [ 'passport ' ] [ 'birth_info ' ] [ 'date ' ] )
df [ ~df index duplicated ( ) ]
driver execute_script ( `` arguments [ 0 ]  style border = '1px solid red ' ; '' )
df [ [ 'col1 ' , 'col2 ' , 'col3 ' , 'col4 ' ] ]
print ( len ( [ x for x in lst if x is not none ] ) )
b = { a [ i ] : a [ i + 1 ] for i in range ( 0 , len ( a ) , 2 ) }
eval ( '20 < 30 ' )
list ( '5+6 ' )
url ( '^ ' , include ( 'sms urls ' ) ) ,
url ( '^ $ ' , include ( 'sms urls ' ) ) ,
print ( [ key for key , value in list ( d items ( ) ) if value == 1 ] )
re findall ( ' ( ? = ( \\w+\\s+\\w+ ) ) ' , 'b d e ' )
[ '002 ' , '020 ' , 'key ' , 'value ' ]
[ i for i in y if y [ i ] == 1 ]
bar sort ( key=lambda x : ( x attrb1 , x attrb2 ) , reverse=true )
print ( soup get_text ( ) )
`` `` '' `` '' ''  join ( re split ( ' [ ^a-za-z ] * ' , 'your string ' ) )
[ [ 1 , 100313 , 0 , 0 , 1 ] , [ 2 , 100313 , 0 , 0 , 1 ] , [ 1 , 100314 , 0 , 1 , 0 ] , [ 3 , 100315 ] ]
print ( ' '' hello , \\nworld ! `` ' decode ( 'string_escape ' ) )
soup find_all ( 'div ' , class_=re compile ( 'comment- ' ) )
re findall ( ' ( [ a-z ] ) * ' , 'f233op ' )
re findall ( ' ( [ a-z ] * ) ' , 'f233op ' )
animals objects filter ( name__startswith='a ' )
sock setsockopt ( socket sol_socket , socket so_reuseaddr , 1 )
driver execute_script ( 'return lastalert ' )
[ j for i in zip ( a , b ) for j in i ]
pd concat ( [ df1 [ 'c ' ] , df2 [ 'c ' ] ] , axis=1 , keys= [ 'df1 ' , 'df2 ' ] )
df groupby ( df index )  sum ( )
re split ( '\\ \\s ' , text )
example = [ x replace ( '\r\n ' , '' ) for x in example ]
[ ( d [ 'name ' ] , d [ 'age ' ] ) for d in thisismylist ]
plt gca ( )  invert_xaxis ( )
mymodel objects extra ( select= { 'length ' : 'length ( name ) ' } )  order_by ( 'length ' )
struct pack ( ' < i ' , 1633837924 )
s groupby ( grouper )  sum ( )
df sort ( [ 'c1 ' , 'c2 ' ] , ascending= [ true , true ] )
[ 'long ' , 'string ' , 'that ' , 'i want to split up ' ]
sample objects filter ( date__range= [ '2011-01-01 ' , '2011-01-31 ' ] )
print ( '\u25b2' encode ( 'utf-8 ' ) )
[ 4 , 5 , 5 , 6 , 6 , 6 ]
os environ [ 'debussy ' ] = '1 '
self request url
print ( df to_xml ( ) )
logging basicconfig ( )
[ y for x in list ( dict items ( ) ) for y in x ]
sorted ( lst , reverse=true )
[ x for x in a if x ! = [ 1 , 1 ] ]
group objects filter ( player__name__in= [ 'player1 ' , 'player2 ' ] )
getattr ( getattr ( myobject , 'id ' , none ) , 'number ' , none )
wx textctrl ( self , -1 , size= ( 300 , -1 ) )
[ ( 'a ' , ' < i4 ' ) , ( 'b ' , ' < i4 ' ) , ( 'c ' , ' < i4 ' ) ]
[ ( 'a ' , '|o4 ' ) , ( 'b ' , '|o4 ' ) , ( 'c ' , '|o4 ' ) ]
print ( bool ( a ) )
re sub ( ' ( ? m ) ^\\s+ ' , '' , 'a\n b\n c ' )
`` `` '' - '' '' ''  join ( a + b for a , b in zip ( s [ : :2 ] , s [ 1 : :2 ] ) )
set ( [ 3 , 5 , 7 , 9 ] )
os path dirname ( os path abspath ( __file__ ) )
request meta [ 'http_host ' ]
s replace ( ' ' , '' )
re match ( '^ ( a+ ) + $ ' , 'a ' * 24 + ' ! ' )
re match ( ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' , str )
sorted ( a , key=lambda x : ( len ( x ) , [ confrom [ card [ 0 ] ] for card in x ] ) )
df sort_values ( by=1 , ascending=false , axis=1 )
parser add_argument ( ' -- conf ' , nargs=2 , action='append ' )
list ( map ( int , [ '1 ' , '2 ' , '3 ' ] ) )
parser add_argument ( 'input ' , nargs='+ ' )
df [ 'b ' ]
list ( itertools islice ( it , 0 , n , 1 ) )
a setdefault ( 'somekey ' , [ ] )  append ( 'bob ' )
sys stdout flush ( )
return httpresponse ( json dumps ( response_data ) , content_type='application/json ' )
re sub ( ' ( http : //\\s+|\\s* [ ^\\w\\s ] \\s* ) ' , '' , a )
plt show ( )            
array ( [ [ 1 , 2 ] , [ 2 , 0 ] ] )
next ( iter ( list ( dict values ( ) ) ) )
map ( int , re findall ( '\\d+ ' , string1 ) )
[ d [ 'name ' ] for d in thisismylist ]
numpy array ( [ [ 1 , 2 ] , [ 2 , 3 , 4 ] ] )
{ x [ 1 ] : x for x in lol }
plt show ( )             
a [ : ] = [ x for x in a if x ! = [ 1 , 1 ] ]
sorted ( mylist , key=lambda x : order index ( x [ 1 ] ) )
[ line for line in open ( 'textfile ' ) if 'apple ' in line ]
re compile ( '\xe2\x80\x93 ' )
`` `` '' `` '' ''  join ( l [ -1 : ] + l [ : -1 ] )
cv2 destroyallwindows ( )
[ 'alaska alabama arkansas american samoa ' , 'zona california colorado ' ]
df set_index ( 'id ' ) [ 'value ' ]  to_dict ( )
print ( my_string split ( ' , ' , 1 ) [ 1 ] )
re compile ( 'a^ ' )
[ '5 ' , '+ ' , '6 ' ]
matplotlib pyplot show ( )
datetime datetime strptime ( '2011 , 4 , 0 ' , ' % y , % u , % w ' )
open ( 'filename ' , 'w ' )  write ( '\n' join ( ' % s % s ' % x for x in mylist ) )
print ( '' join ( [ str ( t )  strip ( ) for t in x findall ( text=true ) ] ) )
sum ( map ( lambda x : x * x , l ) )
df [ df index map ( lambda x : x [ 1 ]  endswith ( '0630 ' ) ) ]
map ( list , permutations ( [ 2 , 3 , 4 ] ) )
cursor execute ( 'insert into table ( `column1` ) values ( % s ) ' , ( value , ) )
`` `` '' , `` '' ''  join ( [ ' { } _ { } ' format ( k , v ) for k , v in d items ( ) ] )
df [ 'col ' ] = pd to_datetime ( df [ 'col ' ] )
sorted ( lst , key=lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) , reverse=true )
np einsum ( '     j ,     j- >     ' , vf , vf )
df loc [ df [ 'column_name ' ] == some_value ]
unittest main ( )
sorted ( item , key=lambda x : x id )
np cumsum ( x [ : :-1 ] ) [ : :-1 ]
pd concat ( [ df1 , df2 ] , axis=1 )
plot ( [ 0 , 0 5 ] , [ 0 5 , 0 5 ] , [ 0 5 , 0 5 ] , [ 0 5 , 1 ] , [ 0 5 , 1 ] , [ 1 , 1 ] )
keys sort ( key=lambda k : ( k [ 0 ] , int ( k [ 1 : ] ) ) )
sorted ( lst , key=lambda x : ( x < 0 , x ) )
[ ( v , k ) for k , v in a items ( ) ]
map ( sum , zip ( *l ) )
int ( datetime datetime strptime ( '01/12/2011 ' , ' % d/ % m/ % y ' )  strftime ( ' % s ' ) )
soup find_all ( [ 'a ' , 'div ' ] )
df [ ( df iloc [ : , -12 : ] == -1 )  any ( axis=1 ) ]
[ value for key , value in list ( programs items ( ) ) if 'new york ' in key lower ( ) ]
df loc [ ~df [ 'column_name ' ]  isin ( some_values ) ]
fig add_subplot ( 1 , 1 , 1 )
datetime strptime ( '2012-06-25 01:17:40 273000 ' , ' % y- % m- % d % h : % m : % s  % f ' )
[ 'c ' , 'b ' , 'a ' , 'obj ' , 'a ' , 'a ' ]
print ( any ( x in a for x in b ) )
[ 'us ' , 'us ' , 'uk ' ]
df [ 'season2 ' ] = df [ 'season ' ]  apply ( lambda x : split_it ( x ) )
ast literal_eval ( `` ( 'item 1 ' , [ 1,2,3,4 ] , [ 4,3,2,1 ] ) '' )
df to_csv ( 'c : \\data\\t csv ' , index=false )
print ( [ key for key , value in d items ( ) if value == 1 ] )
[ i for i in y if y [ i ] > 1 ]
getattr ( your_obj , x )
txt = open ( 'file txt ' )  read ( )
new_list = [ ( x + 1 ) for x in my_list ]
np sum ( a )
sorted ( unsorted , key=lambda element : ( element [ 1 ] , element [ 2 ] ) )
df groupby ( [ df date dt year , df date dt month ] )  count ( )  plot ( kind='bar ' )
f close ( )  
winsound playsound ( 'sound wav ' , winsound snd_filename )
os path normpath ( ' ( path-to-wiki ) /foo/bar txt ' )  startswith ( ' ( path-to-wiki ) ' )
`` `` '' test mp3 '' '' ''  endswith ( ( ' mp3 ' , ' avi ' ) )
vectorizer get_feature_names ( )
[ 'hello ' , '' , '' , '' , '' , '' , '' , '' , 'there ' ]
a reshape ( -1 , 3 , 3 , 3 , 3 , 3 )  transpose ( 0 , 2 , 4 , 1 , 3 , 5 )  reshape ( 27 , 27 )
df set_index ( 'id ' )  to_dict ( )
pygame display update ( )
[ [ 1 , 100313 , 0 , 0 , 1 ] , [ 2 , 100313 , 0 , 0 , 1 ] , [ 1 , 100314 ] , [ 3 , 100315 ] ]
your_list sort ( key=lambda x : x anniversary_score )
pd series ( pd periodindex ( df date dt to_period ( 't ' ) + 1 )  to_timestamp ( ) )
`` `` '' '' '' ''  join ( str ( i ) for i in ( 34 2424 , -64 2344 , 76 3534 , 45 2344 ) )
mymodel objects order_by ( ' ? ' )  first ( )
[ k for k , v in dicta items ( ) if v count ( 'duck ' ) > 1 ]
re split ( ' ( d ( d ) d ) ' , 'aaa bbb ccc ddd eee fff ' , 1 )
re split ( ' ( ddd ) ' , 'aaa bbb ccc ddd eee fff ' , 1 )
set ( [ 1 , 2 , 3 ] ) ^ set ( [ 3 , 4 , 5 ] )
driver find_element_by_id ( 'foo ' )  clear ( )
x = array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] )
time sleep ( 1 )
[ 'birthday : ' , 'education ' , 'job : ' , 'child sex : ' ]
[ ( lst [ i ] , lst2 [ i ] ) for i in range ( len ( lst ) ) ]
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ a , b , c , d ] ) )
df [ [ 'id ' , 'name ' ] ]  join ( [ a , b ] )
[ x [ 0 ] for x in os walk ( directory ) ]
db coll find ( { 'fieldname ' : { ' $ exists ' : 1 } } )  count ( )
grouped apply ( lambda x : linregress ( x [ 'col_x ' ] , x [ 'col_y ' ] ) )
numpy dot ( numpy array ( [ [ 1 ] , [ 2 ] ] ) , numpy array ( [ [ 3 , 4 ] ] ) )
print ( ' [ % s , % s , % s ] ' % ( 1 , 2 , 3 ) )
self kwargs [ 'slug ' ]
image open ( 'pathtofile ' )  show ( )
all ( i < j for i , j in zip ( a , b ) )
webbrowser open ( 'file : ///my_pdf pdf ' )
set ( [ 'a ' , 'b ' ] )  issubset ( set ( l ) )
re findall ( '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' , strs )
sorted ( set ( itertools chain from_iterable ( sequences ) ) )
df = df reset_index ( )
sorted ( lst , key=lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) )
cursor execute ( 'insert into index ( url ) values ( % s ) ' , ( url , ) )
mylist = [ 'base ' , 'sample ' , 'test ' ]
my_datetime strftime ( ' % b % d , % y ' )
print ( re sub ( ' [ \x00-\x7f ] ' , '' , '\xa3100 is worth more than \u20ac100 ' ) )
keys sort ( key=lambda x : [ int ( y ) for y in x split ( '   ' ) ] )
ftp storbinary ( 'stor myfile txt ' , open ( 'myfile txt ' , 'rb ' ) )
[ sorted ( item ) for item in data ]
print ( os path getmtime ( '/tmp ' ) )
print ( t decode ( 'unicode_escape ' ) )
print ( browser current_url )
print ( re findall ( '\\d+ ' , '\n' join ( re findall ( '\xab ( [ \\s\\s ] * ? ) \xbb ' , text ) ) ) )
f write ( ' # data for class a\n ' )
`` `` '' '' '' ''  join ( lst )
sorted ( words , key=lambda x : 'a ' + x if x startswith ( 's ' ) else 'b ' + x )
db session commit ( )
df groupby ( [ 'employer_key ' , 'account_id ' ] ) [ 'login_date ' ]
[ 'a ' , 'c ' , 'b ' , 'obj ' ]
[ m start ( ) for m in re finditer ( ' ( ? =tt ) ' , 'ttt ' ) ]
`` `` '' 437c2123 '' '' ''  decode ( 'hex ' )
s = s replace ( '\\ ' , '\\\\ ' )
os chdir ( '  /nodes ' )
driver get ( 'http : //www google com ' )
yourdf drop ( [ 'columnheading1 ' , 'columnheading2 ' ] , axis=1 , inplace=true )
[ list ( a ) for a in zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]
`` `` '' '' '' ''  join ( soup findall ( text=true ) )
print ( data [ 'places ' ] [ 'latitude ' ] )
df groupby ( [ df index date , 'action ' ] )  count ( )  plot ( kind='bar ' )
new_string = re sub ( ' '' ( \\d+ ) , ( \\d+ ) '' ' , '\\1 \\2 ' , original_string )
importlib import_module ( 'a b c ' )
sum ( j ** i for i , j in enumerate ( l , 1 ) )
np fromstring ( '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' , dtype= ' > f4 ' )
sys path append ( '/path/to/main_folder ' )
g = df groupby ( [ 'manufacturer ' , 'product launch date ' , 'product name ' ] )  sum ( )
df [ 'cumsum ' ] = df [ 'win1 ' ]  cumsum ( )
pygame display update ( ) 
df = pd dataframe ( { 'a ' : [ 1 , 2 , 3 , 4 ] , 'b ' : [ 1 , 1 , 2 , 2 ] } )
reducefn ( { 'physics ' : 1 } , { 'volume ' : 1 , 'chemistry ' : 1 } , { 'chemistry ' : 1 } )
b = dict ( zip ( a [ 0 : :2 ] , a [ 1 : :2 ] ) )
[ 'n ' , 'e ' , 'v ' , 'r ' , ' ' , 'g ' , 'o ' , 'a ' , 'i ' , 'y ' , 'u ' , 'p ' ]
[ 'x ' , ' ' , 'y ' , 'y ' , ' ' , 'z ' ]
datetime datetime strptime ( str_date , ' % m/ % d/ % y ' )  date ( )  isoformat ( )
pd concat ( [ df , res ] , axis=1 )
df groupby ( 'a ' )  apply ( f )
plt savefig ( 'test png ' , bbox_inches='tight ' )
df groupby ( 'colour ' )  size ( )  plot ( kind='bar ' )
any ( np equal ( a , [ 1 , 2 ] )  all ( 1 ) )
datetime datetime now ( )  date ( ) 
dict ( x [ 1 : ] for x in reversed ( mylistoftuples ) )
re findall ( ' [ ^a ] ' , 'abcd ' )
multi_level_dict ( [ 'a ' , 'b ' ] , [ 'a ' , 'b ' ] , [ '1 ' , '2 ' ] )
df groupby ( [ 'a ' , 'name ' ] )  median ( )  index get_level_values ( 'name ' )
all ( x in [ 'b ' , 'a ' , 'foo ' , 'bar ' ] for x in [ 'a ' , 'b ' ] )
pattern = re compile ( ' ( ? : review : ) ? ( http : //url com/ ( \\d+ ) ) \\s ? ' , re ignorecase )
[ ( k , v ) for k , v in d items ( ) if 'light ' in k ]
s send ( 'hello server ! ' )
df groupby ( [ 'cluster ' , 'org ' ] )  mean ( )
{ key : val for key , val in list ( mydict items ( ) ) if val ! = 42 }
[ k for k , v in d items ( ) if v == desired_value ]
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in data ]
df [ [ 'hour ' , 'weekday ' , 'weeknum ' ] ] = df apply ( lambdafunc , axis=1 )
request post getlist ( 'pass_id ' )
np mean ( np array ( [ old_set , new_set ] ) , axis=0 )
globals ( ) [ 'myfunction ' ] ( )
pat = re compile ( '^\\d { 1,3 } \\ \\d { 1,3 } \\ \\d { 1,3 } \\ \\d { 1,3 } $ ' )
{ k : bigdict [ k ] for k in ( 'l ' , 'm ' , 'n ' ) }
df [ 'race_label ' ] = df apply ( lambda row : label_race ( row ) , axis=1 )
self request get ( 'name-of-querystring-variable ' )
pyplot legend ( loc=2 , fontsize='x-small ' )
json loads ( request post get ( 'mydata ' , ' { } ' ) )
plt subplots_adjust ( top=0 5 )
sorted ( the_list , key=lambda k : int ( k split ( '_ ' ) [ 1 ] ) )
setattr ( my_class_instance , 'attr_name ' , attr_value )
subprocess call ( [ 'mv ' , '/home/somedir/subdir/* ' , 'somedir/ ' ] )
d = { 'dict1 ' : { 'foo ' : 1 , 'bar ' : 2 } , 'dict2 ' : { 'baz ' : 3 , 'quux ' : 4 } }
sorted ( list_of_medals , key=lambda x : ( -x [ 1 ] , x [ 0 ] ) )
re compile ( 'author\\ ( s\\ ) : ( (  +\\n ) + ) ' )
`` `` '' '' '' ''  join ( ' { } { } ' format ( key , val ) for key , val in sorted ( adict items ( ) ) )
tuple ( map ( int , input ( )  split ( ' , ' ) ) )
[ [ 2 , 3 , 0 ] , [ 1 , 2 , 3 ] , [ 1 , 0 , 0 ] ]
dict_list = { 'a ' : 1 , 'b ' : 2 , 'c ' : 3 , 'd ' : 4 }
[ ' : error : ' , 'cc1plus : ' ]
plt plot ( list ( range ( 10 ) ) , linestyle= ' -- ' , marker='o ' , color='b ' )
myredis lpush ( 'foo ' , * [ 1 , 2 , 3 , 4 ] )
plt show ( )              
df groupby ( np arange ( len ( df columns ) ) // 3 , axis=1 )  mean ( )
pd melt ( df , id_vars='date ' ) [ [ 'date ' , 'value ' ] ]
urlfetch fetch ( url , headers= { 'user-agent ' : 'myapplication_user-agent ' } )
`` `` '' 42 0 '' '' ''  split ( )
print ( ( key , value ) )
print ( '   ' join ( [ item [ 0 ] for item in data ] ) )
self pushbutton clicked connect ( self showdial )
dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) )
hashtags = re findall ( ' # ( \\w+ ) ' , str1 , re unicode )
df index values tolist ( )
[ 'subject ' , 'filer , subject ' , 'filer ' , 'activity , subject ' ]
all ( dict values ( ) )
[ [ int ( x ) for x in sublist ] for sublist in lst ]
webbrowser open ( 'file : // ' + os path realpath ( filename ) )
np diff ( arr [ : , ( 1 ) ] )
replace ( ' '' ' , '\\ '' ' )
urllib request urlretrieve ( 'http : //search twitter com/search json ? q=hi ' , 'hi json ' )
func ( *args )
x = numpy loadtxt ( 'somefile csv ' , delimiter= ' , ' )
subprocess call ( 'dir /q ' , shell=true )
re search ( '^ (  * ? ) ( arguments :  * ? ) ? ( returns :   * ) ? $ ' , s , re dotall )
plt show ( )               
img = img convert ( 'rgb ' )
data [ : , ( [ 1 , 9 ] ) ]
int ( '55063 000000 ' )
parent = relationship ( 'parent ' , backref=backref ( 'children ' , lazy='noload ' ) )
`` `` '' '' '' ''  join ( random choice ( string lowercase ) for x in range ( x ) )
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ) 
lambda a , b : a + b
df = df [ [ 'x ' , 'y ' , 'a ' , 'b ' ] ]
unsorted_list sort ( key=lambda x : x [ 3 ] )
ordereddict ( [ ( 'a ' , none ) , ( 'b ' , none ) , ( 'c ' , none ) , ( 'd ' , none ) , ( 'e ' , none ) ] )
df index get_level_values ( 0 )  unique ( )
plt show ( )                
map ( int , str ( num ) )
df drop ( df columns [ [ 0 , 1 , 3 ] ] , axis=1 )
[ [ [ x [ 0 ] ] for x in y ] for y in listd ]
df set_index ( [ 'company ' , 'date ' ] , inplace=true )
super ( executive , self )  __init__ ( *args )
all ( isinstance ( x , int ) for x in lst ) 
[ x [ 1 ] for x in countries if x [ 0 ] == 'as ' ] [ 0 ]
pd dataframe ( df columns [ np argsort ( df values ) ] , df index , np unique ( df values ) )
df groupby ( [ 'country ' , 'item_code ' ] ) [ [ 'y1961 ' , 'y1962 ' , 'y1963 ' ] ]  sum ( )
df groupby ( df columns , axis=1 )  sum ( )
city objects filter ( name__nospaces='newyork ' )
a [ 'x ' ]  apply ( lambda x , y : x + y , args= ( 100 , ) )
d3 = { key : ( d1 [ key ] - d2 get ( key , 0 ) ) for key in list ( d1 keys ( ) ) }
plt show ( )                 
ax set_xticks ( [ ] )
datetime datetime fromtimestamp ( mynumber )  strftime ( ' % y- % m- % d % h : % m : % s ' )
os path dirname ( os path abspath ( __file__ ) ) 
arr [ : , ( 1 ) ]
ast literal_eval ( ' [ ( 0,0,0 ) , ( 0,0,1 ) , ( 1,1,0 ) ] ' )
numpy loadtxt ( open ( 'test csv ' , 'rb ' ) , delimiter= ' , ' , skiprows=1 )
x = np array ( [ [ 1 , 2 , 3 , 4 , 5 ] , [ 4 , 5 , 6 , 7 , 8 ] ] , np int32 )
json loads ( ' { `` foo '' : 42 , `` bar '' : `` baz '' } ' ) [ 'bar ' ]
array ( [ true , false , false , true ] , dtype=bool )
urllib parse unquote ( h path encode ( 'utf-8 ' ) )  decode ( 'utf-8 ' )
print ( data [ 'places ' ] [ 0 ] [ 'post code ' ] )
plt show ( )                  
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , ' ! a_b ' )
df groupby ( df date dt month )  count ( )  plot ( kind='bar ' )
df1 set_index ( 'date ' , inplace=true )
sorted ( list ( a_dict items ( ) ) , key=lambda item : item [ 1 ] [ 1 ] )
dict ( ( k , v ) for d in dicts for k , v in list ( d items ( ) ) )
numpy random random ( ( 3 , 3 ) )
[ x [ 'value ' ] for x in list_of_dicts ]
s resample ( '3m ' , how='sum ' )
df = pd read_csv ( 'comma csv ' , quotechar= '' ' '' )
db commit ( )
img = image new ( 'rgb ' , ( 200 , 100 ) , ( 255 , 255 , 255 ) )
request headers [ 'your-header-name ' ]
[ x for x in my_list if not any ( c isdigit ( ) for c in x ) ]
arr [ arr ! = 0 ]  min ( )
struct unpack ( '4b ' , struct pack ( 'i ' , 100 ) )
os chdir ( os path dirname ( __file__ ) )
`` `` '' , '' '' ''  join ( str ( i ) for i in range ( 100 ) if i % 4 in ( 1 , 2 ) )
{ k : bigdict get ( k , none ) for k in ( 'l ' , 'm ' , 'n ' ) }
plt show ( )                   
exec ( compile ( open ( 'file py ' )  read ( ) , 'file py ' , 'exec ' ) )
' { ' + ' , ' join ( ' { 0 ! r } : { 1 ! r } ' format ( *x ) for x in list ( dct items ( ) ) ) + ' } '
print ( [ i for i in re split ( ' ( [ \\d   ] +|\\w+ ) ' , 'x+13 5*10x-4e1 ' ) if i ] )
inputtag = soup findall ( attrs= { 'name ' : 'stainfo ' } )
df head ( )
subprocess check_output ( [ 'espeak ' , text ] , stderr=subprocess stdout )
open ( 'some_path ' , 'r+ ' )
pd concat ( [ students , pd dataframe ( marks ) ] , axis=1 )
dict ( zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) )
`` `` '' insert into egg values ( 'egg ' ) ; '' '' ''  encode ( 'ascii ' )
threading thread ( target=sudsmove )  start ( )
zip ( *list_of_tuples )
df join ( s apply ( lambda x : series ( x split ( ' : ' ) ) ) )
[ ( 'jamy ' , 'park ' , 'kick ' ) , ( 'see ' , 'it ' , 'works ' ) ]
df [ 'column ' ] = df [ 'column ' ]  astype ( 'str ' )
a = open ( 'pdf_reference pdf ' , 'rb ' )  read ( )  encode ( 'base64 ' )
sum ( d values ( ) ) 
root mainloop ( ) 
test ( [ 'important ' , 'comment ' , 'bar ' ] )
print ( ' ' join ( sorted ( d , key=lambda k : len ( d [ k ] ) , reverse=true ) ) )
plt show ( )                    
mylist = [ i for i in range ( 10 ) ]
a = [ [ ] for i in range ( 3 ) ]
`` `` '' '' '' ''  join ( chr ( ord ( c ) ) for c in 'andr\xc3\xa9 ' )  decode ( 'utf8 ' )
df groupby ( 'dummy ' )  agg ( { 'returns ' : [ np mean , np sum ] } )
dict ( map ( lambda s : s split ( ' : ' ) , [ 'a:1 ' , 'b:2 ' , 'c:3 ' , 'd:4 ' ] ) )
df groupby ( [ 'stock ' , 'same1 ' , 'same2 ' ] , as_index=false ) [ 'positions ' ]  sum ( )
plt show ( )                     
a split ( '\n ' ) [ : -1 ]
`` `` '' abc '' '' ''  translate ( maketrans ( 'abcabc ' , 'defdef ' ) )
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ]
del my_list [ 2:6 ]
sys stdout flush ( ) 
subprocess call ( [ 'shutdown ' , '/a ' ] )
subprocess call ( [ 'shutdown ' , '/s ' ] )
urlfetch fetch ( url , deadline=10 * 60 )
s decode ( 'ascii ' )
plt show ( )                      
sys exit ( app exec_ ( ) )
project_root = os path abspath ( os path dirname ( __file__ ) )
plt show ( )                       
root destroy ( ) 
plt show ( )                        
locale setlocale ( locale lc_all , 'english ' )
l1 sort ( key=lambda x : int ( x [ 0 ] ) )
my_list sort ( key=lambda x : x [ 1 ] )
subprocess call ( [ 'shutdown ' , '/r ' , '/t ' , '900 ' ] )
print ( 'total score for % s is % s ' % ( name , score ) )
br select_form ( nr=0 )
self treeview connect ( 'size-allocate ' , self treeview_changed )
plt show ( )                         
heapq nlargest ( 3 , iter ( mydict items ( ) ) , key=lambda tup : sum ( tup [ 1 ] ) )
df to_csv ( 'mydf tsv ' , sep='\t ' )
x = [ [ ] for i in range ( 3 ) ]
thisrdd = sc parallelize ( range ( 10 ) , 2 )  cache ( )
time sleep ( 5 )
unset_ones ( np array ( [ 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 ] ) , 3 )
plt show ( )                          
pygame display set_mode ( ( 0 , 0 ) , pygame fullscreen )
[ list ( d keys ( ) ) for d in lod ]
df = pd read_csv ( 'filename txt ' , sep= ' ; ' , names= [ 'region name ' ] )
df value astype ( str )  apply ( list )  apply ( pd series )  astype ( int )
os system ( 'su hadoop -c `` bin/hadoop-daemon sh stop tasktracker '' ' )
df [ 'season ' ]  str split ( '- ' )  str [ 0 ]  astype ( int )
driver find_element_by_xpath ( `` //option [ @ value= ' '' + state + `` ' ] '' )  click ( )
`` `` '' '' '' ''  join ( chr ( ord ( c ) ) for c in 'andr\xc3\xa9 ' )
re sub ( '\\w*\\d\\w* ' , '' , words )  strip ( )
server = smtplib smtp ( 'smtp gmail com:587 ' )
`` `` '' \\ud83d\\ude4f '' '' ''  encode ( 'utf-16 ' , 'surrogatepass ' )  decode ( 'utf-16 ' )
cur execute ( `` select * from records where email like ' % s ' '' , [ search ] )
isinstance ( s , str )
[ index for index , letter in enumerate ( word ) if letter == 'e ' ]
[ '136 139 277 24 ' , '246 ' ]
find_majority ( [ 1 , 2 , 3 , 4 , 3 , 3 , 2 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 6 , 5 ] )
a [ tuple ( b ) ]
plt show ( )                           
[ [ [ x [ 0 ] ] for x in listd [ i ] ] for i in range ( len ( listd ) ) ]
[ row [ 0 ] for row in a ]
t xpath ( '//a [ @ href = `` http : //exact url '' ] ' ) [ 0 ]
x , y = np random rand ( 2 , 100 ) * 20
y = str ( int ( x , 16 ) )
s sort ( key=operator itemgetter ( 1 , 2 ) )
driver = webdriver firefox ( )
from functools import reduce reduce ( lambda x , y : x * y , [ 1 , 2 , 3 , 4 , 5 , 6 ] )
df loc [ df [ 'column_name ' ] ! = some_value ]
`` `` '' '' '' ''  join ( sel select ( '//body//text ( ) ' )  extract ( ) )  strip ( )
root mainloop ( )  
instancelist = [ myclass ( ) for i in range ( 29 ) ]
df head ( ) 
df sort ( [ 'a ' , 'b ' ] , ascending= [ true , false ] )
df groupby ( [ 'cluster ' ] )  mean ( )
any ( [ true , false , false ] )
os system ( 'tcsh your_own_script ' )
np delete ( 1 , 1 )
ax xaxis set_major_locator ( maxnlocator ( integer=true ) )
datetime datetime strptime ( '16sep2012 ' , ' % d % b % y ' )
[ float ( i ) for i in lst ]
return os path join ( home , 'downloads ' )
dict ( ( k , bigdict [ k ] ) for k in ( 'l ' , 'm ' , 'n ' ) )
np savetxt ( 'test txt ' , data )
'm\\n { ampersand } m\\n { apostrophe } s' decode ( 'unicode-escape ' )
'\u50b5' encode ( 'utf-8 ' )
print ( 'your string' decode ( 'string_escape ' ) )
mystring split ( ' , ' )
sns set_style ( 'whitegrid ' , { 'axes grid ' : false } )
df groupby ( [ 'employer_key ' , 'account_id ' ] )
url split ( ' & ' )
print ( ' ' join ( ordereddict fromkeys ( s ) ) )
df to_csv ( 'filename csv ' , header=false )
ax xaxis set_ticks_position ( 'top ' ) 
[ ( x * x ) for x in range ( 10 ) ]
x = numpy delete ( x , 0 , axis=0 )
choices = { 'key1 ' : 'val1 ' , 'key2 ' : 'val2 ' }
re sub ( '   *i ' , 'i ' , stri )
[ x [ 0 ] for x in a ]
plt show ( )                            
[ div [ 'class ' ] for div in soup find_all ( 'div ' ) ]
[ 'a ' , 'a ' , 'a ' , 'b ' , 'b ' , 'b ' , 'c ' , 'c ' , 'c ' , 'd ' , 'd ' , 'd ' , 'e ' , 'e ' , 'e ' ]
max ( enumerate ( a ) , key=lambda x : x [ 1 ] ) [ 0 ]
f = open ( 'example txt ' , 'r ' )
logging info ( 'test ' )
pd merge ( df1 , df2 , left_index=true , right_index=true , how='outer ' )
ws range ( 'a1 ' )  characters
mymodel objects extra ( where= [ 'char_length ( text ) > 254 ' ] )
a = [ ( sum ( x ) / len ( x ) ) for x in zip ( *a ) ]
[ 'home ' , 'about ' , 'music ' , 'photos ' , 'stuff ' , 'contact ' ]
tree write ( 'c xml ' , encoding='utf-8 ' )
msglist = [ hextotal [ i : i + 4096 ] for i in range ( 0 , len ( hextotal ) , 4096 ) ]
max ( d , key=lambda x : d [ x ] [ 'count ' ] )
driver set_window_size ( 1400 , 1000 )
os path realpath ( os path join ( root , name ) )
data decode ( 'latin-1 ' )  encode ( 'utf-8 ' )
re compile ( '\u2013 ' )
subprocess call ( 'start /wait python bb py ' , shell=true )
datetime strptime ( '2010-11-13 10:33:54 227806 ' , ' % y- % m- % d % h : % m : % s  % f ' )
browser find_elements_by_xpath ( `` //* [ @ type='submit ' ] '' )  get_attribute ( 'value ' )
list ( set ( frozenset ( item ) for item in l ) )
mylist = [ i for i in range ( 10 ) if i % 2 == 0 ]
formatter = logging formatter ( ' % ( asctime ) s ; % ( levelname ) s ; % ( message ) s ' )
vol extend ( ( volumea , volumeb , volumec ) )
response = requests put ( url , data=json dumps ( data ) , headers=headers )
pandas concat ( [ df [ 'foo ' ]  dropna ( ) , df [ 'bar ' ]  dropna ( ) ] )  reindex_like ( df )
level4 objects filter ( level3__level2__level1=my_level1_object )
df2 = df reset_index ( )
plt show ( )                             
pylab ylim ( [ 0 , 1000 ] )
d stack ( )  groupby ( level=0 )  apply ( pd series value_counts )  unstack ( )  fillna ( 0 )
root findall ( ' { http : //www w3 org/2002/07/owl # } class ' )
plt show ( )                              
df drop ( 'a ' , level=1 , axis=1 )
[ [ x [ 0 ] for x in listd [ 3 ] ] ]
package_directory = os path dirname ( os path abspath ( __file__ ) )
df1 sort ( [ 'a ' , 'b ' ] , ascending= [ true , false ] , inplace=true )
print ( 'i have : { 0 price } ' format ( card ) )
`` `` '' { 1 } { ham } { 0 } { foo } { 1 } '' '' ''  format ( 10 , 20 , foo='bar ' , ham='spam ' )
subprocess call ( [ 'echo ' , 'ni ' ] , shell=true )
`` `` '' [ a-za-z\\d- ] { ,63 } ( \\   [ a-za-z\\d- ] { ,63 } ) * '' '' ''
any ( item [ 2 ] == 0 for item in items )
dict ( ( v , k ) for k , v in map items ( ) )
df groupby ( pd timegrouper ( '5min ' ) ) [ 'val ' ]  apply ( lambda x : len ( x ) > 3 )
counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - counter ( [ 1 , 2 ] )
requests get ( 'https : //kennethreitz com ' , verify=false )
pd merge ( df1 , df2 , on= [ 'a ' , 'b ' , 'c ' , 'd ' ] , how='inner ' )
time strptime ( 'mon jul 09 09:20:28 +0000 2012 ' , ' % a % b % d % h : % m : % s +0000 % y ' )
`` `` '' `` '' ''  join ( my_list )
request get get ( 'id ' )
print ( 'value is `` { } '' ' format ( value ) )
[ re split ( '_ ( ? : f ? or|and ) _ ' , s ) for s in l ]
re sub ( '\\b0+ ( ? ! \\b ) ' , '' , '012+2+0-01+204-0 ' )
plt show ( )                               
cursor execute ( 'insert into table values ( % s , % s , % s ) ' , ( var1 , var2 , var3 ) ) 
pd concat ( [ df1 , df2 ] , axis=1 , keys= [ 'precedingword ' , 'comp ' ] )
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]
glob glob ( 'hello* txt ' )
glob glob ( ' [ ! hello ] * txt ' )
book objects filter ( author__id=1 )  filter ( author__id=2 )
{ k : v for d in dicts for k , v in list ( d items ( ) ) }
re sub ( '\\b (  + ) ( \\s+\\1\\b ) + ' , '\\1 ' , s )
time_zone = 'europe/istanbul '
re search ( 'is ' , string )  start ( )
doc xpath ( `` //a [ starts-with ( text ( ) , 'some text ' ) ] '' )
df drop ( 'column_name ' , axis=1 , inplace=true )
plt yscale ( 'log ' , nonposy='clip ' )
sum ( item [ 'gold ' ] for item in mylist )
item = re sub ( ' \\ ( \\w+\\ ) ' , '' , item )
[ item for item in my_list if 1 < = item < = 5 ]
re compile ( '\\w+ ' )  findall ( 'hello world , my name is     james the 2nd ! ' )
plt xticks ( dates , rotation='25 ' )
re sub ( ' ( \\d+ ) ' , ' '' \\1 '' ' , 'this is number 1 and this is number 22 ' )
url ( '^mah_root/ $ ' , 'someapp views mah_view ' , name='mah_view ' ) ,
pd dataframe ( d )
[ 'eighty ' , 'seven ' , 'miles ' , 'to ' , 'go ' , 'yet ' , 'onward ' ]
sum ( my_counter values ( ) )
[ tuple ( int ( i ) for i in el strip ( ' ( ) ' )  split ( ' , ' ) ) for el in s split ( ' ) , ( ' ) ]
df sort ( 'c ' )  drop_duplicates ( subset= [ 'a ' , 'b ' ] , take_last=true )
sorted ( list ( data items ( ) ) , key=lambda x : x [ 1 ] ) 
df sort ( [ 'peak ' , 'weeks ' ] , ascending= [ true , false ] , inplace=true )
[ i split ( ) for i in re findall ( '\\ [ ( [ ^\\ [ \\ ] ] + ) \\ ] ' , a ) ]
print ( ' { 0 : < 15 } { 1 : < 15 } { 2 : < 8 } ' format ( '1 ' , '2 ' , '3 ' ) )
logging getlogger ( 'urllib3 ' )  setlevel ( logging warning )
[ [ x [ i ] [ j ] for j in range ( len ( x [ i ] ) ) ] for i in range ( len ( x ) ) ]
map ( int , [ '1 ' , '2 ' , '3 ' ] )
dict ( ( k , v ) for k , v in hand items ( ) if v )
df replace ( '- ' , np nan )
df [ 'season2 ' ] = df [ 'season ' ]  apply ( split_it )
df = pd dataframe ( np random randn ( 10 , 5 ) , columns= [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ] )
re search ( '\\bis\\b ' , string )  start ( )
sorted ( data values ( ) )
__init__ py 
getattr ( test , a_string )
time strptime ( '04/25/2005 10:19 ' , ' % m/ % d/ % y % h : % m ' )
folder = os path join ( 'c : \\ ' , 'users ' , 'sprinting ' , 'blue ' )
sys path insert ( 0 , '   ' )
pd merge ( frame_1 , frame_2 , left_on='county_id ' , right_on='countyid ' )
server = smtplib smtp ( host='smtp gmail com ' , port=587 )
len ( dict_test ) + sum ( len ( v ) for v in dict_test values ( ) )
[ o my_attr for o in my_list ]
plt show ( )                                
f close ( )   
sorted ( [ '14:10:01 ' , '03:12:08 ' ] )
[ i for i in x if i in y ]
df set_index ( 'month ' )
from functools import reduce reduce ( lambda x , y : x * int ( y ) , [ '2 ' , '3 ' , '4 ' ] )
[ 'w ' , 'time ' , '* ' , 'sin ' ]
print ( text encode ( 'windows-1252 ' ) )
order_array sort ( order= [ 'year ' , 'month ' , 'day ' ] )
list ( range ( 0 , len ( s ) , 3 ) )
sorted ( l , key=lambda x : int ( re search ( '\\d+ ' , x )  group ( 0 ) ) )
plt show ( )                                 
plt show ( )                                  
df [ 'season ' ]  str [ :4 ]  astype ( int )
gca ( )  get_lines ( ) [ n ]  get_xydata ( )
df loc [ ( df loc [ : , ( df dtypes ! = object ) ] ! = 0 )  any ( 1 ) ]
pyplot plot ( x , y , color= ' # 112233 ' )
`` `` '' '' '' ''  join ( [ c for c in strs if c isdigit ( ) ] )
dict ( ( k , int ( v ) ) for k , v in ( e split ( ' - ' ) for e in s split ( ' , ' ) ) )
dict ( ( i , i * 2 ) for i in range ( 10 ) )
dict ( [ x split ( '= ' ) for x in s split ( ) ] )
[ ( x + tuple ( y ) ) for x , y in zip ( zip ( a , b ) , c ) ]
[ 'bmw ' , 'vw ' , 'b ' , 'volvo ' , 'c ' ]
{ i : ( i * 2 ) for i in range ( 10 ) }
df2 rename ( columns= { 'ochr ' : 'chr ' , 'ostop ' : 'pos ' } , inplace=true )
re findall ( ' ( ? = ( \\w\\w ) ) ' , 'hello ' )
time mktime ( dt timetuple ( ) ) + dt microsecond / 1000000 0
list ( replace ( [ 1 , 2 , 3 , 2 , 2 , 3 , 1 , 2 , 4 , 2 ] , to_replace=2 , fill='apple ' ) )
df loc [ df [ 'column_name ' ]  isin ( b ) ]
locale setlocale ( locale lc_all , '' )
print ( [ i split ( '/ ' ) [ 1 ] for i in input if '/ ' in i ] )
binascii a2b_hex ( s )
cursor execute ( 'insert into table values ( ? , ? , ? ) ' , ( var1 , var2 , var3 ) )
s [ : :2 ] , s [ 1 : :2 ]
print ( '\u5f15\u8d77\u7684\u6216 ' )
sum ( item [ 'one ' ] for item in list ( tadas values ( ) ) )
plt show ( )                                   
df replace ( ' ' , '_ ' , regex=true )
[ ( x1 - x2 ) for x1 , x2 in zip ( list1 , list2 ) ]
[ [ ] for i in range ( 3 ) ]
re findall ( '\\s+|\\s+ ' , s )
sorted ( unsorted_list , key=lambda x : order get ( x , -1 ) )
sorted ( x [ : :-1 ] for x in enumerate ( [ 'z ' , 'a ' , 'c ' , 'x ' , 'm ' ] ) )
mydict = { key : val for key , val in list ( mydict items ( ) ) if val ! = 42 }
[ 3 , 4 , 1 , 2 ]
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ] 
soup find_all ( 'a ' , string='elsie ' )
print ( urllib request urlopen ( 'http : //google com ' )  read ( ) )
array ( [ 0 , 1 , 2 , 3 ] , dtype=int64 ) , array ( [ 1 , 0 , 1 , 2 ] , dtype=int64 )
df sort_values ( [ 'a ' , 'b ' ] , ascending= [ true , false ] )
plt show ( )                                    
[ ( -1 , 'stackoverflow ' ) , ( 1 , 'so ' ) , ( 0 , ' is ' ) , ( -1 , 'very ' ) , ( 0 , ' cool ' ) ]
list3 = [ ( a + b ) for a , b in zip ( list1 , list2 ) ]
ax xaxis set_ticks_position ( 'bottom ' )
1j * np arange ( 5 )
re sub ( '\\b ( this|string ) \\b ' , ' < markup > \\1 < /markup > ' , 'this is my string ' )
[ ( a if a else 2 ) for a in [ 0 , 1 , 0 , 3 ] ]
plt show ( )                                     
sorted ( trial_list , key=lambda x : trial_dict [ x ] )
df groupby ( 'a ' ) [ 'b ' ]  sum ( ) [ 1 ]
pd concat ( d , ignore_index=true )
df2 groupby ( 'name ' )  apply ( tgrp )
os stat ( 'c : \\python27\\lib\\genericpath py ' )  st_size
super ( instructor , self )  __init__ ( name , year )
random sample ( list ( range ( 1 , 16 ) ) , 3 )
s translate ( none , string punctuation )
cursor execute ( 'insert or replace into master table1 select * from table1 ' )
d = { k : v for k , v in list ( d items ( ) ) if v > 0 }
sorted ( list ( d items ( ) ) , key=lambda name_num : ( name_num [ 0 ]  rsplit ( none , 1 ) [ 0 ] , name_num [ 1 ] ) )
open ( 'file bla ' , 'wb ' )
ax tick_params ( axis='y ' , direction='out ' )
df groupby ( [ 'a ' , 'b ' ] ) [ 'c ' ]  unique ( )
result = [ item for word in words for item in word split ( ' , ' ) ]
sys stdout flush ( )  
scipy io savemat ( 'test mat ' , data )
df groupby ( pd timegrouper ( '5min ' ) ) [ 'val ' ]  mean ( )
plt show ( )                                      
print ( np linspace ( 1 , 3 , num=5 ) )
[ [ 'a ' , 'b ' , 'c ' ] , [ 'd ' , 'e ' , 'f ' , 'g ' ] , [ 'd ' , 's ' , 'd ' , 'a ' ] ]
d = ordereddict ( [ ( 'key1 ' , 'value1 ' ) , ( 'key2 ' , 'value2 ' ) , ( 'key3 ' , 'value3 ' ) ] )
plt figure ( figsize= ( 3 , 4 ) )
df [ 'col ' ] = df [ 'col ' ]  map ( int )
`` `` '' '' '' ''  join ( filter ( str isdigit , '12454v ' ) )
[ ( t [ 1 ] , t [ 0 ] ) for t in mylist ]
re findall ( ' < wx\\   [ ^ < ] * < [ ^ < ] * > > ' , i )
file close ( )
exec ( compile ( open ( 'helloworld py ' )  read ( ) , 'helloworld py ' , 'exec ' ) )
df groupby ( [ 'id ' , 'date1 ' ] )  apply ( lambda x : ( x [ 'date1 ' ] == x [ 'date2 ' ] )  sum ( ) )
df reindex ( columns=list [ 'cd ' ] )
df [ 'qu1 ' ]  value_counts ( )
print ( hashlib md5 ( open ( full_path , 'rb ' )  read ( ) )  hexdigest ( ) )
df [ [ 'iv ' , 'vega ' ] ] = df apply ( newtonrap , axis=1 )
s = s replace ( 'm ' , '' )
df insert ( 1 , ( 'level1 ' , 'age ' ) , pd series ( [ 13 ] ) )
`` `` '' { 0 } % s { 1 } '' '' ''  format ( 'foo ' , 'bar ' )
self process terminate ( )
re compile ( ' { } -\\d*' format ( user ) )
plt show ( )                                       
{ 'date ' : [ 'foo ' , 'bar ' ] , '123 ' : [ '456 ' , '789 ' ] , 'abc ' : [ 'def ' , 'ghi ' ] }
[ 1 , 1 , 3 , 3 , 3 , 2 , 2 , 1 , 2 , 0 , 0 , 0 , 1 ]
logging info ( 'date= { } ' format ( date ) )
df to_dict ( 'records ' )
key = lambda x : sum ( y [ 'play ' ] for y in x )
np all ( np all ( test , axis=2 ) , axis=1 )
numpy ma array ( strided , mask=mask )
mylist sort ( key=operator itemgetter ( 'weight ' , 'factor ' ) )
chr ( int ( 'fd9b ' , 16 ) )  encode ( 'utf-8 ' )
request get get ( 'username ' , '' )
self depositlabel config ( text='change the value ' )
l = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ]
{ { car date_of_manufacture strftime ( ' % y- % m- % d ' ) } }
static_url = '/static/ '
ax plot ( x , y , 'bo ' )
map ( int , example_string split ( ' , ' ) )
keys = { 'a ' : 'append ' , 'h ' : 'horse ' , 'e ' : 'exp ' , 's ' : 'see ' }
test objects filter ( actions__contains= [ { 'fixed_key_1 ' : 'foo2 ' } ] )
country_data_table rename ( columns= { 'value ' : country name } , inplace=true )
system ( 'python myscript py ' )
np add at ( a , np array ( [ 1 , 2 , 2 , 1 , 3 ] ) , np array ( [ 1 , 1 , 1 , 1 , 1 ] ) )
plt show ( )                                        
counter ( { '12392 ' : 2 , '7862 ' : 1 } )
re sub ( ' [ \\w_ ] + ' , '' , s )
df mean ( axis=1 )
df sort_values ( [ 'peak ' , 'weeks ' ] , ascending= [ true , false ] , inplace=true )
zip ( *np where ( a == 1 ) )
dataframe from_csv ( 'c : /~/trainsetrel3 txt ' , sep='\t ' )
urllib parse unquote ( urllib parse unquote ( 'fireshot3 % 2b % 25282 % 2529 png ' ) )
{ k : v for k , v in ( e split ( ' : ' ) for e in lis ) }
[ [ 0 , 1 , 5 ] , [ 2 , 3 ] , [ 13 , 14 ] , [ 4 ] , [ 6 , 7 ] , [ 8 , 9 , 10 , 11 ] , [ 12 ] , [ 15 ] ]
random sample ( range ( 1 , 50 ) , 6 )
os path abspath ( __file__ )
plt show ( )                                         
[ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' , 'f ' ]
a , b = map ( int , input ( )  split ( ) )
dbb commit ( )
cur execute ( 'insert into test ( arr ) values ( ? ) ' , ( x , ) )
sys exit ( )
fig subplots_adjust ( wspace=0 , hspace=0 )
cdf1 to_csv ( 'temp csv ' , index=false )
call ( [ ' /spa ' , 'args ' , 'to ' , 'spa ' ] )
setattr ( self , attr , group )
np array ( [ 1j ] )
df index
session query ( shots )  filter_by ( event_id=event_id )  count ( )
line = line replace ( ' ; ' , ' : ' )
df groupby ( level=0 , axis=1 )  sub ( df [ 'iwwgcw ' ]  values )
requests post ( url , headers=headers , files=files , data=data )
requests get ( url , verify=true )
sum ( list_of_nums )
split_list = [ the_list [ i : i + n ] for i in range ( 0 , len ( the_list ) , n ) ]
plt plot ( np unique ( x ) , np poly1d ( np polyfit ( x , y , 1 ) ) ( np unique ( x ) ) )
session query ( user )  filter_by ( id=123 )  update ( { 'name ' : 'bob marley ' } )
df loc [ '2000-1-1 ' : '2000-3-31 ' ]
requests get ( url , verify='/path/to/cert pem ' )
os system ( 'taskkill /im make exe ' )
re sub ( '\\ ( ( \\w+ ) \\ ) ' , '\\1 ' , s )
[ re search ( '\\d { 4 } ' , s ) for s in lst ]
[ i for i in range ( len ( a ) ) if a [ i ] > 2 ]
print ( str ( a ) + ' plus ' + str ( b ) + ' equals ' + str ( a + b ) )
sum ( len ( x ) for x in list ( food_colors values ( ) ) )
session query ( shots )  filter_by ( event_id=event_id )
numpy delete ( a , index )
urlparse urldefrag ( 'http : //www address com/something # something ' )
plt show ( )                                          
plt show ( )                                           
x = numpy delete ( x , 2 , axis=1 )
`` `` '' '' '' ''  join ( [ ( '/x % 02x ' % ord ( c ) ) for c in 'hello ' ] )
[ row [ 1 ] for row in a ]
sorted ( lst , key=lambda x : ( -sum ( x [ 1 : ] ) , x [ 0 ] ) )
yield request ( url=url , callback=self parse , meta= { 'page ' : 1 } )
p = re compile ( ' ( ( ? : friday|saturday ) \\s*\\d { 1,2 } ) ' )
np where ( np diff ( arr [ : , ( 1 ) ] ) ) [ 0 ] + 1
open ( 'file ' , 'rb ' )
print ( 'total score for { } is { } ' format ( name , score ) )
root configure ( background='black ' )
ax spines [ 'right ' ]  set_visible ( false )
re sub ( ' [ ^ -\ud7ff\t\n\r\ue000-\ufffd\u10000-\u10ffff ] + ' , '' , text )
win show ( )
[ [ 1 , 4 ] , [ 6 ] , [ 3 ] , [ 4 ] ]
[ ( x , y ) for x , y in zip ( mylist , mylist [ 1 : ] ) if y == 9 ]
sum ( sum ( x ) for x in lists )
`` `` '' hello { user [ name ] } '' '' ''  format ( ** { 'user ' : { 'name ' : 'markus ' } } )
re sub ( '^ (  + ? ) \\1+ $ ' , '\\1 ' , input_string )
min ( list , key=lambda x : float ( 'inf ' ) if math isnan ( x [ 1 ] ) else x [ 1 ] )
sorted ( a , key=dict values , reverse=true )
df groupby ( 'mt ' )  first ( )
print ( r sub ( '\\1_status = `` \\2 '' \\n\\1_time = \\3 ' , content ) )
entry objects filter ( ~q ( id=3 ) )
df groupby ( 'event ' )  status value_counts ( )  unstack ( )  fillna ( 0 )
mymodel objects using ( 'my_non_default_database ' )  get_or_create ( name='bob ' )
plt show ( )                                            
df [ 't-1 ' ] = df [ 't ' ]  shift ( 1 )
your_string strip ( '0 ' )
stringnamehere decode ( 'utf-8 ' , 'ignore ' )
df [ 'date ' ] = pd to_datetime ( df [ 'date ' ] )
rdd map ( lambda k_v : ( set ( k_v [ 0 ] ) , k_v [ 1 ] ) )  groupbykey ( )  collect ( )
[ x encode ( 'utf8 ' ) for x in employeelist ]
list ( range ( 10 , 0 , -1 ) )
np any ( np in1d ( a1 , a2 ) )
df reindex ( columns= [ 'n ' ] + df columns [ : -1 ]  tolist ( ) )
df groupby ( [ 'item ' , 'price ' ] )  region apply ( f )
pd to_numeric ( a , errors='coerce ' )  fillna ( -1 )
groupby ( tags , key=operator itemgetter ( 0 ) )
a = sorted ( a , key=lambda x : x modified , reverse=true )
plt show ( )                                             
[ item for item in my_sequence if item ! = 'item ' ]
df [ 'date ' ]  str extract ( ' ( ? p < year > \\d { 4 } ) ' )  astype ( int )
os environ [ 'remote_addr ' ]
stores [ 'region ' ] = stores [ 'region ' ]  astype ( 'category ' )
line = line decode ( 'utf-8 ' , 'ignore ' )  encode ( 'utf-8 ' )
mymodel objects order_by ( ' ? ' ) [ :2 ]
self axes = self figure add_axes ( [ 0 , 0 , 1 , 1 ] )
df2 plot ( kind='bar ' , stacked=true )
subprocess popen ( 'pok\xc3\xa9mon mp3 ' , shell=true )
set ( [ 'a ' , 'b ' , 'c ' , 'd ' ] )
hashlib md5 ( open ( 'filename exe ' , 'rb ' )  read ( ) )  hexdigest ( )
subprocess popen ( cmd , stdout=subprocess pipe , stderr=subprocess stdout )
sum ( d * 10 ** i for i , d in enumerate ( x [ : :-1 ] ) )
data = [ line [ i : i + 12 ] for i in range ( 0 , len ( line ) , 12 ) ]
numpy savetxt ( 'output dat ' , my_array reshape ( ( 4 , 2 ) ) , fmt= ' % f % i ' )
conn commit ( ) 
df pivot_table ( values='value ' , index= [ 'year ' , 'month ' ] , columns='item ' )
quadmesh set_clim ( vmin=0 , vmax=15 )
dparser parse ( 'monkey 10/01/1980 love banana ' , fuzzy=true )
requests post ( 'http : //httpbin org/post ' , json= { 'test ' : 'cheers ' } )
`` `` '' package ( [ ^\\s ] + ) \\s+is ( [ \\s\\s ] * ) end\\s+ ( package|\\1 ) \\s* ; '' '' ''
a ( 1 ) + a ( 2 )
df groupby ( [ 'year ' , 'month ' , 'item ' ] ) [ 'value ' ]  sum ( )  unstack ( 'item ' )
somelist sort ( key=lambda x : x resulttype )
[ 'a ' , 'c ' ]
coverageacol = numpy array ( [ [ 'a ' , 'b ' ] , [ 'c ' , 'd ' ] ] , dtype=numpy dtype ( 'a16 ' ) )
df colour value_counts ( )  plot ( kind='bar ' )
mylist sort ( )
dictlist = [ dict ( ) for x in range ( n ) ]
write ( s encode ( 'latin-1 ' ) )
numpy concatenate ( [ a , b ] )
plt xscale ( 'log ' , subsx= [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] )
print ( re match ( ' [ ^/ ] + ' , text )  group ( 0 ) )
t = s [ :1 ] + 'whatever ' + s [ 6 : ]
datetime datetime now ( ) + datetime timedelta ( seconds=10 )
dict ( ( k , v ) for k , v in parent_dict items ( ) if k > 2 and k < 4 )
requests post ( url , headers=headers , data=data , files=files )
df [ ( df [ 'a ' ] > 1 ) | ( df [ 'b ' ] < -1 ) ]
[ 'foo bar ' , 'foo baz ' ]
dict_names [ 'd1 ' ] [ 'name ' ]
re split ( ' ( \\d+ ) ' , 'a1b2c30d40 ' )
a [ [ [ 0 , 0 ] , [ 0 , 0 ] ] , [ [ 0 , 0 ] , [ 0 , 0 ] ] , [ [ 0 , 0 ] , [ 0 , 0 ] ] ]
matrix = [ [ [ 's1 ' , 's2 ' ] , [ 's3 ' ] ] , [ [ 's4 ' ] , [ 's5 ' ] ] ]
return '' join ( soup findall ( text=true ) )
sorted ( [ '1:14 ' , '8:01 ' , '12:46 ' , '6:25 ' ] , key=daytime )
cv2 destroyallwindows ( ) 
`` `` '' $ { :  2f } '' '' ''  format ( amount )
[ x ( y ) for x , y in zip ( functions , values ) ]
unique_data = [ list ( x ) for x in set ( tuple ( x ) for x in testdata ) ]
unittest main ( ) 
[ s strip ( ) for s in re split ( ' , | ; ' , string ) ]
df = pandas dataframe ( data , columns= [ 'r_number ' , 'c_number ' , 'avg ' , 'std ' ] )
listtwo sort ( key=lambda x : listone index ( x [ 'eyecolor ' ] ) )
os walk ( directory )
pd dataframe ( df values - df2 values , columns=df columns )
d = dict ( ( k , v ) for k , v in d items ( ) if v > 0 )
subprocess call ( [ 'echo ' , 'ni ' ] )
df groupby ( grouper ) [ 'value ' ]  cumsum ( )
df groupby ( level= [ 0 , 1 ] )  agg ( [ 'median ' , 'quantile ' ] )
np isnan ( a )  sum ( )
writer writerows ( a )
np einsum ( 'im , jm , km- > ijk ' , x , y , z )
file write ( 'my string\n ' )
date today ( )  strftime ( ' % a ' )
re search ( ' [ a-z ] * ' , '1234 ' )
k = hashlib md5 ( 'thecakeisalie ' )  hexdigest ( )
pd concat ( [ df_slcd , signs ] , axis=1 )
today strftime ( ' % b ' )
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ]
[ t strip ( ) for s in string split ( ' , ' ) for t in s split ( ' ; ' ) ]
from functools import reduce reduce ( lambda x , y : x [ y ] , [ 4 , 3 , 2 ] , nestedlist )
df resample ( 'm ' )  ffill ( )  resample ( 'h ' )  ffill ( )  tail ( )
df apply ( lambda x : x fillna ( x mean ( ) ) , axis=0 )
root destroy ( )  
plt savefig ( '/tmp/test png ' , bbox_inches='tight ' )
re sub ( ' [ ^0-9 ] ' , '' , 'sdkjh987978asd098as0980a98sd ' )
dict ( ( k lower ( ) , v lower ( ) ) for k , v in { 'my key ' : 'my value ' }  items ( ) )
time sleep ( 1 ) 
subprocess call ( [ 'gnome-terminal ' , '-x ' , 'python bb py ' ] )
re split ( '\\d* , \\d* ' , mystring )
np nonzero ( np any ( a , axis=0 ) ) [ 0 ]
strings sort ( key=lambda str : re sub ( '   * % ' , '' , str ) )
[ x [ 0 ] for x in l1 if any ( x [ 0 ] == y [ 0 ] for y in l2 ) ]
a sort ( key=operator itemgetter ( 2 , 3 ) )
open ( 'demo txt ' , 'r ' )  read ( )
plt xticks ( rotation='25 ' )
sum ( d values ( ) )  
print ( os environ [ 'debussy ' ] )
a = [ 0 ] * 10000
subprocess popen ( 'proc2 ' , env=env )
df [ 'month ' ] = df [ 'date ' ]  apply ( lambda x : x strftime ( ' % b ' ) )
print ( [ ( ' % 5 3f ' % val ) for val in l ] )
admin site register ( blog , blogadmin )
data apply ( lambda x : sorted ( x , 3 ) )
plt show ( )                                              
[ [ 1 , 1 , 2 ] , [ 1 , 1 , 3 ] ]
lst = [ 'foo py ' , 'bar py ' , 'baz py ' , 'qux py ' , ellipsis ]
open ( 'textbase txt ' , 'ur ' )
sorted ( results , key=itemgetter ( 'year ' ) )
re findall ( '\\w+ ( ? : -\\w+ ) + ' , text )
sorted ( s , key=float )
print ( ' % gx\xc2\xb3 + % gx\xc2\xb2 + % gx + % g = 0 ' % ( a , b , c , d ) )
re split ( '\n\\s*\n ' , s )
[ [ td findnext ( text=true ) for td in tr findall ( 'td ' ) ] for tr in rows ]
b = a decode ( 'utf8 ' ) [ : :-1 ]  encode ( 'utf8 ' )
conn execute ( 'insert into table ( colname ) values ( ? ) ; ' , [ ' , ' join ( list ) ] )
gtk main ( )
ax set_ylim ( ( -10 , 80 0 ) )
np delete ( a , list ( range ( 0 , a shape [ 1 ] , 8 ) ) , axis=1 )
plt show ( )                                               
plt show ( )                                                
df groupby ( df index year )  sum ( )  head ( )
[ i for i , x in enumerate ( [ 1 , 2 , 3 , 2 ] ) if x == 2 ]
a [ np argsort ( a [ : , ( 1 ) ] ) ]
print ( ' ' join ( i for i in word split ( ' ' ) if not i endswith ( ' : ' ) ) )
np asarray ( [ 1 , 2 , 3 , 4 ] , dtype=int )
urlpatterns = patterns ( '' , ( '' , include ( 'myapp urls ' ) ) )
itertools permutations ( [ 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] )
array ( [ [ 1 , 2 ] , [ 7 , 8 ] , [ 3 , 4 ] , [ 9 , 10 ] , [ 5 , 6 ] , [ 11 , 12 ] ] )
self fields [ 'author ' ]  queryset = choices
plt show ( )                                                 
l = [ int ( x ) for x in s split ( ) ]
plt show ( )                                                  
os listdir ( 'path ' )
plt show ( )                                                   
plt gca ( )  set_xscale ( 'custom ' )
desired_array = [ int ( numeric_string ) for numeric_string in current_array ]
plt show ( )                                                    
print ( x [ 0 ] , x [ 1 ] )
[ 1 , 2 , 3 , 4 , 5 , 6 ]
lst append ( map ( int , z ) )
app run ( )
cv2 imwrite ( 'half_circle_no_round jpg ' , image )
cv2 imwrite ( 'half_circle_rounded jpg ' , image )
return jsonify ( my_list_of_eqtls )
[ 'blue ' , 'blue ' , 'red ' , 'red ' , 'green ' ]
shutil copyfile ( '\\\\ ? \\ ' + copy_file , dest_file )
system ( '/path/to/my/venv/bin/python myscript py ' )
arr = [ line split ( ' , ' ) for line in open ( ' /urls-eu csv ' ) ]
tree xpath ( ``  //a [ text ( ) ='example ' ] '' ) [ 0 ]  tag
[ x for y , x in sorted ( zip ( y , x ) ) ] 
f write ( g read ( ) )
pd to_datetime ( df id str [ 1 : -3 ] )
zip ( *sorted ( enumerate ( a ) , key=operator itemgetter ( 1 ) ) ) [ 0 ] [ -2 : ]
np array ( [ fnan , pinf , ninf ] ) < 0
print ( arr [ 1 , 1 ] )
sorted_dict = collections ordereddict ( sorted ( d items ( ) ) )
logging info ( 'date= % s ' , date )
sorted ( zipped , key=lambda x : x [ 1 ] )
[ ( 'jellicle ' , 6 ) , ( 'cats ' , 5 ) , ( 'and ' , 2 ) ]
print ( '\n\x1b [ 4m ' + '3 ' + '\x1b [ 0m ' + '\n2 ' )
app config [ 'security_register_url ' ] = '/create_account '
{ 'firstname ' : 'tiger ' , 'lastname ' : 'lily ' }
{ p id : { 'id ' : p id , 'position ' : ind } for ind , p in enumerate ( p_list ) }
os system ( '/bin/bash -c `` echo hello world '' ' )
url = urllib parse unquote ( url )  decode ( 'utf8 ' )
[ map ( int , x split ( '\t ' ) ) for x in s rstrip ( )  split ( '\r\n ' ) ]
ax2 legend ( loc=0 )
print ( re sub ( ' [   ] ' , '' , re search ( ' ( ? < =// )  * ? ( ? =/ ) ' , str )  group ( 0 ) ) )
importlib import_module ( ' c ' , 'a b ' )
setstylesheet ( 'qpushbutton { background-color : # a3c1da ; color : red ; } ' )
[ elem tag for elem in a iter ( ) if elem is not a ]
os system ( 'top -d 30 | grep % d > test txt ' % pid )
file = codecs open ( filename , encoding='utf-8 ' )
piv unstack ( )  reset_index ( )  drop ( 'level_0 ' , axis=1 )
plt show ( )                                                     
plt show ( )                                                      
dict ( ( v , k ) for k , v in my_dict items ( ) )
os path join ( 'c : ' , 'meshes ' , 'as ' )
subprocess check_output ( 'echo `` foo '' ' , shell=true )
`` `` '' `` '' ''  join ( porterstemmer ( )  stem_word ( word ) for word in text split ( ' ' ) )
dict ( zip ( keys , zip ( *data ) ) )
del mylist [ : ]
list ( df index )
db close ( )
root mainloop ( )   
df iloc [ [ 1 , 2 , 3 , 4 ] , [ 2 , 5 , 6 , 7 , 8 ] ]
driver find_element_by_css_selector ( `` input [ onclick*='1 bedroom deluxe ' ] '' )
plt show ( )                                                       
root mainloop ( )    
[ 'afghanistan ' , 'japan ' , 'united arab emirates ' ]
outfile write ( ' # new slice\n ' )
root = tk tk ( )
df reindex ( columns=list [ 'abcd ' ] )
f = lambda x , y : x + y
[ sum ( x ) for x in zip ( *l ) ]
data rename ( columns= { 'gdp ' : 'log ( gdp ) ' } , inplace=true )
list ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )
print ( [ key for key in d if d [ key ] == 1 ] )
re findall ( '\\b\\d+\\b ' , `` he33llo 42 i 'm a 32 string 30 '' )
app run ( ) 
re sub ( ' ( [ a-z ] ( ? = [ a-z ] ) | [ a-z ] ( ? = [ a-z ] [ a-z ] ) ) ' , '\\1 ' , text )
photo put ( )
app config [ 'server_name ' ] = 'example net '
plt show ( )                                                        
driver = webdriver phantomjs ( 'c : \\phantomjs-1 9 7-windows\\phantomjs exe ' )
browser find_elements_by_css ( `` input [ type='radio ' ] [ value='srf ' ] '' )  click
np zeros ( ( 3 , 3 ) )  ravel ( )
`` `` '' '' '' ''  join ( [ 'x is ' , x __format__ ( '' ) ] )
parser add_argument ( 'file ' , help='file to store as gist ' , nargs='+ ' )
x = x [ ~numpy isnan ( x ) ]
itertools cycle ( [ 1 , 2 , 3 ] )
grouped apply ( lambda x : x sum ( ) if len ( x ) > 2 else none )  dropna ( )
struct unpack ( 'd ' , b8 ) [ 0 ]
np sqrt ( ( ( a - b ) ** 2 )  sum ( -1 ) )
app run ( )  
plt show ( )                                                         
platform system ( )
[ ( a , b , c ) for a , ( b , c ) in l ]
decimal decimal ( ' % d  % d ' % ( random randint ( 0 , i ) , random randint ( 0 , j ) ) )
mydic update ( { i : o [ 'name ' ] } )
subprocess call ( [ ' /abc py ' , arg1 , arg2 ] )
a index ( max ( a ) )
print ( '\n' join ( str ( p ) for p in mylist ) )
df groupby ( pd timegrouper ( 'd ' ) )  transform ( np cumsum )  resample ( 'd ' , how='ohlc ' )
{ { my_variable | escape | linebreaks | safe } }
list ( map ( tuple , [ [ 'tom ' , 'cat ' ] , [ 'jerry ' , 'mouse ' ] , [ 'spark ' , 'dog ' ] ] ) )
plt savefig ( 'cap png ' )
plt show ( )                                                          
config = { 'name ' : 'hello ' , 'see ? ' : 'world ' }
[ 'xxx ' , 'xxx ' , 'yyy*a*b*c ' , 'xxx*d*e*f ' ]
list ( set ( lista ) & set ( listb ) )
[ i for i in a if i isdigit ( ) ]
s sort ( key=operator attrgetter ( 'resulttype ' ) )
df2 [ 'revenue ' ] = df2 cet map ( df1 set_index ( 'date ' ) [ 'revenue ' ] )
canvas create_text ( x , y , font= ( 'purisa ' , 12 ) , text=k )
os system ( command )
plt show ( )                                                           
np einsum ( 'ijk , ikl- > ijl ' , a , b )
[ tup [ 0 ] for tup in a ]
plt show ( )                                                            
df [ df col1 isin ( [ 'men ' , 'rocks ' , 'mountains ' ] ) ]
plt show ( )                                                             
`` `` '' { 0 :   { 1 } % } '' '' ''  format ( value , digits )
[ 'alfa ' , 'bravo ' , 'charlie ' , 'delta ' , 'echo ' ]
cur mogrify ( 'select * from table where column in % s ; ' , ( ( 1 , 2 , 3 ) , ) )
dict ( ( name , eval ( name , globals ( ) , { } ) ) for name in [ 'i ' , 'j ' , 'k ' ] )
list ( itertools combinations ( a , 2 ) )
df [ 'brandname ' ] = df [ 'brandname ' ]  replace ( [ 'abc ' , 'ab ' ] , 'a ' )
tree find ( '//body ' )  text
ax xaxis tick_top ( )
json dumps ( your_data , ensure_ascii=false )
s reset_index ( name='new_name ' )
`` `` '' '' '' ''  join ( chr ( i ) for i in l )
a [ : , ( [ 3 , 4 ] ) ]
bigram_measures = nltk collocations bigramassocmeasures ( )
plt show ( )                                                              
[ 'the ' , 'red ' , 'fox ' , '' , 'is ' ]
pickle load ( open ( 'afile ' , 'rb ' ) )
writer writerow ( a )
hs write ( ' { } \n' format ( name ) )
max ( ld , key=lambda d : d [ 'size ' ] )
d apply ( pd series value_counts , axis=1 )  fillna ( 0 )
print ( line rstrip ( '\n ' ) )
`` `` '' 1**0* '' '' ''  replace ( '* ' , ' [ 01 ] ' )
sparse coo_matrix ( ( [ 6 ] , ( [ 5 ] , [ 7 ] ) ) , shape= ( 10 , 10 ) )
b = np reshape ( a , ( -1 , 2 ) )
datetime datetime strptime ( '01-jan-1995 ' , ' % d- % b- % y ' )
np einsum ( 'ij , kj- > jik ' , x , x )
writer writerow ( [ item [ 0 ] , item [ 1 ] , item [ 2 ] ] )
root lift ( )
[ int ( x ) for x in list ( ' { 0:0b } ' format ( 8 ) ) ]
s split ( 's ' )
pd to_datetime ( tempdf [ 'date ' ] , format= ' % y- % m- % d % h : % m : % s  % f ' , errors='coerce ' )
glob glob ( '* ' )
glob glob ( ' [ ! hello ] * ' )
workbook = xlsxwriter workbook ( 'c : /users/steven/documents/demo xlsx ' )
workbook = xlsxwriter workbook ( 'app/smth1/smth2/expenses01 xlsx ' )
print ( '\x1b [ 1m ' + 'hello ' )
a [ [ [ 0 , 0 ] , [ 1 , 1 ] , [ 3 , 3 ] ] , [ [ 0 , 2 ] , [ 0 , 2 ] , [ 0 , 2 ] ] ]
numpy where ( x == x min ( ) )
re sub ( ' (   * ) < /div > ' , '\\1 < /bad > ' , s )
plt show ( )                                                               
`` `` '' { :  5 } '' '' ''  format ( 'aaabbbccc ' )
`` `` '' `` '' ''  join ( s split ( ) )
foo objects filter ( q ( bar_x__name='bar x ' ) | q ( bar_y__name='bar y ' ) )
element = driver find_element_by_class_name ( 'gbts ' )
values = np array ( [ i for i in range ( 100 ) ] , dtype=np float64 )
plt show ( )                                                                
request session [ 'last_activity ' ] = datetime now ( )
list ( zip ( a , b ) )
len ( text encode ( 'utf-16-le ' ) ) // 2
re sub ( ' ( [ characters ] ) ' , '\\1\\1 ' , text read ( ) )
mercury ( 1 , 1 , 2 )
s split ( ' : ' , 1 ) [ 1 ]
cleaned_list = [ x for x in some_list if x is not thing ]
list ( itertools product ( *arrays ) )
np dot ( np atleast_2d ( a )  t , np atleast_2d ( b ) )
sys path insert ( 0 , os path abspath ( '/my/source/lives/here ' ) )
`` `` '' '' '' ''  join ( [ 'i ' , ' < ' , '3s u ' , ' & ' , ' you luvz me ' ] )
[ dict ( t ) for t in set ( [ tuple ( d items ( ) ) for d in l ] ) ]
[ x for x in a if x not in [ 2 , 3 , 7 ] ]
df values tolist ( )
cur execute ( sql , list ( d values ( ) ) )
sum ( [ true , true , false , false , false , true ] )
app run ( debug=true , port=33507 )
plt show ( )                                                                 
subprocess call ( [ 'curl ' , 'http : //localhost:2222 ' ] )
plt show ( )                                                                  
`` `` '' `` '' ''  join ( foo split ( ) )
request url
array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
plt show ( )                                                                   
l = [ [ 2 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ]
[ [ 0 , -1 , -2 ] , [ 1 , 0 , -1 ] , [ 2 , 1 , 0 ] ]
`` `` '' xyz `` '' ''  rstrip ( )
print ( type ( tf session ( )  run ( tf constant ( [ 1 , 2 , 3 ] ) ) ) )
m = matrix ( 2 , 3 , [ 1 , 2 , 3 , 4 , 5 , 6 ] )
table = soup find ( 'table ' , attrs= { 'class ' : 'bp_ergebnis_tab_info ' } )
a [ np all ( np any ( a - b [ : , ( none ) ] , axis=2 ) , axis=0 ) ]
np sqrt ( tangent [ : , ( 0 ) ] * tangent [ : , ( 0 ) ] + tangent [ : , ( 1 ) ] * tangent [ : , ( 1 ) ] )
datetime datetime strptime ( 'january 11 , 2010 ' , ' % b % d , % y ' )  strftime ( ' % a ' ) 
users sort ( key=lambda x : order index ( x [ 'id ' ] ) )
urllib request urlretrieve ( 'http : //example com/file ext ' , '/path/to/dir/filename ext ' )
df groupby ( 'stname ' ) [ 'county_pop ' ]  agg ( lambda x : x nlargest ( 3 )  sum ( ) )
pd to_datetime ( pd series ( date_stngs ) )
sorted ( list ( y items ( ) ) , key=lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse=true )
`` `` '' '' '' ''  join ( str ( random randint ( 0 , 9 ) ) for _ in range ( 12 ) )
`` `` '' { :  50f } '' '' ''  format ( float ( a [ 0 ] / a [ 1 ] ) )
[ list ( i ) for i in set ( tuple ( i ) for i in testdata ) ]
print ( getattr ( args , 'lambda ' ) )
plt show ( )                                                                    
output = re sub ( ' ( < textarea * > )   * ( < /textarea > ) ' , '\\1bar\\2 ' , s )
numpy array ( [ [ key , val ] for key , val in result items ( ) ] , dtype )
[ i [ 0 ] for i in re findall ( ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' , s ) ]
window destroy ( )
matplotlib pyplot show ( ) 
driver = webdriver phantomjs ( )
os chdir ( 'c : /users/name/desktop ' )
np fromstring ( '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' , dtype= ' < f4 ' )
df values flatten ( )
df [ 'col ' ] = df [ 'col ' ]  astype ( 'category ' )
print ( os path dirname ( os path realpath ( __file__ ) ) )
multiprocessing process ( target=foo , args= ( x , ) )  start ( )
cookie [ 'cycle ' ] [ 'domain ' ]
( 'x = % s ' % '\\u041c\\u0438\\u0440 ' )  encode ( 'utf-8 ' )
dict ( ( k , v ) for k , v in parent_dict items ( ) if 2 < k < 4 ) 
testself testbed setup_env ( user_is_admin='1 ' )
[ 'ha ' , 'cb ' , 'dc ' , 'sd ' ]
print ( 'hi ' )
df [ 'n ' ]  hist ( by=df [ 'letter ' ] )
df [ 'ab ' ]  str split ( '- ' , 1 , expand=true )
imshow ( imagearray , cmap='greys_r ' )
blog objects values ( 'id ' , 'name ' )
sum ( df apply ( lambda x : sum ( x isnull ( )  values ) , axis=1 ) > 0 )
dataframe ( { 'count ' : df1 groupby ( [ 'name ' , 'city ' ] )  size ( ) } )  reset_index ( )
self license_file save ( new_name , new_contents )
`` `` '' , + '' '' ''  join ( c rsplit ( '+ ' , 1 ) )
ax set_xlabel ( 'temperature ( \u2103 ) ' )
print ( 'value is `` ' + str ( value ) + ' '' ' )
person objects exclude ( pets=none )
subprocess call ( 'tar c my_dir | md5sum ' , shell=true )
d [ 'dict3 ' ] = { 'spam ' : 5 , 'ham ' : 6 }
numpy array ( [ ( key , val ) for key , val in result items ( ) ] , dtype )
logging debug ( 'next line ' )
df [ [ 'a ' , 'b ' ] ]  multiply ( df [ 'c ' ] , axis='index ' )
list ( powerset ( 'abcd ' ) )
pd read_csv ( 'd : /temp/tt csv ' , names=list ( 'abcdef ' ) )
plt show ( )                                                                     
datetime date ( 2010 , 6 , 16 )  isocalendar ( ) [ 1 ]
df isnull ( )  values any ( )
sys path append ( '/path/to/2014_07_13_test ' )
[ 'na ' , '2 ' , 's ' , 'o ' , '4 ' , 'mn ' , 'o ' , '4 ' ]
{ i : 'updated ' for i , j in list ( d items ( ) ) if j ! = 'none ' }
pd concat ( [ x ] * 5 )
[ ( x + y ) for x in '12345 ' for y in 'ab ' ]
sorted ( a , key=lambda i : list ( i values ( ) ) [ 0 ] , reverse=true )
print ( func __name__ )
fd = os open ( 'x ' , os o_wronly | os o_creat | os o_excl )
[ x for x in lst if fn ( x ) ! = 0 ]
list ( itertools chain ( *a ) )
headers = { 'content-type ' : 'application/x-www-form-urlencoded ; charset=utf-8 ' }
book objects create ( **d )
{ 'physics ' : 1 } , { 'volume ' : 1 , 'chemistry ' : 1 } , { 'chemistry ' : 1 }
df to_csv ( 'filename tsv ' , sep='\t ' , index=false )
sum ( [ item [ 'gold ' ] for item in example_list ] )
x = [ int ( i ) for i in x split ( ) ]
pd concat ( [ distancesdf , datesdf dates ] , axis=1 )
e = root xpath ( ' //a [ text ( ) = '' text a '' ] ' )
dt datetime today ( )  strftime ( ' % m/ % d/ % y ' )
plt plot ( list ( range ( 10 ) ) , ' -- bo ' )
cursor execute ( 'show tables ' )
img show ( )
[ 'a ' , 'foobar ' , 'foobar ' , 'baz ' , 'golf ' , 'cart ' , 'foo ' ]
my_df loc [ my_df [ 'id ' ]  isin ( ids ) , 'other_column ' ] += 1
np isnan ( a )  sum ( ) / np prod ( a shape )
ax set_ylim ( 0 , 5 )
mypred = myplsda predict ( xdata )
plt show ( )                                                                      
pd concat ( [ pd dataframe ( l ) for l in my_list ] , axis=1 )  t
( datetime now ( ) - timedelta ( 1 ) )  strftime ( ' % y- % m- % d ' )
df pivot_table ( index='event ' , columns='status ' , aggfunc=len , fill_value=0 )
re compile ( ' (   ) \\1 ' )
`` `` '' { 0 :  3g } '' '' ''  format ( num )
[ map ( int , sublist ) for sublist in lst ]
return '' join ( random choice ( string lowercase ) for i in range ( length ) )
`` `` '' { 0 } { 1 } '' '' ''  format ( 10 , 20 )
plt show ( )                                                                       
open ( 'filename ' , 'w ' )  close ( )
print ( list ( itertools chain from_iterable ( a ) ) )
output = '' join ( item [ 0 ]  upper ( ) for item in input split ( ) )
[ list ( x ) for x in zip ( *sorted ( zip ( list1 , list2 ) , key=lambda pair : pair [ 0 ] ) ) ]
df groupby ( ( df a == 'b ' )  shift ( 1 )  fillna ( 0 )  cumsum ( ) )
file = io open ( 'data txt ' , 'r ' , encoding='utf-16-le ' )
sorted ( unsorted_list , key=presorted_list index )
df groupby ( 'type ' )  apply ( lambda x : np mean ( np log2 ( x [ 'v ' ] ) ) )
m sum ( axis=0 )  sum ( axis=0 )
re compile ( '^ ( [ ^a ] * ) aa ( [ ^a ] |aa ) * $ ' )
print ( ' , ' join ( str ( x ) for x in list_of_ints ) )
sorted ( list ( range ( len ( a ) ) ) , key=lambda i : a [ i ] , reverse=true ) [ :2 ]
'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' encode ( 'latin-1 ' )
[ value for pair in zip ( a , b [ : :-1 ] ) for value in pair ]
url rsplit ( '/ ' , 1 )
'longlongteststringtest' replace ( 'test ' , ' ? ' , 1 )
app run ( )   
grouped filter ( lambda x : len ( x ) > 1 )
[ ( lambda x : x * x ) ( x ) for x in range ( 10 ) ]
print ( '' join ( map ( str , data ) ) )
`` `` '' '' '' ''  join ( chr ( i ) for i in myintegers )
app run ( )    
matplotlib rcparams update ( { 'font size ' : 22 } )
django template loader select_template ( [ 'custom_template ' , 'default_template ' ] )
re sub ( '\\ [   * ? \\ ] ' , '' , 'abcd [ e ] yth [ ac ] ytwec ' )
x = [ [ none for _ in range ( 5 ) ] for _ in range ( 6 ) ]
[ ( i , c ) for i , c in enumerate ( 'xdtwkeltjwlkejt7wthwk89lk ' ) if c isdigit ( ) ]
sorted ( list ( dic items ( ) ) , key=lambda x : x [ 1 ] [ 'fisher ' ] , reverse=true )
sorted ( list ( d items ( ) ) , key=lambda k_v : k_v [ 1 ] )
dfs = pd read_excel ( file_name , sheetname=none )
[ int ( x , 16 ) for x in l ]
dict [ 'apple ' ] [ 'american ' ]
`` `` '' '' '' ''  join ( entry_list )
yourdatetime date ( ) == datetime today ( )  date ( )
df groupby ( df index map ( lambda t : t minute ) )
plt show ( )                                                                        
self showmaximized ( )
pd concat ( [ foo [ 'country ' ] , z ] , keys= [ 'country ' , 'z ' ] , axis=1 )
[ ( i , j ) for i , j in zip ( lst , lst2 ) ]
req add_header ( 'referer ' , login_url )
rdd map ( lambda k_v : ( frozenset ( k_v [ 0 ] ) , k_v [ 1 ] ) )  groupbykey ( )  collect ( )
result = [ x for x in list_a if x [ 0 ] in list_b ]
conn commit ( )  
np where ( out ravel ( ) ) [ 0 ]
df groupby ( 'id ' )  head ( 4 )
df round ( )
a [ np all ( a ! = 0 , axis=1 ) ]
str ( { 'a ' : 1 , 'b ' : 'as df ' } )  replace ( ' : ' , ' : ' )  replace ( ' , ' , ' , ' )
numpy array ( [ [ 1 , 2 ] , [ 2 , [ 3 , 4 ] ] ] )
re findall ( `` api\\ ( ' (  * ? ) ' '' , `` api ( 'randomkey123xyz987 ' , 'key ' , 'text ' ) '' )
pd concat ( [ df , pd get_dummies ( df , '' , '' )  astype ( int ) ] , axis=1 ) [ order ]
session query ( task )  filter ( task time_spent > timedelta ( hours=3 ) )  all ( )
[ ( x + y ) for x in l2 for y in l1 ]
[ [ 'aaaa ' , 1 11 ] , [ 'bbb ' , 2 22 ] , [ 'cccc ' , 3 33 ] ]
a [ ( np random randint ( a shape [ 0 ] , size=2 ) ) , : ]
template_context_processors += 'django core context_processors request '
np zeros ( ( 6 , 9 , 20 ) ) + np array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] )  reshape ( ( 1 , 9 , 1 ) )
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , mylist )
plt show ( )                                                                         
pd concat ( [ a , b ] , ignore_index=true )
pd date_range ( '1/1/2014 ' , periods=12 , freq='bm ' )
table sort ( key=lambda t : t points )
`` `` '' abc '' '' ''  encode ( 'hex ' )
all ( i in ( 1 , 2 , 3 , 4 , 5 ) for i in ( 1 , 6 ) )
df iloc [ : , ( np r_ [ 1:10 , ( 15 ) , ( 17 ) , 50:100 ] ) ]
[ i for i , j in enumerate ( [ 'foo ' , 'bar ' , 'baz ' ] ) if j == 'foo ' ]
printf ( 'hello % 1 $ s   your % 1 $ s has just been created ! ' , 'world ' )
master bind ( 's ' , self sharpen )
foo ( )
[ item [ 0 ] for item in queryresult ]
plt show ( )                                                                          
text_widget bind ( ' < 1 > ' , lambda event : text_widget focus_set ( ) )
[ ( a * b ) for a , b in zip ( lista , listb ) ]
[ d for d in a if d [ 'name ' ] == 'pluto ' ] 
np einsum ( 'ji , i- > j ' , a , b )
array ( [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] )
ord ( '\xff ' )
data [ data [ 'value ' ] == true ]
server serve_forever ( )
mapping = np array ( [ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 1 , 0 , 0 ] ] )
numpy nonzero ( m mask )
n = int ( input ( ) )
my_dict pop ( 'key ' , none )
motifs append ( motif )
{ 'south_carolina ' : 'sc ' , 'north_carolina ' : 'nc ' }
nx mean ( data [ : , -3 : ] , axis=0 )
df [ 'value ' ] = df [ 'value ' ]  str strip ( ' [ ] ' )
open ( 'componentreport-dji xls ' , 'rb ' )  read ( 200 )
subprocess popen ( [ 'rm ' , '-r ' , 'some file ' ] )
split_at ( 'obj < 1 , 2 , 3 > , x ( 4 , 5 ) , `` msg , with comma '' ' , ' , ' )
range ( 10 , 0 , -1 )
res_list = [ x [ 0 ] for x in rows ]
plt show ( )                                                                           
plt show ( )                                                                            
[ max ( len ( a ) , len ( b ) ) for a , b in zip ( *x ) ]
[ 'blah ' , 'blah ' , 'blah ' , 'blah ' ]
[ { 'x ' : 'one ' , 'id ' : 1 } , { 'x ' : 'two ' , 'id ' : 2 } , { 'x ' : 'three ' , 'id ' : 3 } ]
zip ( list ( range ( 10 ) ) , list ( range ( 10 , 0 , -1 ) ) )
[ d [ 'key ' ] for d in l if 'key ' in d ]
df groupby ( level=0 , axis=1 )  mean ( )
[ 'x ' , '+ ' , '13 ' , '   ' , '5 ' , '* ' , '10 ' , 'x ' , '- ' , '4 ' , 'e ' , '1 ' ]
boxplot ( [ 1 , 2 , 3 , 4 , 5 , 10 ] , showfliers=false )
time sleep ( 5 ) 
[ 'a ' , 'b ' ]  index ( 'b ' )
re sub ( '\\bfoo\\b ' , cased_replacer ( 'bar ' ) , 'this is foo ' , flags=re i )
[ [ 'tie ' , 'hat ' ] , [ 'shoes ' , 'pants ' , 'shirt ' ] , [ 'jacket ' ] ]
fn = os path join ( os path dirname ( __file__ ) , 'my_file ' )
[ '' ] * len ( mylist )
re findall ( ' ( [ 0-9 ] + ) ( [ a-z ] ) ' , '20m10000n80m ' )
re findall ( ' ( [ 0-9 ] +| [ a-z ] ) ' , '20m10000n80m ' )
re findall ( ' # ( \\w+ ) ' , 'http : //example org/ # comments ' )
{ k : v for k , v in list ( hand items ( ) ) if v }
duck quack ( )
next ( ( idx , x , y ) for idx , ( x , y ) in enumerate ( zip ( list1 , list2 ) ) if x ! = y )
pd concat ( [ x ] * 5 , ignore_index=true )
my_string splitlines ( ) [ 0 ]
[ [ 'z ' , '+ ' , '2 ' , '- ' , '44 ' ] , [ '4 ' , '+ ' , '55 ' , '+ ' , 'z ' , '+ ' , '88 ' ] ]
os system ( 'mysql < etc ' )
key = lambda x : sum ( map ( itemgetter ( 'play ' ) , x ) )
dfts groupby ( lambda x : x month )  mean ( )
( a t * b )  t
request files [ 'image ' ]
[ 'list ' , 'elements ' , 'go ' , 'here ' ]
[ 'e ' , '1000 ' , 'c ' ]
re findall ( ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' , s )
sum ( item [ 'gold ' ] for item in example_list )
self redirect ( '/sucess ' )
a = [ 'a ' , 'bc ' ]
plt savefig ( 'myplot png ' , dpi=100 )
pymc3 traceplot ( trace , vars= [ 'alpha ' , 'beta ' , 'sigma ' ] )
apple decode ( 'iso-8859-1 ' )  encode ( 'utf8 ' )
df [ 'new_col ' ] = list ( range ( 1 , len ( df ) + 1 ) )
self cursor execute ( `` select count ( * ) from table where asset_type='movie ' '' )
[ key for item in lst for key , value in list ( my_dict items ( ) ) if item in value ]
[ y for x in range ( 3 ) for y in [ x , x ] ]
total = sum ( float ( item ) for item in s split ( ' , ' ) )
pd read_json ( elevations )
array ( [ [ 0 , 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 3 ] , [ 1 , 5 , 6 , 7 , 8 , 9 , 4 , 5 , 6 , 7 ] ] )
`` `` '' 1234 q-24 2010-11-29 563 abc a6g47er15 '' '' ''  split ( )
[ [ 'z ' , '+ ' , '2 ' , '- ' , '44 ' ] , [ '4 ' , '+ ' , '55 ' , '+ ( ( ' , 'z ' , '+ ' , '88 ' , ' ) ) ' ] ]
plt show ( )                                                                             
mylist sort ( key=lambda x : min if x is none else x )
driver execute_script ( 'window scrollto ( 0 , document body scrollheight ) ; ' ) 
[ [ 'z ' , '+ ' , '2 ' , '- ' , '44 ' ] , [ '4 ' , '+ ' , '55 ' , '+ ' , 'z ' , '+ ' , '88 ' ] ] 
hash ( pformat ( a ) ) == hash ( pformat ( b ) )
re findall ( '\\d+|\\s ' , string )
[ 'i own half bottle ' , 'give me three quarters of the profit ' ]
np all ( a == a [ ( 0 ) , : ] , axis=0 )
[ 'foobar ' , 'fobbar ' , 'fazbar ' , 'funkbar ' ]
plt show ( )                                                                              
df select ( 'zip_code ' )  collect ( )
resp set_cookie ( 'sessionid ' , '' , expires=0 )
'hiya\x00x\x00' split ( '\x00 ' , 1 ) [ 0 ]
df [ 'date ' ]  str [ -4 : ]  astype ( int )
plt show ( )                                                                               
regex = re compile ( ' ( ( \\d+ , ) *\\d+ ) ' )
urlencode_withoutplus ( { 'arg0 ' : 'value ' , 'arg1 ' : '+value ' } )
df [ [ 'a ' , 'b ' , 'd ' ] ]  iloc [ [ 0 , 1 , 3 ] ]  mean ( axis=0 )
re split ( '\\t+ ' , yas rstrip ( '\t ' ) )
base64 urlsafe_b64decode ( uenc encode ( 'ascii ' ) )
df2 = pd dataframe ( index=df1 index )
[ 'a ' , 'ab ' , 'abc ' , 'abcd ' , 'b ' , 'bc ' , 'bcd ' , 'c ' , 'cd ' , 'd ' ]
listofzeros = [ 0 ] * n
[ s for s in ( square ( x ) for x in range ( 12 ) ) if s > 50 ]
dict ( item split ( '= ' ) for item in s split ( ' ; ' ) )
sys exit ( 0 )
return user groups filter ( name__in= [ 'group1 ' , 'group2 ' ] )  exists ( )
plt show ( )                                                                                
[ max ( abs ( x ) for x in arr [ i : i + 4 ] ) for i in range ( 0 , len ( arr ) , 4 ) ]
df index get_level_values ( 'co ' )  unique ( )
np zeros ( ( 6 , 9 , 20 ) ) + np array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( none ) , : , ( none ) ]
sys exit ( ) 
plt show ( )                                                                                 
plt show ( )                                                                                  
split ( 'abc ; def123 , ghi_jkl ; mn op ' , ( ' , ' , ' ; ' ) )
s = sorted ( s , key=lambda x : ( x [ 1 ] , x [ 2 ] ) )
[ int ( x , 16 ) for x in [ 'bb ' , 'a7 ' , 'f6 ' , '9e ' ] ]
[ 1 , 2 , 3 ]
[ l split ( '\\ ' ) [ -1 ] for l in list_dirs ]
print ( urllib parse unquote ( url )  decode ( 'utf8 ' ) )
`` `` '' '' '' ''  join ( buffer )
df = df reset_index ( ) 
print ( '' join ( a ) )
re sub ( ' ( [ abc ] ) ' , '\\1\\1 ' , text read ( ) )
re sub ( ' (   ) ' , '\\1\\1 ' , text read ( ) )
canvas delete ( 'all ' )
super ( childclass , self )  __init__ ( *args , **kwargs )
plt show ( )                                                                                   
a [ np arange ( 3 ) , ( 0 , 1 , 0 ) ]
[ sum ( map ( int , s ) ) for s in example split ( ) ]
cur execute ( `` select * from records where email like ' % s ' '' , search )
df groupby ( 'a ' )  sum ( )
plt show ( )                                                                                    
[ k for k in lst if 'ab ' in k ]
user_location = request post get ( 'location ' )
response = requests get ( url , headers=headers )
df ix [ df a == 0 , 'b ' ] = np nan
float ( int ( '-0b1110 ' , 0 ) )
[ 'b ' , 's ' , 't ' ]
new_img save ( 'tweeter_red png ' )
re sub ( ' ( ? < =  ) ( ? =   ) ' , '- ' , str )
datetime datetime now ( ) + datetime timedelta ( days=1 , hours=3 )
any ( e in lestring for e in lelist )
`` `` '' '' '' ''  join ( c for c in 'abc123def456 ' if c isdigit ( ) )
dict ( ( d [ 'name ' ] , d ) for d in listofdict )
print ( ( 'total score for ' , name , 'is ' , score ) ) 
driver get ( 'http : //www google com br ' )
plt show ( )                                                                                     
re sub ( ' ( ? < ! \\w ) ( [ a-z ] ) \\   ' , '\\1 ' , s )
blog objects filter ( pk__in= [ 1 , 4 , 7 ] )
self canvas create_image ( 0 , 0 , image=image1 , anchor=nw )
your_list sort ( key=operator attrgetter ( 'anniversary_score ' ) )
plt show ( )                                                                                      
root mainloop ( )     
last = len ( s ) - s [ : :-1 ]  index ( x ) - 1
self pushbutton setstylesheet ( 'background-color : red ' )
s decode ( 'hex ' )
items = [ item for item in container if item attribute == value ]
mylist = [ i split ( '\t ' ) [ 0 ] for i in mylist ]
pd concat ( map ( pd dataframe , iter ( d values ( ) ) ) , keys=list ( d keys ( ) ) )  stack ( )  unstack ( 0 )
pd concat ( [ df_1 , df_2 sort_values ( 'y ' ) ] )
df sort_index ( ascending=false )
datetime timedelta ( -1 , 86100 )  total_seconds ( )
url ( '^combined/ $ ' , views combinedapiview as_view ( ) , name='combined-list ' )
sorted ( list ( d items ( ) ) , key=lambda k_v : k_v [ 1 ] , reverse=true )
`` `` '' 0,1,2 '' '' ''  split ( ' , ' )
fig add_subplot ( 111 )
input ( 'press enter to continue     ' )
{ d [ 'name ' ] : d [ 'age ' ] for d in thisismylist }
plt show ( )                                                                                       
self redirect ( 'http : //www appurl com ' )
[ ( y - x ) for x , y in zip ( l , l [ 1 : ] ) ]
re sub ( '\\ ( [ ^ ) ] *\\ ) ' , '' , filename )
results += [ each for each in os listdir ( folder ) if each endswith ( ' c ' ) ]
[ a for c in cards for b in c for a in b ]
plt show ( )                                                                                        
rows = session query ( congress )  count ( )
[ j for i in zip ( a , b ) for j in i ] 
upload_files = request files getlist ( 'file ' )
return image convert ( 'hsv ' )
print ( 'if a hippo ways 2000 pounds , gives birth to a 100 pound calf and then eats a 50 pound meal how much does she weigh ? ' )
pd concat ( ( df1 , df2 ) , axis=1 )  mean ( axis=1 )
list ( x keys ( ) )  index ( 'c ' )
app run ( host='192 168 0 58 ' , port=9000 , debug=false )
requests get ( 'https : //www reporo com/ ' , verify=false )
[ '_ ' , 'empty ' , 'unused ' , 'dummy ' ]
new_dict = { k : v for k , v in zip ( keys , values ) }
map ( lambda x : max ( x , key=lambda y : y [ 1 ] ) , lists )
list_ sort ( key=lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )
f = open ( '/tmp/output ' , 'wb ' )
connection uid ( 'store ' , '-flags ' , ' ( \\seen ) ' )
next ( ( key , value ) for key , value in list ( c items ( ) ) if value > 1 )
df loc [ ( df index < start_remove ) | ( df index > end_remove ) ]
re split ( '\\s* , \\s*|\\s* ; \\s* ' , 'a , b ; cdf ' )
sorted ( s , key=str lower )
np linalg solve ( np dot ( a t , a ) , np dot ( a t , b ) )
logger = logging getlogger ( 'my_module_name ' )
names = [ item [ 'name ' ] for item in data ]
[ ( 'a ' , 'b ' ) , ( 'b ' , 'c ' ) , ( 'b ' , 'd ' ) , ( 'c ' , 'd ' ) , ( 'e ' , 'f ' ) , ( 'f ' , 'c ' ) ]
print ( set ( re sub ( ' [ \x00-\x7f ] ' , '' , '\xa3\u20ac\xa3\u20ac ' ) ) )
os chdir ( path )
name decode ( 'latin-1 ' )  encode ( 'utf-8 ' )
str2 = str replace ( '\n ' , '' )
set ( [ 'a ' , 'b ' ] )  issubset ( [ 'b ' , 'a ' , 'foo ' , 'bar ' ] )
[ int ( x ) for x in regex findall ( filename ) ]
zip ( *l )
a [ : , -2 : ]
plt show ( )                                                                                         
dict ( ( k , float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 )
`` `` '' , '' '' ''  join ( x or '0 ' for x in s split ( ' , ' ) )
soup = beautifulsoup ( response read ( )  decode ( 'utf-8 ' ) )
re findall ( ' [ bcdfghjklmnpqrstvwxyz ] + ' , 'concertation ' , re ignorecase )
df [ 'date ' ] = df [ 'time ' ]  apply ( lambda x : x date ( ) )
a append ( b )  reset_index ( drop=true )
original = [ [ 1 , 2 ] , [ 3 , 4 ] ]
{ '2010 ' : [ 2 ] , '2009 ' : [ 4 , 7 ] , '1989 ' : [ 8 ] }
subprocess call ( 'mv /home/somedir/subdir/* somedir/ ' , shell=true ) 
df filter ( 'dt_mvmt is not null ' )
print ( '\u0420\u043e\u0441\u0441\u0438\u044f ' )
df groupby ( [ 'country ' , 'gender ' ] ) [ 'industry ' ]  unique ( )
np ix_ ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] )
subprocess call ( 'test sh otherfunc ' )
print ( np array ( list ( mystr ) , dtype=int ) )
ax get_yaxis ( )  set_ticklabels ( [ ] )
print ( etree tostring ( some_tag find ( 'strong ' ) ) )
plt show ( )                                                                                          
imp find_module ( 'os ' ) [ 1 ]
df drop ( [ ( 'col1 ' , 'a ' ) , ( 'col2 ' , 'b ' ) ] , axis=1 )
dict ( zip ( l [ : :2 ] , l [ 1 : :2 ] ) )
ax set_xticklabels ( [ 'a ' , 'b ' , 'c ' , 'd ' ] )
dfts groupby ( lambda x : x year )  std ( )
root destroy ( )   
[ ( v , k ) for k , v in d items ( ) ]
files = [ f for f in os listdir ( '   ' ) if re match ( ' [ 0-9 ] +   *\\ jpg ' , f ) ]
re findall ( '\\s ' , chrs , re unicode )
[ f ( x ) for x in list ]
plt show ( )                                                                                           
'm\\n { ampersand } m\\n { apostrophe } s' encode ( )  decode ( 'unicode-escape ' )
plt show ( )                                                                                            
sorted ( yourdata , key=lambda d : d get ( 'key ' , { } )  get ( 'subkey ' ) , reverse=true )
plt show ( )                                                                                             
a [ np argmin ( a [ : , ( 1 ) ] ) ]
[ '' join ( l ) for l in list_of_lists ]
re compile ( 'xyz ' , re ignorecase )  split ( 'fooxyzbar ' )
dict ( ( key , sum ( d [ key ] for d in dictlist ) ) for key in dictlist [ 0 ] )
[ 'a ' , 'b ' , 'c ' , 'cc ' , 'd ' , 'dd ' , 'ddd ' , 'c ' , 'cc ' , 'e ' ]
f = urllib request urlopen ( url , urllib parse unquote ( urllib parse urlencode ( params ) ) )
plt xticks ( rotation=30 )
plt show ( )                                                                                              
print ( '\xc3\xa9' decode ( 'cp1252 ' )  capitalize ( ) )
sorted ( mylist , key=dist )
plt show ( )                                                                                               
subprocess call ( 'command -flags arguments & ' , shell=true )
`` `` '' day old bread , 50 % sale { 0 } '' '' ''  format ( 'today ' )
plt show ( )                                                                                                
x = x [ numpy logical_not ( numpy isnan ( x ) ) ]
plt show ( )                                                                                                 
cv2 destroyallwindows ( )  
server = smtplib smtp ( 'smtp gmail com ' , 587 )
any ( isinstance ( el , list ) for el in input_list )
df groupby ( 'a ' )  filter ( lambda g : ( g b == 123 )  any ( ) )
os system ( 'echo x ' )
[ ( 'created ' , 1 ) , ( 'some ' , 2 ) , ( 'here ' , 2 ) , ( 'tags ' , 2 ) ]
json_data = json loads ( json_string )
print ( ' , , ' join ( [ str ( i [ 0 ] ) for i in mytuple ] ) )
[ ( 1 , [ 1 , 2 , 3 , 4 ] ) , ( 2 , [ 5 , 6 , 7 ] ) ]
t = sorted ( list ( a items ( ) ) , key=lambda x : x [ 1 ] )
func ( *args , **kwargs )
[ v for k , v in list ( my_dict items ( ) ) if 'date ' in k ]
csvwriter writerow ( row )
l = [ [ x for x in range ( 5 ) ] for y in range ( 4 ) ]
[ [ y for x , y in sublist ] for sublist in l ]
cb ax xaxis set_major_formatter ( plt funcformatter ( myfmt ) )
df apply ( ' ' join , axis=1 )
list ( range ( 11 , 17 ) )
plt savefig ( 'temp png ' )
numpy in1d ( b , a )
mm objects all ( )  values ( 'b ' , 'a ' )  annotate ( max=max ( 'c ' ) )
list ( range ( 1 , 11 ) )
df ix [ list ( 'cadfeb ' ) ]  plot ( kind='barh ' )
pd concat ( [ df2 , df2 ] , axis=1 , keys= [ 'tier1 ' , 'tier2 ' ] )
plt show ( )                                                                                                  
df2 [ [ 'abuse ' , 'nff ' ] ]  plot ( kind='bar ' , stacked=true )
plt show ( )                                                                                                   
plt show ( )                                                                                                    
im = scipy misc imread ( 'flower png ' , flatten=true )  astype ( np uint8 )
pd dataframe ( data= [ i [ 0 ] for i in x ] , columns= [ 'x ' ] )
re findall ( ' % ( \\d+ ) l\\\\ % \\ ( (  * ? ) \\\\\\ ) ' , r )
df groupby ( pd timegrouper ( freq='m ' ) )
' * ? \\b ( nunca ) \\s+ ( \\s+ ) \\s+ [ 0-9  ] + [ \\r\\n ] +\\s+\\s+ ( \\s+ ) \\s+ ( vm\\s+ ) \\s+ [ 0-9   ] + '
my_dict = { x [ 0 ] : x [ 1 : ] for x in my_list }
plt show ( )                                                                                                     
[ i for i , elem in enumerate ( bool_list , 1 ) if elem ]
[ 'x ' , '+ ' , '13 5 ' , '* ' , '10 ' , 'x ' , '- ' , '4 ' , 'e ' , '1 ' ]
db commit ( ) 
print ( s split ( ' , ' ) )
m = re search ( '\\ [ ( \\w+ ) \\ ] ' , s )
sum ( x [ 1 ] for x in structure )
example = [ [ x replace ( '\r\n ' , '' ) for x in i ] for i in example ]
result = min ( max_value , max ( min_value , result ) )
conn = pyodbc connect ( 'dsn=verticadb1 ; uid=dbadmin ; pwd=mypassword ' )
df sort_index ( )
pickle load ( open ( '/tmp/test pkl ' , 'rb ' ) )
df [ 'date ' ] [ 0 ]  date ( )
new_dict [ 'key1 ' ] [ 'key2 ' ] += 5
rdd map ( lambda k_v : ( tuple ( k_v [ 0 ] ) , k_v [ 1 ] ) )  groupbykey ( )
arr sort ( order= [ 'f0 ' , 'f1 ' ] )
df = pd read_csv ( 'my csv ' , na_values= [ 'n/a ' ] )
[ ( 1 , 1 ) , ( 2 , 2 ) , ( 3 , 4 ) , ( 1 , 1 ) , ( 2 , 3 ) , ( 1 , 2 ) ]
func ( *args ) 
[ [ 1 , 2 , 5 ] , [ 3 , 4 , 5 ] ]
re findall ( ' ( b+a ) +b+ ' , mystring )
os kill ( pid , signal sigusr1 )
parser = argparse argumentparser ( allow_abbrev=false )
tex delete ( '1 0 ' , end )
[ list ( group ) for key , group in itertools groupby ( data , operator itemgetter ( 1 ) ) ]
all ( value == 0 for value in list ( your_dict values ( ) ) )
plt show ( )                                                                                                      
sorted ( map ( list , list ( totals items ( ) ) ) )
pylab setp ( _self ax get_yticklabels ( ) , fontsize=8 )
numpy dstack ( ( your_input_array , numpy zeros ( ( 25 , 54 ) ) ) )
plt show ( )                                                                                                       
__init__ py  
max ( lst , key=lambda x : x [ 'score ' ] )
new_list = [ x split ( ) [ -1 ] for x in original_list ]
min ( [ x for x in num_list if x > 2 ] )
pd concat ( [ good , new ] , axis=0 , ignore_index=true )
plt show ( )                                                                                                        
print ( hex ( new_int ) [ 2 : ] )
requests get ( 'https : //www mysite com/ ' , auth= ( 'username ' , 'pwd ' ) )
max_item = max ( a_list , key=operator itemgetter ( 1 ) )
`` `` '' a string '' '' ''  decode ( 'ascii ' )
sorted ( l , key=operator itemgetter ( 'resulttype ' ) )
urllib parse unquote ( url )  decode ( 'utf8 ' )
print ( 'i am printing { } and { } ' format ( x , y ) )
print ( 'i am printing { 0 } and { 1 } ' format ( x , y ) )
df pivot_table ( 'y ' , rows='x ' , cols='x2 ' )
del request session [ 'mykey ' ]
subprocess call ( [ '/usr/bin/perl ' , ' /uireplace pl ' , var ] )
r = requests get ( ' < my_uri > ' , headers= { 'authorization ' : 'tok : < my_token > ' } )
df groupby ( [ 'col5 ' , 'col2 ' ] )  size ( )  groupby ( level=1 )  max ( )
a update ( b )
df [ 'col ' ] = 'str ' + df [ 'col ' ]  astype ( str )
print ( proc communicate ( ) [ 0 ] )
data [ 'sex ' ]  replace ( [ 0 , 1 ] , [ 'female ' , 'male ' ] , inplace=true )
a [ a ! = 0 ]
print ( soup find ( 'a ' , href=re compile ( ' *follow\\ ? page   * ' ) ) )
os system ( 'dir c : \\ ' )
[ '0 0 0 0 py ' , '1 0 0 0 py ' , '1 1 0 0 py ' ]
ax patch set_facecolor ( 'black ' )
dict ( my_object )
df groupby ( np arange ( len ( df columns ) ) // 2 + 1 , axis=1 )  sum ( )  add_prefix ( 's ' )
webbrowser open ( 'file txt ' )
x_file = open ( os path join ( direct , '5_1 txt ' ) , 'r ' )
np prod ( a shape )
plt show ( )                                                                                                         
e = root xpath ( ' //a [ contains ( text ( ) , '' text a '' ) ] ' )
e = root xpath ( ' //a [ starts-with ( text ( ) , '' text a '' ) ] ' )
model objects all ( )  order_by ( 'some_field ' )  update ( position=f ( some_field ) + 1 )
`` `` '' hello { name } , how are you { name } , welcome { name } '' '' ''  format ( name='john ' )
theset = set ( k lower ( ) for k in thedict )
print ( ' %  3f ' % 4 53 )
{ 'a ' : [ 1 , 2 , 3 ] , 'c ' : [ 1 ] , 'b ' : [ 1 , 2 ] }
[ a [ x ]  append ( b [ x ] ) for x in range ( 3 ) ]
data write ( ' % s % s\n ' % ( c , n ) )
hex ( sum ( b < < i for i , b in enumerate ( reversed ( walls ) ) ) )
plt savefig ( 'filename png ' , dpi=300 )
return my_list == list ( range ( my_list [ 0 ] , my_list [ -1 ] + 1 ) )
[ 'dog ' , 'domestic_dog ' , 'canis_familiaris ' ]
book objects filter ( pk=pk )  update ( **d )
[ 'a ' , 'b ' , 'x ' , 'y ' ]
print ( urllib request urlopen ( request )  read ( ) )
[ 'cccc ' , 'aaa ' , 'ss ' ]
[ [ foo ( ) for x in range ( 10 ) ] for y in range ( 10 ) ]
ax set_aspect ( 'equal ' )
ast literal_eval ( `` { 'muffin ' : 'lolz ' , 'foo ' : 'kitty ' } '' )
ast literal_eval ( `` shutil rmtree ( 'mongo ' ) '' )
yourdatetime date ( ) < datetime today ( )  date ( )
print ( collections counter ( s )  most_common ( 1 ) [ 0 ] )
np concatenate ( input_list )  ravel ( )  tolist ( )
km fit ( x reshape ( -1 , 1 ) )
array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] )
plt show ( )                                                                                                          
max ( alkaline_earth_values , key=lambda x : x [ 1 ] )
log info ( 'foobar ' )
sorted ( subjects , operator itemgetter ( 0 ) , reverse=true )
plt figure ( figsize= ( 1 , 1 ) )
'x\xc3\xbcy\xc3\x9f' encode ( 'raw_unicode_escape ' )  decode ( 'utf-8 ' )
logger debug ( 'my message with % s ' , 'variable data ' )
jsondata [ 'results ' ] [ 0 ] [ 'address_components ' ]
item = re sub ( ' ? \\ ( \\w+\\ ) ' , '' , item )
item = re sub ( ' ? \\ ( [ ^ ) ] +\\ ) ' , '' , item )
datetime datetime ( 2013 , 4 , 25 , 13 , 32 )
[ ( x + y ) for x , y in zip ( first , second ) ]
ax plot ( x , y , color='g ' )
gtk main ( ) 
numpy array ( b )  reshape ( 5 , 5 )
`` `` '' boat txt txt '' '' ''  replace ( ' txt ' , '' )
urls = html xpath ( '//a/ @ href ' )
count setdefault ( 'a ' , 0 )
`` `` '' , '' '' ''  join ( 'hello ' )
`` `` '' '' '' ''  join ( [ 1 , 2 , 3 , 4 ] )
driver execute_script ( ' $ ( `` span info '' )  click ( ) ; ' )
plt show ( )                                                                                                           
print ( ' [ ' + ' , ' join ( ' % 5 3f ' % v for v in l ) + ' ] ' )
dic setdefault ( key , [ ] )  append ( value )
df [ 'ishammer ' ] = map ( is_hammer , df [ 'open ' ] , df [ 'low ' ] , df [ 'close ' ] , df [ 'high ' ] )
[ ( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x ! = y ]
df = pd dataframe ( np random random ( ( 1000 , 100 ) ) )
plt show ( )                                                                                                            
result = [ sum ( b ) for b in a ]
df1 merge ( df2 , how='left ' , on='word ' )
time mktime ( datetime datetime strptime ( s , ' % d/ % m/ % y ' )  timetuple ( ) )
dict ( [ [ 'two ' , 2 ] , [ 'one ' , 1 ] ] )
re findall ( 'taa ( ? : [ atgc ] { 3 } ) + ? taa ' , seq )
re split ( '\\b\\w+\\ \\w+ @ ' , s )
datetime strptime ( '2011221 ' , ' % y % w % w ' )
print ( [ word for word in words if word [ 0 ]  isupper ( ) ] )
df loc [ : , ( ( df ! = 0 )  any ( axis=0 ) ) ]
`` `` '' '' '' ''  join ( x upper ( ) if random randint ( 0 , 1 ) else x for x in s )
dict ( ( k lower ( ) , v ) for k , v in { 'my key ' : 'my value ' }  items ( ) )
plt show ( )                                                                                                             
raise valueerror ( 'invalid gender % r ' % gender )
today = datetime datetime utcnow ( )  date ( )
return s [ 0 ]  upper ( ) + s [ 1 : ]
requests get ( url , headers= { 'referer ' : my_referer } )
[ y [ 1 ] for y in sorted ( [ ( mydict [ x ] [ 2 ] , x ) for x in list ( mydict keys ( ) ) ] ) ]
xpath ( '//body//text ( ) ' )  extract ( )
[ 'afghanistan ' , 'japan ' , 'united arab emirates ' ] 
array ( [ [ 1 , 2 , 0 ] , [ 3 , 4 , 0 ] ] )
p1 communicate ( ) [ 0 ]
pandas read_csv ( filename , sep='\t ' , lineterminator='\r ' )
cherrypy quickstart ( )
people objects all ( )  order_by ( )
list_of_lists = [ list ( k ) for k in list_of_tuples ]
sys path insert ( 0 , 'libs ' )
os system ( 'grepdb= '' echo 123 '' ; /bin/bash -c `` $ grepdb '' ' )
df [ 'state ' ]  apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )
len ( my_text ) - len ( my_text rstrip ( ' ? ' ) )
re sub ( 'g+ ' , 'g ' , 'omgggg ' )
df [ 'stats ' ]  apply ( pd series )
sorted ( list1 , key=lambda x : keyfun ( x split ( '- ' ) [ 1 ] , list2 ) )
r = re compile ( ' ( ? p < int > ^\\d+ $ ) | ( ? p < word > ^\\w+ $ ) ' )
employees objects values_list ( 'eng_name ' , 'rank ' )
[ 1 , 2 , 3 , 4 , 5 , 6 ] 
print ( str ( count ) + ' ' + str ( conv ) )
dict ( pair for d in l for pair in list ( d items ( ) ) )
br addheaders = [ ( 'cookie ' , 'cookiename=cookie value ' ) ]
json dumps ( { str ( k ) : v for k , v in data items ( ) } )
print ( ' ' join ( [ str ( ord ( a ) ) for a in data ] ) )
str decode ( 'utf-8 ' )
os environ [ 'debussy ' ] = '1 ' 
sheet write ( 1 , 1 , 2 )
regex = re compile ( ' ( ( \\d+ , ? ) + ) ' )
df save ( 'mycsv csv ' , 'com databricks spark csv ' )
get_pid ( 'chrome ' )
alist sort ( key=lambda x : x foo )
all ( a_list )
[ 'a ' , 'ab ' , 'abc ' , 'abcd ' , 'b ' , 'bc ' , 'bcd ' , 'c ' , 'cd ' , 'd ' ] 
df = df set_index ( [ 'company ' , 'date ' ] , inplace=true )
{ 'count ' : 836780 , '_shards ' : { 'successful ' : 5 , 'failed ' : 0 , 'total ' : 5 } }
plt show ( )                                                                                                              
ax2 plot ( x , y , 'bo ' )
df [ 'prod_type ' ] = 'responsive '
re search ( 'name ( \\w+ ) ' , s )
plt show ( )                                                                                                               
plt show ( )                                                                                                                
unittest main ( )  
gzip open ( 'file gz ' , 'rt ' , encoding='utf-8 ' )
pd dataframe ( list ( d items ( ) ) , columns= [ 'date ' , 'datevalue ' ] )
hex ( int ( '' join ( [ str ( int ( b ) ) for b in walls ] ) , 2 ) )
`` `` '' integer : { } ; float : { } ; string : { } '' '' ''  format ( a , b , c )
db delete ( bottom all ( keys_only=true )  filter ( 'daddy = ' , top )  fetch ( 1000 ) )
map ( list , zip ( *main_list ) )
plt show ( )                                                                                                                 
plt show ( )                                                                                                                  
df loc [ len ( df ) ] = [ '8/19/2014 ' , 'jun ' , 'fly ' , '98765 ' ]
from functools import reduce reduce ( lambda x , y : x combine_first ( y ) , [ df1 , df2 , df3 ] )
datetime datetime strptime ( '10/05/2012 ' , ' % d/ % m/ % y ' )  strftime ( ' % y- % m- % d ' )
'one ' in iter ( d values ( ) )
df query ( 'index < @ start_remove or index > @ end_remove ' )
plt show ( )                                                                                                                   
b [ np argsort ( a ) ] = np sort ( b )
df = df [ [ 'foo ' , 'bar ' ] ]
np random uniform ( 0 , cutoffs [ -1 ] )
[ f name for f in br forms ( ) ]
zip ( [ 'a ' , 'c ' , 'e ' ] , [ 'b ' , 'd ' ] )
conn commit ( )   
newcontents = contents replace ( 'a ' , 'e ' )  replace ( 's ' , '3 ' )
sorted_by_length = sorted ( list_ , key=lambda x : ( x [ 0 ] , len ( x [ 1 ] ) , float ( x [ 1 ] ) ) )
webbrowser open ( 'http : //example com ' )
print ( ' { 0 : +d } ' format ( score ) )
first_name = request form get ( 'firstname ' )
df [ 'date ' ]  map ( lambda t : t date ( ) )  unique ( )
re findall ( ' ( [ a-z ] ) * ' , '123abc789 ' )
re findall ( ' ( ? : [ a-z ] ) * ' , '123abc789 ' )
self request get_all ( )
min ( [ 1 , 2 , 3 ] )
sweden = country ( name='sweden ' , abbreviation='se ' )
np savez ( tmp , * [ getarray [ 0 ] , getarray [ 1 ] , getarray [ 8 ] ] )
[ k for k , v in sorted ( list ( mydict items ( ) ) , key=lambda k_v : k_v [ 1 ] [ 1 ] ) ]
linsolve ( matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) )
'used\u200b' strip ( '\u200b ' )
function_in_library ( 'hello % s ' % ' , ' join ( [ ' % s ' ] * len ( my_args ) ) , my_args )
[ [ 0 , 0 ] , [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] , [ 4 , 40 ] , [ 5 , 50 ] ]
sess run ( tf initialize_all_variables ( ) )
[ ( 'pos1 ' , 'target1 ' ) , ( 'pos2 ' , 'target2 ' ) ]
list ( i [ 0 ] == i [ 1 ] for i in zip ( list1 , list2 ) )
plt show ( )                                                                                                                    
return render_to_response ( 'myapp/mytemplate html ' , { 'a ' : a } )
df [ [ 'value ' ] ]  fillna ( df groupby ( 'group ' )  transform ( 'mean ' ) )
lambda x , y : x + y
df apply ( ' ' join , axis=0 )
print ( all ( word [ 0 ]  isupper ( ) for word in words ) )
sorted ( li , key=operator itemgetter ( 1 ) , reverse=true )
print ( ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' format ( '1 ' , '2 ' , '3 ' ) )
pandas set_option ( 'display max_columns ' , none )
pd dataframe ( [ { val : key for key , val in list ( d items ( ) ) } for d in df to_dict ( 'r ' ) ] )
mpl use ( 'wxagg ' )
sys exit ( main ( ) )
dataframe from_csv ( 'c : /~/trainsetrel3 txt ' , sep='\t ' , header=0 )
datetimevariable strftime ( ' % y- % m- % d ' )
[ 'a ' , 'and ' , 'b ' , 'and ' , 'c ' ]
int ( '' join ( str ( random randint ( 0 , 9 ) ) for _ in range ( 12 ) ) )
plt show ( )                                                                                                                     
df [ 'b ' ]  cumsum ( )
df set_index ( [ 'timestamp ' , 'objectid ' ] ) [ 'result ' ]  unstack ( )
[ boardsize , boardsize ]
plt savefig ( 'filename png ' )
time sleep ( 0 1 )
url ( 'home/ $ ' , app views home , name='home ' )
os environ [ 'user_is_admin ' ] = '1 '
plt show ( )                                                                                                                      
print ( [ y for x in list ( dict items ( ) ) for y in x ] )
`` `` '' '' '' ''  join ( c for c in text if c not in 'aeiouaeiou ' )
df = df set_index ( [ 'id ' , 'name ' ] )
[ [ 0 0 , 3 ] , [ 0 1 , 1 ] ]
df loc [ df [ 'value ' ]  idxmax ( ) ]
logging info ( 'log message ' , extra= { 'app_name ' : 'myapp ' } )
[ x for x in list_of_nums if x ! = 2 ]
pygame display flip ( ) 
df groupby ( 'user ' ) [ 'x ' ]  transform ( sum ) == 0
new_list = [ x [ : ] for x in old_list ]
datetime strptime ( '21/11/06 16:30 ' , ' % d/ % m/ % y % h : % m ' )
s = re sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+ $ ' , ' ' , s )
plt scatter ( *zip ( *li ) )
ax scatter ( xs , ys , zs )
numpy dot ( numpy dot ( a , m ) , a )
[ [ 'a ' , 'b ' , 'c ' ] , [ 'd ' , 'e ' , 'f ' , 'g ' ] , [ 'd ' , 's ' , 'd ' , 'a ' ] ] 
print ( max ( 1 , 2 , 3 ) )
re split ( '_ ( ? : for|or|and ) _ ' , 'sad_pandas_and_happy_cats_for_people ' )
soup body findall ( text='python jobs ' )
rdata set_index ( [ 'race_date ' , 'track_code ' , 'race_number ' ] )
print ( '' join ( '' join ( i ) for i in zip ( a2 , a1 ) ) + a [ -1 ] if len ( a ) % 2 else '' )
`` `` '' a b '' '' ''  replace ( ' ' , '' )  isalpha ( )
randomlist = [ random random ( ) for _ in range ( 10 ) ]
[ ( a + i reshape ( 2 , 2 ) ) for i in np identity ( 4 ) ]
plt show ( )                                                                                                                       
c = row [ 1 ]  split ( ' , ' ) [ 1 : -1 ]
`` `` '' '' '' ''  join ( [ s [ x : x + 2 ] [ : :-1 ] for x in range ( 0 , len ( s ) , 2 ) ] )
plt show ( )                                                                                                                        
sorted ( set ( itertools chain from_iterable ( sequences ) ) ) 
ax spines [ 'right ' ]  set_visible ( false ) 
datetime datetime fromtimestamp ( x astype ( 'o ' ) / 1000000000 0 )
os path abspath ( os path join ( dir , '   ' ) )
plt show ( )                                                                                                                         
print ( '\x1b [ 0m ' )
df [ ( x < = df [ 'columnx ' ] ) & ( df [ 'columnx ' ] < = y ) ]
plt show ( )                                                                                                                          
0 , 182 , 283 , 388 , 470 , 579 , 757
print ( str encode ( 'cp1252 ' )  decode ( 'utf-8 ' )  encode ( 'cp1252 ' )  decode ( 'utf-8 ' ) )
re findall ( ' ( ( [ 0-9 ] + ) ( [ a-z ] ) ) ' , '20m10000n80m ' )
redirect ( 'home views index ' )
set ( l [ 0 ]  f items ( ) )  issubset ( set ( a3 f items ( ) ) )
self sock connect ( self url , header=self header )
return urllib request urlopen ( url )  read ( )
s1 = pd merge ( df1 , df2 , how='inner ' , on= [ 'user_id ' ] )
a = [ 'bi ' , 'double ' , 'duo ' , 'two ' ]
dateobj = datetime datetime strptime ( datestr , ' % y- % m- % d ' )  date ( )
activity objects filter ( list__topic__user=my_user )
mylist sort ( key=str lower )
plt show ( )                                                                                                                           
[ x for x in l if x is not none ]
result replace ( '\\ ' , '' )
df set_index ( 'id ' , drop=true , inplace=true )
print ( [ '' join ( a ) for a in combinations ( [ 'hel ' , 'lo ' , 'bye ' ] , 2 ) ] )
np array ( map ( int , '100110 ' ) )
[ ( i , max ( j ) ) for i , j in list ( d items ( ) ) ]
sum ( i * j for i , j in zip ( a , b ) )
foo decode ( 'utf8 ' )  encode ( 'utf8 ' )
ax contour ( x , y , z , levels , cmap=cmap , norm=norm , antialiased=true )
a = numpy fromfile ( 'filename ' , dtype=numpy float32 )
soup findall ( 'div ' , style='width=300px ; ' )
os path join ( *x split ( os path sep ) [ 2 : ] )
time sleep ( 1 )  
[ ( x / y ) for x , y in zip ( a , b ) ]
a = [ x for x in a if x [ 'link ' ] not in b ]
plt show ( )                                                                                                                            
plt savefig ( 'test svg ' )
get_client_ip ( request )
print ( os path splitext ( '/home/user/somefile txt ' ) [ 0 ] + ' jpg ' )
celery_routes = { 'mypackage myclass runworker ' : { 'queue ' : 'myqueue ' } }
pd crosstab ( index=df [ 'values ' ] , columns= [ df [ 'convert_me ' ] , df [ 'age_col ' ] ] )
df loc [ df groupby ( 'user ' ) [ 'x ' ]  transform ( sum ) == 0 ]
sorted ( list ( d items ( ) ) , key=lambda x : ( x [ 1 ] , x [ 0 ] ) )
sum ( isinstance ( x , int ) for x in a )
print ( re findall ( ' [ u0600-u06ff ] + ' , my_string ) )
print ( re findall ( ' [ 0-u ] + ' , my_string ) )
status objects order_by ( 'id ' ) [ 0 ]
mymodel objects extra ( select= { 'length ' : 'length ( name ) ' } )  order_by ( 'length ' ) 
l [ :3 ] + l [ -3 : ]
`` `` '' this isar ando msen tenc e '' '' ''
list ( zip ( a , b , zip ( c [ 0 : :2 ] , c [ 1 : :2 ] ) , d ) )
df = df reset_index ( drop=true )
plt show ( )                                                                                                                             
employees objects values_list ( 'eng_name ' , flat=true )
result = { k : d2 get ( v ) for k , v in list ( d1 items ( ) ) }
sorted ( lst , key=lambda x : x [ 'language ' ] ! = 'en ' )
ssh_client set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )
cursor execute ( 'select * from table_name where 1=0 ' )
set ( [ 'looked ' , 'resting ' , 'spit ' ] )
sorted ( [ '10 ' , '3 ' , '2 ' ] )
plt cla ( )
set ( d keys ( ) )
first_name = request args get ( 'firstname ' )
return args [ -1 ] + mysum ( args [ : -1 ] )
{ { tags | join ( ' ' ) } }
[ false , false , true ]
plt show ( )                                                                                                                              
res = df resample ( 'q ' , axis=1 )  mean ( )
threading timer ( delay , self update )  start ( )
{ 'y2 ' : 2 , 'y1 ' : 1 , 'x2 ' : 2 , 'x3 ' : 3 , 'y3 ' : 3 , 'x1 ' : 1 }
weekdays ( 'wednesday ' )
df [ 'new_column ' ] = df [ 'old_column ' ]  apply ( lambda x : ' # ' + x replace ( ' ' , '' ) )
[ w for w in open ( 'file txt ' ) if not re search ( ' [ aeiou ] { 2 } ' , w ) ]
tempdf [ 'newtuple ' ] = 's '
`` `` '' , `` '' ''  join ( [ ' %  2f ' ] * len ( x ) )
medals reindex_axis ( [ 'gold ' , 'silver ' , 'bronze ' ] , axis=1 )
return qs values ( 'date ' )  annotate ( sum ( 'amount ' ) )  order_by ( 'date ' )
df columns = df columns get_level_values ( 0 )
archive write ( pdffile , os path basename ( pdffile ) )
plt show ( )                                                                                                                               
df fillna ( method='ffill ' , inplace=true ) 
df groupby ( [ 'col5 ' , 'col2 ' ] )  size ( )
t = tuple ( x [ 0 ] for x in s )
root mainloop ( )      
df = df set_index ( [ 'trx_date ' ] )
shutil copy ( 'file txt ' , 'file2 txt ' )
plt show ( )                                                                                                                                
scatter ( x , y , s=500 , color='green ' , marker='h ' )
{ { car date_of_manufacture | datetime } }
re match ( ' [ a-za-z ] [ \\w- ] *\\z ' , 'a\n ' )
sorted ( list1 , key=lambda x : wordorder get ( x split ( '- ' ) [ 1 ] , len ( wordorder ) ) )
[ '\x00\x00 ' , '\x00\x00 ' , '\x00\x00 ' ]
p setopt ( pycurl writefunction , lambda x : none )
list_of_tuples = [ tuple ( k ) for k in list_of_lists ]
x [ : :-1 ]
sorted ( list ( u items ( ) ) , key=lambda v : v [ 1 ] )
urllib parse quote ( s encode ( 'utf-8 ' ) )
df [ 'x ' ] [ 'c ' ] = 10
len ( set ( a ) ) == len ( a )
os chmod ( 'my_script sh ' , 484 )
strg startswith ( ( '0 ' , '1 ' , '2 ' , '3 ' , '4 ' , '5 ' , '6 ' , '7 ' , '8 ' , '9 ' ) )
list ( allbutlast ( [ 1 , 2 , 3 ] ) )
np dot ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )
sys exit ( )  
data_df [ 'grade ' ] = data_df [ 'grade ' ]  astype ( float )  astype ( int )
cursor execute ( 'drop table if exists anooog1 ' )
datetime datetime now ( )  strftime ( ' % y- % m- % d % h : % m : % s ' )
ax set_xlabel ( 'chromosome ' )
raise valueerror ( 'invalid input ' )
a = np array ( a )
[ 'data1 ' , 'data3 ' , 'data5 ' , 'data2 ' ]
print ( re findall ( pattern , x ) )
df sub ( df mean ( axis=1 ) , axis=0 )
[ j for i in x for j in i ]
plt show ( )                                                                                                                                 
self assertequal ( response status_code , 200 )
summed_group unstack ( level=0 )  plot ( kind='bar ' , subplots=true )
df ix [ 'c ' , '3 ' ]
return next ( iter ( dictionary values ( ) ) )
df [ 'values ' ]  groupby ( [ df index year , df index strftime ( ' % b ' ) ] )  sum ( )  unstack ( )
os read ( f fileno ( ) , 50 )
input_string count ( 'hello ' )
np split ( a , [ -1 ] )
plt subplots_adjust ( wspace=0 , hspace=0 )
`` `` '' '' '' ''  join ( [ 'x ' , 'x ' , 'x ' ] )
ax annotate ( str ( y ) , xy= ( x , y ) , xytext= ( -5 0 , -5 0 ) , textcoords='offset points ' )
c = [ ( m start ( ) , m end ( ) - 1 ) for m in re finditer ( '\\s+ ' , a ) ]
`` `` '' `` '' ''  join ( mystring split ( ) )
df = df dropna ( axis=1 , how='all ' )
logging basicconfig ( level=logging debug , format= ' % ( asctime ) s % ( msg ) s ' )
[ i for s in [ list ( d keys ( ) ) for d in lod ] for i in s ]
df groupby ( 'adult ' ) [ 'weight ' ]  transform ( 'idxmax ' )
self mylist extend ( [ 0 ] * ( 4 - len ( self mylist ) ) )
set ( [ 'a ' , 'b ' ] )  issubset ( [ 'a ' , 'b ' , 'c ' ] )
[ [ i , i * 10 ] for i in range ( 5 ) ]
dparser parse ( 'monkey 20/01/1980 love banana ' , fuzzy=true )
dparser parse ( 'monkey 2010-07-32 love banana ' , fuzzy=true )
re findall ( ' [ a-z ] * ' , 'f233op ' )
sorted ( list ( range ( len ( a ) ) ) , key=lambda i : a [ i ] ) [ -2 : ]
random randint ( 100000000000 , 999999999999 )
[ ( c / t ) for c , t in zip ( conversions , trials ) ]
`` `` '' abcdabcva '' '' ''  count ( 'ab ' )
re compile ( ' \\a| \\a*| \\a+ ' )
r = requests get ( 'https : //api github com ' , auth= ( 'user ' , 'pass ' ) )
df reset_index ( )  pivot ( 'index ' , 'letter ' , 'n ' )  hist ( )
str = open ( 'very_important txt ' , 'r ' )  read ( )
np sqrt ( np square ( df )  sum ( axis=1 ) )
dict ( map ( operator itemgetter ( 'city ' , 'country ' ) , li ) )
[ 'str ' , 'ing ' , 'str ' , 'ing ' , 'str ' , 'ing ' , 'str ' , 'ing ' ]
link click ( )
[ ( x [ i ] == y [ i ] ) for i in range ( len ( x ) ) ]
[ list ( t ) for t in zip ( *list_of_tuples ) ]
s split ( ' @ ' ) [ 0 ]
string [ 0 ]  isdigit ( )
df [ 'a ' ]  str contains ( '- ' )
datetime strptime ( '2012-03-01t10:00:00z ' , ' % y- % m- % dt % h : % m : % sz ' )
np einsum ( 'ij , jk , kl , lm ' , s0 , sx , sy , sz )
re findall ( '\\d|\\d , \\d\\ ) ' , '6,7 ) ' )
re sub ( ' (   ) ( ? =   ) ' , '\\1- ' , s )
c = pd concat ( [ df , df2 ] , axis=1 , keys= [ 'df1 ' , 'df2 ' ] )
{ ' failures ' : '0 ' , 'tests run ' : '1 ' , ' errors ' : '0 ' }
'this is the first line of my text , ' + 'which will be joined to a second   '
out = '' join ( c for c in asking if c not in ( ' ! ' , '   ' , ' : ' ) )
[ [ 0 , 0 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 0 , 0 ] ]
struct unpack ( ' < i ' , bytes + '\x00 ' )
comptest ( 'test ' )
comptest ( 'this is a compression test of a short sentence   ' )
[ 'ab ' , 'c ' , 'de ' , 'fg ' , 'h ' ]
np array ( [ 0 0 , pinf , ninf ] ) < 0
print ( ' % 20s ' % somevar )
myssh exec_command ( 'cd    ; pwd ' )
{ ( x ** 2 ) for x in range ( 100 ) }
df2 = df groupby ( [ 'customer ' , 'invoice_nr ' , 'date ' ] )  sum ( )
connection commit ( )
model objects all ( )  order_by ( ' ? ' ) [ 0 ]
driver execute_script ( `` $ ( ' # copy_link ' )  css ( 'visibility ' , 'visible ' ) ; '' )
numpy dstack ( numpy meshgrid ( x , y ) )  reshape ( -1 , 2 )
numpy array ( your_list )
return s decode ( 'latin-1 ' )
[ x [ 0 ] for x in rows ]
np ma array ( np tile ( arr , 2 )  reshape ( 2 , 3 ) , mask=~cond )  argmax ( axis=1 )
re findall ( '\\w+ ' , `` do n't read o'rourke 's books ! '' )
plt figure ( figsize= ( 8 , 8 ) )
array ( [ true , true , true , true , true , true , true , true , true , true ] , dtype=bool )
df groupby ( [ 'pplnum ' , 'roomnum ' ] )  cumcount ( ) + 1
dict ( ( i , list ( range ( int ( i ) , int ( i ) + 2 ) ) ) for i in [ '1 ' , '2 ' ] )
df = df [ [ 'mean ' , '0 ' , '1 ' , '2 ' , '3 ' ] ]
`` `` '' '' '' ''  join ( [ i for i in s if i isalpha ( ) ] )
plt rc ( 'font ' , ** { 'size ' : '30 ' } )
file close ( ) 
np apply_along_axis ( mahalanobis_sqdist , 1 , d1 , mean1 , sig1 )
i = a argsort ( axis=none ) [ : :-1 ]
{ 'id ' : 1 , 'reference1 ' : 1 , 'value ' : 1 }
my_array = numpy array ( list ( gim me ( ) ) )
df drop ( ( 'col1 ' , 'a ' ) , axis=1 )
sum ( ord ( c ) for c in string )
datetime strptime ( 'tue , 22 nov 2011 06:00:00 gmt ' , ' % a , % d % b % y % h : % m : % s % z ' )
int ( '08 ' )
url ( '^ $ ' , templateview as_view ( template_name='your_template html ' ) )
sorted ( a , key=lambda x : x [ 1 ] )
`` `` '' '' '' ''  join ( map ( lambda x : x * 7 , 'map ' ) )
logging disable ( logging critical )
np cumsum ( a [ : :-1 ] ) [ : :-1 ] - np cumsum ( a )
os path realpath ( path )
request post getlist ( 'recommendations ' )
category objects filter ( animal__name__startswith='a ' )
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a ' , 'b ' , 'c ' , 'd ' ] ) )
ax imshow ( data , extent= [ 0 , 1 , 0 , 1 ] )
logging fileconfig ( loginipath , defaults= { 'logfilename ' : '/var/log/mylog log ' } )
max ( enumerate ( ld ) , key=lambda item : item [ 1 ] [ 'size ' ] )
sum ( i * i for i in l )
[ dict ( zip ( k , x ) ) for x in v ]
df drop_duplicates ( )
urllib parse unquote ( string )
lista_elegir [ np random choice ( len ( lista_elegir ) , 1 , p=probabilit ) ]
pd concat ( [ df drop ( 'b ' , axis=1 ) , pd dataframe ( df [ 'b ' ]  tolist ( ) ) ] , axis=1 )
print ( str ( len ( s ) ) + ' bytes ' )
x [ [ 0 , 1 , -2 , -1 ] ]
screen blit ( img , ( 0 , 0 ) )
random_choice = random choice ( choices )
return ( now - datetime datetime ( 1970 , 1 , 1 ) )  total_seconds ( )
[ 'we ' , 'love ' , 'your ' , 'dict ' ]
pd melt ( x , id_vars= [ 'farm ' , 'fruit ' ] , var_name='year ' , value_name='value ' )
plt show ( )                                                                                                                                  
plt show ( )                                                                                                                                   
print ( '\\num { { { 0 :  2g } } } ' format ( 1000000000 0 ) )
rc ( 'figure ' , figsize= ( 11 69 , 8 27 ) )
c [ np logical_or ( a , b ) ]
my_new_list = zip ( my_list [ 0 : :2 ] , my_list [ 1 : :2 ] )
driver = webdriver chrome ( '/usr/lib/chromium-browser/chromedriver ' )
[ ( x , lst2 [ i ] ) for i , x in enumerate ( lst ) ]
plt show ( )                                                                                                                                    
{ 'y1 ' : 1 , 'x2 ' : 2 , 'x1 ' : 1 , 'y2 ' : 2 }
plt show ( )                                                                                                                                     
ax yaxis set_visible ( false )
time strptime ( '2011-03-06t03:36:45+0000 ' , ' % y- % m- % dt % h : % m : % s+0000 ' )
data [ i ] [ j ] [ k ]
a [ 'searchresult ' ]  sort ( key=lambda d : d [ 'ranking ' ] , reverse=true )
re findall ( '\\d+ ( ? = [ ^ [ ] + $ ) ' , s )
matching = [ s for s in some_list if 'abc ' in s ]
os startfile ( 'startsim bat ' )
print ( urllib request urlopen ( 'http : //localhost/ ' )  read ( ) )
print ( ' { :  100f } ' format ( 2 345e-67 ) )
[ { 'col3 ' : 3 , 'col2 ' : 2 , 'col1 ' : 1 } , { 'col3 ' : 6 , 'col2 ' : 5 , 'col1 ' : 4 } ]
return reverse ( str1 [ 1 : ] + str1 [ 0 ] )
z = [ ( i == j ) for i , j in zip ( x , y ) ]
a = [ ( 'a ' , 'v ' , 'c ' ) , ( 'a ' , 'd ' , 'd ' ) ]
app config [ 'mail_server ' ] = 'smtp gmail com '
a [ -1 : ] + a [ : -1 ]
plt show ( )                                                                                                                                      
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a ' , 'b ' , 'c ' , 'd ' ] ) ) 
self show ( )
pd to_datetime ( df [ 'year ' ] * 1000 + df [ 'doy ' ] , format= ' % y % j ' )
int from_bytes ( 'y\xcc\xa6\xbb ' , byteorder='little ' )
winpath = 'c : \\users\\administrator\\bin '
df sort ( 'count ' , ascending=false )  groupby ( 'mt ' , as_index=false )  first ( )
ax set_title ( ' $ { 0 } \\times 10^ { { { 1 } } } $ ' format ( '3 5 ' , '+20 ' ) )
re findall ( '\\w ' , 'abcdefg ' )
time sleep ( 1 )   
subprocess call ( 'grep -r passed * log | sort -u | wc -l ' , shell=true )
np where ( np in1d ( a , b ) ) [ 0 ]
re findall ( '^ (  + ? ) ( (  + ) \\3+ ) $ ' , '42344343434 ' ) [ 0 ] [ : -1 ]
map ( lambda x : heapq nsmallest ( x , 2 ) [ 1 ] , list_of_lists )
df [ 'x ' ]  str lower ( )
cherrypy server socket_host = '0 0 0 0 '
plt plot ( x , y , '   ' )
group objects get ( id=1 )  members all ( ) [ 0 ]
plt show ( )                                                                                                                                       
driver current_url
[ ( x + y ) for x in '12345 ' for y in 'abc ' ]
atb loc [ :2 , :2 ]
ax set_yticklabels ( [ '\xe9 ' , '\xe3 ' , '\xe2 ' ] )
plt show ( )                                                                                                                                        
cents_int = int ( round ( float ( dollars strip ( ' $ ' ) ) * 100 ) )
eval ( open ( 'mydict ' )  read ( ) )
pd get_dummies ( s apply ( pd series )  stack ( ) )  sum ( level=0 )
re split ( ' ( ? < ! \\d ) , ( ? ! ) | ( ? < =\\d ) , ( ? ! [ \\d ] ) ' , s )
itertools product ( [ false , true ] , repeat=5 )
[ x strip ( ) for x in s split ( ' , ' ) ]
`` `` '' c : \\users\\user\\desktop\\filed_055123 pdf '' '' ''
'\x83' encode ( 'cp870 ' )
[ x for x in a if x not in b ]
sys path append ( 'c : \\users\\jimmy\\documents\\python ' )
return user groups filter ( name='member ' )  exists ( )
gtk main ( )  
np count_nonzero ( ~np isnan ( data ) )
length = sum ( len ( s ) for s in strings )
`` `` '' this is a string '' '' ''  split ( )
df iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ]
url ( '^link/ ( ? p < backend > \\w+ ? ) / $ ' , my_function )
merged reset_index ( )
f write ( makegraypng ( [ [ 0 , 255 , 0 ] , [ 255 , 255 , 255 ] , [ 0 , 255 , 0 ] ] ) )
my_function __name__ 
a = np array ( sorted ( a , key=tuple ) )
df drop_duplicates ( subset='a ' )
array ( [ [ 1 , 2 ] , [ 7 , 8 ] , [ 3 , 4 ] , [ 9 , 10 ] , [ 5 , 6 ] , [ 11 , 12 ] ] ) 
re findall ( '\\d : : :  + ? ( ? =\\d : : : | $ ) ' , a )
os stat ( filename )  st_mtime
plt show ( )                                                                                                                                         
print ( int ( open ( '/proc/loadavg ' )  next ( )  split ( ) [ 3 ]  split ( '/ ' ) [ 0 ] ) )
f = open ( 'words txt ' , 'ru ' )
emaillist = '\n' join ( item [ 0 ] for item in queryresult )
[ func ( a , b ) for a , b in zip ( arra , arrb ) ]
json loads ( ' { `` my_string '' : `` foo\tbar '' } ' )
np diag ( np rot90 ( array ) )
input get_attribute ( 'value ' )
lambda a , b : ( a , b )
set ( a )  intersection ( b )
button = gtk button ( 'a button ' )
datetime datetime combine ( my_date , datetime time min )
plt show ( )                                                                                                                                          
my_list = [ line split ( ' , ' ) for line in open ( 'filename txt ' ) ]
pywt dwtn ( [ [ 1 , 2 , 3 , 4 ] , [ 3 , 4 , 5 , 6 ] , [ 5 , 6 , 7 , 8 ] , [ 7 , 8 , 9 , 10 ] ] , 'db1 ' )
binascii unhexlify ( '44756d6d7920537472696e67 ' )
scipy misc imsave ( 'outfile jpg ' , image_array )
a [ : , ( 0 ) ] > datetime datetime ( 2002 , 3 , 17 , 0 , 0 , 0 )
regex = re compile ( '\\d+ ' )
[ i partition ( '\t ' ) [ -1 ] for i in l if '\t ' in i ]
dict ( ( name , eval ( name ) ) for name in [ 'some ' , 'list ' , 'of ' , 'vars ' ] )
[ ( v , k ) for k , v in list ( d items ( ) ) ]
[ int ( i ) for i in str_list ]
sorted ( l , key=asum )
super ( mymodel , self )  save ( *args , **kwargs )
print ( ' { 0 :  2f } ' format ( your_number ) )
a update ( [ 3 , 4 ] )
np array ( x )  reshape ( 2 , 2 , 4 ) [ : , : , ( 0 ) ]
sorted ( a , key=lambda x : ( sum ( x [ 1:3 ] ) , x [ 0 ] ) , reverse=true )
df [ df columns [ df max ( ) > 0 ] ]
`` `` '' this is a string '' '' ''  split ( ) 
int ( round ( 123 , -2 ) )
kdll createsymboliclinka ( 'd : \\test txt ' , 'd : \\test_link txt ' , 0 )
[ ( [ 0 ] * width ) for y in range ( height ) ]
np hstack ( ( a [ : , :1 ] , a [ : , 3 : ] ) )
eval ( ' ( 1 )  __class__ __bases__ [ 0 ]  __subclasses__ ( ) ' , { '__builtins__ ' : none } )
print ( item [ 'name ' ] )
ax legend ( )
root mainloop ( )       
f = open ( 'file txt ' , 'wb ' )
`` `` '' '' '' ''  join ( parts [ 1 : ] )
fig canvas draw ( )
df [ 'stats ' ]  str [ 1 : -1 ]  str split ( ' , ' )  apply ( pd series )  astype ( float )
np savetxt ( 'test txt ' , x )
the_list sort ( key=lambda item : ( -len ( item ) , item ) )
img = cv2 imread ( 'messi5 jpg ' , 0 )
urllib parse urlencode ( { 'foo ' : 'bar ' , 'bla ' : 'blah ' } )
time sleep ( 0 5 )
t = [ l [ i ] for i in idx ]
float ( math factorial ( 171 ) )
from functools import reduce reduce ( lambda obj , attr : getattr ( obj , attr , none ) , ( 'id ' , 'num ' ) , myobject )
urllib parse unquote ( ' % 0a ' )
len ( set ( list1 )  intersection ( list2 ) ) > 0
df [ 'datestr ' ] = df [ 'dateobj ' ]  dt strftime ( ' % d % m % y ' )
df index to_series ( )  diff ( )
sorted ( matrix , key=itemgetter ( 1 ) )
df [ 'categories ' ]  apply ( pd series )  stack ( )  value_counts ( )
threading thread ( target=play2 )  start ( )
getattr ( __builtins__ , 'range ' )
birthdays sort ( key=lambda d : ( d month , d day ) )
len ( set ( lst ) ) == len ( lst )
df reindex ( [ 'z ' , 'c ' , 'a ' ] )
len ( list ( dictionary values ( ) ) ) == len ( set ( dictionary values ( ) ) )
df [ 'timedelta ' ] = pd to_timedelta ( df [ 'timedelta ' ] )
plt show ( )                                                                                                                                           
[ x lower ( ) for x in words ]
df groupby ( key_columns )  size ( )
dict ( zip ( x , y ) )
str = etree tostring ( root , pretty_print=true )
print ( sum ( map ( int , x [ num - n : num ] ) ) )
r = requests post ( 'http : //wikipedia org ' , cookies=cookie )
f close ( )    
[ x for x in li if 'ar ' in x [ 2 ] ]
plt show ( )                                                                                                                                            
sorted ( file_list , key=lambda x : map ( int , x split ( '   ' ) [ : -1 ] ) )
df groupby ( 'loser ' )  apply ( f )
somelist = [ x for x in somelist if not determine ( x ) ]
a [ np ix_ ( [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ) ]
getattr ( o , 'a ' ) ( 1 )
socket inet_ntoa ( struct pack ( ' ! l ' , 2130706433 ) )
np column_stack ( np where ( b ) )
list ( accumulate ( list ( range ( 10 ) ) ) )
request get getlist ( 'urls ' )
int ( s encode ( 'hex ' ) , 16 )
df [ 'epoch ' ] = pd to_datetime ( df [ 'epoch ' ]  str [ :6 ] , format= ' % y : % j ' ) + df
df = df [ df [ [ 'col_1 ' , 'col_2 ' ] ]  apply ( lambda x : f ( *x ) , axis=1 ) ]
plt show ( )                                                                                                                                             
group objects filter ( member__in= [ 1 , 2 ] )
words = open ( 'myfile ' )  read ( )  split ( )
plt xticks ( [ 1 , 2 , 3 , 4 , 5 ] )
entity key id ( )
plt show ( )                                                                                                                                              
sorted ( list_of_dct , key=lambda x : order index ( list ( x values ( ) ) [ 0 ] ) )
`` `` '' 1 < 4 & 4 > 1 '' '' ''
curouter execute ( 'select id from myconnections ' )
pip main ( [ 'show ' , 'pyodbc ' ] )
df = df ix [ : , 0:2 ]
regex findall ( string )
[ y for y in a if y not in b ]
collections counter ( map ( uuid , open ( 'log txt ' ) ) )
format ( 12345678 46 , ' , ' )  replace ( ' , ' , ' ' )  replace ( '   ' , ' , ' )
df [ 'time ' ] = pd to_datetime ( df [ 'time ' ] , unit='s ' )
df set_index ( [ 'name ' , 'destination ' ] )
print ( ' ' join ( sorted ( set ( words ) , key=words index ) ) )
datetime now ( pytz timezone ( 'australia/melbourne ' ) )
np dot ( a [ : , ( none ) ] , b [ ( none ) , : ] )
a = a [ : n ] + k + a [ n : ]
y = [ i [ 0 ] for i in x ]
int ( decimal ( s ) )
sys stdout buffer write ( '\xe2\x99\xa0' encode ( 'cp437 ' ) )
plt scatter ( x , y , color=color )
plt show ( )                                                                                                                                               
globals ( ) [ 'something ' ] = 'bob '
df isnull ( )  sum ( )
df2 = df ix [ : , ( ~df columns str endswith ( 'prefix ' ) ) ]
`` `` '' ' ( ''| [ ^ ' ] ) * ' '' '' ''
name [ 0 ]  firstchild nodevalue
zip ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )
list ( i for i in range ( 3 ) )
list ( permutations ( list ( range ( 9 ) ) , 2 ) )
{ f [ i + 1 ] : [ f [ i ] , f [ i + 2 ] ] for i in range ( 0 , len ( f ) , 3 ) }
list ( range ( 10 ) )
slice = [ arr [ i ] [ 0:2 ] for i in range ( 0 , 2 ) ]
df_new reset_index ( )  set_index ( [ 'parent ' , 'index ' ] )  sort_index ( )
list insert ( 0 , 'foo ' )
soup select ( 'div [ id^= '' value_xxx_c_1_f_8_a_ '' ] ' )
print ( repr ( data ) )
globals ( )  update ( importlib import_module ( 'some package ' )  __dict__ )
from functools import reduce reduce ( lambda x , y : 10 * x + y , [ 1 , 2 , 3 , 4 , 5 ] )
df country value_counts ( )  reset_index ( name='sum of accidents ' )
re sub ( `` [ ^\\w ' ] '' , '' , `` does n't this mean it -technically- works ? '' )
driver execute_script ( 'window confirm = function ( ) { return true ; } ' )
{ k : ( d2 [ k ] / d1 [ k ] ) for k in list ( d1 keys ( ) ) & d2 }
string2 replace ( '' , string1 ) [ len ( string1 ) : -len ( string1 ) ]
window addstr ( '\xcf\x80 ' )
str_list = [ [ ' { 0 :  8e } ' format ( flt ) for flt in sublist ] for sublist in lst ]
numpy sort ( arr , axis=0 )
difflib sequencematcher ( none , file1 read ( ) , file2 read ( ) )
open ( 'demo txt ' , 'rb ' )  read ( )
df sort ( 'a ' , inplace=true )
cb ax yaxis set_major_formatter ( plt funcformatter ( myfmt ) )
plt show ( )                                                                                                                                                
list ( map ( '' join , a ) )
plt savefig ( 'test png ' )
print ( df loc [ df [ 'a ' ] == 'foo ' ] )
plt axis ( 'off ' ) 
df set_index ( [ 'd ' ] , append=true )
print ( response read ( ) )
plt show ( )                                                                                                                                                 
a = [ mynamedtuple ( *el ) for el in a ]
element click ( )
{ { json key1 } }
df groupby ( 'a ' )  transform ( 'count ' )
super ( teenager , self )  __init__ ( name , phone )
( trace_df [ 'ratio ' ] > 0 )  mean ( )
list ( itertools product ( list ( range ( -x , y ) ) , repeat=dim ) )
( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 8 , 9 ) , ( 0 , 0 )
line strip ( )
struct unpack ( ' > q ' , s ) [ 0 ]
struct unpack ( ' < l ' , 'y\xcc\xa6\xbb ' ) [ 0 ]
redis_conn = redis redis ( connection_pool=redis_pool )
do_something ( )
a = sorted ( a , key=lambda x : float ( x ) )

numpy concatenate ( list , axis=0 )
eval ( `` print ( 'hello ' ) '' )
any ( substring in string for substring in substring_list )
s encode ( 'utf8 ' )
np in1d ( b , a )  nonzero ( ) [ 0 ]
b = [ 5 23 , 6 1 , 8 3 , 4 98 ]
[ [ '* ' , '+ ' , '- ' ] , [ '* ' , '* ' , '- ' ] , [ '/ ' , '+ ' , '- ' ] ]
[ '0 30 ' , '0 50 ' , '0 20 ' ]
df groupby ( 'id ' )  apply ( lambda t : t iloc [ 1 ] )
os system ( 'msbuild project sln /p : configuration=debug ' )
len ( myarray )
data [ : , ( [ 1 , 2 , 4 , 5 , 7 , 8 ] ) ]
sorted ( iter ( citypopulation items ( ) ) , key=lambda k_v : k_v [ 1 ] [ 2 ] , reverse=true )
return render_to_response ( 'index html ' , { 'variable ' : 'world ' } )
[ item for innerlist in outerlist for item in innerlist ]
soup findall ( id=re compile ( 'para $ ' ) )
df ix [ 'c ' ]
df [ 'a_perc ' ] = df [ 'a ' ] / df [ 'sum ' ]
plt show ( )                                                                                                                                                  
a [ i ] += 1
pygame display set_mode ( size , fullscreen )
[ 'item 1 ' , ' item 2 ' , ' item 3 ' , ' item 4 ' , ' item 5 ' ]
df groupby ( 'group ' ) [ 'value ' ]  rank ( ascending=false )
regexp = re compile ( '^group/ ( ? p < group > [ ^/ ] + ) /users $ ' )
regexp = re compile ( '^group/ ( ? p < group > [ ^/ ] + ) /users/ ( ? p < user > [ ^/ ] + ) $ ' )
cleaned = [ x for x in your_list if x ]
fig savefig ( 'ten_x_seven_cm png ' , dpi=128 )
[ list ( g ) for _ , g in itertools groupby ( test , lambda x : x split ( '_ ' ) [ 0 ] ) ]
user objects filter ( userprofile__level__gte=0 )
list_of_lists = [ [ try_int ( x ) for x in lst ] for lst in list_of_lists ]
app = flask ( __name__ )
sys path append ( '  /   ' )
ax set_xticklabels ( ax xaxis get_majorticklabels ( ) , rotation=45 )
sorted ( t , key=lambda i : ( i [ 1 ] , -i [ 2 ] ) )
list ( split_iter ( `` a programmer 's regex test   '' ) )
app run ( debug=true ) 
sys stdout write ( 'foobar ' )
ebar = plt errorbar ( x , y , yerr=err , ecolor='y ' )
django contrib auth authenticate ( username=username , password=password )
tree write ( 'filename xml ' )
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
logger = logging getlogger ( __name__ )
pyplot show ( )
nodes = [ [ node ( ) for j in range ( cols ) ] for i in range ( rows ) ]
re findall ( 'abc ( de ) fg ( 123 ) ' , 'abcdefg123 and again abcdefg123 ' )
s = 'http : //www domain com/ ? s=some & two=20 '
sys stdout flush ( )   
plt show ( )                                                                                                                                                   
plt show ( )                                                                                                                                                    
plt show ( )                                                                                                                                                     
print ( [ s replace ( '8 ' , '' ) for s in lst ] )
print ( [ u for v in [ [ i , i ] for i in range ( 5 ) ] for u in v ] )
dt strftime ( ' % m/ % d/ % y ' )
sys stdout flush ( )    
[ '1 ' , '' , '2 ' , '3,4 ' ]
sorted ( itertools chain ( args ) , cmp )
plt legend ( frameon=false )
cv2 waitkey ( 0 )
a , b , c = [ 1 , 2 , 3 ]
all ( word in d for word in [ 'somekey ' , 'someotherkey ' , 'somekeyggg ' ] )
min ( mylist , key=lambda x : abs ( x - mynumber ) )
sep = re compile ( ' [ \\s , ] + ' )
x reset_index ( )  merge ( y , how='left ' , on='state ' , sort=false )  sort ( 'index ' )
i , j = np where ( a == value )
cookies = driver get_cookies ( )
driver find_element_by_id ( 'foo ' )  clear ( ) 
update_in_alist ( [ ( 'a ' , 'hello ' ) , ( 'b ' , 'world ' ) ] , 'b ' , 'friend ' )
os path dirname ( sys executable )
pd dataframe ( d ) 
re sub ( ' ( ? m ) ^ [ ^\\s\\n ] + ' , '' , ' a\n b\n c\nd e ' )
a [ [ 0 , 1 ] , [ 0 , 1 ] ]
sorted ( yourdata , reverse=true )
pd dataframe ( df values * df2 values , columns=df columns , index=df index )
list ( itertools combinations ( l , 2 ) )
[ item for item in my_list if any ( x in item for x in bad ) ]
print ( str ( a [ 'timestamp ' ] ) , a [ 'ip ' ] , a [ 'user ' ] )
list ( x * y for x , y in list ( zip ( a , b ) ) )
`` `` '' foobar '' '' '' [ :4 ]
b = np concatenate ( ( a , a ) , axis=0 )
imgfile = models imagefield ( upload_to='images/ % m/ % d ' )
parser add_argument ( 'file ' , nargs='* ' )
[ [ int ( x ) ] for y in list_of_lists for x in y ]
gtk main ( )   
line = re sub ( '\\ ( +as   * ? \\ ) ' , '' , line )
subprocess call ( [ 'echo $ var ' ] , shell=true )
str_list = [ tuple ( ' { 0 :  8e } ' format ( flt ) for flt in sublist ) for sublist in lst ]
result = sys stdin read ( )
data loc [ : , ( list ( itertools product ( [ 'one ' , 'two ' ] , [ 'a ' , 'c ' ] ) ) ) ]
self response headers [ 'content-disposition ' ] = 'attachment ; filename=fname csv '
subprocess call ( [ 'start ' , 'avi\xf3n mp3' encode ( 'latin1 ' ) ] , shell=true )
return len ( s encode ( 'utf-8 ' ) )
re sub ( ' $ \\d+\\w+|\\b\\d+\\b|\\w+\\d+ $ ' , '' , s )
re sub ( '\\b\\d+\\b ' , '' , s )
[ ( 1 , 'b ' , 'a ' ) , ( 2 , 'c ' , 'b ' ) , ( 3 , 'c ' , 'a ' ) ]
res = list ( sorted ( thedict , key=thedict __getitem__ , reverse=true ) )
c = [ b [ i ] for i in index ]
pattern = re compile ( 'review : ( http : //url com/ ( \\d+ ) \\s ? ) + ' , re ignorecase )
pattern = re compile ( '/review : ( http : //url com/ ( \\d+ ) \\s ? ) +/ ' , re ignorecase )
jsobj [ 'a ' ] [ 'b ' ] [ 'e ' ]  append ( { 'f ' : var6 , 'g ' : var7 , 'h ' : var8 } )
re split ( '_for_ ' , 'happy_hats_for_cats ' )
direct_output = subprocess check_output ( 'ls ' , shell=true )
df groupby ( lambda idx : 0 )  agg ( [ 'mean ' , 'std ' ] )
df groupby ( 'mt ' , as_index=false )  first ( )
rows = soup findall ( 'tr ' ) [ 4 : :5 ]
data = json loads ( ' { `` lat '' :444 , `` lon '' :555 } ' )
pickle loads ( s )
cur execute ( 'select * from your_table_name ' )
re findall ( '\\w+| [ ^\\w\\s ] ' , text , re unicode )
figure ( figsize= ( 11 69 , 8 27 ) )
[ list ( v ) for k , v in itertools groupby ( mylist , key=lambda x : x [ :5 ] ) ]
os path dirname ( sys modules [ '__main__ ' ]  __file__ )
polls = poll objects filter ( category='foo ' )  prefetch_related ( 'choice_set ' )
x = tf constant ( [ 'this is a string ' , 'this is another string ' ] )
frame = pd dataframe ( [ cov ] , columns= [ 'sequence ' , 'start ' , 'end ' , 'coverage ' ] )
str1 split ( )
zip ( [ 1 , 2 ] , [ 3 , 4 ] )
legend ( numpoints=1 )
return httpresponseredirect ( request meta get ( 'http_referer ' , '/ ' ) )
[ ( int ( x ) if x else 0 ) for x in data split ( ' , ' ) ]
'' join ( [ s string for s in s findall ( text=true ) ] )
root mainloop ( )        
`` `` '' this '' '' ''
sorted ( a , key=lambda x : ( sum ( x [ 1:3 ] ) , x [ 0 ] ) )
cv2 waitkey ( 0 ) 
any ( x in string for x in search )
struct unpack ( 'd ' , struct pack ( 'q ' , int ( s2 , 0 ) ) ) [ 0 ]
df1 groupby ( [ df1 index year , df1 index hour ] )  mean ( )
len ( max ( i , key=len ) )
print ( [ map ( solve , x split ( '\t ' ) ) for x in s rstrip ( )  split ( '\r\n ' ) ] )
sorted ( iter ( d items ( ) ) , key=lambda x : x [ 1 ] )
aaf ( 10 , [ 4 , 5 5 , 10 ] , [ 1 , 1 , 2 ] , 3 )
plt show ( )                                                                                                                                                      
y = map ( operator itemgetter ( 0 ) , x )
dict ( ( x , set ( y ) & set ( d1 get ( x , ( ) ) ) ) for x , y in d2 items ( ) )
vobj adr
`` `` '' did n't '' '' ''  replace ( `` ' '' , '' )
list ( stru decode ( 'utf-8 ' ) )
word = re sub ( ' ( [ aeiou ] ) : ( ( [ aeiou ] [ ^aeiou ] * ) { 3 } ) $ ' , '\\1\\2 ' , word )
print ( decoded encode ( 'utf-8 ' ) )
list ( 'word to split ' )
np equal reduce ( [ 1 , 0 , 0 , 1 ] )
print ( 'total cost is : $ { : , 2f } ' format ( totalamount ) )
'all ' , 'just ' , 'being ' , 'over ' , 'both ' , 'through ' , 'yourselves ' , 'its ' , 'before ' , 'herself ' , 'had ' , 'should ' , 'to ' , 'only ' , 'under ' , 'ours ' , 'has ' , 'do ' , 'them ' , 'his ' , 'very ' , 'they ' , 'not ' , 'during ' , 'now ' , 'him ' , 'nor ' , 'did ' , 'this ' , 'she ' , 'each ' , 'further ' , 'where ' , 'few ' , 'because ' , 'doing ' , 'some ' , 'are ' , 'our ' , 'ourselves ' , 'out ' , 'what ' , 'for ' , 'while ' , 'does ' , 'above ' , 'between ' , 't ' , 'be ' , 'we ' , 'who ' , 'were ' , 'here ' , 'hers ' , 'by ' , 'on ' , 'about ' , 'of ' , 'against ' , 's ' , 'or ' , 'own ' , 'into ' , 'yourself ' , 'down ' , 'your ' , 'from ' , 'her ' , 'their ' , 'there ' , 'been ' , 'whom ' , 'too ' , 'themselves ' , 'was ' , 'until ' , 'more ' , 'himself ' , 'that ' , 'but ' , 'don ' , 'with ' , 'than ' , 'those ' , 'he ' , 'me ' , 'myself ' , 'these ' , 'up ' , 'will ' , 'below ' , 'can ' , 'theirs ' , 'my ' , 'and ' , 'then ' , 'is ' , 'am ' , 'it ' , 'an ' , 'as ' , 'itself ' , 'at ' , 'have ' , 'in ' , 'any ' , 'if ' , 'again ' , 'no ' , 'when ' , 'same ' , 'how ' , 'other ' , 'which ' , 'you ' , 'after ' , 'most ' , 'such ' , 'why ' , 'a ' , 'off ' , 'i ' , 'yours ' , 'so ' , 'the ' , 'having ' , 'once '
sorted ( iter ( mydict items ( ) ) , key=lambda tup : sum ( tup [ 1 ] ) , reverse=true ) [ :3 ]
i = np array ( [ [ 0 ] , [ 1 ] ] )
plt show ( )                                                                                                                                                       
bytearray ( '\x00\x00\x00\x01\x02\x03\x04\x05\x00\x00 ' )
xs sort ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )
list ( ordered_merge ( [ [ 3 , 4 ] , [ 1 , 5 ] , [ 2 , 6 ] ] , [ 1 , 2 , 0 , 0 , 1 , 2 ] ) )
df_result apply ( get_col_name , axis=1 )
db __setitem__ ( 'a ' , { 'alpha ' : 'aaa ' } )
uinfo save ( )
{ '_id ' : 'run_unique_identifier ' , 'param1 ' : 'val1 ' , 'param2 ' : 'val2 ' }
arr [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]
set ( [ i for s in [ list ( d keys ( ) ) for d in lod ] for i in s ] )
article objects annotate ( like_count=count ( 'likes ' ) )  order_by ( '-like_count ' )
img = image open ( 'tweeter png ' )  convert ( 'rgba ' )
df round ( { 'alabama_exp ' : 2 , 'credit_exp ' : 3 } )
[ x for b in a for x in b ]
[ 'tuberculin 1 cap ( s ) ' , 'tylenol 1 cap ( s ) ' , 'tramadol 2 cap ( s ) ' ]
re findall ( '\\b ( ? : b+a ) +b+\\b ' , mystring )
re match ( ' ( ? :  * ? [ a-z ] ) { 3 }  * ? ( [ a-z ]   * ) ' , s )  group ( 1 )
hashlib md5 ( 'filename exe ' )  hexdigest ( )
split_list ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] , 2 )
sorted ( a items ( ) ) == sorted ( b items ( ) )
re match ( ' (  * ? [   ? ! ] ( ? : \\s+ * ? [   ? ! ] ) { 0,1 } ) ' , phrase )  group ( 1 )
plt grid ( true )
[ int ( d ) for d in str ( bin ( x ) ) [ 2 : ] ]
reporter objects all ( )  delete ( )
lst append ( 'a ' )
df groupby ( level= [ 0 , 1 ] )  quantile ( )
response headers = { 'www-authenticate ' : 'basic realm= '' test '' ' }
cur execute ( `` select * from records where email like ' % s ' '' , ( search , ) )
{ { value | safe } }
struct unpack ( '11b ' , s )
{ k : int ( v ) for k , v in d items ( ) }
sys stdout write ( '\r28 seconds remaining ' )
df [ [ 1 ] ]
keys sort ( key=lambda x : map ( int , x split ( '   ' ) ) )
[ max ( len ( str ( x ) ) for x in line ) for line in zip ( *foo ) ]
dict ( zip ( [ d pop ( 'name ' ) for d in listofdict ] , listofdict ) )
a fromlist ( [ int ( val ) for val in stdin read ( )  split ( ) ] )
os chdir ( '   ' )
session query ( tag )  distinct ( tag name )  group_by ( tag name )  count ( )
[ ( 1 , 4 , 7 ) , ( 2 , 5 , 8 ) , ( 3 , 6 , 9 ) ]
c = [ [ ( i + j ) for i , j in zip ( e , b ) ] for e in a ]
my_list sort ( key=operator itemgetter ( 'name ' ) )
plt show ( )                                                                                                                                                        
np corrcoef ( x )
print ( re findall ( ' [ \\u0600-\\u06ff ] + ' , my_string ) )
[ 'two ' , 2 , 'one ' , 1 ]
df to_csv ( 'result csv ' , index=false , sep= ' ' )
ax plot ( x_normalised , y , 'bo ' )
pattern = re compile ( '^ ( ? : \\\\ | [ ^/\\\\ ] ) */ ( ( ? : \\\\ | [ ^/\\\\ ] ) * ) / ' )
subprocess _check_call ( [ 'espeak ' , text ] , stdout=fnull , stderr=fnull )
re findall ( ' ( ( ? : a|b|c ) d ) ' , 'bde ' )
re compile ( ' ( \\s+ ) ' )  split ( '\tthis is an example ' )
response headers [ 'www-authenticate ' ] = 'basic realm= '' test '' '
book add_sheet ( 'sheet 2 ' )
[ sublist [ : :-1 ] for sublist in to_reverse [ : :-1 ] ]
[ str ( wi ) for wi in wordids ]
keys , values = zip ( *list ( d items ( ) ) )
os chmod ( path , stat s_irusr | stat s_irgrp | stat s_iroth )
[ [ ] for _ in range ( n ) ]
np rec fromarrays ( ( x , y , z ) , names= [ 'x ' , 'y ' , 'z ' ] )
win show_all ( )
re findall ( '\\b [ a-z ] ' , formula )
df set_index ( [ 'year ' , 'month ' , 'item ' ] )  unstack ( level=-1 )
[ s strip ( ) for s in input ( )  split ( ' , ' ) ]
url split ( ' & ' ) [ -1 ]  replace ( '= ' , '' ) + ' html '
df1 [ 'value ' ]  unstack ( 0 )  asfreq ( 'd ' )
cursor execute ( sql , list ( mydict values ( ) ) )
len ( s split ( ) )
pd concat ( [ df , df dictionary apply ( str2dict )  apply ( pd series ) ] , axis=1 )
print ( os path relpath ( '/usr/var/log/ ' , '/usr/var ' ) )
re sub ( ' ( ? < = [ a-z ] ) ( [ a-z ] ) ' , '-\\1 ' , s )  lower ( )
plt colorbar ( im , ax=ax )
df pivot_table ( index='a ' , columns='b ' , values='c ' , fill_value=0 )
db test update ( { 'x ' : '42 ' } , { ' $ set ' : { 'a ' : '21 ' } } , true )
df reset_index ( inplace=true )
print ( ' % x ' % int ( '2a ' , 16 ) )
re findall ( ' [ a-za-z_ ] + ' , string )
print ( [ obj attr for obj in my_list_of_objs ] )
dates_dict setdefault ( key , [ ] )  append ( date )
re findall ( '\\ $ ( [ ^ $ ] * ) \\ $ ' , string )
[ [ 's1 txt ' , 'ai1 txt ' ] , [ 's2 txt ' ] , [ 'ai3 txt ' ] ]
[ [ -1 , 2 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 2 , -1 ] , [ -1 , -2 , 0 ] , [ 0 , -2 , 2 ] , [ 0 , 1 , 0 ] ]
next ( iter ( dict values ( ) ) )
sorted ( zip ( a , b ) )
re sub ( '\\   ( ? = [ ^   ] ) ' , '   ' , para )
dict ( zip ( my_list , map ( my_dictionary get , my_list ) ) )
df pivot_table ( index='saleid ' , columns='upc ' , aggfunc='size ' , fill_value=0 )
pd dataframe ( { 'x ' : x , 'y ' : y , 'z ' : z } )  t
`` `` '' { s : { c } ^ { n } } '' '' ''  format ( s='dog ' , n=5 , c='x ' )
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]
ax set_zlabel ( 'z ' )
max ( len ( word ) for word in i )
df to_pickle ( file_name )
ea scalars ( 'loss ' )
sock setsockopt ( socket ipproto_tcp , socket tcp_nodelay , 1 )
isinstance ( a , dict )
aapl groupby ( ( aapl sign diff ( ) ! = 0 )  cumsum ( ) )  size ( )
`` `` '' { } % s { } '' '' ''  format ( 'foo ' , 'bar ' )
self view header ( )  setmodel ( model )
template render ( name='john doe ' )
np where ( ( vals == ( 0 , 1 ) )  all ( axis=1 ) )
cursor execute ( 'select * from table where example= % s ' , ( example , ) )
return '' join ( ch for ch in s if unicodedata category ( ch ) [ 0 ] ! = 'c ' )
{ k : bigdict [ k ] for k in list ( bigdict keys ( ) ) & { 'l ' , 'm ' , 'n ' } }
streaks ( df , 'e ' )
( datetime datetime utcnow ( ) - datetime timedelta ( hours=11 ) )  year
pd concat ( [ a , b ] , axis=1 )
root quit ( )
soup find_all ( 'div ' , class_='crblock ' )
f = open ( 'test/test pdf ' , 'rb ' )
os path commonprefix ( [ '/usr/var ' , '/usr/var2/log ' ] )
df loc [ ( 'at ' , [ 1 , 3 , 4 ] ) , 'dwell ' ]
re findall ( ' ( ? = ( ss  |s q |s  p| sq | s p|  qp ) ) ' , s )
df [ df [ 'a ' ]  isin ( [ 3 , 6 ] ) ]
os rename ( dir , dir + ' ! ' )
re findall ( ' ( ? < ! \\d ) \\d { 5 } ( ? ! \\d ) ' , s )
sum ( map ( ord , string ) )
df [ 'c ' ] = df [ 'a ' ] + df [ 'b ' ]
df [ 'a ' ] , df [ 'b ' ] = df [ 'ab ' ]  str split ( ' ' , 1 )  str
os system ( 'sudo -u hadoop bin/hadoop-daemon sh stop tasktracker ' )
l = ( int ( x ) for x in s split ( ) )
datetime strptime ( '07/28/2014 18:54:55 099 ' , ' % m/ % d/ % y % h : % m : % s  % f ' )
time sleep ( 1 )    
df2 cet map ( df1 set_index ( 'date ' ) [ 'revenue ' ] )
c execute ( 'select * from foo where bar = % s and baz = % s ' , ( param1 , param2 ) )
df [ 'season ' ]  apply ( split_it )
node getelementsbytagname ( 'author ' ) [ 0 ]  childnodes [ 0 ]  nodevalue
root mainloop ( )         
print ( '' join ( parts [ 1 : ] ) )
a [ np arange ( a shape [ 0 ] ) [ : , ( none ) ] , b ]
df2 xs ( 'b ' , axis=1 , level=1 )
ax set_xlim ( 0 , 1 )
datetime now ( ) - datetime now ( )
connection close ( )
plt setp ( legend get_title ( ) , fontsize='xx-small ' )
msglist = [ hextotal [ i : i + 4096 ] for i in range ( 0 , len ( hextotal ) , 4096 ) ] 
pickled_data decode ( 'latin1 ' )
text config ( state=disabled )
frame resample ( '1h ' )  agg ( { 'radiation ' : np sum , 'tamb ' : np mean } )
new_list = my_list [ -10 : ]
df loc [ df [ 'a ' ] > 2 , 'b ' ] = new_val
array ( [ [ -1 , -1 ] , [ 0 , 0 ] , [ 1 , 1 ] ] )
df [ df index < '2000-01-04 ' ]  index [ -1 ]
list append ( 'foo ' )
y = [ row [ : ] for row in x ]
datetime datetime combine ( dateobject , datetime time ( ) )
data encode ( 'hex ' )
entry objects filter ( name='name ' , title='title ' )  exists ( )
super ( artefactform , self )  __init__ ( *args , **kwargs )
strings sort ( key=lambda str : re sub ( ' * % (   )   * ' , '\\1 ' , str ) )
mylist sort ( key=lambda x : x lower ( ) )
plt show ( )                                                                                                                                                         
streetno = dict ( { '1 ' : 'sachine tendulkar ' , '2 ' : 'dravid ' } )
sum ( 1 for i , j in zip ( a , b ) if i ! = j )
cur execute ( 'set textsize 2147483647 select myimage from testing where id = 1 ' )
pd series ( df t to_dict ( 'list ' ) )
data set_index ( 'date ' )  diff ( )
print ( str ( x )  decode ( 'raw_unicode_escape ' ) )
sorted ( set ( my_list ) )
p properties ( ) [ s ]  get_value_for_datastore ( p )
sys path append ( '/path/to/pkg1 ' )
np random randn ( 5 ) * 10
db session commit ( ) 
df ix [ : -1 ]
pd melt ( df , id_vars='year ' ) [ 'year ' , 'value ' ]
toy objects filter ( toy_owners__parents=parent )
os system ( 'cls ' )
f write ( open ( 'xxx mp4 ' , 'rb ' )  read ( ) )
curry = lambda f , a : lambda x : f ( a , x )
a ravel ( ) [ a shape [ 1 ] * i : a shape [ 1 ] * ( i + a shape [ 1 ] ) : a shape [ 1 ] + 1 ]
exec ( 'f ( ' + ' , ' join ( str ( i ) for i in range ( 5000 ) ) + ' ) ' )
print ( url split ( '/ ' ) [ -1 ]  split ( '   ' ) [ 0 ] )
plt show ( )                                                                                                                                                          
upload_url = blobstore create_upload_url ( '/upload ' , gs_bucket_name='my_bucket ' )
plt show ( )                                                                                                                                                           
df to_csv ( filename , date_format= ' % y % m % d ' )
print ( hex ( int ( '0xad4 ' , 16 ) + int ( '0x200 ' , 16 ) ) )
repeat = re compile ( ' ( ? p < start > [ a-z ] ) ( ? p=start ) *- ? ' )
ax axes get_yaxis ( )  set_visible ( false )
df stack ( )  groupby ( level=0 )  first ( )
sys exit ( app exec_ ( ) ) 
sck setsockopt ( socket sol_socket , socket so_reuseaddr , 1 )
[ 'hello { 0 } ' format ( i ) for i in a ]
struct unpack ( 'd ' , binascii unhexlify ( '4081637ef7d0424a ' ) )
[ '1 ' , ' ( 15/-23 ) s ' , '4 ' ]
sorted ( sorted ( s ) , key=str upper )
re findall ( 'a* ? bc* ? ' , 'aabcc ' , re dotall )
print ( 'here is your checkmark : ' + '\u2713 ' )
[ line split ( ) for line in f ]
weekly = [ sum ( visitors [ x : x + 7 ] ) for x in range ( 0 , len ( daily ) , 7 ) ]
plt show ( )                                                                                                                                                            
r sub ( '\\1_status = `` \\2 '' \\n\\1_time = \\3 ' , content )
engine = create_engine ( 'postgresql : //localhost/dbname ' , echo=true )
plt show ( )                                                                                                                                                             
list ( flatten ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) )
print ( zip ( my_list [ 0 : :2 ] , my_list [ 1 : :2 ] ) )
file close ( )  
json dumps ( [ dict ( list ( row items ( ) ) ) for row in rs ] )
[ k for k , v in user _fields items ( ) if v required ]
next = driver find_element_by_css_selector ( 'li next > a ' )
[ [ 0 5 , 0 625 ] , [ 0 625 , 0 375 ] ]
d = { t [ 0 ] : t [ 1 : ] for t in l }
[ i split ( '\t ' , 1 ) [ 0 ] for i in l ]
sys exit ( 'aa ! errors ! ' )
shutil copyfile ( 'foo txt ' , 'p : \\foo txt ' )
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ]
ax2 set_ylim ( [ 0 , 5 ] )
sys exit ( 0 ) 
print ( '\n' join ( lines ) )
warnings warn ( 'test warning ' )
browser submit ( )
sorted ( profile objects all ( ) , key=lambda p : p reputation )
writer writerows ( zip ( * [ d [ key ] for key in keys ] ) )
`` `` '' string '' '' ''
var = dork1
ax set_title ( ' $ % s \\times 10^ { % s } $ ' % ( '3 5 ' , '+20 ' ) )
sum ( len ( y ) for y in x if len ( y ) > 1 )
dt = datetime datetime utcfromtimestamp ( 1288483950 )
b = np delete ( a , -1 , 1 )
print ( '\n' join ( ' ' join ( map ( str , row ) ) for row in t ) )
df = df rename ( index= { last : 'a ' } )
openmode = 'w '
some_func ( *params )
`` `` '' '' '' ''  join ( s )
app run ( )     
[ x for x in file namelist ( ) if x endswith ( '/ ' ) ]
sudo ( 'some_command ' , shell=false )
'one ' in list ( d values ( ) )
write ( 'temperature is { 0 } and pressure is { 1 } ) ' format ( x , y ) )
list ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )
np array ( [ np arange ( 3 ) , np arange ( 2 , -1 , -1 ) , np ones ( ( 3 , ) ) ] )  min ( axis=0 )
( ( 25 < a ) & ( a < 100 ) )  sum ( )
[ np einsum ( 'i , j- > ' , x [ n ] , e [ n ] ) for n in range ( len ( x ) ) ]
super ( productserializer , self )  __init__ ( *args , **kwargs )
array ( [ 'one com ' , 'two url ' , 'three four ' ] , dtype='|s10 ' )
sum ( x * y for x , y in zip ( a , b ) )
[ k for d in list ( foo values ( ) ) for k in d ]
[ ( '1 ' , '11 ' ) , ( '2 ' , '22 ' ) , ( '' , '33 ' ) , ( '' , '44 ' ) ]
self assertequal ( response status_code , 200 ) 
return float ( a ) / float ( b )
array ( [ [ 1 , 3 , 4 , 10 ] , [ 1 , 2 , 3 , 20 ] , [ 1 , 2 , 1 , 30 ] ] )
slice ( * [ ( int ( i strip ( ) ) if i else none ) for i in string_slice split ( ' : ' ) ] )
itertools product ( list ( range ( 2 ) ) , repeat=4 )
[ '1 ' , '2 ' , '3 ' , '4 ' , '5 ' , '6 ' , '7 ' , 'x ' , '9 ' ]
s decode ( 'unicode_escape ' )
time sleep ( 1 )     
{ k : v for k , v in enumerate ( range ( 10 ) ) if v % 2 == 0 }
self response out write ( 'image not available ' )
print ( ' [ % s ] ' % ' , ' join ( ' %  3f ' % val for val in list ) )
b update ( d )
[ s [ :5 ] for s in buckets ]
a [ np in1d ( a , b ) ]
subprocess call ( [ 'py test ' ] )
re findall ( ' [ \u4e00-\u9fff ] + ' , ipath )
[ x for x in j if x > = 5 ]
`` `` '' foo bar bar bar '' '' ''  replace ( 'bar ' , 'xxx ' , 1 )  find ( 'bar ' )
min ( enumerate ( a ) , key=lambda x : abs ( x [ 1 ] - 11 5 ) )
array ( [ [ 0 0 , 0 0 ] , [ 1 0 , 1 0 ] ] ) , array ( [ [ 0 0 , 1 0 ] , [ 0 0 , 1 0 ] ] )
d = pd dataframe ( 0 , index=np arange ( len ( data ) ) , columns=feature_list )
list ( csv reader ( open ( 'demo txt ' , 'r ' ) , delimiter='\t ' ) )
sorted ( d , key=d get )
[ m group ( 1 ) for l in lines for m in [ regex search ( l ) ] if m ]
df index [ 'row 2 ' : 'row 5 ' ]
[ 1 , 2 , 3 ] 
sorted ( iter ( mydict items ( ) ) , key=itemgetter ( 1 ) , reverse=true )
arr = np empty ( ( 0 , 3 ) , int )
plt plot ( line [ 0 ] , line [ 1 ] , linewidth=0 5 , color='k ' )
no_integers = [ x for x in mylist if not isinstance ( x , int ) ]
img transpose ( 2 , 0 , 1 )  reshape ( 3 , -1 )
plt plot ( x , y )
json loads ( ' [ { `` name '' : '' sam '' } ] ' )
self add_line ( ' : annotation : = ' + objrepr , ' < autodoc > ' )
re split ( ' + ' , str1 )
plt show ( )                                                                                                                                                              
{ 'key3 ' : 'value with spaces ' , 'key2 ' : 'value2 ' , 'key1 ' : 'value1 ' }
soup find_all ( 'a ' , href=re compile ( 'http : //www\\ iwashere\\ com/ ' ) )
plt show ( )                                                                                                                                                               
plt imshow ( im2 , cmap=plt get_cmap ( 'gray ' ) )
re findall ( '\\ [ (  * ? ) \\ ] ' , mystring )
df iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ]  mean ( axis=1 )
plt show ( )                                                                                                                                                                
plt draw ( )
lambda x : true if x % 2 == 0 else false
pyglet app run ( )
tuple ( sorted ( a items ( ) ) )
print ( 'ex\xe1mple' upper ( ) )
[ '235 ' , '40 ' , '17 ' ]
sys stdout flush ( )     
plt show ( )                                                                                                                                                                 
time sleep ( 5 )  
data [ 'city ' ]  encode ( 'ascii ' , 'ignore ' )
demand ix [ 'com ' ]  apply ( lambda x : x * series )
var1 , var2 = input ( 'enter two numbers here : ' )  split ( )
[ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 4 ) , ( 4 , 5 ) , ( 5 , 6 ) , ( 6 , 1 ) ]
df to_dict ( 'index ' )
a [ ( np random choice ( a shape [ 0 ] , 2 , replace=false ) ) , : ]
print ( ' ' join ( row ) )
{ { my_variable | forceescape | linebreaks } }
os path commonprefix ( [ '/the/dir/ ' , os path realpath ( filename ) ] ) == '/the/dir/ '
lst sort ( key=lambda x : x [ 2 ] , reverse=true )
urllib parse quote ( 'http : //spam com/go/ ' )
df [ 'year ' ] = df [ 'year ' ]  where ( source_years ! = 0 , df [ 'year ' ] )
output append ( max ( flatlist , key=lambda x : x [ 1 ] ) )
y = sorted ( set ( x ) , key=lambda s : s lower ( ) )
nums search ( '0001 20000 ' )  group ( 0 )
print ( '\xa31' encode ( 'latin-1 ' ) )
list ( itertools product ( *a ) ) 
str ( n ) == str ( n ) [ : :-1 ]
soup find ( 'meta ' , { 'name ' : 'city ' } ) [ 'content ' ]
changed_list = [ ( int ( f ) if f isdigit ( ) else f ) for f in original_list ]
db session commit ( )  
ts plot ( marker= '   ' )
sql = 'upgrade inventory_server set server_mac = % s where server_name = % s '
np sqrt ( np sum ( ( a - b ) ** 2 , axis=1 ) )
np arange ( len ( df columns ) ) // 2
[ i for i in ( 'a ' , 'b ' , 'c ' ) ]
fig savefig ( 'axaspect png ' )
root mainloop ( )          
[ 'aa ' , 'bb ' , 'cc ' , 'dd ' , 'ee ' ]
set ( [ 'stackoverflow ' , 'google ' ] )  issubset ( sites )
entries = sorted ( list ( json_data items ( ) ) , key=lambda items : items [ 1 ] [ 'data_two ' ] )
assert datetime datetime now ( ) == fake_time
[ ( lambda x : x * x ) for x in range ( 10 ) ]
[ 1 , 1 , 1 , 10 , 10 , 5 , 5 , 5 , 5 , 5 , 5 ]
window set_position ( gtk windowposition center )
[ ( 'x ' , 'y ' , '20 ' ) , ( 'h ' , 'f ' , '23 ' ) , ( 's ' , 'y ' , '13 ' ) , ( 'm ' , 'z ' , '25 ' ) ]
m3 = np zeros ( ( 50 , 50 ) )
re findall ( '\\d+\\ \\d+ ' , 'current level : 13 4 db   ' )
df iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ]  mean ( axis=0 )
re sub ( '\\  [ ^   ] + $ ' , '' , s )
df groupby ( [ df [ 'source ' ] , pd timegrouper ( freq='min ' ) ] )
np array ( arr [ : , ( 1 ) ] , dtype=np float )
re split ( ' ; | , ' , str )
datetime datetime strptime ( '2012-05-29t19:30:03 283z ' , ' % y- % m- % dt % h : % m : % s  % fz ' )
df [ df columns [ 1 : ] ]  replace ( ' [ \\ $ , ] ' , '' , regex=true )  astype ( float )
[ row split ( '\t ' ) for row in s splitlines ( ) ]
print ( re sub ( ' ( \\w ) \\1+ ' , '\\1 ' , a ) )
print ( re match ( ' ( \\d+ ( \\ \\d+ ) ? ) ' , '3434 35353 ' )  group ( 1 ) )
codecs open ( 'myfile ' , 'r ' , 'iso-8859-1 ' )  read ( )
os chdir ( os path expanduser ( '~/documents ' ) )
`` `` '' '' '' ''  join ( dropwhile ( lambda x : x in bad_chars , example_line [ : :-1 ] ) ) [ : :-1 ]
[ '' join ( x ) for x in a ]
mynewlist = list ( myset )
time sleep ( 10 )
__import__ ( 'foo bar baz qux ' )
reactor run ( )
np array ( arr [ : , ( 1 ) ] )
pattern = re compile ( ' (   ) \\1 ? ' , re ignorecase | re dotall )
plt show ( )                                                                                                                                                                  
plt show ( )                                                                                                                                                                   
ast literal_eval ( ' ( 1,2,3,4 ) ' )
print ( data encode ( 'hex ' ) )
df = pd dataframe ( { 'a ' : [ 0 , 4 , 5 , 6 , 7 , 7 , 6 , 5 ] } )
random choice ( [ k for k in d for x in d [ k ] ] )
session commit ( )
zip ( *main_list )
`` `` '' jvm args= -dappdynamics com=true , -dsomeotherparam=false , '' '' ''  split ( '= ' , 1 )
( e == np array ( [ 1 , 2 ] ) )  all ( -1 )
plt show ( )                                                                                                                                                                    
logger setlevel ( logging debug )
random sample ( range ( 1 , 50 ) , 6 ) 
ssh close ( )
a = a [ -1 : ] + a [ : -1 ]
array ( [ 0 63143784 , 0 93852927 , 0 0026815 , 0 66263594 , 0 2603184 ] )
df columns [ df max ( ) > 0 ]
[ '8th ' , 'of ' , '\u0418\u044e\u043d\u044c ' ]
my_dict = { 'cheese ' : 'cake ' }
cart objects filter ( user=user )  first ( )  distinct ( 'items item ' )
driver execute_script ( 'return navigator useragent ' )
df info ( )
`` `` '' x = { } '' '' ''  format ( x decode ( 'utf8 ' ) )  encode ( 'utf8 ' )
re split ( ' [   ] ' , 'a b c ' )
globals ( )  update ( vars ( args ) )
`` `` '' \\xc3\\x85あ '' '' ''  encode ( 'utf-8 ' )
array ( [ [ 2 , 1 ] , [ 5 , 1 ] , [ 0 , 3 ] , [ 4 , 5 ] ] )
list_of_tuples [ 0 ] [ 0 ] = 7
comment objects filter ( user=user )  values_list ( 'user__name ' , 'user__email ' )
( s factorize ( ) [ 0 ] + 1 )  astype ( 'float ' )
done = [ ( el , x ) for el in [ a , b , c , d ] ]
stdin , stdout , stderr = ssh exec_command ( ' /wrapper py  /somescript sh ' )
soup findall ( attrs= { 'name ' : 'description ' } )
url ( '^login/ $ ' , views login , name='login ' ) ,
tkinter button ( self , text='browse ' , command=self askopenfile )
plt show ( )                                                                                                                                                                     
{ 'labela ' : 'thereissomethinghere ' , 'label_bbb ' : 'hereaswell ' }
somestring replace ( '\\r ' , '' )
ordereddict ( [ ( 'b ' , 7 ) , ( 'a ' , 5 ) , ( 'c ' , 3 ) ] )
print ( [ [ l [ : i ] , l [ i : ] ] for i in range ( 1 , len ( l ) ) ] )
{ k for d in lod for k in list ( d keys ( ) ) }
df [ 'seq ' ] = df sort_values ( by='start ' )  groupby ( 'id ' )  cumcount ( ) + 1
sorted ( lst , key=lambda x : ( -1 * c [ x ] , lst index ( x ) ) )
stuff replace ( ' and ' , '/ ' )
re search ( 'test (   * ) print ' , teststr , re dotall )
[ ( 1 , 4 ) , ( 2 , 3 ) , ( 0 , 1 , 4 ) , ( 0 , 2 , 3 ) ]
pandas set_option ( 'display max_columns ' , 7 )
networkx draw_networkx_labels ( g , pos , labels )
url ( '^test/getfile ' , 'getfile ' )
x = [ i [ 0 ] for i in x ]
pd read_csv ( stringio ( s ) , sep= ' , ' , comment= ' # ' )
p terminate ( )
template_globals filters [ 'ctest ' ] = ctest
b = np where ( np isnan ( a ) , 0 , a )
plt show ( )                                                                                                                                                                      
ax annotate ( 'important\npart ' , xy= ( 5 , 1 5 ) , ha='center ' , va='center ' )
cv2 destroyallwindows ( )   
os environ get ( 'debussy ' , 'not set ' )
print ( '' join ( choice ( ascii_uppercase ) for i in range ( 12 ) ) )
webbrowser open_new ( url )
array ( [ [ 1 , 3 ] , [ 4 , 6 ] , [ 7 , 9 ] ] )
`` `` '' ^/rss/ ( ? p < anynumber > \\d+ ) / ( ? p < anystring >  + ) / $ '' '' ''
json load ( codecs open ( 'sample json ' , 'r ' , 'utf-8-sig ' ) )
df set_index ( [ 'z ' , 'a ' , 'pos ' ] )  unstack ( 'pos ' )
db session delete ( page )
a = numpy zeros ( ( 10 , 10 ) , dtype= [ ( 'x ' , int ) , ( 'y ' , 'a10 ' ) ] )
[ m [ 0 ] for m in re compile ( ' ( (  + ? ) \\2+ ) ' )  findall ( '44442 ( 2 ) 2 ( 2 ) 44 ' ) ]
pixmap = qtgui qpixmap ( path )
re findall ( ' [ ^ ] *  ( ? : cnn|espn )   [ ^ ] * ' , u1 )
listy = [ [ ] for i in range ( 3 ) ]
key = lambda d : ( d [ 'rank ' ] == 0 , d [ 'rank ' ] )
return map ( lambda s : s strip ( '\n ' ) , stri )
df [ df applymap ( isnumber ) ]
sum ( 1 for x in list ( d values ( ) ) if some_condition ( x ) )
print ( 'u+ { :04x } ' format ( ord ( c ) ) )
a rstrip ( )  split ( '\n ' )
re match ( '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' , ' $ 1 off delicious $ 5 ham   ' )
[ [ 5 , 4 ] , [ 2 , 4 ] , [ 1 , 0 ] , [ 3 , 0 ] , [ 5 , 1 ] , [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 5 ] ]
url ( '^ ( ? p < slug > [ a-za-z0-9- ] + ) / $ ' , myview as_view ( ) , name='my_named_view ' )
[ y [ 'baz ' ] for x in foos for y in x [ 'bar ' ] ]
df columns = [ ' ' join ( col )  strip ( ) for col in df columns values ]
[ i for i in range ( 100 ) if i > 10 if i < 20 ]
[ 'hanks sir ' , 'oh thanks to remember ' ]
root mainloop ( )           
d = { 'timmy ' : 'red ' , 'barry ' : 'green ' , 'guido ' : 'blue ' }
{ 'directory ' : 'app/static/bower_components ' }
app exec_ ( )
users sort ( key=lambda x : order index ( x [ 'id ' ] ) ) 
plt show ( )                                                                                                                                                                       
[ 'i = ' , ' ' , '0 ' , '\n ' , 'i = ' , ' ' , '1 ' , '\n ' ]
w = re findall ( ' [ a-za-z\xd1\xf1 ] + ' , p decode ( 'utf-8 ' ) )
group objects get ( id=1 )  members all ( ) [ 0 ] 
print ( '\n' join ( [ ' ' join ( row ) for row in matrix ] ) )
re split ( ' ( ? < =\\ ? | ! |\\   ) \\s { 0,2 } ( ? = [ a-z ] | $ ) ' , text )
m [ ~m mask ]
conn execute ( 'insert into example values ( ? , ? ) ; ' , ( 5 , 205 ) )
matrix = [ ( [ 0 ] * 5 ) for i in range ( 5 ) ]
super ( klass , self )  save ( *args , **kwargs )
{ 'id ' : 1 , 'reference1 ' : 1 , 'reference2 ' : [ 1 ] , 'value ' : 1 }
return s decode ( 'hex ' )  decode ( 'utf-8 ' )
[ item for item in a if sum ( item ) > 10 ]
sorted ( list ( dictionary items ( ) ) , key=operator itemgetter ( 1 ) )
{ ( p id , ind ) : { 'id ' : p id , 'position ' : ind } for ind , p in enumerate ( p_list ) }
df resample ( '3d ' , how='sum ' )
df resample ( '216000s ' , how='sum ' )
[ ( x , f ( x ) ) for x in iterable if f ( x ) ]
a [ [ [ 0 ] , [ 1 ] , [ 3 ] ] , [ 0 , 2 ] ]
print ( in_list ( [ 1 , 2 , 3 ] , [ 1 , 2 , 4 ] ) )
plt savefig ( 'foo pdf ' , papertype='a2 ' )
df [ 'name ' ]  str replace ( '\\ (   *\\ ) ' , '' )
sum ( 1 if d [ 'success ' ] else 0 for d in s )
'x ' in [ 'x ' , 'd ' , 'a ' , 's ' , 'd ' , 's ' ]
app run ( debug=true )  
d3 = { k : list ( set ( d1 get ( k , [ ] ) )  intersection ( v ) ) for k , v in list ( d2 items ( ) ) }
glfw terminate ( )
re sub ( ' [ \\ \\n ] { 2 , } ' , '' , yourstring )
print ( select ( [ my_table , func current_date ( ) ] )  execute ( ) )
sns pointplot ( x='grp ' , y='val ' , hue='grp ' , data=df )
sorted ( objects , key=lambda x : idmap [ x [ 'id ' ] ] )
`` `` '' '' '' ''  join ( c for c in my_string if c isdigit ( ) )
element click ( ) 
plt show ( )                                                                                                                                                                        
user = models foreignkey ( 'user ' , unique=true )
`` `` '' '' '' ''  join ( ( 'a ' , 'b ' , 'c ' , 'd ' , 'g ' , 'x ' , 'r ' , 'e ' ) )
print ( [ a for a , b in re findall ( ' ( ( \\w ) \\2* ) ' , s ) ] )
print ( re search ( '\\blog_addr\\s+ ( \\s+ ) ' , line )  group ( 1 ) )
names = list ( map ( lambda x : x [ 0 ] , cursor description ) )
driver switch_to_frame ( 'framename ' )
zip ( [ 1 , 2 , 3 ] , [ 'a ' , 'b ' , 'c ' ] , [ 'x ' , 'y ' , 'z ' ] )
[ 1 , 2 , 3 , 4 ]
args = parser parse_args ( )
process stdin close ( )
ax set_ylabel ( 'y label ' )
session commit ( ) 
a = np concatenate ( ( a , [ 0 ] ) )
app run ( threaded=true )
df set_index ( [ ' % _gpst ' , 'satid ' ] )
pd concat ( [ df head ( 1 ) , df tail ( 1 ) ] )
df write csv ( 'mycsv csv ' )
self response out write ( 'permission denied ' )
a to_csv ( 'test csv ' , cols= [ 'sum ' ] )
text = re sub ( ' ( \\bget\\b ) ' , '\\1 @ ' , text )
app debug = true
model predict ( x_test )
return render_to_response ( 'contact html ' , { 'form ' : form } )
time sleep ( 1 )      
np flatnonzero ( x )  mean ( )
data groupby ( data [ 'date ' ]  map ( lambda x : x year ) )
re compile ( ' [ -\xd7ff ] ' , re debug )
re compile ( ' [ -\ud7ff ] ' , re debug )
print ( template render ( ) )
print ( ' [ ' + ' , ' join ( `` ' '' + str ( x ) + `` ' '' for x in s ) + ' ] ' )
re sub ( ' + ' , ' ' , s )
df c_contofficeid str replace ( '^12 ( ? =   { 4 } $ ) ' , '' )
3 in [ 1 , 2 , 3 ]
set ( [ 1 , 2 , 3 ] ) | set ( [ 4 , 5 , 6 ] )
df loc [ gb groups [ 'foo ' ] , ( 'a ' , 'b ' ) ]
np array ( list ( arr [ : , ( 1 ) ] ) , dtype=np float )
plt xlabel ( 'primary t $ _ { \\rm eff } $ ' )
`` `` '' a ; bcd , ef g '' '' ''  replace ( ' ; ' , ' ' )  replace ( ' , ' , ' ' )  split ( )
df sort_values ( [ 'b ' , 'c ' ] , ascending= [ true , false ] , inplace=true )
print ( open ( 'myfile txt ' , 'u ' )  read ( ) )
image save ( output , format='gif ' )
process = subprocess popen ( [ 'python ' , '-h ' ] , bufsize=1 )
df = pd read_csv ( 'my csv ' , dtype= { 'my_column ' : np float64 } , na_values= [ 'n/a ' ] )
line strip ( )  split ( ' ' )
map ( sum , zip ( *lists ) )
[ '' join ( [ 'a ' , 'b ' , 'c ' , 'd ' ] ) [ i : j + 1 ] for i in range ( 4 ) for j in range ( i , 4 ) ]
img save ( 'output png ' )
custompk _meta pk name
[ next ( it ) for _ in range ( n ) ]
trie = { 'a ' : { 'b ' : { 'e ' : { } , 's ' : { } } , 'c ' : { 't ' : { } , 'k ' : { } } } }
sys path insert ( 0 , 'libs ' ) 
return re sub ( '\\p { p } + ' , '' , text )
print ( s encode ( 'unicode_escape ' ) )
cursor close ( )
driver implicitly_wait ( 60 )
my_list sort ( key=lambda x : ( order index ( x [ 0 ] ) , x [ 2 ] , x [ 3 ] ) )
all ( x count ( 1 ) == 3 for x in l )
[ 1 , 1 , 0 , 0 , 1 , 0 ]
max ( test_string rfind ( i ) for i in ' ( [ { ' )
my_function ( **data )
request post get ( 'title ' , '' )
df t apply ( tuple )  apply ( list )
list ( range ( 0 , 30 , 5 ) )
root mainloop ( )            
sys path insert ( 0 , os path dirname ( os path dirname ( os path abspath ( __file__ ) ) ) )
[ x index tolist ( ) for x in dfs ]
{ { ( item date | date ) : 'y m d ' } }
df = df drop ( 'column_name ' , 1 )
reverse_d = { value : key for key , values in list ( d items ( ) ) for value in values }
config_file = os path expanduser ( '~/foo ini ' )
`` `` '' , '' '' ''  join ( [ 'foo ' , 'bar ' , '' , 'baz ' ] )
plt show ( )                                                                                                                                                                         
os remove ( filename )
re findall ( '   { ,16 } \\b ' , text )
plt show ( )                                                                                                                                                                          
some_other_function ( *args , **kwargs )
df reindex_axis ( df mean ( )  sort_values ( )  index , axis=1 )
'timedelta ( % s= % d ) ' % ( 'days ' , 2 )
`` `` '' { 0 } \\w { { 2 } } b { 1 } \\w { { 2 } } quarter '' '' ''  format ( 'b ' , 'a ' )
os chdir ( 'chapter3 ' )
a shape [ 1 ]
df [ 'value ' ] = df [ 'value ' ]  str get ( 0 )
[ i for i in my_list if not i startswith ( ( '91 ' , '18 ' ) ) ]
f = open ( 'file_name_here ' )
print ( sorted ( xs , key=len ) )
pdb set_trace ( )
df groupby ( by=df columns , axis=1 )  mean ( )
df pivot ( index='order ' , columns='sample ' )
plt show ( )                                                                                                                                                                           
numpy apply_along_axis ( numpy linalg norm , 1 , a )
df columns = [ 'code/colour ' , 'id : amount ' ]
print ( '\xc5\xc4\xd6' encode ( 'utf8 ' ) )
mylist [ : ] = [ ( x / myint ) for x in mylist ]
re findall ( ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\s ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' , x )
plt show ( )                                                                                                                                                                            
df_result = pd dataframe ( ts , columns= [ 'value ' ] )
str_list = list ( [ _f for _f in str_list if _f ] )
open ( 'names txt ' , 'w ' )  write ( '' join ( lines ) )
df = df reset_index ( )  
pd pivot_table ( df , index=df index date , columns=df index time , values='close ' )
return my_list [ : ]
plt gcf ( )  autofmt_xdate ( )
print ( ( 'focus object class : ' , window2 focus_get ( )  __class__ ) )
my_list = [ [ x for x in sublist if x not in to_del ] for sublist in my_list ]
d setdefault ( x , [ ] )  append ( foo )
pd dataframe ( { 'a ' : [ 1 , 2 ] , 'b ' : [ 'a , ' , 'b ' ] } )
pd series ( [ pd timestamp ( '2014-01-03 ' ) , 'fri ' , 'fizz ' ] )
[ 'cat_dog ' , 'cat_fish ' , 'dog_fish ' ]
[ ( '34 ' , '3 ' , '234 ' ) , ( '1 ' , '34 ' , '22 ' ) , ( '35 ' , '55 ' , '12 ' ) ]
ax legend ( handles [ : :-1 ] , labels [ : :-1 ] , title='line ' , loc='upper left ' )
sys path append ( '/path/to/your/package/root ' )
cursor execute ( 'insert into components values ( ? , ? ) ' , ( 1 , 'foo ' ) )
obj save ( )
soup select ( 'div [ id $ =_answer ] ' )
driver page_source
df ix [ : , ( df loc [ 0 ] == 38 15 ) ]  columns
int ( ' { :08b } ' format ( n ) [ : :-1 ] , 2 )
[ 100 , none , none , none , none , none , none , none , none , none , 200 ]
simplejson dumps ( dict ( [ ( ' % d , % d ' % k , v ) for k , v in list ( d items ( ) ) ] ) )
list ( chain from_iterable ( a ) )
f write ( 'text to write\n ' )
user objects order_by ( '-pet__age ' ) [ :10 ]
df [ df columns - [ 't1_v6 ' ] ]
sorted ( [ tuple ( map ( int , d split ( ' : ' ) ) ) for d in my_time_list ] )
df groupby ( 'user ' ) [ 'x ' ]  filter ( lambda x : x sum ( ) == 0 )
datetime strptime ( '2015/01/01 12:12am ' , ' % y/ % m/ % d % i : % m % p ' )
_get_recursive_results ( d , [ 'l ' , 'm ' ] , [ 'k ' , 'stuff ' ] )
re sub ( '\\s { 2 , } ' , '| ' , line strip ( ) )
plt savefig ( 'graph png ' , dpi=1000 )
s send ( 'hello server ! ' ) 
output = popen ( [ 'mycmd ' , 'myarg ' ] , stdout=pipe )  communicate ( ) [ 0 ]
forkedpdb ( )  set_trace ( )
sum ( v for v in list ( d values ( ) ) if v > 0 )
os system ( 'start `` $ file '' ' )
writer writeheader ( )
[ ord ( c ) for c in s decode ( 'hex ' ) ]
print ( dict ( [ s split ( '= ' ) for s in my_list ] ) )
df groupby ( [ 'level_0 ' , 'level_1 ' ] )  counts sum ( )  unstack ( )
print ( max ( x , key=sum ) )
levels = [ { } , { } , { } ]
dic [ 'test ' ]  update ( { 'class ' : { 'section ' : 5 } } )
plt show ( )                                                                                                                                                                             
connection send ( 'http/1 0 200 ok\r\n\r\n ' )
connection send ( 'http/1 0 200 established\r\n\r\n ' )
return ( x group ( 0 ) for x in re finditer ( `` [ a-za-z ' ] + '' , string ) )
plt show ( )                                                                                                                                                                              
list_dict = { t [ 0 ] : t for t in tuple_list }
struct unpack ( 'bbb ' , rgbstr decode ( 'hex ' ) )
[ [ 0 , 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 , 9 , 10 , 11 ] , [ 12 , 13 , 14 , 15 , 16 ] , [ 17 , 18 , 19 ] ]
dict ( ( k , v * dict2 [ k ] ) for k , v in list ( dict1 items ( ) ) if k in dict2 )
float ( re findall ( ' ( ? : ^|_ ) ' + par + ' ( \\d+\\ \\d* ) ' , dir ) [ 0 ] )
math cos ( math radians ( 1 ) )
sentence = [ word lower ( ) for word in sentence ]
datetime strptime ( '2009/05/13 19:19:30 -0400 ' , ' % y/ % m/ % d % h : % m : % s % z ' )
logger setlevel ( logging debug ) 
zip ( it , it , it )
re sub ( ' + ' , ' ' , s ) 
array ( [ [ -1 , -2 , -1 , 2 ] , [ 0 , -1 , 0 , 3 ] , [ 1 , 0 , 1 , 4 ] ] )
{ _key : _value ( _key ) for _key in _container }
list ( product ( [ 'long ' , 'med ' ] , [ 'yes ' , 'no ' ] ) )
pandas concat ( [ df1 , df2 ] )  drop_duplicates ( )  reset_index ( drop=true )
return [ list ( x ) for x in list ( results values ( ) ) ]
cv2 waitkey ( )
sorted ( d [ '11163722404385 ' ] , key=lambda x : x [ -1 ]  date ( ) )
re sub ( ' (   ) ' , '\\1\\1 ' , text read ( ) , 0 , re s )
urllib parse unquote ( urllib parse unquote ( some_string ) )
[ 'text ' , 'othertext ' , 'moretext ' , 'yetmoretext ' ]
pd concat ( g for _ , g in df groupby ( 'id ' ) if len ( g ) > 1 )
x = np arange ( 15 )  reshape ( 5 , 3 )
np where ( ( a [ 0 ] == 2 ) & ( a [ 1 ] == 5 ) )
`` `` '' , `` '' ''  join ( [ ( str ( k ) + ' ' + str ( v ) ) for k , v in list ( a items ( ) ) ] )
os system ( 'source  bashrc ; shopt -s expand_aliases ; nuke -x scriptpath ' )
data = [ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ]
fig set_size_inches ( w , h , forward=true )
re search ( ' [ a-za-z ] ' , the_string )
df groupby ( level=0 , as_index=false )  nth ( 0 )
[ ( 10 , 21 , 32 ) , ( 13 , 24 , 35 ) , ( 16 , 27 , 38 ) ]
print ( square ( [ 1 , 2 , 3 ] ) )
df iloc [ 2 , 0 ]
random choice ( [ 1 , 2 , 3 ] )
img save ( '/tmp/out png ' , 'png ' )
data [ 0 ] [ 'f ' ] = var
time strftime ( ' { % y- % m- % d % h : % m : % s } ' )
re sub ( ' ( [ a-z ] ) \\1+ ' , '\\1 ' , 'ffffffbbbbbbbqqq ' )
{ c : i for i , c in enumerate ( 'xdtwkeltjwlkejt7wthwk89lk ' ) if c isdigit ( ) }
ax plot ( x , mpt1 , color='dbz53 ' , label='53 dbz ' )
os system ( 'echo $ probe1 ' )
sys path insert ( 0 , ' /path/to/your/modules/ ' )
{ { ( mylist | slice ) : '3:8 ' } }
self buttonbox button ( qtgui qdialogbuttonbox reset )  clicked connect ( foo )
s reset_index ( 0 )  reset_index ( drop=true )
user2 = forms modelchoicefield ( queryset=user objects all ( ) )
sys path append ( '   ' )
con commit ( )
list ( str ( 123 ) )
plt show ( )                                                                                                                                                                               
df1 = pd read_hdf ( '/home/     /data h5 ' , 'firstset ' )
gravity = 9 8
print ( 'world ' )
foo ( *i )
x merge ( x merge ( y , how='left ' , on='state ' , sort=false ) )
from selenium import webdriver
plt show ( )                                                                                                                                                                                
df to_sparse ( 0 )
app run ( debug=true )   
sum ( [ sum ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] )
matrix ( [ [ 32 4 , 32 4 , 32 4 ] , [ 32 8 , 32 8 , 32 8 ] , [ 33 2 , 33 2 , 33 2 ] ] )
np count_nonzero ( a [ np ix_ ( [ 0 , 3 ] , [ 0 , 3 ] ) ] )
args = parser parse_args ( ) 
struct unpack ( 'h ' , ps [ 0:2 ] )
df groupby ( 'date ' ) [ 'level ' ]  first ( )  apply ( np ceil )  to_dict ( )
sock setsockopt ( socket sol_socket , socket so_reuseaddr , 1 ) 
sorted ( [ '10 ' , '3 ' , '2 ' ] , key=int )
db close ( ) 
soup body findall ( text='python ' )
print ( 'hello , { 0 } , how do you do ? ' format ( input ( 'enter name here : ' ) ) )
my_task apply_async ( exchange='c dq ' , routing_key=host )
`` `` '' ^v\\d+ $ '' '' ''
s split ( ' ' , 1 ) [ 1 ]
pygame display flip ( )  
[ i for i , v in enumerate ( a ) if v > 4 ]
cv2 waitkey ( ) 
print ( ' { 0 } ' format ( '5' zfill ( 2 ) ) )
list ( ' { 0:0b } ' format ( 8 ) )
[ ( i , j ) for i , j in zip ( a , x ) ]
plt show ( )                                                                                                                                                                                 
files sort ( key=file_number )
s [ s find ( '\n ' ) + 1 : s rfind ( '\n ' ) ]
`` `` '' { : > 7s } '' '' ''  format ( mystring )
sortedlist = [ ( k , a [ k ] ) for k in sorted ( a ) ]
df [ 'value ' ] = df [ 'value ' ]  str [ 0 ]
df [ pd isnull ( df )  any ( axis=1 ) ]
conn commit ( )    
`` `` '' '' '' ''  join ( list ( ordereddict fromkeys ( 'aaabcabccd ' )  keys ( ) ) )
df loc [ : , ( 'b ' ) ]
result = result replace ( '\\ ' , '' )
`` `` '' \\xc3\\x85あ '' '' ''  encode ( 'utf-8 ' )  decode ( 'unicode_escape ' )
request files [ 'imgfield ' ]
all_examples = [ 'a,1,1,1 ' , 'b,2,1,2 ' , 'c,4,4,3 ' , 'd,4,5,6 ' ]
plt show ( )                                                                                                                                                                                  
print ( '\xc2\xa3' decode ( 'utf8 ' ) + '1 ' )
a [ 1 : :2 ] = -1
os system ( 'mount /dev/dvdrom /mount-point ' )
s = s replace ( ' , ' , '' )
id sendline ( '' )
[ 3 , 3 , 3 , 3 , 3 ]
print ( pattern search ( url )  group ( 1 ) )
self setsizerandfit ( bsizer )
print ( sorted ( student_tuples , key=lambda t : ( -t [ 2 ] , t [ 0 ] ) ) )
males = df [ ( df [ gender ] == 'male ' ) & ( df [ year ] == 2014 ) ]
df [ 'brandname ' ]  replace ( [ 'abc ' , 'ab ' ] , 'a ' )
sum ( x == chosen_value for x in list ( d values ( ) ) )
plt show ( )                                                                                                                                                                                   
plt show ( )                                                                                                                                                                                    
subprocess call ( 'start command -flags arguments ' , shell=true )
sum ( l ) / float ( len ( l ) )
hex ( d )  split ( 'x ' ) [ 1 ]
process start ( )
browser find_elements_by_xpath ( `` //* [ @ type='submit ' ] / @ value '' )  text
`` `` '' a string '' '' ''  encode ( 'ascii ' )
pattern = '6 of (   * ) fans '
print ( content decode ( 'utf8 ' ) )
plt show ( )                                                                                                                                                                                     
arr [ arr [ : , ( 2 ) ]  argsort ( ) ]
grouped reset_index ( level=0 )  reset_index ( level=0 )
cur executemany ( 'insert into table values ( % s , % s , % s , % s , % s , % s , % s , % s , % s ) ' , tup )
exec ( compile ( open ( 'filename py ' )  read ( ) , 'filename py ' , 'exec ' ) )
df drop ( df index [ [ 1 , 3 ] ] , inplace=true )
nsplit ( [ 'a ' , 'b ' , 'x ' , 'x ' , 'c ' , 'd ' , 'x ' , 'x ' , 'f ' , 'x ' , 'g ' ] , 'x ' , 2 )
df [ 'ab ' ]  str split ( ' ' , 1 , expand=true )
isinstance ( s , str ) 
array ( [ [ [ 1 , 2 ] , [ 4 , 5 ] ] , [ [ 13 , 14 ] , [ 16 , 17 ] ] ] )
monthly_mean reset_index ( )  plot ( x='index ' , y='a ' )
tree write ( 'outfile htm ' )
plt show ( )                                                                                                                                                                                      
arr [ -2:2 ]
{ ' [ 1,2 ] ' : [ ( 2 , 3 ) , ( 1 , 7 ) ] }
`` `` '' クレイジー・ヒッツ！ '' '' ''
signal signal ( signal sigchld , signal sig_ign )
a [ np argmin ( a [ : , ( 1 ) ] ) , 0 ]
df resample ( '1min ' , how=np mean )
datetime utcnow ( ) + timedelta ( minutes=5 )
ax xaxis set_label_position ( 'top ' )
a = int ( eval ( input ( 'enter number of players : ' ) ) )
print ( '\\ ' )
[ list ( l ) for l in it product ( [ 0 , 1 ] , repeat=3 ) if sum ( l ) ! = 2 ]
[ elem tag for elem in a iter ( ) ]
[ ( x , y ) for x , y in zip ( mylist , mylist [ 1 : ] ) if y == 9 ] 
app mainloop ( )
tst2 = str ( tst )
os getenv ( 'myvar ' )
students objects ( name='tom ' )  distinct ( field='class ' )
df groupby ( 'id ' )  agg ( lambda x : x tolist ( ) )
self root destroy ( )
df topandas ( )  to_csv ( 'mycsv csv ' )
df [ 'just_date ' ] = df [ 'dates ' ]  dt date
[ 0 , 2 , 4 , 5 ]
c [ np logical_and ( a , b ) ]
result = db engine execute ( ' < sql here > ' )
re search ( '^ ( http : // ) ? ( www\\  ) ? ( vimeo\\ com/ ) ? ( \\d+ ) ' , embed_url )  group ( 4 )
json_string = json dumps ( [ ob __dict__ for ob in list_name ] )
pygame display set_caption ( 'use arrows to move ! ' )
sorted ( list ( things keys ( ) ) , key=lambda x : things [ x ] [ 'weight ' ] , reverse=true )
numpy append ( a , a [ 0 ] )
feature3 = [ d get ( 'feature3 ' ) for d in df dic ]
df fillna ( 0 )
site = '' join ( hxs select ( `` //h1 [ @ class='state ' ] /text ( ) '' )  extract ( ) )  strip ( )
print ( url [ 'expanded_url ' ] )
print ( ' {  5f } ' format ( randomlist [ index ] ) )
win setwindowflags ( qtcore qt windowminimizebuttonhint )
[ element for i , element in enumerate ( centroids ) if i not in index ]
hasattr ( dynamo , 'mymethod ' ) and callable ( getattr ( dynamo , 'mymethod ' ) )
np isnan ( np array ( [ np nan , 0 ] , dtype=np float64 ) )
os system ( my_cmd )
[ 'a1 ' , 'a2 ' , 'a3 ' ]
app run ( )      
new_list = [ d [ key ] for key in string_list ]
decimal decimal ( '1 10 ' )
time strftime ( ' % l : % m % p % z on % b % d , % y ' )
re sub ( ' < [ ^ > ] * > ' , '' , mystring )
root mainloop ( )             
return os path join ( root , name )
plt show ( )                                                                                                                                                                                       
os environ [ 'user_email ' ] = 'info @ example com '
pd get_dummies ( df [ 'key ' ] )
subprocess popen ( 'start /wait ' + self file , shell=true )
re search ( 'name (   * ) ' , s )
[ { key : dict ( value ) } for key , value in b items ( ) ]
df reset_index ( )  groupby ( 'x ' ) [ 'y ' ]  nunique ( )
plt show ( )                                                                                                                                                                                        
`` `` '' \\ufeff '' '' ''  encode ( 'utf-8 ' )
pprint ( dict ( list ( o items ( ) ) ) )
subprocess check_output ( [ 'ls ' , '-l ' , '/dev/null ' ] )
return render_template ( 'template html ' )
print ( ( a , b , c , d ) )
print ( link attrib get ( 'title ' , 'no title ' ) )
df groupby ( 'a ' ) [ 'b ' ]  agg ( lambda col : '' join ( col ) )
[ l [ i : i + 7 ] for i in range ( 0 , len ( l ) , 7 ) ]
plt show ( )                                                                                                                                                                                         
pd concat ( [ d1 , df1 ] , axis=1 )
k = soup find ( text=re compile ( 'my keywords ' ) )  parent text
df = pd dataframe from_dict ( { k : v for k , v in list ( nvalues items ( ) ) if k ! = 'y3 ' } )
os stat ( filepath )  st_mtime
( set ( x ) for x in d values ( ) )
unittest main ( )   
a = [ [ ] ] * 3
[ { 'content ' : x [ 'content ' ]  lower ( ) } for x in messages ]
datetime datetime ( 2010 , 7 , 26 , 0 , 0 )
`` `` '' '' '' ''  join ( reversed ( [ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] ) )
plt show ( )                                                                                                                                                                                          
pygame display flip ( )   
[ { 'char ' : 'a ' , 'num ' : 1 } , { 'char ' : 'd ' , 'num ' : 18 } ]
today - datetime timedelta ( days=today weekday ( ) )
re compile ( ' $ ^ ' )
unicodedata normalize ( 'nfkd ' , 'm\xfasica ' )  encode ( 'ascii ' , 'ignore ' )
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]
pd concat ( [ df2 , df1 ] , axis=1 )
entry objects values_list ( 'id ' , flat=true )  order_by ( 'id ' )
sorted ( s , key=str upper )
request query [ 'city ' ]
np argmin ( a [ : , ( 1 ) ] )
[ item for item in my_list if some_condition ( ) ]
print ( list ( itertools product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )
my_list pop ( 2 )
( 's ' , 'np ' , 'vp ' ) is ( 's ' , 'np ' , 'vp ' )
plt show ( )                                                                                                                                                                                           
print ( [ y for x in zip ( [ '^ ' ] * len ( mystring ) , mystring lower ( ) ) for y in x ] )
int ( '' join ( c for c in s if c isdigit ( ) ) )
print ( ' %  5f ' % randomlist [ index ] )
`` `` '' { :20 ,  2f } '' '' ''  format ( 1 8446744073709552e+19 )
ordered = ordereddict ( sorted ( list ( mydict items ( ) ) , key=lambda t : t [ 0 ] ) )
root attributes ( '-topmost ' , true )
datetime utcnow ( )
pd concat ( [ df [ : start_remove ] , df [ end_remove : ] ] )
[ tag text for tag in filter ( pred , soup find ( 'tbody ' )  find_all ( 'a ' ) ) ]
df1 merge ( df2 , on='name ' )  merge ( df3 , on='name ' )
[ 'w ' , 'o ' , 'r ' , 'd ' , ' ' , 't ' , 'o ' , ' ' , 's ' , 'p ' , 'l ' , 'i ' , 't ' ]
os listdir ( '/home/username/www/ ' )
lines sort ( )
plt axes ( )  set_aspect ( 'equal ' )
logger debug ( 'submodule message ' )
print ( '0x % x ' % value )
df applymap ( lambda x : isinstance ( x , ( int , float ) ) )
server serve_forever ( ) 
ssh set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )
e = next ( iter ( s ) )
root geometry ( '+250+250 ' )
sort ( )
s rsplit ( ' , ' , 1 )
( e == np array ( [ 1 , 2 ] ) )  all ( -1 )  shape
app run ( debug=true )    
date strftime ( ' % c ' )
result = my_function ( )
print ( strtr ( 'aa-bb-cc ' , { 'aa ' : 'bbz ' , 'bb ' : 'x ' , 'cc ' : 'y ' } ) )
all ( item in list ( superset items ( ) ) for item in list ( subset items ( ) ) )
os system ( 'taskkill /f /im firefox exe ' )
min ( dicts , key=lambda x : ( abs ( 1 77672955975 - x [ 'ratio ' ] ) , -x [ 'pixels ' ] ) )
plt show ( )                                                                                                                                                                                            
int ( '1,000,000' replace ( ' , ' , '' ) )
print ( ' ' join ( hex ( ord ( n ) ) for n in my_hex ) )
plt clf ( )
`` `` '' ^ ( ? =  { 4,255 } $ ) ( [ a-za-z0-9 ] [ a-za-z0-9- ] { ,61 } [ a-za-z0-9 ] \\   ) + [ a-za-z0-9 ] { 2,5 } $ '' '' ''
del my_list [ index ]
[ ( mylist [ i - 1 ] , mylist [ i ] ) for i in range ( len ( mylist ) ) if mylist [ i ] == 9 ]
sum ( [ ( i * j ) for i , j in list ( itertools combinations ( l , 2 ) ) ] )
plt figure ( )
logging getlogger ( )  setlevel ( logging debug ) 
new_index = max ( 0 , min ( new_index , len ( mylist ) - 1 ) )
sys hash_info
text_file close ( )
'hello % s ' % ' , ' join ( my_args )
plt show ( )                                                                                                                                                                                             
print ( 'u+ { :04x } ' format ( i ) )
{ 'arg1 ' : [ '1 ' , '4 ' ] , 'arg2 ' : 'foobar ' }
numpy in1d ( b , a )  all ( )
print ( np linspace ( 1 , 3 , num=4 , endpoint=false ) )
np vstack ( np meshgrid ( x_p , y_p , z_p ) )  reshape ( 3 , -1 )  t
array ( [ true , false , false , true , true , false ] , dtype=bool )
user = models foreignkey ( user , unique=true )
[ key for key , value in list ( my_dict items ( ) ) if set ( value )  intersection ( lst ) ]
{ k lower ( ) : v lower ( ) for k , v in list ( { 'my key ' : 'my value ' }  items ( ) ) }
pd read_csv ( myfile file , na_values= [ 'na ' ] )
now = datetime datetime now ( )  strftime ( ' % h : % m : % s ' )
[ '' join ( seq ) for seq in zip ( lst , lst [ 1 : ] ) ]
df1 [ 'value ' ]  unstack ( 0 )
re sub ( ' (   ) \\1+ ' , '\\1\\1 ' , 'haaaaapppppyyy ' )
sys stdout flush ( )      
x = 'abcde '
plt show ( )                                                                                                                                                                                              
book objects filter ( id=id )  update ( )
sys path append ( os path join ( os path dirname ( __file__ ) , 'lib ' ) )
zip ( *a )
pd melt ( split , id_vars= [ 'a ' , 'b ' ] , value_name='timestamp ' )
bytearray ( '\x00\x00\x00\x07\x08\x00\x00\x00\x00\x00 ' )
ax yaxis set_label_coords ( 0 5 , 0 5 )
odeint ( func , y0 , t , args= ( 123 , 456 ) )
print ( sorted ( l , key=lambda x : int ( x split ( '   ' ) [ 2 ] ) ) )
country , capital = random choice ( list ( d items ( ) ) )
unittest main ( )    
int ( math ceil ( x ) ) - 1
eval ( 'add ' ) ( x , y )
[ dict ( d , count=n ) for d , n in zip ( l1 , l2 ) ]
uniques = collections defaultdict ( set )
c / c astype ( np float )  sum ( axis=1 )
cv2 waitkey ( )  
df [ 'stats ' ]  str [ 1 : -1 ]  str split ( ' , ' , expand=true )  astype ( float )
df [ 'a ' ] = df [ 'a ' ]  str replace ( 'in   ' , ' in   ' )
df2 dropna ( subset= [ 'three ' , 'four ' , 'five ' ] , how='all ' )
r = [ ( 1 ) for i in range ( n ) ]
df [ 'ratio ' ] = df groupby ( level=0 ) [ 3 ]  transform ( lambda x : x [ 0 ] / x [ 1 ] )
sys exit ( 0 )  
os system ( 'rm tmp txt ' )
[ [ 1 , 2 , 3 ] , [ 4 , 5 ] , [ 'x ' ] , [ 7 , 8 , 9 , 10 ] ]
[ [ '100 ' , '2 ' , '3 ' , '4 ' ] , [ '110 ' , '2 ' , '5 ' , '6 ' ] , [ '120 ' , '6 ' , '3 ' , '4 ' ] ]
[ 'key1 : val1-words ' , 'key2 : val2-words ' , 'key3 : val3-words ' ]
print ( list ( itertools combinations ( { 1 , 2 , 3 , 4 } , 3 ) ) )
cur execute ( 'create table test ( arr array ) ' )
np array ( [ ( 'abc\x00\x00 ' , ) , ( 'de\x00\x00\x00 ' , ) ] , dtype='o ' )
u = s decode ( 'utf-8-sig ' )
imagedata image = self request get ( 'image ' )
response xpath ( '//div [ @ id= '' test '' ] /text ( ) ' )  extract ( ) [ 0 ]  strip ( )
cursor execute ( 'create table t1 ( id integer primary key , c1 text ) ' )
print ( re sub ( ' [ _ % ^ $ ] ' , '\\\\\\g < 0 > ' , line ) )
os system ( 'echo this also is not redirected ' )
{ { grains fqdn_ip } }
sorted ( data , key=data get )
json loads ( ' { `` distance '' : \\u002d1 } ' )
os chdir ( 'c : \\users\\uname\\desktop\\python ' )
fig , ax = plt subplots ( 10 , 10 )
scipy spatial distance euclidean ( a , b )
dict ( ( k , d get ( k , '' ) + d1 get ( k , '' ) ) for k in keys )
os popen ( 'ps -p % d -oppid= ' % os getppid ( ) )  read ( )  strip ( )
[ item [ 'baz ' ] for foo in foos for item in foo [ 'bar ' ] ]
subseqs = ( seq [ : i ] for i in range ( 1 , len ( seq ) + 1 ) )
proc terminate ( )
plt show ( )                                                                                                                                                                                               
plt show ( )                                                                                                                                                                                                
today strftime ( ' % b ' ) 
pd dataframe ( df groupby ( level=0 ) [ 'column_name ' ]  apply ( list )  to_dict ( ) )
plt show ( )                                                                                                                                                                                                 
d = { ( a lower ( ) , b ) : v for ( a , b ) , v in list ( d items ( ) ) }
sorted_list_of_keyvalues = sorted ( list ( ips_data items ( ) ) , key=item [ 1 ] [ 'data_two ' ] )
s split ( )
[ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' , 'f ' ] 
lrm save ( sc , 'lrm_model model ' )
[ np unravel_index ( np argmin ( a ) , ( 2 , 2 ) ) for a in a2 ]
a insert ( 0 , k )
list ( map ( list , set ( map ( lambda i : tuple ( i ) , testdata ) ) ) )
members objects values ( 'designation ' )  annotate ( dcount=count ( 'designation ' ) )
array ( [ 0 , 1 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 19 ] )
g dropna ( )  reset_index ( )  reindex ( columns= [ 'visits ' , 'string ' , 'date ' ] )
plt show ( )                                                                                                                                                                                                  
plt show ( )                                                                                                                                                                                                   
plt show ( )                                                                                                                                                                                                    
max ( list ( mycount keys ( ) ) , key=int )
{ '123 ' : { 'foo ' : '456 ' , 'bar ' : '789 ' } , 'abc ' : { 'foo ' : 'def ' , 'bar ' : 'ghi ' } }
numpy fft fft ( [ 1 , 2 , 1 , 0 , 1 , 2 , 1 , 0 ] )
x = map ( int , x split ( ) )
plt show ( )                                                                                                                                                                                                     
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 }
woduplicates = list ( set ( lseperatedorblist ) )
df reindex ( [ 2 , 0 , 1 ] + list ( range ( 3 , len ( df ) ) ) )
fin = open ( 'c : \\folder1\\test1 txt ' , 'r ' )
a contains ( b )
results = model objects filter ( x=5 )  exclude ( a=true )
dt = pytz utc localize ( dt )
[ 1 , 2 , 3 ]  
[ '- ' , 't ' , '- ' , 'c ' , '- ' , 'over ' , ' -- -- ' ]
print ( my_string [ 0:100 ] )
items = [ some ( m [ 'a ' ]  split ( ) , m [ 'd ' ] , m [ 'n ' ] ) for m in dl ]
[ lambda x : ( x * x for x in range ( 10 ) ) ]
print ( '\n' join ( to_search [ name ] ) )
array ( [ 0 , 1 , 4 , 5 , 6 , 1 , 7 , 8 , 8 , 1 ] )
app run ( )       
[ '4 ' , ' ) ' , '/ ' , '3 ' , '   ' , 'x ' , '^ ' , '2 ' ]
a [ np in1d ( a [ : , ( 1 ) ] , b ) ]
cursor execute ( 'delete from     ' )
`` `` '' 0x { 0:08x } '' '' ''  format ( 3652458 )
print ( line decode ( 'utf-16-le ' )  split ( ) )
'hello there % ( 5 ) s ' % { '5 ' : 'you ' }
arr [ mask ] = arr [ np nonzero ( mask ) [ 0 ] , idx [ mask ] ]
ex groupby ( level='a ' )  agg ( lambda x : x index get_level_values ( 1 )  nunique ( ) )
{ 'my_string ' : 'foo bar \t bar foo   ' }
pd merge ( y , x , on='k ' ) [ [ 'a ' , 'b ' , 'y ' ] ]
x = scipy matrix ( [ 1 , 2 , 3 ] )  transpose ( )
root mainloop ( )              
alpha = img split ( ) [ -1 ]
a [ np arange ( len ( a ) ) ! = 3 ]
c execute ( `` alter table linksauthor add column ' % s ' 'float ' '' % author )
df sort ( inplace=true )
call ( [ 'path/to/python ' , 'test2 py ' , 'neededargumetgohere ' ] )
f = open ( os path join ( __location__ , 'bundled-resource jpg ' ) )
sorted ( l , key=lambda x : x replace ( '0 ' , 'z ' ) )
df [ 'date ' ] = df [ 'date ' ]  apply ( convert_to_year )
[ 'we ' , 'are ' , 'one ' , 'the ' , 'world ' , 'universe ' ]
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) )  total_seconds ( )
listtwo sort ( key=lambda x : order_dict [ x [ 'eyecolor ' ] ] )
plt show ( )                                                                                                                                                                                                      
foo = __import__ ( 'foo ' , globals ( ) , locals ( ) , [ ] , -1 )
df groupby ( [ 'month ' , 'fruit ' ] )  sum ( )  unstack ( level=0 )
elems [ 0 ]  gettext ( )  encode ( 'utf-8 ' )
time strftime ( ' % m/ % d/ % y ' , time gmtime ( os path getmtime ( file ) ) )
df stack ( )
print_tree ( shame )
tuple ( zip ( *t ) )
datetime datetime fromtimestamp ( calendar timegm ( d timetuple ( ) ) )
time strftime ( ' % m/ % d/ % y % h : % m : % s ' , time gmtime ( 1346114717972 / 1000 0 ) )
re sub ( '   { 20 } (  mkv ) ' , '\\1 ' , 'unique12345678901234567890 mkv ' )
print ( response geturl ( ) )
plt show ( )                                                                                                                                                                                                       
`` `` '' foo : bar : baz : spam : eggs '' '' ''  rsplit ( ' : ' , 3 )
locals ( ) [ x ]
return f read ( )
`` `` '' '' '' ''  join ( str ( i ) for i in [ 1 , 2 , 3 , 4 ] )
next ( ( i for i , j in enumerate ( lst ) if j == 2 ) , 42 )
re findall ( ' [ ^aeiou ] + ' , '123concertation ' )
dict ( d )
driver current_window_handle
re match ( '^\\s*word ' , line )
f close ( )     
df set_index ( [ 'e-mail ' , 'date ' ] )
df groupby ( [ 'fruit ' , 'month ' ] ) [ 'sales ' ]  sum ( )  unstack ( 'month ' , fill_value=0 )
a , b , c = 'a ' , 'b ' , 'c '
df unstack ( level=1 )
np concatenate ( ( np sort ( a [ ~np isnan ( a ) ] ) [ : :-1 ] , [ np nan ] * np isnan ( a )  sum ( ) ) )
a where ( ~np isnan ( a ) , other=b , inplace=true )
f write ( chr ( i ) )
parser add_argument ( '-s ' , ' -- simulate ' , action='store_true ' )
parser add_argument ( ' -- arg1 ' , help=argparse suppress )
return render ( request , 'organisation/wall_post html ' , { 'form ' : form } )
50 - list1 [ 0 ] [ 0 ] + list1 [ 0 ] [ 1 ] - list1 [ 0 ] [ 2 ]
print ( link get ( 'href ' ) )
print ( 'a= % d , b= % d ' % ( f ( x , n ) , g ( x , n ) ) )
[ x for t in zip ( list_a , list_b ) for x in t ]
sorted ( list ( d items ( ) ) , key=lambda x : x [ : :-1 ] )
plt show ( )                                                                                                                                                                                                        
re sub ( ' [ ^a-za-z0-9 ] ' , '_ ' , filename )
`` `` '' '' '' ''  join ( [ t text ] + [ xml tostring ( e ) for e in t getchildren ( ) ] )
plt show ( )                                                                                                                                                                                                         
plt show ( )                                                                                                                                                                                                          
df iloc [ : , ( 0 ) ]
`` `` '' '' '' ''  join ( s split ( ) )
pd concat ( [ df drop ( [ 'b ' ] , axis=1 ) , df [ 'b ' ]  apply ( pd series ) ] , axis=1 )
mygrid setcellvalue ( row , col , databasevalue4rowcol )
df groupby ( 'source ' ) [ 'retweet_count ' ]  sum ( )  plot ( kind='bar ' )
root mainloop ( )               
random choice ( list ( d keys ( ) ) )
list ( set ( a )  union ( b ) )
urlpatterns = patterns ( '' , ( '^gallery/ ' , include ( 'mysite gallery urls ' ) ) )
last_index = len ( list1 ) - 1
print ( ' %  6g ' % ( i , ) )
[ ( ch tag , ch text ) for e in tree findall ( 'file ' ) for ch in e getchildren ( ) ]
sys stdout write ( line )
df loc [ df [ 'line_race ' ] == 0 , 'rating ' ] = 0
re findall ( ' ( http : //\\s+|\\s* [ ^\\w\\s ] \\s* ) ' , a )
line = line [ :10 ]  replace ( ' ; ' , ' : ' ) + line [ 10 : ]
z = zip ( x , y )
locals ( ) [ x ] 
r sadd ( 'a ' , *set ( [ 3 , 4 ] ) )
a = list ( a )
print ( cur fetchone ( ) [ 'a ' ] )
a = [ i for i in a if i not in b ]
s find ( 'dude ' )
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] )
print ( ' { 0 } / { 1 } , ' format ( x + 1 , y ) , end= ' ' )
user social_auth filter ( provider= '     ' )
soup find_all ( re compile ( ' ( a|div ) ' ) )
next ( os walk ( '   ' ) ) [ 1 ]
df [ '1/2 id ' ]  apply ( lambda x : x upper ( ) , inplace=true )
unittest main ( )     
plt show ( )                                                                                                                                                                                                           
my_list = [ item for item in my_list if item isalpha ( ) ]
plt show ( )                                                                                                                                                                                                            
sum ( 1 for d in my_list if d get ( 'id ' ) == 20 )
plt show ( )                                                                                                                                                                                                             
len ( re findall ( pattern , string_to_search ) )
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , 'a ' )
ax2 spines [ 'left ' ]  set_visible ( false )
struct pack ( ' > i ' , 1633837924 )
driver close ( )
join_lists ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] )
`` `` '' ^/item/value/ ( \\d+\\ \\d+ ) $ '' '' ''
imagefilter emboss filterargs = ( 3 , 3 ) , 1 , 128 , ( -1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 )
a [ 0:0 ] = k
`` `` '' foo '' '' ''  lower ( )
rc ( 'text latex ' , preamble='\\usepackage { cmbright } ' )
item_pipelines = { 'apps scrapy pipelines itempersistencepipeline ' : 999 }
{ k : [ lookup [ n ] for n in v ] for k , v in list ( my_dict items ( ) ) }
array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] )
df loc [ : , ( cols ) ] / df loc [ ii , cols ]  values
print ( 'two pair , { 0 } s and { 1 } s' format ( *cards ) )
raise cherrypy httpredirect ( '/device ' )
np amin ( v , axis=0 )
print ( len ( 'please anwser my question ' ) )
print ( os path basename ( your_path ) )
b append ( c )
zcat = subprocess popen ( [ 'zcat ' , path ] , stdout=subprocess pipe )
`` `` '' '' '' ''  join ( random sample ( s , len ( s ) ) )
[ item for item in data if not item [ 'imagedata ' ] ]
array ( [ [ 0 , 1 ] , [ 2 , 3 ] , [ 6 , 7 ] , [ 8 , 9 ] , [ 10 , 11 ] ] )
plt savefig ( 'test2 png ' )
print ( ' { 0 } { 1 } ' format ( 2 , 1 ) )
hash ( 'moo ' )
setattr ( test , attr_name , 10 )
`` `` '' '' '' ''  join ( [ l for l in c if l not in vowels ] )
re split ( ' [ \\s- ] + ' , text )
time strftime ( ' % y- % m- % dt % h : % m : % sz ' , timetup )
origin groupby ( [ 'label ' , 'type ' ] ) [ 'value ' ]  aggregate ( 'mean ' )  unstack ( )
pg mixer init ( )
[ 'x ' , 'b ' , 'b1 ' , 'b2 ' , 'b11 ' , 'b21 ' , 'b22 ' , 'c ' , 'q1 ' , 'c11 ' , 'c2 ' ]
[ 'x ' , 'b ' , 'b1 ' , 'b11 ' , 'b2 ' , 'b22 ' , 'c ' , 'q1 ' , 'c11 ' , 'c2 ' , 'b21 ' ]
[ 'x ' , 'b ' , 'b1 ' , 'b2 ' , 'b11 ' , 'b21 ' , 'c ' , 'q1 ' , 'c11 ' , 'c2 ' , 'b22 ' ]
df groupby ( 'state ' )  drunk_dr value_counts ( )
ord ( 'a ' ) 
`` `` '' { : , } '' '' ''  format ( 1234567890 001 )  replace ( ' , ' , ' ' )
print ( json loads ( line decode ( ) ) )
print ( ' ' join ( ' % s= % s ' % ( k , v ) for v , k in input ) )
zip ( *a ) 
`` `` '' `` '' ''  join ( map ( str , ( 34 2424 , -64 2344 , 76 3534 , 45 2344 ) ) )
f ( * ( ( 1 , 4 ) , ( 2 , 5 ) ) )
np array ( list ( itertools product ( [ 0 , 1 ] , repeat=n ** 2 ) ) )  reshape ( -1 , n , n )
demand ix [ 'com ' ]  apply ( lambda x : x * areas [ 'com ' ] )  stack ( )
[ ( [ 1 , 2 , 3 ] , [ -4 , -5 ] ) , ( [ 3 , 2 , 4 ] , [ -2 ] ) , ( [ 5 , 6 ] , [ -5 , -1 ] ) , ( [ 1 ] , [ ] ) ]
pd concat ( dict ( df1=df1 , df2=df2 ) , axis=1 )
df set_index ( 'id ' )  stack ( )  unstack ( )
zipfile zipfile ( 'myarchive zip ' )  extractall ( pwd='p4 $ $ w0rd ' )
plt show ( )                                                                                                                                                                                                              
print ( etree tostring ( root , pretty_print=true ) )
l sort ( key=alphanum_key ) 
df select ( 'zip_code ' )  show ( )
from functools import reduce lambda l : reduce ( lambda x , y : { y : x } , l [ : :-1 ] , { } )
plt show ( )                                                                                                                                                                                                               
tuple_of_tuples = tuple ( tuple ( x ) for x in list_of_lists )
float ( '1 03 ' )
sorted ( timestamp , reverse=true )
`` `` '' '' '' ''  join ( map ( str , [ 1 , 2 , 3 , 4 ] ) )
lst = [ [ ] for _ in range ( a ) ]
pd to_csv ( 'your csv ' , index=false )
`` `` '' { % *url + [ ^ ' ] '' '' ''
l [ -1 : ] + l [ : -1 ]
str isdigit ( )
plt show ( )                                                                                                                                                                                                                
re findall ( '\\ ( ( \\d+ ) \\ ) ' , text )
unittest main ( )      
df apply ( pd series nunique , axis=1 )
myclass ( )  mymethod ( )
df groupby ( 'date ' ) [ 'level ' ]  first ( )  apply ( np ceil )  astype ( int )  to_dict ( )
re sub ( ' (  * ) is (  * ) want (   * ) ' , '\\g < 1 > % s\\g < 2 > % s\\g < 3 > ' % ( 'was ' , '12345 ' ) , a )
list ( joined_dataset values ( ) )
plt show ( )                                                                                                                                                                                                                 
mymodel objects get ( id=1 )  my_field
model fit ( x_train , y_train )
df to_pickle ( file_name ) 
ax1 xaxis get_major_formatter ( )  set_powerlimits ( ( 0 , 1 ) )
sum ( 1 for i in range ( 1 , len ( a ) ) if a [ i - 1 ] * a [ i ] < 0 )
df to_csv ( 'c : \\data\\t csv ' )
plt show ( )                                                                                                                                                                                                                  
cipher decrypt ( ciphertext )  replace ( '\x08 ' , '' )
array ( [ 1 , 2 , 2 , 3 , 3 ] )
print ( re search ( 'aaa (  * ? ) zzz ' , 'gfgfdaaa1234zzzuijjk ' )  group ( 1 ) )
a = matrix ( [ [ 1 , 2 , 3 ] , [ 11 , 12 , 13 ] , [ 21 , 22 , 23 ] ] )
plt show ( )                                                                                                                                                                                                                   
[ x for x in something_iterable if x ! = 'item ' ]
soup select ( 'a [ href^= '' http : //www iwashere com/ '' ] ' )
sorted ( a , key=key_function )
datetime datetime utcfromtimestamp ( x astype ( 'o ' ) / 1000000000 0 )
repo git reset ( ' -- hard ' , 'origin/master ' )
gtk window set_keep_above
csv writer ( open ( 'output csv ' , 'wb ' ) )  writerows ( a )
plt show ( )                                                                                                                                                                                                                    
getattr ( foo , bar ) ( *params )
s decode ( 'ascii ' , 'ignore ' )
{ k : list ( v ) for k , v in groupby ( sorted ( d items ( ) ) , key=itemgetter ( 0 ) ) }
a [ np in1d ( a [ : , ( 2 ) ] , list ( b ) ) ]
settime = time mktime ( ftime timetuple ( ) )
print ( max ( list ( d keys ( ) ) , key=lambda x : d [ x ] ) )
deriv_poly = [ ( poly [ i ] * i ) for i in range ( 1 , len ( poly ) ) ]
num savetxt ( 'test txt ' , dat , delimiter= ' ' , fmt= ' % s ' )
ab = [ ( a [ i ] * b [ i ] ) for i in range ( len ( a ) ) ]
print ( ' ' join ( map ( str , a ) ) )
y = str ( int ( x , 16 ) ) 
[ ( i + j ) for i , j in zip ( x [ : :2 ] , x [ 1 : :2 ] ) ]
print ( str ( count ) + ' ' + str ( conv ) ) 
y = np cumsum ( x )
print ( max ( d , key=d get ) )
print ( dateobj strftime ( ' % y- % m- % d ' ) )
multiprocessing process __init__ ( self )
df [ 'words ' ] = df apply ( lambda row : func ( row , 'match conflict ' ) , axis=1 )
root mainloop ( )                
self submenu2 menuaction ( )  setvisible ( false )
np einsum ( 'ik , il- > i ' , x , e )
df resample ( 'q ' , axis=1 )  mean ( )
y [ : , ( cols ) ]  sum ( )
content decode ( 'utf8 ' )
[ ( item for sublist in list_of_lists ) for item in sublist ]
[ ( x discard ( '' ) or x ) for x in test ]
sorted ( s , key=lambda x : int ( re search ( '\\d+ $ ' , x )  group ( ) ) )
[ i for i in d for j in range ( d [ i ] ) ]
writer writerows ( zip ( *list ( d values ( ) ) ) )
sorted ( l , key=itemgetter ( 1 ) , reverse=true )
df [ df [ 'column2 ' ]  notnull ( ) ]
return render ( request , 'home html ' )
[ [ 'a ' ] , [ 'word ' , 'b ' , 'c ' ] , [ 'word ' , 'd ' ] ]
super ( mymodel , self )  save ( *args , **kwargs ) 
b = a [ : , : -1 , : ]
sys path append ( os path join ( os environ [ 'spark_home ' ] , 'bin ' ) )
lst = [ 1 , 2 , 3 ]
sum ( v [ 1 ] for d in mylist for v in d values ( ) )
importlib import_module ( 'abc def ghi jkl myfile mymethod ' )
f , axs = plt subplots ( 2 , 2 , figsize= ( 15 , 15 ) )
output = os popen ( 'cat /tmp/baz ' )  read ( )
len ( s )
s replace ( '|| ' , '||| ' ) [ : :2 ]
print ( df to_string ( index=false ) )
( lambda lst : json dumps ( { item [ 0 ] : item [ 1 ] for item in lst } ) ) ( [ ( 1 , 2 ) , ( 3 , 4 ) ] )
plt draw ( ) 
df2 = df [ ~pd isnull ( df l ) ]  loc [ : , ( [ 'p ' , 'l ' ] ) ]  set_index ( 'p ' )
ax scatter ( xs , ys , zs , c=cs , marker=m )
sorted ( a , key=lambda x : x [ 1 ] , reverse=true )
[ y for sublist in l for x , y in sublist ]
subprocess call ( [ 'notepad ' , '/p ' , filename ] )
[ x for x in l if x is not none ] 
plt show ( )                                                                                                                                                                                                                     
res drop_duplicates ( )
ast literal_eval ( ' [ 1,2,3 ] ' )
numpy prod ( a )
re sub ( 'url ( # *   * ) ' , 'url\\1 ' , test1 )
urlfetch set_default_fetch_deadline ( 60 )
day_of_year = datetime now ( )  timetuple ( )  tm_yday
tree remove ( tree findall ( ' //b ' ) [ 1 ] )
session commit ( )  
db commit ( )  
win32api setcursorpos ( ( 50 , 50 ) )
re split ( ' ; | , |\\*|\n ' , a )
output = [ [ word , len ( word ) , word upper ( ) ] for word in sent ]
p match ( 'lalalai want this partlalala ' )  group ( 1 )
`` `` '' hello { user [ name ] } '' '' ''  format ( ** { 'user ' : { 'name ' : 'markus ' } } ) 
rgx = re compile ( ' ( ? < ! \\+ ) [ a-za-z ] | [ a-za-z ] ( ? ! \\+ ) ' )
dist = sqrt ( ( x2 - x1 ) ** 2 + ( y2 - y1 ) ** 2 )
conn execute ( 'create table example ( a , b ) ; ' )
df loc [ 0 , 'c ' ] = df loc [ 0 , 'd ' ]
np dot ( x , y )
[ [ j for j in families [ i ] if i ! = j ] for i in range ( len ( families ) ) ]
row = [ x strip ( ) for x in row ]
print ( '\n' join ( sys path ) )
[ i [ 0 ] for i in e ]
os system ( ' '' c : //temp/a b c/notepad exe '' ' )
[ re search ( '\\d ' , s ) for s in lst ]
pd series ( np where ( sample housing values == 'yes ' , 1 , 0 ) , sample index )
array ( [ [ 1 , 0 , 1 , 1 ] , [ 0 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , 0 ] ] )
file close ( )   
df [ 'counts ' ] = df groupby ( [ 'color ' ] ) [ 'value ' ]  transform ( 'count ' )
print ( soup prettify ( ) )
df2 = pd dataframe ( data=none , columns=df1 columns , index=df1 index )
self est fit ( x , y )
line = subprocess check_output ( [ 'tail ' , '-1 ' , filename ] )
print ( 'i am printing { x } and { y } ' format ( x=x , y=y ) )
os system ( 'clear ' ) 
df [ 'dummyvar ' ] = df [ 'x ' ]  where ( ( df [ 'x ' ] > 100 ) & ( df [ 'y ' ] < 50 ) , df [ 'y ' ] )
a = [ [ ( 0 ) for y in range ( 8 ) ] for x in range ( 8 ) ]
[ [ 'google ' , [ 'http : //google com ' ] ] , [ 'computing ' , [ 'http : //acm org ' ] ] ]
numpy apply_along_axis ( numpy linalg norm , 1 , dist )
[ 'hello ' , 'world ' ]
cache get ( 'data ' )
getpass getuser ( )
d update ( ( k , frozenset ( v ) ) for k , v in d items ( ) )
plt show ( )                                                                                                                                                                                                                      
print ( [ cls __name__ for cls in vars ( ) [ 'foo ' ]  __subclasses__ ( ) ] )
dict ( { 'a ' : 'y [ a ] ' } , ** { 'a ' , 'x [ a ] ' } ) == { 'a ' : 'x [ a ] ' }
q = b select ( )  join ( a )  group_by ( a )  having ( fn max ( b date ) == b date )
plt show ( )                                                                                                                                                                                                                       
np vstack ( a )
dict ( map ( lambda a : [ a [ 1 ] , a [ 0 ] ] , iter ( d items ( ) ) ) )
plt show ( )                                                                                                                                                                                                                        
cleanlist = [ ( 0 0 if math isnan ( x ) else x ) for x in oldlist ]
output_json = json load ( open ( '/tmp/output json ' ) )
[ 0 , 1 , 2 , 2 , 3 , 4 , 5 , 5 , 5 , 6 ]
re findall ( ' ( ? < = > ) ( [ ^ < ] + ) ( ? = < /a > [ ^ < ] * < /li ) ' , var , re s )
print ( '\xe9' capitalize ( ) )
del dct [ key ]
plt show ( )                                                                                                                                                                                                                         
ctypes addressof ( bufstr )
app run ( )        
groups = sorted ( groups , key=lambda a : ( a [ 'name ' ] is none , a [ 'name ' ] ) )
a_send = dict ( ( k [ 0 ] , v ) for k , v in list ( a items ( ) ) )
plt show ( )                                                                                                                                                                                                                          
button = button ( frame , text='good-bye   ' , command=window destroy )
ftp retrbinary ( 'retr readme ' , open ( 'readme ' , 'wb ' )  write )
ordereddict ( sorted ( list ( od items ( ) ) , key=lambda item : item [ 1 ] [ 'depth ' ] ) )
get_indentifier_name_missing_function ( )
pd lreshape ( df , { 'd ' : [ 'b ' , 'c ' ] } )
( df notnull ( )  cumsum ( axis=1 ) == 4 )  idxmax ( axis=1 )
`` `` '' , `` '' ''  join ( ' % s ( %  02f ) ' % ( x , y ) for x , y in tuplelist )
print ( doc toxml ( ) )
counter ( [ 'a ' , 'b ' , 'a ' , 'c ' , 'b ' , 'a ' , 'c ' ] )
datareader = csv reader ( webpage read ( )  decode ( 'utf-8 ' )  splitlines ( ) )
format ( f , ' 15g ' )
ax set_title ( 'title ' )
entry_list extend ( [ entry title text for entry in feed entry ] )
pattern sub ( 'a*\\3\\2\\1* ' , s )
re split ( ' ( ? < =cde ) ( \\w+ ) ( ? =fg ) ' , s )
plt show ( )                                                                                                                                                                                                                           
print ( driver capabilities [ 'version ' ] )
list ( [ d for d in exampleset if d [ 'type ' ] in keyvallist ] )
plt legend ( )
time sleep ( 3 )
numpy array ( data , dtype= [ ( 'label ' , str ) , ( 'x ' , float ) , ( 'y ' , float ) ] )
app = flask ( __name__ ) 
df = df loc [ : , ( ( df ! = 0 )  any ( axis=0 ) ) ]
`` `` '' hello { 0 } , how are you { 0 } , welcome { 0 } '' '' ''  format ( 'john ' )
df set_index ( 'a ' )
x_image = tf reshape ( tf_in , [ -1 , 2 , 4 , 1 ] )
df groupby ( [ 'country ' , 'place ' ] , as_index=false ) [ 'value ' ]  max ( )
any ( x [ 0 ] == 'a ' for x in seq_of_tups )
[ line [ 2 : ] for line in lines ]
l = [ '1 ' , '2 ' , '3 ' , '7-10 ' , '15 ' , '20-25 ' ]
import my_module
list ( [ a for a in a if a not in b ] )
from functools import reduce reduce ( lambda x , y : x * y , list , 1 )
[ '_test__private_symbol ' , '__doc__ ' , '__module__ ' , 'normal_symbol ' ]
form = mymodelform ( initial= { 'gender ' : 'm ' } )
get_pid ( 'java ' )
df to_csv ( 'filename csv ' , header=false ) 
newlist = [ x for x in oldlist if x not in [ 'a ' , 'c ' ] ]
[ max ( len ( b ) for b in a ) for a in zip ( *x ) ]
[ ( 10 , 'india ' ) , ( 12 , 'usa ' ) , ( 12 , 'uk ' ) , ( 11 , 'other ' ) ]
ctypes windll user32 messageboxw ( 0 , 'your text ' , 'your title ' , 1 )
app exec_ ( ) 
zlib decompress ( u encode ( 'latin1 ' ) )
dict = { 'alice ' : '2341 ' , 'beth ' : '9102 ' , 'cecil ' : '3258 ' }
os path realpath ( os path dirname ( sys argv [ 0 ] ) )
[ match group ( 0 ) for match in pattern finditer ( '44442 ( 2 ) 2 ( 2 ) 44 ' ) ]
return next ( ( i for i , v in enumerate ( l ) if v ! = x ) , -1 )
int ( s replace ( ' ' , '' ) , 16 )
df [ 'a ' ]  str contains ( '^ ( ? : ( ? ! hello|world )   ) * $ ' )
zip ( *l ) 
result = [ { k : ( d1 [ k ] + d2 [ k ] ) for k in d1 } for d1 , d2 in zip ( var1 , var2 ) ]
df stack ( )  groupby ( level=0 )  first ( )  reindex ( df index )
{ ' failures ' : 0 , 'tests run ' : 1 , ' errors ' : 0 }
pd merge ( df1 , df2 , indicator=true , how='outer ' )
parser add_argument ( 'file ' , type=argparse filetype ( 'r ' ) , nargs='+ ' )
regexp = re compile ( '^group/ ( ? p < group > [ ^/ ] + ) $ ' )
pd concat ( [ s1 , s2 ] , axis=1 )  reset_index ( )
app mainloop ( ) 
app run ( debug=true )     
map ( float , i split ( ) [ :2 ] )
[ ( 'spam ' , 'eggs ' ) , ( 'spam ' , 'ham ' ) ]
os system ( 'fsutil file createnew r : \\dummy txt 6553600 ' )
plt figure ( )  canvas draw ( )
[ item for pair in zip ( a , b ) for item in pair ]
arr = [ [ int ( i ) for i in line split ( ) ] for line in open ( 'input txt ' ) ]
print ( '\n' join ( map ( str , ports ) ) )
df = df groupby ( [ df [ 'date_time ' ]  dt date ] )  mean ( )
obj = type ( 'obj ' , ( object , ) , { 'propertyname ' : 'propertyvalue ' } )
fig savefig ( 'test_scatter png ' )
logging getlogger ( )  setlevel ( logging debug )  
p start ( )
pd unique ( df [ [ 'col1 ' , 'col2 ' ] ]  values ravel ( ) )
pd dataframe ( { name : df [ 'path ' ]  str count ( name ) for name in wordlist } )
y = [ s for s in x if len ( s ) == 2 ]
top_n sort ( key=lambda t : ( -t [ 1 ] , t [ 0 ] ) )
print ( my_string split ( 'world ' , 1 ) [ 1 ] )
[ ' ' join ( col )  strip ( ) for col in df columns values ]
del mylist [ : n ]
s decode ( 'unicode-escape ' )  encode ( 'ascii ' )
int ( str1 split ( ) [ 0 ] )
employee objects select_related ( )
set ( l )  issuperset ( set ( [ 'a ' , 'b ' ] ) )
return '' join ( c for c in line if ord ( c ) > = 32 )
driver find_element_by_partial_link_text ( 'dev tgz ' )  click ( )
b [ a ]  shape
print ( json dumps ( data ) )
sess run ( 'add:0 ' )
test_rec [ ( test_rec age == 1 ) & ( test_rec sex == 1 ) ]
[ ( 'a ' , ) , ( 'b ' , ) , ( 'c ' , ) , ( 'a ' , 'b ' ) , ( 'a ' , 'c ' ) , ( 'b ' , 'c ' ) , ( 'a ' , 'b ' , 'c ' ) ]
urllib request urlretrieve ( 'ftp : //server/path/to/file ' , 'file ' )
match group ( 1 )
list ( { ( x [ 0 ] , x [ 1 ] ) : x for x in l }  values ( ) )
df [ 'date_column ' ] = pd to_datetime ( df [ 'date_column ' ] )
sys stdout isatty ( )
btn grid ( column=x , row=y , sticky=n + s + e + w )
df groupby ( [ 'id ' , 'url ' ] ) [ 'active_seconds ' ]  cumsum ( )
plt show ( )                                                                                                                                                                                                                            
sentence = re sub ( '\\bbeans\\b ' , 'cars ' , sentence )
os environ [ 'ld_library_path ' ] = 'my_path '
line = [ '3 ' , '4 ' , '1\r\n ' ]
my_dict2 = dict ( ( y , x ) for x , y in my_dict items ( ) )
root mainloop ( )                 
[ x for x in lst if 'abc ' in x ]
f read ( )
pd concat ( [ df , df sum ( axis=1 ) ] , axis=1 )
np searchsorted ( a , np intersect1d ( a , b ) )
session commit ( )   
l = [ ( 'blue ' , '5 ' ) , ( 'red ' , '6 ' ) , ( 'yellow ' , '8 ' ) ]
text_widget configure ( state='disabled ' )
raise valueerror ( 'invalid input encoding ' )
np resize ( [ 1 , -1 ] , 10 )
ax plot ( x , y , 'k^ ' )
plt show ( )                                                                                                                                                                                                                             
plt show ( )                                                                                                                                                                                                                              
random choice ( list ( open ( '/etc/dictionaries-common/words ' ) ) )
pd concat ( [ df1 , df2 , df3 ] , axis=1 , keys= [ 'df1 ' , 'df2 ' , 'df3 ' ] )
`` `` '' '' '' ''  join ( [ x for x in c if x not in vowels ] )
set ( [ 'a ' , 'b ' , 'c ' ] )
result_df index get_level_values ( 'a ' )
equal ( [ 1 , 2 ] , a )  all ( axis=1 )
array ( [ [ 2 0 , 18 0 , 2 3 ] , [ 7 0 , 29 0 , 4 6 ] , [ 8 0 , 44 0 , 8 9 ] , [ 5 0 , 33 0 , 7 7 ] ] )
int ( '' join ( map ( str , x ) ) )
print ( `` yo it 's a { } ''  format ( imgtag group ( 0 ) ) )
os path join ( os path abspath ( os path dirname ( __file__ ) ) , 'logs ' )
[ [ 0 , 5 ] , [ 2 , 7 ] , [ 1 , 3 , 9 ] , [ 4 , 10 ] , [ 6 ] , [ 8 ] ]
fig subplots_adjust ( wspace=0 , hspace=0 ) 
mosaic ( mydataframe , [ 'size ' , 'length ' ] )
secondtable = soup findall ( 'table ' ) [ 1 ]
df filter ( [ 'ticker ' , 'date ' , 'value ' ] )
[ 'blue ' , 'blue ' , none , 'red ' , 'red ' , 'green ' , none ]
plt rcparams [ 'text latex preamble ' ]  append ( '\\mathchardef\\mhyphen= '' 2d ' )
re sub ( '\\bmr\\ |\\bmr\\b ' , 'mister ' , s )
xml etree elementtree parse ( 'xml_file xml ' )
return int ( bin ( x ) [ 2 : ]  zfill ( 32 ) [ : :-1 ] , 2 )
print ( sorted ( d keys ( ) ) )
plt show ( )                                                                                                                                                                                                                               
new_list = copy deepcopy ( old_list )
messages = message objects filter ( head=true )  order_by ( 'time ' ) [ 0:15 ]
filename = input ( 'enter a file name : ' )
np linspace ( 0 , 5 , 10 , endpoint=false )
somelist sort ( key=lambda x : x resulttype ) 
pd concat ( [ pd series ( json loads ( line ) ) for line in open ( 'train json ' ) ] , axis=1 )
social_auth_facebook_scope = [ 'email ' , 'user_friends ' , 'friends_location ' ]
f close ( )      
httplib httpconnection ( 'myip dnsomatic com ' )  request ( 'get ' , '/ ' )
array [ itemindex [ 0 ] [ 0 ] ] [ itemindex [ 1 ] [ 0 ] ]
type ( ham )  __name__
import pandas as pd
ffprofile = webdriver firefoxprofile ( '/users/username/downloads/profilemodel ' )
eval ( 'add ( 3,4 ) ' , { '__builtins__ ' : none } , dispatcher )
array [ array [ 'phase ' ] == 'p ' ]
tuple ( [ ( 10 * x ) for x in img size ] )
print ( now + datetime timedelta ( hours=1 , minutes=23 , seconds=10 ) )
plt plot ( x , y , '   ' ) 
plt show ( )                                                                                                                                                                                                                                
stats sort ( key=lambda x : ( x [ 'k ' ] , x [ 'b ' ] ) , reverse=true )
root mainloop ( )                  
' % f ' % ( x / y )
fig savefig ( 'the name of your figure ' )
root mainloop ( )                   
`` `` '' & `` '' ''  join ( [ '_' join ( inp [ i : j ] ) for i , j in zip ( [ 0 , 2 ] , [ 2 , none ] ) ] )
plt show ( )                                                                                                                                                                                                                                 
df [ 'size ' ]  loc [ df groupby ( 'adult ' ) [ 'weight ' ]  transform ( 'idxmax ' ) ]
r = http request ( 'get ' , 'https : //www 23andme com/ ' )
any ( value in dictionary [ key ] for key in dictionary )
[ ( x , y ) for x , y in zip ( mylist , mylist [ 1 : ] ) if y == 9 ]  
sorted ( list ( things keys ( ) ) , key=lambda x : things [ x ] [ 'weight ' ] , reverse=true ) [ :2 ]
print ( os path abspath ( __file__ ) )
app = webapp2 wsgiapplication ( [ ( '/   * ' , mainhandler ) ] , debug=true )
urllib request install_opener ( opener )
urllib parse quote ( ' % ' )
scipy stats hypergeom pmf ( k , m , n , n )
btn clicked connect ( self close )
canvas create_text ( x , y , font= ( 'purisa ' , rndfont ) , text=k )
float ( '123 4506780 ' )
plt show ( )                                                                                                                                                                                                                                  
cv2 destroyallwindows ( )    
np array ( [ a , a , a ] )
a [ : , :2 ]
connection send ( 'http/1 0 200 ok ' )
[ item for sublist in list_of_lists for item in sublist ]
os stat ( '/the/local/file zip ' )  st_size
[ x span ( ) for x in re finditer ( 'foo ' , 'foo foo foo foo ' ) ]
df [ 'index_col ' ] = df index
main mainloop ( )
return httpresponse ( 'deleted ' )
plt show ( )                                                                                                                                                                                                                                   
df_test [ 'btime ' ]  iloc [ 0 ]
pd value_counts ( d values ravel ( ) )
data = numpy loadtxt ( filename , dtype='float ' )
np tensordot ( ind , dist , axes= [ 1 , 1 ] ) [ 0 ]  t
matplotlib rc ( 'font ' , size=6 )
plt show ( )                                                                                                                                                                                                                                    
my_tuple = tuple ( [ my_string ] + my_list )
webb traceroute ( 'your-web-page-url ' , 'file-name txt ' )
sorted ( list ( league items ( ) ) , key=lambda x : x [ 1 ] [ 'totalpts ' ] , reverse=true )
socket gethostbyname ( 'cool-rr com ' )
re findall ( ' [ % s ] + ' % string ascii_letters , 'hello world , my name is     james ! ' )
[ 4957 , 4957 , 1945 ]
plt show ( )                                                                                                                                                                                                                                     
re findall ( ' ( \\b [ a-z\xc3\x9c\xc3\x96\xc3\x84 ] [ a-z - ] +\\b ) ' , words , re unicode )
globals ( ) [ 'a ' ]
[ 2 , 4 , 6 , 8 ]
csv writer ( f , delimiter= ' ' , quotechar= ' , ' , quoting=csv quote_minimal )
from functools import reduce reduce ( lambda x , y : x + y , a , [ ] )
p = re compile ( ' ( friday\\s\\d+|saturday ) ' )
ax imshow ( masked_array , interpolation='nearest ' , cmap=cmap )
plt show ( )                                                                                                                                                                                                                                      
application = tornado web application ( [ ( '/ ' , hello ) ] , debug=false )
n = int ( input ( ) ) 
good_data = np array ( [ x for x in data [ ( 0 ) , : ] if x == 1 0 ] )
df [ df a isin ( keys ) ]
fruits sort ( key=lambda x : x name lower ( ) )
`` `` '' $ solución \\ ; { } \\ ; : \\ ; { } \\\\ $ '' '' ''  format ( i , value )
p apply ( np sum , axis='major ' )
[ 'a ' , 'b ' , 'c ' ]  join ( '' )
sorted ( my_tuple , key=lambda tup : tup [ 1 ] )
nltk tokenize word_tokenize ( 'hello , world   how are you ? ' )
c execute ( 'select * from politicians ' )  fetchall ( )
ftp quit ( )
plt show ( )                                                                                                                                                                                                                                       
xs sort ( key=len )
re findall ( ' ( https ? : //\\s+ ) ' , s )
mylist sort ( ) 
[ sum ( x , [ ] ) for x in zip ( l1 , l2 ) ]
all_keys = set ( )  union ( * ( list ( d keys ( ) ) for d in mylist ) )
print ( re sub ( '^\\w*\\w+\\w* ' , '' , text ) )
[ [ '1 ' , 'a ' , 'b ' ] , [ '2 ' , 'c ' , 'd ' ] , [ '3 ' , '123 ' , 'e ' ] , [ '4 ' ] ]
lst sort ( reverse=true )
workbook close ( )
list ( sorted ( iter ) ) [ -10 ]
writer = pd excelwriter ( excel_file , engine='openpyxl ' )
i = 5 + tup ( ) [ 0 ]
open ( to_file , 'w ' )  write ( indata )
[ ' { } _ { } ' format ( k , v ) for k , v in d items ( ) ]
sorted ( a , key=itemgetter ( 'name ' , 'age ' ) )
numpy concatenate ( ( a , b ) )
driver quit ( )
list ( dict items ( ) )
x astype ( 'm8 [ ms ] ' )  astype ( 'o ' )
print ( '' join ( format ( x , '10 3f ' ) for x in a ) )
c = pd merge ( c , b , on= [ 'marca ' , 'formato ' ] )
lst = [ [ ] for _ in range ( a ) ] 
[ ( 1 , 4 ) , ( 4 , 8 ) , ( 8 , 10 ) ]
from functools import reduce reduce ( lambda a , b : [ a , b ] , [ 1 , 2 , 3 , 4 ] )
time strptime ( '00:00:00,000' split ( ' , ' ) [ 0 ] , ' % h : % m : % s ' )
li = [ x for x in li if condition ( x ) ]
zip ( *heapq nlargest ( 2 , enumerate ( a ) , key=operator itemgetter ( 1 ) ) ) [ 0 ]
re split ( ' ; ( ? = ( ? : [ ^\ ' '' ] |\ ' [ ^\ ' ] *\'| '' [ ^ '' ] * '' ) * $ ) ' , data )
pwd getpwnam ( 'aix ' )  pw_uid
df to_csv ( 'test csv ' , index=false )
[ i [ 0 ] for i in re findall ( ' ( ( [ a-z ] ) \\2 ) ' , 'abbbbcppq ' ) ]
literal_eval ( `` { 'key ' : 10 } '' )
int ( '' join ( str ( i ) for i in my_list ) , 2 )
[ mystr [ i : i + 8 ] for i in range ( 0 , len ( mystr ) , 8 ) ]
os system ( cmd + ' > /dev/null 2 > & 1 ' )
sorted_list_of_values = [ item [ 1 ] for item in sorted_list_of_keyvalues ]
res = [ ( x , my_dictionary [ x ] ) for x in my_list ]
list ( permutations ( [ 2 , 3 , 4 ] ) )
multiindex from_tuples ( index_3levels droplevel ( 'l3 ' )  unique ( ) )
r plot ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] , xlab='x ' , ylab='y ' )
df sort_values ( by= [ 'a ' , 'b ' ] )  groupby ( df a )  first ( ) [ [ 'b ' ] ]  reset_index ( )
`` `` '' `` '' ''  join ( [ x for x in query split ( ) if x lower ( ) not in stopwords ] )
a = getattr ( myobject , 'id ' , none )
pattern = re compile ( ' [ @ -o ] ' )
map ( lambda n : ' %  2f ' % n , [ 1883 95 , 1878 33 , 1869 43 , 1863 4 ] )
logging logger __init__ ( self , name , logging debug )
streetcat _meta get_parent_list ( )
df sort ( [ 'c1 ' , 'c2 ' ] , ascending= [ false , true ] )
data groupby ( lambda x : data [ 'date ' ] [ x ]  year )
float ( '55063 000000 ' )
plt show ( )                                                                                                                                                                                                                                        
np mean ( arr reshape ( -1 , 3 ) , axis=1 )
np meshgrid ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] , indexing='ij ' )
b = np split ( a , np where ( a [ : , ( 0 ) ] == 0 0 ) [ 0 ] [ 1 : ] )
df sort ( [ ( 'group1 ' , 'c ' ) ] , ascending=false )
`` `` '' , '' '' ''  join ( ' { } , { } ' format ( i , i + 1 ) for i in range ( 1 , 100 , 4 ) )
plt show ( )                                                                                                                                                                                                                                         
`` `` '' '' '' ''  join ( i [ 1 : ] * int ( i [ 0 ] ) if i [ 0 ]  isdigit ( ) else i for i in l )
print ( ' { 0 } { 1 } ' format ( count , conv ) )
int ( '0000 ' )
list ( dict ( ( ( x [ 0 ] , x [ 1 ] ) , x ) for x in l )  values ( ) )
binascii b2a_hex ( '\x02p\x1ca\xd1\x00\x00\x02\xcb\x11\x00 ' )  decode ( 'ascii ' )
numpy nonzero ( numpy in1d ( a2 , a1 ) ) [ 0 ]
re sub ( `` ' '' , '' , `` a single ' char '' )
re compile ( ' ( ? < = } } ) \\s+ ( ? = { { ) ' )
list ( x keys ( ) )  index ( 'c ' ) 
'hello % s ' % ' , ' join ( map ( str , my_args ) )
re search ( 'a { 1,65536 } ' , 'aaa ' )
list ( zip ( s [ : :2 ] , s [ 1 : :2 ] ) )
contour = cv2 convexhull ( contour )
sys stdout flush ( )       
sorted ( people , key=operator itemgetter ( 'name ' ) )
l = [ ( x * 2 ) for x in l ]
print ( [ ( ord ( char ) - 96 ) for char in input ( 'write text : ' )  lower ( ) ] )
open ( 'icon png ' , 'rb ' )
immutable = collections namedtuple ( 'immutable ' , [ 'a ' , 'b ' ] )
list ( your_iterator )
a [ : , 3 : ] [ np in1d ( a [ : , 3 : ] , b )  reshape ( a shape [ 0 ] , -1 ) ] = 0
new_dict = dict ( zip ( keys , values ) )
df drop_duplicates ( 'name ' , keep='last ' )
{ '1 ' : { } , '2 ' : { '101 ' : 'onezeroone ' , '202 ' : 'twozerotwo ' } }
d2 = dict ( ( k , f ( v ) ) for k , v in list ( d1 items ( ) ) )
[ dict ( zip ( r dtype names , x ) ) for x in r ]
`` `` '' '' '' ''  join ( myparts )
[ x for x in l if x > = 0 ]
plt show ( )                                                                                                                                                                                                                                          
[ 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 ]
time sleep ( 2 )
return { 'color ' : 'color ' , 'message ' : 'message ' }
app mainloop ( )  
len ( a ) - a [ -1 : :-1 ]  index ( 'hello ' ) - 1
writer writerows ( row strip ( )  split ( ) for row in infile if row strip ( ) )
cv2 namedwindow ( 'main ' , cv2 window_normal )
df [ 'sr ' ] = df [ 'info ' ]  apply ( foo )
random shuffle ( a )
parser parse_args ( [ '-a ' , '-b ' , 'fileone ' , 'filetwo ' , 'filethree ' ] )
eval ( `` print ( 'hello , % s ' % name ) '' , { } , { 'name ' : 'person-b ' } )
cursor = collection find ( { ' $ snapshot ' : true } )
`` `` '' `` '' ''  join ( word for word in anytext split ( ) if len ( word ) > 3 )
db col find ( { 'price ' : { ' $ lt ' : 100 } } )
isinstance ( s , str )  
`` `` '' i am a string '' '' ''  decode ( 'ascii ' )
plt show ( )                                                                                                                                                                                                                                           
data [ ( np where ( masks ) [ 1 ] ) , : ]
next ( ( x for x in range ( 10 ) if x > 5 ) )
a = [ ( 'b ' , i , 'ff ' ) for i in range ( 1 , 5 ) ]
yourapp ( )  run ( )
np allclose ( c0 , c3 )
a = datetime datetime now ( )  year
[ row [ 2:5 ] for row in lol [ 1:4 ] ]
cursor close ( ) 
rates sub ( treas iloc [ : , ( 0 ) ] , axis=0 )  dropna ( )
values = [ d [ k ] for k in a ]
response request headers get ( 'referer ' , none )
csv_file close ( )
super ( syncablemixin , self )  save ( *args , **kwargs )
d2 = { k : f ( v ) for k , v in list ( d1 items ( ) ) }
sorted ( list ( mydict values ( ) ) , reverse=true )
return httpresponse ( json dumps ( data ) , content_type='application/json ' )
df resample ( '2d ' , how='sum ' )
f write ( 'foo ' )
ftp retrlines ( 'list ' )
plt show ( )                                                                                                                                                                                                                                            
df loc [ df [ 'type ' ] == 'dog ' , [ 'killed ' ] ]
mylist [ 0 ] [ 0 ]
`` `` '' hello there   my name is fr ed   i am 25 5 years old  '' '' ''  split ( '   ' )
c = pd merge ( c , a , on= [ 'canal ' , 'gerencia ' ] )
`` `` '' { 0:0=2d } '' '' ''  format ( a )
multi_db = true
lst sort ( key=lambda x : ( -x [ 2 ] , x [ 0 ] ) )
df drop_duplicates ( subset= [ 'a ' , 'c ' ] , keep=false )
[ 1 , 2 , 3 ]   
gtk main ( )    
f close ( )       
df set_index ( 'a ' )  reindex ( new_index )  reset_index ( )
logging disable ( logging notset )
urljoin ( 'http : //some/more ' , 'thing ' )
urljoin ( 'http : //some/more/ ' , 'thing ' )
urljoin ( 'http : //some/more/ ' , '/thing ' )
cursor execute ( 'select * from table_name limit 1 ' )
sys stdout write ( '\x08 ' )
print ( 'a= { : d } , b= { : d } ' format ( f ( x , n ) , g ( x , n ) ) )
`` `` '' { } { } '' '' ''  format ( 10 , 20 )
plt show ( )                                                                                                                                                                                                                                             
print ( hashlib md5 ( 'whatever your string is ' )  hexdigest ( ) )
`` `` '' a string { 0 : > 5 } '' '' ''  format ( foo )
df drop ( df index [ [ 1 , 3 ] ] )
[ len ( x ) for x in a [ 0 ] ]
all ( d1 [ k ] == d2 [ k ] for k in ( 'testclass ' , 'testname ' ) )
df resample ( 'w ' , how='sum ' , axis=1 )
ax auto_scale_xyz ( [ 0 , 500 ] , [ 0 , 500 ] , [ 0 , 0 15 ] )
pickle load ( 'afile ' )
np array ( [ [ 0 , 1 , 2 , 3 ] , [ 4 , 5 , 4 , 3 ] , [ 6 , 5 , 4 , 3 ] ] )
print ( list ( itertools permutations ( [ 1 , 2 , 3 , 4 ] , 2 ) ) )
plt show ( )                                                                                                                                                                                                                                              
{ k : v strip ( ' '' ' ) for k , v in re findall ( ' ( \\s+ ) = ( ``  * ? `` |\\s+ ) ' , s ) }
( 'north ' if b > 0 else 'south ' ) + ( 'east ' if a > 0 else 'west ' )
print ( etree tostring ( f , pretty_print=true ) )
print ( ' { foo } , { bar } , { baz } ' format ( **locals ( ) ) )
[ item for sublist in [ [ i [ 1 : ] , [ i [ 0 ] ] ] for i in l ] for item in sublist ]
re findall ( ' ( ? < =\\s ) \\d * ? ( ? =\\s\\d\\s\\d [   ] ( ? = $ |\\s [ a-z ] ) ) ' , s )
l = [ ( ord ( a ) ^ ord ( b ) ) for a , b in zip ( s1 , s2 ) ]
config [ 'mysql ' ] [ 'tables ' ] [ 'users ' ]
client set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )
df set_index ( s index )  sort ( )
print ( ' -- -' join ( vals ) )
{ '1 ' : 2 , 'foo ' : 'bar ' , 'false ' : true }
plt show ( )                                                                                                                                                                                                                                               
circles = cv2 houghcircles ( gray , cv cv_hough_gradient )
[ 1 , 2 , 3 ]    
pd series ( np concatenate ( [ a , b ] ) )
df [ pd series ( df index get_level_values ( 'a ' ) )  isin ( vals [ vals [ 'values ' ] ]  index ) ]
data = self get_argument ( 'data ' , 'no data received ' )
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] 
df to_csv ( )
a += [ '' ] * ( n - len ( a ) )
c = [ i for i in a if i not in b ]
plt imshow ( z , interpolation='none ' )
driver execute_script ( `` document getelementbyid ( 'lga ' )  style display = 'none ' ; '' )
sum ( map ( sum , a ) )
s = s split ( ' zip ' , 1 ) [ 0 ] + ' zip '
len ( [ s start ( ) for s in re finditer ( ' ( ? =aa ) ' , 'aaa ' ) ] )
name = 'b ' + str ( num )
counter ( { 'blahblah ' : 1 , 'blah ' : 1 } )
list ( range ( max ( x [ 0 ] , y [ 0 ] ) , min ( x [ -1 ] , y [ -1 ] ) + 1 ) )
df [ df [ 'a ' ] > 2 ] [ 'b ' ] = new_val
sorted ( ( ( v , k ) for k , v in d items ( ) ) , reverse=true )
[ ( 1 , ) , ( 2 , ) , ( 3 , ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 2 , 3 ) , ( 1 , 2 , 3 ) ]
transaction commit ( )
print ( text decode ( 'unicode-escape ' ) )
proc = subprocess popen ( cmd , stdout=subprocess pipe , stderr=subprocess stdout )
np resize ( [ 1 , -1 ] , 11 )
plt show ( )                                                                                                                                                                                                                                                
plt ylabel ( 'response ' )
df plot ( x=df index astype ( str ) )
[ ( x - y ) for x , y in zip ( a [ 1 : ] , a ) ]
df [ 1 ] = df [ 0 ]  dt to_period ( 'm ' )
pygame image save ( img , 'image jpg ' )
print ( df resample ( 'q-apr ' , loffset='-1m ' )  t )
[ i [ 1 : ] for i in line split ( ) if i startswith ( ' # ' ) ]
mylist = list ( range ( 10 ) )
plt show ( )                                                                                                                                                                                                                                                 
objects = model objects filter ( id__in=object_ids )  order_by ( '-timestamp ' )
print ( len ( 'abc ' ) )
print ( len ( '\xd0\xb9\xd1\x86\xd1\x8b ' ) )
list ( zip ( keys , values ) )
s bind ( ( '' , 12345 ) )
[ 'you ' , 'i ' , 'a ' ]
plt colorbar ( )
print ( re sub ( ' \\ ( \\w+\\ ) ' , '' , item ) )
set ( [ 1 , 2 , 2 ] )  issubset ( [ 1 , 2 ] )
plt show ( )                                                                                                                                                                                                                                                  
list ( itertools chain ( * [ item split ( ) for item in lst ] ) )
s = s decode ( 'some_encoding ' )  encode ( 'ascii ' , 'replace ' )
pygame display flip ( )    
np isnan ( a )  any ( 1 )
models positivesmallintegerfield ( default=0 )
sys path append ( '/your/dir/here ' )
f write ( xmlstr encode ( 'utf-8 ' ) )
buf = '\x00 ' + '' join ( chr ( random randint ( 0 , 255 ) ) for _ in range ( 4 ) ) + '\x00 '
set ( a )  intersection ( b , c )
binascii unhexlify ( '437c2123 ' )
{ 'a1023 ' : 'crt ' , 'a1029 ' : 'regulator ' , 'a1030 ' : 'therm ' }
df columns map ( lambda x : x startswith ( 'foo ' ) )
plt show ( )                                                                                                                                                                                                                                                   
al_arrays = [ [ l [ i : i + 2 ] for i in range ( 0 , len ( l strip ( ) ) , 2 ) ] for l in in_f ]
sorted ( dct , key=dct get )
r = requests get ( 'http : //www example com/ ' , headers= { 'content-type ' : 'text ' } )
subprocess popen ( 'dmidecode exe -s system-uuid' split ( ) )
x , y = zip ( * [ ( i , -1 * j ) for i , j in enumerate ( range ( 10 ) ) ] )
os path getmtime ( filepath )
form [ 'favorite_cheese ' ] = [ 'brie ' ]
print ( socket gethostbyname ( 'google com ' ) )
np where ( np any ( a == 2 , axis=0 ) & np any ( a == 5 , axis=0 ) )
ax set_ylim ( [ 0 , 5 ] )
element find ( 'visits ' )
gpb = float ( eval ( input ( ) ) )
splitlists [ -1 ]  append ( splitlists [ 0 ] [ 0 ] )
child expect ( 'hi ' )
driver get ( 'http : //news ycombinator com ' )
plt show ( )                                                                                                                                                                                                                                                    
re sub ( ' ( \\\\u [ 0-9a-fa-f ] + ) ' , unescapematch , t )
form group_id choices insert ( 0 , ( '' , '' ) )
plt show ( )                                                                                                                                                                                                                                                     
[ ( '0 ' , 10 ) , ( '1 ' , 23 ) , ( '2 0 ' , 321 ) , ( '2 1 ' , 3231 ) , ( '3 ' , 3 ) , ( '12 1 1 ' , 2 ) ]
a = [ a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] [ 1 ] > a [ i - 1 ] [ 1 ] ]
wb save ( file )
sorted ( [ ( 1 , 3 ) , ( 3 , 2 ) , ( 2 , 1 ) ] , key=itemgetter ( 1 ) )
re findall ( ' [ a ] ' , 'abcd ' )
re split ( 'a+ ' , 'aaa ' )
[ i for i , ( a , b ) in enumerate ( zip ( vec1 , vec2 ) ) if a == b ]
[ i for i in range ( 3 ) for _ in range ( 2 ) ]
ax plot ( x , y , label='representatives ' if i == 0 else '' )
r = re compile ( ' ( this ) ' )
driver = webdriver firefox ( ) 
list ( somemodel objects filter ( id=instance id )  values ( ) ) [ 0 ]
print ( 'internet\\jdoe ' )
python_default_version = 'python3 2 '
sorted ( my_list , key=operator itemgetter ( 'name ' , 'age ' , 'other_thing ' ) )
y = list ( x )
np where ( np triu ( np ones ( a shape [ 0 ] , dtype=bool ) , 1 ) , a t , a )
f close ( )        
test objects filter ( actions__contains= { 'fixed_key_1 ' : 'foo2 ' } )
list ( dict keys ( ) ) [ 0 ]
random choice ( string ascii_letters [ 0:4 ] )
len ( [ x for x in lst if x is not none ] )
df groupby ( df columns , axis=1 )  agg ( numpy max )
numpy array ( [ v for v in vals if len ( set ( v ) ) == len ( v ) ] )
axes xaxis grid ( false , which='minor ' )
browser execute_script ( 'window open ( `` http : //bings com '' , '' _blank '' ) ; ' )
np where ( ~a any ( axis=1 ) )
assert getattr ( myclass my_method , '__wrapped__ ' )  __name__ == 'my_method '
df xs ( 'a ' , level='col ' , axis=1 )
listoflists = [ [ ] for i in range ( n ) ]
matrix ( [ [ 1 , 2 , 3 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] )
l = [ 0 ] * n
plt show ( )                                                                                                                                                                                                                                                      
print ( d [ 'a ' ] [ 'b ' ] [ 'c ' ] )
df = pd read_pickle ( file_name )
x = int ( x == 'true ' )
workbook close ( ) 
category objects annotate ( num_books=count ( 'book ' ) )  order_by ( 'num_books ' )
plt show ( )                                                                                                                                                                                                                                                       
window connect ( 'destroy ' , gtk main_quit )
[ 1 , 1 , 2 , 2 ]
keyring get_password ( 'system ' , 'username ' )
request session [ 'message ' ] = 'some error message '
a = [ [ '0 ' , '0 ' ] , [ '0 ' , '0 ' ] , [ '0 ' , '0 ' ] ]
a = array array ( 'i ' , ( 0 for i in range ( 0 , 10 ) ) )
sorted ( trial_list , key=lambda x : trial_dict [ x ] ) 
app run ( )         
ax plot ( x , y , 'b   ' )
`` `` '' , `` '' ''  join ( '=' join ( ( str ( k ) , str ( v ) ) ) for k , v in list ( mydict items ( ) ) )
`` `` '' `` '' ''  join ( porterstemmer ( )  stem_word ( word ) for word in text split ( ' ' ) ) 
x resample ( 'd ' )  fillna ( 0 )
print ( weekdays ( 'wednesday ' ) )
social_auth_storage = 'proj channels models customsocialstorage '
f write ( s encode ( 'utf-8 ' ) )
plt hist ( x , bins=list ( range ( -4 , 5 ) ) )
re sub ( ' [ \\w_ ] + ' , '' , s , flags=re unicode )
np array ( [ j for i in arr for j in np arange ( i - 0 2 , i + 0 25 , 0 1 ) ] )
[ 'a\xc3\xa1 ' , 'ab ' , 'abc ' ]
pd io parsers read_csv ( 'tmp csv ' , sep='\t ' , index_col=0 )
cb lines [ 0 ]  set_linewidth ( 10 )
sum ( map ( sum , my_list ) )
tostring ( element )  split ( ' > ' , 1 ) [ 1 ]  rsplit ( ' < / ' , 1 ) [ 0 ]
df [ 'c ' ] = df max ( axis=1 )
links = soup find_all ( 'a ' , { 'id ' : 'c1 ' } )
df plot ( kind='bar ' , stacked=true , colormap='paired ' )
print ( ( ' { :5d } ' * 5 )  format ( *values ) )
handler setlevel ( logging debug )
print ( np split ( a , b , axis=0 ) )
utc_dt strftime ( ' % y- % m- % d % h : % m : % s ' )
tree xpath ( '//phylo : name [ text ( ) = '' espresso '' ] ' , namespaces=nsmap )
normalize ( 'nfkd ' , s )  encode ( 'ascii ' , 'ignore ' )
app run ( debug=true )      
np diag ( np fliplr ( array ) )
[ x [ 0 ] for x , y in zip ( l1 , l2 ) if x [ 0 ] == y [ 0 ] ]
ax yaxis set_major_formatter ( formatter )
a = [ 'a ' , 'b ' , 'c ' , 'd ' , 'b ' ]
df ix [ 0 , 'a ' ] = 3
logger = logging getlogger ( __name__ ) 
print ( 'i am printing { 0 } and { y } ' format ( x , y=y ) )
sys stdout write ( 'your string to stdout\n ' )
print ( 'this is a tuple : % s ' % ( thetuple , ) )
wtr writerow ( ( r [ 0 ] , r [ 1 ] , r [ 3 ] , r [ 4 ] ) )
frame resample ( '1h ' , how= { 'radiation ' : np sum , 'tamb ' : np mean } )
df1 = df1 merge ( df2 [ [ 'weeknum ' , 'datetime ' ] ] , on= [ 'weeknum ' ] )
a , b , c = [ 1 , 2 , 3 ] 
df_merged = pd merge ( df1 , df2 , how='inner ' , on= [ 'chr ' , 'pos ' ] )
a [ [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ]
l = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
plt show ( )                                                                                                                                                                                                                                                        
tuple ( l )
writer writerows ( [ val ] )
re sub ( '\\b (  + ) \\s+\\1\\b ' , '\\1 ' , s )
json dump ( data , f )
re sub ( ' [ -   : ] ' , '' , `` ' : :2012-05-14 18:10:20 856000 : : ' '' )
a [ i : j ] = sorted ( a [ i : j ] )
[ ' ( ' , 'two ' , 'plus ' , 'three ' , ' ) ' , 'plus ' , 'four ' ]
[ 1 , 2 , 3 , 4 ] 
len ( set ( new_words ) )
df [ 'result ' ] = df apply ( func , axis=1 )
sys path append ( '/home/john/app-dependancies/pycharm-debug egg ' )
pd set_option ( 'display max_colwidth ' , -1 )
ax set_xlabel ( 'fpr or ( 1 - specificity ) ' )
int ( '0x77 ' , 16 )
plt savefig ( 'pal3 png ' )
df groupby ( df [ 'date_time ' ]  apply ( my_grouper ) )
df = pd concat ( [ df1 , df2 ] , ignore_index=true )
json loads ( ' { `` hello '' : 4 } ' )
counter ( [ 'apple ' , 'red ' , 'apple ' , 'red ' , 'red ' , 'pear ' ] )
my_str rstrip ( ' ; ' )  split ( ' ; ' )
fig legend ( lines , labels , loc= ( 0 5 , 0 ) , ncol=5 )
return jsonresponse ( { 'foo ' : 'bar ' } )
[ i for i in a if i not in b ]
f close ( )         
[ row for row in listoflists if row [ x ]  isdigit ( ) ]
bin ( int ( s decode ( 'base64 ' ) ) )
plt show ( )                                                                                                                                                                                                                                                         
print ( '\n' join ( parts ) )
datetime utcnow ( )  strftime ( ' % y % m % d ' )
set ( data1 )  intersection ( data2 )
s = [ 'michael ' , 'michael ' , 'alice ' , 'carter ' ]
plt show ( )                                                                                                                                                                                                                                                          
time sleep ( 1 )       
plt imshow ( cv2 cvtcolor ( img , cv2 color_bgr2rgb ) ) , plt title ( 'original ' )
a = zeros ( ( ph , pw ) , dtype= ( float , 3 ) )
df [ df [ 'b ' ]  str contains ( '|' join ( df [ 'a ' ] ) ) ]
__init__ py   
{ i pop ( 'name ' ) : i for i in listofdict }
soup find_all ( 'div ' , class_='stylelistrow ' )
soup find_all ( 'div ' , class_='stylelistrowone stylelistrowtwo ' )
plt savefig ( 'tooltips pdf ' )
df values max ( )
re sub ( '\\w ' , ' # ' , s )
( f ( x ) for x in list )
s = re sub ( ' [ ^0-9a-za-z ] + ' , '* ' , s )
df drop ( grouped get_group ( group_name )  index )
cursor callproc ( 'getperson ' , [ '1 ' ] )
[ none for _ in range ( 10 ) ]
file_name split ( '   ' )
`` `` '' € '' '' ''  decode ( 'utf-8 ' )
d3 = { k : v for k , v in list ( d3 items ( ) ) if v }
collection = db [ 'test-collection ' ]
conn commit ( )     
your_list sort ( key=itemgetter ( 'date ' ) , reverse=true )
`` `` '' , `` '' ''  join ( [ 'william ' , 'shatner ' , 'speaks ' , 'like ' , 'this ' ] )
ax xaxis set_major_formatter ( plt nullformatter ( ) )
sys stdout write ( msg )
opener open ( 'http : //www example com/ ' )
plt show ( )                                                                                                                                                                                                                                                           
workbook close ( )  
[ 'na ' , '1 ' , 'h ' , '1 ' , 'c ' , '2 ' , 'h ' , '3 ' , 'o ' , '2 ' ]
df [ [ 'col3 ' , 'col4 ' , 'col5 ' , 'col6 ' ] ]  astype ( float )
df [ 'yes ' ] = df [ 'win ' ]  map ( lambda x : 1 if x == 'yes ' else np nan )
ast literal_eval ( ' [ `` a '' , '' b '' , '' c '' , '' d '' ] ' )
np kron ( np eye ( n ) , a )
df [ 0 ]  values tolist ( )
bytearray fromhex ( 'de ad be ef 00 ' )
request meta [ 'remote_addr ' ] , request get [ 'x-progress-id ' ]
`` `` '' '' '' ''  join ( a )
plt show ( )                                                                                                                                                                                                                                                            
df [ 'color ' ] = np where ( df [ 'set ' ] == 'z ' , 'green ' , 'red ' )
[ ( index , row index ( val ) ) for index , row in enumerate ( mymatrix ) if val in row ]
farms = qs values_list ( 'farm ' , flat=true )  distinct ( )
open ( 'newfile txt ' , 'w ' )  writelines ( lines [ 3 : -1 ] )
plt show ( )                                                                                                                                                                                                                                                             
print ( re sub ( ' [ -~ ] ' , '' , '\xa3100 is worth more than \u20ac100 ' ) )
window geometry ( '450x1000+200+0 ' )
np take ( a , idx , axis=1 )
return foo ( n - 1 ) + [ 1 ]
'dammit im mad ' [ : :-1 ] == 'dammit im mad '
`` `` '' { { { 0 } : { 1 } } } '' '' ''  format ( 'hello ' , 'bonjour ' )
[ '13 46 ' , '20 62 ' , '26 69 ' , '30 17 ' , '32 81 ' ]
request session [ 'temp_data ' ] = form cleaned_data
re search ( 'suck ' , s )
img save ( 'titled_plot png ' )
zip ( *data )
ssh close ( ) 
df1 apply ( lambda x : x asof ( df2 index ) )
df [ '*ptsperorder* ' ] = df groupby ( 'ordernum ' ) [ 'ptsperlot ' ]  transform ( sum )
player objects values ( 'player_type ' )  order_by ( )  annotate ( count ( 'player_type ' ) )
c = dict ( list ( a items ( ) ) + list ( b items ( ) ) )
gray_image = cv2 cvtcolor ( image , cv2 color_bgr2gray )
numpy array ( [ v for v in vals if len ( numpy unique ( v ) ) == len ( v ) ] )
sorted ( people , key=lambda dct : dct [ 'name ' ] )
print ( os path relpath ( full_path , '/book/html ' ) )
headers = { 'x-attribute ' : 'a ' , 'x-attribute ' : 'b ' }
[ ( 0 , 0 ) , ( 0 , 1 ) , ( 1 , 0 ) , ( 1 , 1 ) ]
re split ( '\\s* [ ff ] eat\\   ' , a )
[ key for key , values in list ( rev_multidict items ( ) ) if len ( values ) > 1 ]
re sub ( ' ( ? < =  ) ( ? =   ) ' , '- ' , s )
datetime datetime now ( )  strftime ( ' % i : % m % p on % b % d , % y ' )
cv2 waitkey ( )   
plt show ( )                                                                                                                                                                                                                                                              
print ( re sub ( ' [ ^i ] ' , ' ! ' , str ) )
reversed ( x )
v astimezone ( pytz timezone ( 'us/eastern ' ) )
df [ df [ 'location ' ] == 'c ' ]  iloc [ 0 ]
entry objects extra ( where= [ 'weekdays & % s ' ] , params= [ weekdays fri ] )
np savetxt ( 'test csv ' , example , delimiter= ' , ' )
find = re compile ( '^ ( [ ^  ] * )   * ' )
[ ( 0 , 'aba ' ) , ( 1 , 'xyz ' ) , ( 2 , 'xgx ' ) , ( 3 , 'dssd ' ) , ( 4 , 'sdjh ' ) ]
fig savefig ( 'myfig png ' , dpi=600 )
option setattribute ( 'selected ' , 'true ' )
sum ( clarray1 , clarray2 , clarray3 )
locale setlocale ( locale lc_all , 'en_ca utf-8 ' )
[ [ 'x ' ] , [ 'x ' ] , [ 'x ' ] , [ 'x ' ] ]
globals ( ) [ 'a ' ] 
count = sum ( len ( v ) for v in d values ( ) )
print ( list ( set ( chain ( *array ) ) ) )
plt show ( )                                                                                                                                                                                                                                                               
s split ( ' : ' , 1 ) [ 1 ] 
s1 dropna ( inplace=true )
print ( '\u2713 ' )
cursor execute ( 'select * from posts where tags like ? ' , ( ' % { } % ' format ( tag ) , ) )
plt show ( )                                                                                                                                                                                                                                                                
a , b = ( int ( x ) for x in s split ( ) )
listener close ( )
plt show ( )                                                                                                                                                                                                                                                                 
sys exit ( )   
re findall ( ' '' ( [ ^ '' ] * ) '' ' , 'setvariables `` a '' `` b '' `` c '' ' )
df [ ~df from str contains ( '|' join ( ignorethese ) ) ]
matplotlib pyplot scatter ( x , y )
subprocess call ( [ 'python ' , ' /script py ' ] , stdout=output )
df [ 'hb ' ] - 5
rows_list sort ( key=operator itemgetter ( 0 , 1 , 2 ) )
df [ df [ 'b ' ] > 10 ]
df [ 'a ' ]  where ( df [ 'a ' ] > df [ 'b ' ] , df [ 'b ' ] )
`` `` '' { 0 : % y- % m- % d % h : % m : % s } '' '' ''  format ( datetime datetime now ( ) )
round ( 1 679 , 2 )
ax = plt gca ( )
my_logger setlevel ( logging debug )
logging basicconfig ( format= ' % ( threadname ) s : % ( message ) s ' )
min ( [ 1 , 2 , 3 , 4 , 6 , 1 , 0 ] )
print ( '\xc4\x89' decode ( 'utf-8 ' )  upper ( ) )
print ( ' % d % d ' % ( 2 , 1 ) )
[ name for name in starring if name strip ( ) ]
now = datetime datetime now ( )
ws sort ( key=lambda datum : ( datum [ 'date ' ] , datum [ 'type ' ] , datum [ 'location ' ] ) )
r = requests post ( url=url , data=body , headers= { 'connection ' : 'close ' } )
group_position ( df [ 'z ' ] , df [ 'a ' ] )
{ i : np where ( arr == i ) [ 0 ] for i in np unique ( arr ) }
func ( *r )
plt show ( )                                                                                                                                                                                                                                                                  
[ dict ( [ a , int ( x ) ] for a , x in b items ( ) ) for b in list ]
os path join ( '/my/root/directory ' , 'in ' , 'here ' )
media_root = os path join ( os path dirname ( file ) , 'media ' )  replace ( '\\\\ ' , '// ' )
url ( '^home/ ' , 'myapp views home ' ) ,
plt show ( )                                                                                                                                                                                                                                                                   
os system ( 'title yet another title ' )
plt show ( )                                                                                                                                                                                                                                                                    
super ( backupform , self )  __init__ ( *args , **kwargs )
print ( len ( set ( p [ 'nationality ' ] for p in people ) ) )
df drop ( [ col for col in df columns if 'chair ' in col ] , axis=1 , inplace=true )
df head ( 10 )
return len ( my_list )
map ( lambda x : { 'content ' : x [ 'content ' ]  lower ( ) } , messages )
isinstance ( )
root mainloop ( )                    
ax plot ( x , y , 'bo ' ) 
a = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ]
s2 [ : len ( s1 ) ] == s1
`` `` '' - '' '' ''  join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) )
counter ( v for sublist in list ( d values ( ) ) for v in sublist )
print ( re sub ( ' + \\+ ( \\d+ ) { 3 } ' , '' , data ) )
os rename ( file , 'year_ { } ' format ( file split ( '_ ' ) [ 1 ] ) )
result = string replace ( '\\ ' , '' )
{ { ( value | stringformat ) : 'i ' } }
hsub = h [ 1 : -1 , 1 : -1 ]
re findall ( '\\ [ p\\ ] \\s ? (  + ? ) \\s ? \\ [ \\/p\\ ] ' , line )
server serve_forever ( )  
ax yaxis tick_left ( )
print ( tuple ( chain ( [ 'a ' , 'b ' , 'c ' ] , 'd ' , 'e ' ) ) )
df = pd dataframe ( { 'close ' : [ 2 389000000001 ] } )
[ ( lambda x : x * x ) for _ in range ( 3 ) ]
set ( [ a , b , c , a ] )
numpy minimum accumulate ( [ 5 , 4 , 6 , 10 , 3 ] )
np where ( x == 5 )
1 in [ 0 , 1 , 2 , 3 , 4 , 5 ]
`` `` '' hello\\nworld '' '' ''
map ( ord , hex_data )
divs = soup select ( ' # fnd_content div fnd_day ' )
time sleep ( 1 )        
`` `` '' '' '' ''  join ( c for c in s if c isupper ( ) )
[ y for y in x for x in data ]
tornado ioloop ioloop instance ( )  start ( )
my_dictionary = { 'foo ' : 10 , 'bar ' : 20 }
df assign ( id=df groupby ( [ 0 ] )  cumcount ( ) )  set_index ( [ 'id ' , 0 ] )  unstack ( level=1 )
plt show ( )                                                                                                                                                                                                                                                                     
[ list ( zip ( a , p ) ) for p in permutations ( b ) ]
[ set ( [ 1 , 4 , 5 , 6 ] ) , set ( [ 0 , 2 , 3 , 7 ] ) ]
print ( [ y for x in l for y in ( x , x + 1 ) ] )
[ sum ( nums [ i : i + 3 ] ) for i in range ( 0 , len ( nums ) , 3 ) ]
root wm_title ( `` got skills ' skill tracker '' )
logging exception ( '' )
print ( dict ( zip ( keys , [ list ( i ) for i in zip ( *data ) ] ) ) )
return any ( i isdigit ( ) for i in s )
list ( range ( 1 , 6 ) ) + list ( range ( 15 , 20 ) )
[ ( 'string ' + str ( i ) ) for i in range ( 11 ) ]
a = [ 0 ] * 10
ax set_ylabel ( 'y ' )
print ( template format ( 'classid ' , 'dept ' , 'course number ' , 'area ' , 'title ' ) )
`` `` '' '' '' ''  join ( ' [ { } ] ' format ( e ) for e in s split ( '   ' ) )
e = xml etree elementtree parse ( 'thefile xml ' )  getroot ( )
s replace ( { 'abc ' : 'abc ' } )
f write ( '\n' join ( newlist ) )
bucket copy_key ( new_key , source_bucket , source_key )
{ 'a ' : 4 , 'b ' : 1 , 'c ' : 1 }
demjson decode ( ' { hotel : { id : `` 123 '' , name : `` hotel_name '' } } ' )
logging getlogger ( 'base baz ' )  error ( 'log from baz ' )
window destroy ( ) 
root mainloop ( )                     
print ( [ x [ 0 ] for x in data ] )
clf fit ( x , y )
ax2 set_ylabel ( 'cost ( $ ) ' , color='g ' , rotation=270 , labelpad=15 )
c [ : ] = b
any_func ( 'mona ' , 45 , 'f ' , ( 'h ' , 'k ' , 'l ' ) )
[ { 'id1 ' : k , 'price ' : temp [ k ] } for k in temp ]
df [ df duplicated ( [ 'id ' ] , keep=false ) ]
pdb set_trace ( ) 
driver get ( 'https : //expired badssl com ' )
print ( ' ' join ( get_words ( [ 'k ' , 'c ' , 't ' , 'a ' ] ) ) )
config get ( 'common ' , 'folder ' )  split ( '\n ' )
post query filter ( post title ilike ( ' % some_phrase % ' ) )
a argmax ( axis=0 )
map ( '' join , itertools product ( 'abc ' , repeat=3 ) )
[ 1 , 2 , 3 ]     
list = [ [ 6 , 5 , 4 ] , [ 4 , 5 , 6 ] ]
request headers get ( 'user-agent ' )
pool ( processes=none , initializer=none , initargs= ( ) , maxtasksperchild=none )
aggregated_df reset_index ( )  to_json ( orient='index ' )
plt show ( )                                                                                                                                                                                                                                                                      
{ { ( value | join ) : ' // ' } }
`` `` '' { 0 : > 15 2f } '' '' ''  format ( 1464 1000000000001 )
self license_file save ( new_name , contentfile ( 'a string with the file content ' ) )
df [ self target ]  str contains ( t )  any ( )
mytime strftime ( ' % a , % d % b % y % h : % m : % s % z ' )
a = b , c = 'ab '
user objects filter ( userprofile__level__lte=0 )
cursor execute ( 'select * from anooog1 ; ' )
print ( 'financial return of outcome 1 = { :  2f } ' format ( 1 23456 ) )
ma array ( np resize ( b , a shape [ 0 ] ) , mask= [ false , false , true ] )
map ( lambda a , b : a or b , choicestxt , [ ( 'choice % i ' % n ) for n in range ( 1 , 10 ) ] )
len ( set ( a ) )
list2 = [ line for line in file if 'content_item_id ' in line ]
re findall ( ' ( 1 ( 23 ) 45 ) ' , '12345 ' )
a = list ( set ( a ) )
list ( itertools product ( *s ) )
counter ( { 'india ' : 2 , 'programmer ' : 2 , 'amith ' : 1 , 'ashwin ' : 1 } )
boxes = [ ( 0 , gp1 ) , ( 0 , gp2 ) , ( 1 , gp3 ) , ( 1 , gp4 ) , ( 0 , gp5 ) ]
set ( d1 items ( ) )  issubset ( set ( d2 items ( ) ) )
date strftime ( ' % a % b % d , % y at % h : % m gmt ' )
db session query ( printer )  all ( )
set ( line strip ( ) for line in open ( 'filename txt ' ) )
type ( [ 1 , 2 , 3 ] ) == type ( [ 'a ' , 'b ' , 'c ' ] )
[ 2 860386848449707 , 2 758984088897705 , 2 768254041671753 ]
[ 9 743937969207764 , 9 884459972381592 , 9 552299976348877 ]
plt draw ( )  
plt show ( )                                                                                                                                                                                                                                                                       
p wait ( )
cols = list ( df columns values )
plt show ( )                                                                                                                                                                                                                                                                        
raise self __class__ __name__
ax set_xscale ( 'log ' )
pylab savefig ( 'heart png ' )
binascii hexlify ( '\r\x9eq\xce ' )
firstpart , secondpart = string [ : len ( string ) / 2 ] , string [ len ( string ) / 2 : ]
os rename ( file , new_name )
my_model save ( )
module1 func1 ( 'arg1 ' )
match group ( 1 ) 
( '^password_reset/ $ ' , 'your_app views password_reset ' ) ,
entry [ 'image ' ] = entry [ 'image ' ]  encode ( 'base64 ' )
regex findall ( ' { ( ( ? > [ ^ { } ] +| ( ? r ) ) * ) } ' , ' { 1 , { 2 , 3 } } { 4 , 5 } ' )
mymodel objects order_by ( ' ? ' ) [ :10 ]
canvas create_text ( x , y , font='purisa ' , size=mdfont , text=k )
img save ( )
print ( '\t' join ( map ( str , [ 1 , 2 , 3 , 4 , 5 ] ) ) )
`` `` '' [ \\u00d8-\\u00f6 ] '' '' ''
df loc [ ( slice ( none ) , '2014-05 ' ) , : ]
plt show ( )                                                                                                                                                                                                                                                                         
dict ( ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) )
lst sort ( )
[ x [ 0 ] for x in listd [ 2 ] ]
df [ 'date ' ] = pd to_datetime ( df [ 'date ' ] ) 
value isdigit ( )
plt savefig ( 'graph pdf ' )
[ tuple ( l ) for l in nested_lst ]
print ( struct unpack ( 'i ' , fin read ( 4 ) ) )
myarray = [ { 'pi ' : 3 1415925 , 'r ' : 2 } , { 'e ' : 2 71828 , 'theta ' : 0 5 } ]
some_unicode_string encode ( 'utf-8 ' )
wait until ( ec visibility_of_element_located ( ( by class_name , 'searchbox ' ) ) )
map ( '' join , a )
print ( 'name : % ( person name ) s ' % { 'person name ' : 'joe ' } )
input ( 'press enter to exit ; ) ' )
my_array [ : , ( [ 0 , 1 ] ) ] = my_array [ : , ( [ 1 , 0 ] ) ]
df_agg = df groupby ( [ 'job ' , 'source ' ] )  agg ( { 'count ' : sum } )
z = ( set ( ( 'a ' , 'b ' , 'c ' ) ) - set ( ( x , y ) ) )  pop ( )
[ 'abcd ' , 'a , bcd ' , 'a , b , cd ' , 'a , b , c , d ' , 'a , bc , d ' , 'ab , cd ' , 'ab , c , d ' , 'abc , d ' ]
sck setproxy ( socks proxy_type_socks5 , '127 0 0 1 ' , 9050 )
s reset_index ( )  drop ( 1 , axis=1 )
new_array = [ x for x in main_array if x not in second_array ]
x = all ( ( a , b , c , d , e , f ) )
fig savefig ( '~/desktop/myplot pdf ' )
return render ( request , 'main html ' , { 'context ' : ord_dict } )
fig savefig ( 'so_example png ' )
gtk main ( )     
python - -version
my_module = importlib import_module ( 'os path ' )
myobject all ( )  order ( '-time ' ) [ 0 ]
print ( ' [ % i , % i , % i ] ' % tuple ( numberlist ) )
cursor commit ( )
findtoure = commentary find ( text=re compile ( 'yaya toure ' ) )
random seed ( )
[ ( a + b ) for a , b in zip ( s [ : :2 ] , s [ 1 : :2 ] ) ]
list ( find_gaps ( [ '0000001 ' , '0000003 ' , '0000006 ' ] ) )
ttk style ( )  configure ( '   ' , relief='flat ' , borderwidth=0 )
return httpresponse ( '' )
print ( sorted ( l , key=my_key ) )
plt savefig ( 'd : \\mpl_logo_with_title png ' , dpi=dpi )
test [ numpy apply_along_axis ( lambda x : x [ 1 ] in wanted , 1 , test ) ]
re sub ( ' -- -- -   * ? -- -- - ' , '' , data , 1 )
re findall ( '\\b\\d { 5 } \\b ' , 'helpdesk-agenten ( m/w ) kennziffer : 12966 ' )
`` `` '' { } and { } '' '' ''  format ( ' , ' join ( listy [ : -1 ] ) , listy [ -1 ] )
numpy apply_along_axis ( sum , 1 , x )
max_index = my_list index ( max_value )
re findall ( 'car|rat| [ a-z ] ' , s )
popen ( [ 'nohup ' , 'script sh ' ] , stdout=devnull , stderr=devnull )
np einsum ( 'ijk , ij- > ik ' , ind , dist )
v dot ( np rollaxis ( a , 2 , 1 ) )
print ( sys path )
[ x for x in my_str split ( ' ; ' ) if x ]
df set_index ( 'a ' ) 
pygame display flip ( )     
x = [ i for i in x if len ( i ) == 2 ]
[ word for word in words if any ( not char isdigit ( ) for char in word ) ]
os symlink ( '/usr/bin/python ' , '/tmp/subdir/python ' )
plt show ( )                                                                                                                                                                                                                                                                          
key , value = line rstrip ( '\n ' )  split ( ' , ' )
print ( ' , ' join ( str ( x ) for x in a ) )
df groupby ( 'obj_id ' )  agg ( lambda df : df values [ df [ 'data_date ' ]  values argmax ( ) ] )
re sub ( '\\bugh\\b ' , 'disappointed ' , 'laughing ugh ' )
[ ( x + y ) for x , y in zip ( l1 , l2 ) ]
out = p communicate ( )
return render ( request , 'contact html ' , { form : form } )
[ ( e in lestring ) for e in lelist if e in lestring ]
plt figure ( figsize= ( 6 , 6 ) )
entry objects all ( )  update ( value=not f ( 'value ' ) )
request cookies get ( 'my_cookie ' )
plt draw ( )   
print ( re sub ( ' ( \\s ) \\ { 2 , } ( \\s ) ( \\n ? ) ' , '\\1|\\2\\3 ' , s ) )
mymodel objects using ( 'my_non_default_database ' )  get_or_create ( name='bob ' ) 
datetime datetime fromtimestamp ( 1284286794 )
k , v = next ( iter ( list ( d items ( ) ) ) )
plt legend ( numpoints=1 )
writer writerows ( row split ( ) for row in infile if row strip ( ) )
nested_list = [ [ s upper ( ) for s in xs ] for xs in nested_list ]
o save ( )
df drop_duplicates ( subset= [ 'col2 ' , 'col3 ' ] )
key = lambda d : d [ 'rank ' ] if d [ 'rank ' ] ! = 0 else float ( 'inf ' )
df = pd dataframe ( [ [ 1 , 2 ] , [ 1 , 3 ] , [ 4 , 6 ] ] , columns= [ 'a ' , 'b ' ] )
print ( { word : word_list count ( word ) for word in word_list } )
cv2 imshow ( 'crop ' , desired_result )
pdf close ( )
print ( event objects filter ( date__lt=datetime datetime now ( ) )  delete ( ) )
df drop_duplicates ( cols='uniqueid ' , inplace=true )
map ( lambda d : d pop ( 'k1 ' ) , list_of_d )
soup select ( 'div container a [ href ] ' )
help ( function )
[ elem for x in list for elem in ( x , 0 ) ] [ : -1 ]
list ( itertools product ( *list ( mydict values ( ) ) ) )
[ int ( n ) for n in bin ( 21 ) [ 2 : ]  zfill ( 8 ) ]
matplotlib use ( 'pdf ' )
return redirect ( url_for ( 'dashboard ' , username='foo ' ) )
list ( filter ( functools partial ( get_long , treshold=13 ) , dna_list ) )
{ key : list ( set ( a [ key ] )  difference ( b get ( key , [ ] ) ) ) for key in a }
`` `` '' `` '' ''  join ( [ str ( x ) for x in np hstack ( ( a t real , a t imag ) )  flat ] )
print ( 'the total is ' + str ( total ) + ' and the average is ' + str ( average ) )
dict ( ( k , v ) for k , v in somedict items ( ) if not k startswith ( 'someprefix ' ) )
urllib request urlretrieve ( 'http : //python org/images/python-logo gif ' , '/tmp/foo gif ' )
[ 'smith ' , 'smith ' , 'roger ' , 'roger-smith ' ]
s decode ( 'utf-8 ' )  find ( '\u0101 ' )
getattr ( sys modules [ __name__ ] , 'a ' )
sys exit ( 1 )
pd to_datetime ( pd series ( date_stngs ) ) 
[ 'm ' , 'o ' , 'n ' , 'k ' , 'e ' , 'y ' ]
np zeros ( ( 4 , 3 , 2 ) )
logging _defaultformatter = logging formatter ( ' % ( message ) s ' )
print ( ' [ % s ] ' % ' , ' join ( map ( str , mylist ) ) )
list ( next ( it ) for _ in range ( n ) )
plt show ( )                                                                                                                                                                                                                                                                           
print ( ' { 0 } \n { 1 } ' format ( item [ 0 ] , ' -- -' join ( item [ 1 ] ) ) )
ndim_grid ( [ 2 , -2 , 4 ] , [ 5 , 3 , 6 ] )
plt show ( )                                                                                                                                                                                                                                                                            
[ ( x + y ) for x , y in zip ( 'ab ' , '12345 ' ) ]
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] ]
result extend ( item )
br form set_value ( [ '1 ' ] , name='prodclass ' )
ii = np where ( a == 4 )
np einsum ( 'ijk , kj- > i ' , a , b )
np array ( arr [ : , ( 1 ) ] , dtype= [ ( '' , np float ) ] * 3 )  view ( np float )  reshape ( -1 , 3 )
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) / timedelta ( seconds=1 )
help ( 'modules ' )
{ 'p ' : [ 1 , 3 , 2 ] , 'q ' : [ 4 , 3 , 2 ] , 'r ' : [ 4 , 0 , 9 ] }
plt show ( )                                                                                                                                                                                                                                                                             
array ( [ [ [ 1 , 5 ] , [ 2 , 6 ] ] , [ [ 3 , 7 ] , [ 4 , 8 ] ] ] )
np minimum reduce ( [ np arange ( 3 ) , np arange ( 2 , -1 , -1 ) , np ones ( ( 3 , ) ) ] )
srt_dict [ 'searchresult ' ]  sort ( key=lambda d : d [ 'ranking ' ] , reverse=true )
arr = [ [ none for x in range ( 6 ) ] for y in range ( 6 ) ]
datetime datetime now ( )
array [ itemindex [ 0 ] [ 1 ] ] [ itemindex [ 1 ] [ 1 ] ]
plt show ( )                                                                                                                                                                                                                                                                              
person objects filter ( **kwargs )
ascii_garbage = text encode ( 'ascii ' , 'replace ' )
line = f readline ( )
pattern = '6 of\\s+ (  + ? ) \\s+fans '
pattern = '6 of\\s+ ( \\s+ ) \\s+fans '
pattern = '6 of\\d* ? ( \\d+ ) \\d* ? fans '
[ '8:00 ' , '12:30 ' , '1:45 ' , '6:15 ' ]
len ( set ( 'aaaa ' ) ) == 1
myfile write ( c_uncompdata_p [ : c_uncompsize ] )
df [ df index map ( lambda x : x [ 0 ] in stk_list ) ]
json dumps ( { 'compresseddata ' : base64 b64encode ( zstring ) } )
plt show ( )                                                                                                                                                                                                                                                                               
[ ( 1 , 3 ) , ( 3 , 4 ) , ( 4 , none ) ]
df groupby ( [ 'a ' , 'b ' ] )  max ( ) [ 'c ' ]  reset_index ( )
[ ( 2 , 1 , 1 ) , ( 1 , 2 , 1 ) , ( 1 , 1 , 2 ) ]
writer writerow ( [ 'mary ' , '3 main st ' , '704 ' , 'yada ' ] )
pd to_numeric ( df stack ( ) , 'coerce ' )  unstack ( )
l [ 'type ' ] [ 0 ] [ 'references ' ]
url ( '^path/to/url ' , templateview as_view ( template_name='index html ' ) ) ,
isinstance ( s , str )   
pd read_hdf ( 'test h5 ' , 'df ' , where= [ pd term ( 'a ' , '= ' , [ 'foo ' , 'bar ' ] ) , 'b=1 ' ] )
set ( l [ :4 ] )
parser add_argument ( ' -- secret ' , help=argparse suppress )
plt show ( )                                                                                                                                                                                                                                                                                
`` `` '' '' '' ''  join ( chain from_iterable ( zip_longest ( a , b , fillvalue= '' ) ) )
itertools permutations ( my_list , 3 )
sum ( bytearray ( 'abcdefgh ' ) )
f close ( )          
ind [ np argsort ( a [ ind ] ) ]
{ { ' % d ' | format ( 42 ) } }
players = player objects filter ( batting__gt=f ( 'bowling ' ) )
re sub ( '\\bdelhi\\b ( ? = ( ? : '' [ ^ '' ] * '' | [ ^ '' ] ) * $ ) ' , '' , a )  strip ( )
driver get ( 'https : //www youtube com/watch ? v=hdw1ukiti5c ' )
unicodedata normalize ( 'nfkd ' , title )  encode ( 'ascii ' , 'ignore ' )
bin ( int ( 'abc123efff ' , 16 ) ) [ 2 : ]
chr ( ord ( 'x ' ) ) == 'x '
df1 reset_index ( )
os path dirname ( sys executable ) 
plt draw ( )    
os system ( 'ping -c 5 www examplesite com ' )
transmission_array extend ( zero_array )
f write ( 'whatever ' )
all ( x == mylist [ 0 ] for x in mylist )
hello = [ x strip ( ' ' ) for x in hello ]
plt show ( )                                                                                                                                                                                                                                                                                 
a [ : ] = [ x for x in a if x < = 2 ]
[ 'great ' , 'satisfying ' , 'exceptional ' , 'positive ' , 'acceptable ' ]
a = pd read_table ( 'file ' , header=none , sep= ' ' , usecols=list ( range ( 8 ) ) )
new_tuple = tuple ( ' ( 1,2,3,4,5 ) ' [ 1 : -1 ]  split ( ' , ' ) )
json dumps ( list )
my_import ( 'foo bar baz qux ' )
plt show ( )                                                                                                                                                                                                                                                                                  
os path join ( os path expanduser ( '~ ' ) , 'documents ' , completename )
plt show ( )                                                                                                                                                                                                                                                                                   
print ( a replace ( ' > ' , ' > \n ' ) )
r sadd ( 'a ' , 1 , 2 , 3 )
entry objects values_list ( 'id ' , 'headline ' )
print ( result [ 0 ] [ 'status ' ] )
[ 'long ' , 'string ' , 'text ' ]
np argsort ( y , order= ( 'x ' , 'y ' ) )
mylist = sorted ( set ( mylist ) )
a [ 0:1 ] [ 0 ] [ 0 ] = 5
df a apply ( lambda x : pd series ( 1 , x ) )  fillna ( 0 )  astype ( int )
zip ( a , b , c )
print ( sorted ( l , key=lambda x : x ) )
[ array ( [ [ 1 , 2 , 3 ] , [ 2 , 4 , 7 ] ] ) , array ( [ [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) ]
plt scatter ( list ( range ( len ( y ) ) ) , y , c=z , cmap=cm hot )
re findall ( ' [ bcdfghjklmnpqrstvwxyz ] + ' , 'concertation ' , re ignorecase ) 
b get ( 'x ' , { } )  get ( 'y ' , { } )  get ( 'z ' )
app run ( debug=true )       
df loc [ ii , cols ]
'mystring ' == 'mystring '
getattr ( test , method ) ( )
plt show ( )                                                                                                                                                                                                                                                                                    
np exp ( -x )
driver get ( 'https : //cacert org/ ' )
pandas concat ( [ df [ 'a ' ] , df [ 'b ' ] ] )  unique ( )
[ x for x in countries if x [ 0 ] == 'as ' ] [ 0 ] [ 1 ]
print ( json dumps ( foo ) )
{ k : ( v ( ) if callable ( v ) else v ) for k , v in a items ( ) }
grouped = df groupby ( df [ 'zip ' ]  isin ( keep ) )
df2 groupby ( 'name ' )  apply ( tgrp )  unstack ( )
np in1d ( a , [ 2 , 3 ] )  reshape ( a shape )
subprocess call ( [ '/bin/bash ' , '-c ' , '/bin/echo $ home ' ] )
df drop ( x [ x ]  index )
int ( '' join ( your_list ) , 16 )
df [ 'admission_source_code ' ] = [ str ( i ) for i in df [ 'admission_source_code ' ] ]
hehe ( )
data to_csv ( 'path_with_file_name ' )
book objects create ( **d ) 
df query ( 'field not in @ ban_field ' )
open ( 'test_newlines txt ' )  read ( )  split ( )
df = df [ ~df datecolumn isin ( a ) ]
reader = csv reader ( f , delimiter= ' ' , skipinitialspace=true )
a = list ( 'hello ' )
print ( '\n' join ( d [ 'name ' ] for d in thisismylist ) )
plt show ( )                                                                                                                                                                                                                                                                                     
imshow ( array , interpolation='nearest ' )
dist = math hypot ( x2 - x1 , y2 - y1 )
1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0
sorted ( [ -5 , 2 , 1 , -8 ] , key=abs )
driver get ( 'http : //cn bing com ' )
s1 = [ '11 ' , '2 ' , 'a ' , 'b ' , 'b1 ' , 'b11 ' , 'b2 ' , 'b21 ' , 'c ' , 'c11 ' , 'c2 ' ]
df pivot_table ( index='a ' , columns='b ' , values='c ' , fill_value=0 ) 
len ( s encode ( 'utf-8 ' ) )
pd merge ( df1 , df2 , left_index=true , right_index=true , how='outer ' )  mean ( axis=1 )
my_function = getattr ( __import__ ( 'my_apps views ' ) , 'my_function ' )
out = np concatenate ( input_list )  ravel ( )  tolist ( )
`` `` '' mary had a little lamb '' '' ''  count ( 'a ' )
plt show ( )                                                                                                                                                                                                                                                                                      
sys path append ( 'f : \\projects\\python ' )
[ ( i , j ) for i , j in zip ( a , x ) if i > = 4 ]
parser add_argument ( '-a ' , action='store_true ' )
self depositlabel [ 'text ' ] = 'change the value '
f write ( str ( yest ) + '\n ' )
ax1 set_xticks ( [ int ( j ) for j in range ( -4 , 5 ) ] )
datetime datetime ( 2012 , 5 , 22 , 9 , 3 , 41 )
datetime datetime ( d year , d month , d day )
s = s [ : pos ] + s [ pos + 1 : ]
re sub ( '\\bin\\b ' , '' , 'office administration in delhi ' )
ts resample ( '30min ' , how=mhl )
print ( ( ' %  0f\xb0 %  0f\ ' %  0f '' ' % ( deg , fabs ( min ) , fabs ( sec ) ) )  encode ( 'utf-8 ' ) )
df = pd dataframe ( { 'col1 ' : x , 'col2 ' : y , 'col3 ' : z } )
subprocess call ( 'taskkill /im exename exe ' )
sorted ( d , key=d get ) 
re sub ( '\\w ' , '' , 'text 1 , 2 , 3     ' )
np cumsum ( a , axis=1 , out=a )
plot savefig ( 'hanning % ( num ) s pdf ' % locals ( ) )
raise typeerror ( 'sth ' )
re findall ( ' ( \\w+ [   ] \\w+ ) @ ' , s )
sorted ( a , key=len )
pd concat ( ( df1 , df2 ) , axis=1 )
len ( d [ obj ] ) == 2 and isinstance ( d [ obj ] [ 0 ] , int ) and isinstance ( d [ obj ] [ 1 ] , int )
s = 'this is a verylong string toofor sure     '
subprocess check_output ( [ 'newscript sh ' ] )
pd dataframe ( d , columns= ( 'player ' , 'team ' , 'passer rating ' ) )
mrsync sync ( '/tmp/targets list ' , '/tmp/sourcedata ' , '/tmp/targetdata ' )
`` `` '' '' '' ''  join ( sorted ( a ) )
inspect getfile ( c __class__ )
`` `` '' { 0 : # b } '' '' ''  format ( my_int )
[ ( 'all ' , 3 ) , ( 'yeah ' , 2 ) , ( 'bye ' , 1 ) , ( 'awesome ' , 1 ) ]
sorted ( x ) == sorted ( y )
`` `` '' ( [ bcdfghjklmnpqrstvwxz ] [ aeiou ] ) + '' '' ''
`` `` '' ( [ aeiou ] + [ bcdfghjklmnpqrstvwxz ] + ) + '' '' ''
'\\\\ ? \\ ' + os path abspath ( file_name )
from_date = from_date replace ( hour=0 , minute=0 , second=0 , microsecond=0 )
[ [ 'bla ' , '-0 2 ' , 'blub ' ] , [ 'bla ' , '0 1 ' , 'blub ' ] , [ 'blaa ' , '0 3 ' , 'bli ' ] ]
perm = sorted ( range ( len ( foo ) ) , key=lambda x : foo [ x ] )
df = df rename ( columns= { 'oldname1 ' : 'newname1 ' , 'oldname2 ' : 'newname2 ' } )
print ( os path dirname ( os path abspath ( sys argv [ 0 ] ) ) )
fig savefig ( 'force png ' )
pd concat ( series_list , axis=1 )
sum ( [ x for x in list if isinstance ( x , ( int , float ) ) ] )
numpy where ( a < = 2 , a , 2 )
host = 'ldap : //10 172 0 79/dc=directory , dc=example , dc=com '
[ 'a ' , 'b ' , 'c ' , 'b ' , 'b ' , 'd ' , 'e ' ]
pd dataframe ( s )  t
ast literal_eval ( ' [ [ 0,0,0 ] , [ 0,0,1 ] , [ 1,1,0 ] ] ' )
logging warn ( 'a warning ' )
ax axhline ( 1 , color='black ' , lw=2 )
font = imagefont truetype ( 'sans-serif ttf ' , 16 )
df to_csv ( 'test csv ' )
re sub ( '^ [ ^a ] * ' , '' )
[ [ 4 ] , [ 5 , 5 ] , [ 6 , 6 , 6 ] ]
print ( ' ' join ( get_words ( [ '\u0baa ' , '\u0bae\u0bcd ' , '\u0b9f ' ] ) ) )
i = np indices ( b shape ) [ 0 ]
a [ -2 : ] + a [ : -2 ]
pd series ( [ 'm ' , '0 ' , 'm ' , '0 ' ] )  duplicated ( )
re findall ( pat , s )
res = [ ( x , my_dictionary [ x ] ) for x in my_list if x in my_dictionary ]
ast literal_eval ( ata split ( '= ' ) [ 1 ]  strip ( ) )
df = pd dataframe ( { 'a ' : [ 1 , 2 , 3 , 3 , 3 ] , 'b ' : [ 1 , 2 , none , 1 , none ] } )
int ( '0x000000001 ' , 16 )
d = dict ( [ ( y , x ) for x , y in enumerate ( t ) ] )
float ( str ( a [ 0 ] ) + '   ' + str ( a [ 1 ] ) )
`` `` '' '' '' ''  join ( [ str ( w ) for w in random sample ( item , len ( item ) ) ] )
x = dish query filter ( dish restaurants any ( name=name ) )  all ( )
conn = pymssql connect ( server='eddesktop ' , database='baseballdata ' )
driver implicitly_wait ( 10 )
dict ( ( d1 [ key ] , value ) for key , value in list ( d items ( ) ) )
df select ( '* ' , current_population )  show ( )
print ( 'hello ' )
return int ( input ( 'prompt > ' ) )
np tile ( b , ( 2 , 2 , 2 ) )
sudo ( 'rm tmp ' )
result = [ d [ key ] for key in d if key startswith ( query ) ]
print ( remove_prefix ( 'template extensions ' , 'template   ' ) )
zip ( *it )
conn = boto connect_s3 ( anon=true )
y = numpy unique ( x )
set ( x [ 0 ] for x in zip ( a , a [ 1 : ] ) if x [ 0 ] == x [ 1 ] )
df isin ( { 'a ' : [ 1 , 3 ] , 'b ' : [ 4 , 7 , 12 ] } )
sys exit ( 0 )   
[ td text for td in tree xpath ( '//td ' ) ]
df asfreq ( 'b ' )
root mainloop ( )                      
bigdata = pd concat ( [ data1 , data2 ] , ignore_index=true )
[ ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 2 , 6 ) , ( 3 , 4 ) , ( 3 , 5 ) , ( 3 , 6 ) ]
posting_date = models datetimefield ( auto_now_add=true )
fig savefig ( 'full_figure png ' )
d = dict ( ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) )
print ( os getenv ( 'appdata ' ) )
window attributes ( '-topmost ' , 0 )
app run ( )          
np kron ( a , np ones ( ( b , b ) , a dtype ) )
a = zip ( list ( range ( 10 ) ) , list ( range ( 10 ) ) )
plt show ( )                                                                                                                                                                                                                                                                                       
re sub ( 'url ( ( ? : # [ 0-9 ] + ) ? ) ' , 'new_url\\1 ' , test2 )
f write ( bytes ( ( i , ) ) )
[ [ 'a ' , 'b ' , 'c ' ] , [ 'd ' , 'e ' , 'f ' ] ]
df set_index ( 'a ' )  
server serve_forever ( )   
plt show ( )                                                                                                                                                                                                                                                                                        
print ( br open ( 'https : //github com/settings/emails ' )  read ( ) )
random choice ( mylist )
a [ i : j ]  sort ( )
newest = max ( glob iglob ( 'upload/* log ' ) , key=os path getctime )
some_action triggered connect ( functools partial ( some_callback , param1 , param2 ) )
json dump ( [ ] , f )
self asserttrue ( issubclass ( quizform , forms form ) )
session query ( shots )  filter_by ( event_id=event_id )  order_by ( asc ( shots user_id ) )
df set_index ( 'prod_code ' , inplace=true )
pd dataframe ( list ( map ( list , zip ( lst1 , lst2 , lst3 ) ) ) )
f write ( hex ( i ) )
sum ( set ( list ( range ( 0 , 1000 , 3 ) ) + list ( range ( 0 , 1000 , 5 ) ) ) )
decimal decimal ( str ( random random ( ) ) )
next ( g )
print ( random choice ( list ( open ( 'file txt ' ) ) ) )
ordereddict ( sorted ( list ( d items ( ) ) , key=d get ) )
return pandas series ( { 'iv ' : iv , 'vega ' : vega } )
ax set_xticklabels ( [ 'a ' , 'b ' , 'c ' ] )
[ 'camel ' , 'case ' , 'xyz ' ]
[ [ '00f7e0b88577106a ' , '2 ' , 'hdisk37 ' ] ]
plt show ( )                                                                                                                                                                                                                                                                                         
df1 merge ( df2 , how='left ' , left_on='column1 ' , right_on='columna ' )
locals ( ) [ 'myfunction ' ] ( )
p = [ tuple ( ' { 0 :  2f } ' format ( c ) for c in b ) for b in a ]
[ { 'play ' : 3 0 , 'uid ' : 'mno ' , 'id ' : 5 } , { 'play ' : 1 0 , 'uid ' : 'pqr ' , 'id ' : 6 } ]
sorted ( a , key=lambda x : b index ( x [ 0 ] ) )
function_that_needs_strings ( *my_list )
plt show ( )                                                                                                                                                                                                                                                                                          
{ 'keys ' : [ 'ctrl+shift+c ' ] , 'command ' : 'exec ' , 'args ' : { 'kill ' : true } }
plt show ( )                                                                                                                                                                                                                                                                                           
db commit ( )   
raise exception ( 'my error ! ' )
m = re findall ( ' < ! -- (  * ? ) -- > ' , string , re dotall )
ordereddict ( [ ( 'last_modified ' , 'undefined ' ) , ( 'id ' , '0 ' ) ] )
list = [ 'abc ' , 'def ' , 'ghi ' ]
plt xlim ( [ 0 , bins size ] )
a sum ( axis=0 , skipna=true )
browser get ( 'http : //stackoverflow com/ ' )
datetime datetime strptime ( s , ' % y- % m- % d ' )  date ( )
df groupby ( df index )  mean ( )
numpy argwhere ( numpy in1d ( a , b ) )
`` `` '' { 0 : *^80 } '' '' ''  format ( 'menu ' )
plt show ( )                                                                                                                                                                                                                                                                                            
datetime datetime utcfromtimestamp ( 1284286794 )
rows = { ( 0 ) : [ 0 , 2 , 5 ] , ( 1 ) : [ 1 ] , ( 2 ) : [ 7 ] , ( 3 ) : [ 4 ] , ( 6 ) : [ 2 , 5 ] }
df [ 'date ' ] = pd to_datetime ( df [ 'date ' ] )  
a nonzero ( )
print ( [ i for i in re split ( ' ( \\d+|\\w+ ) ' , 'x+13 5*10x-4e1 ' ) if i ] )
`` `` '' abcde '' '' ''  decode ( 'utf-8 ' )
a [ 'abc ' ] = [ 1 , 2 , 'bob ' ]
binrep = '' join ( bytetable [ x ] for x in open ( 'file ' , 'rb ' )  read ( ) )
fline = open ( 'myfile ' )  readline ( )  rstrip ( )
print ( str ( intp ) + '   ' + str ( fracp )  zfill ( prec ) )
[ 1 , 2 , 3 ] + np array ( [ 3 ] )
`` `` '' a string { 0 : > { 1 } } '' '' ''  format ( foo , width )
df [ 'startdate ' ] [ 2 ]
return bool ( value )
print ( 'there are { 0 : < 10 } students and { 1 : < 10 } teachers' format ( scnt , tcnt ) )
df stack ( 0 )  query ( 'panning == `` panning '' ' )  stack ( )  unstack ( [ -2 , -1 ] )
print ( a split ( '\\ ' ) )
os path join ( dir_name , '   ' join ( ( base_filename , filename_suffix ) ) )
print ( '\\u84b8\\u6c7d\\u5730' decode ( 'unicode-escape ' ) )
list ( [ x for x in list ( all_dicts values ( ) ) if x [ 'city ' ] == 'bar ' ] )
next ( re finditer ( '\\d+ $ ' , s ) )  group ( 0 )
result = [ ( a split ( '- ' , 1 ) [ 0 ] , b ) for a , b in sorted_x ]
print ( os path exists ( '/home/el/myfile txt ' ) )
max ( d , key=lambda x : d [ x ] [ 'c ' ] + d [ x ] [ 'h ' ] )
plt show ( )                                                                                                                                                                                                                                                                                             
map ( '' join , itertools product ( string ascii_lowercase , repeat=3 ) )
parentid = models foreignkey ( 'self ' )
time sleep ( 1 )         
file write ( 'whatever ' )
os environ [ 'display ' ]
set ( a )  intersection ( b ) 
urllib request urlopen ( 'http : //www google com ' , proxies=proxies )
urllib request install_opener ( opener ) 
return re findall ( '\\w+ ' , text )
plt show ( )                                                                                                                                                                                                                                                                                              
return response ( data , template_name='articles html ' )
[ [ word , len ( word ) , word upper ( ) ] for word in sent ]
df pivot ( 'val ' , 'day ' , 'val ' )  boxplot ( ax=ax )
logger setlevel ( logging debug )  
a = [ name for name in os listdir ( '   ' ) if name endswith ( ' txt ' ) ]
logging info ( 'sample message ' )
pdb set_trace ( )  
df [ 'id ' ] = df [ 'id ' ]  apply ( lambda x : ' { 0:0 > 15 } ' format ( x ) )
df loc [ df groupby ( 'user ' ) [ 'x ' ]  filter ( lambda x : x sum ( ) == 0 )  index ]
print ( ' % 02i , % 02i , % 05 3g ' % ( 3 , 4 , 5 66 ) )
np array ( [ [ int ( i [ 0 ] , 2 ) ] for i in a ] )
any ( x name == 't2 ' for x in l )
plt show ( )                                                                                                                                                                                                                                                                                               
split_curve ( np array ( [ 0 , 1 ] ) , np array ( [ 0 , 1 ] ) , 3 )
[ str ( item [ 0 ] ) for item in x if item and item [ 0 ] ]
test ( [ 'important ' , 'comment ' ] )
run ( 'uname -a ' )
df = df reset_index ( )   
env pdf ( 'document pdf ' , 'document tex ' )
plt savefig ( 'rasterized_transparency eps ' , dpi=200 )
yourmodel objects filter ( datetime_published=datetime ( 2008 , 3 , 27 ) )
print ( repr ( s encode ( 'ascii ' , errors='xmlcharrefreplace ' ) ) [ 2 : -1 ] )
products = product objects filter ( categories__pk=1 )  select_related ( )
re sub ( '\\s+ ( ? = [ ^ [ \\ ( ] *\\ ) ) | ( ( ? < =\\ ( ) \\s+ ) ' , '' , my_string )
[ [ 'cats ' , 'like ' , 'dogs ' , 'as ' , 'much ' , 'cats   ' ] , [ 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 6 ] ]
df = pd read_csv ( testdata , sep= ' ; ' )
`` `` '' τoρνoς '' '' ''  encode ( 'utf-8 ' )
grouped = data groupby ( [ 'date ' , 'name ' ] )
logging basicconfig ( level=logging info )
{ k : v for k , v in list ( points items ( ) ) if v [ 0 ] < 5 and v [ 1 ] < 5 }
d = set ( [ item for item in d if re match ( '^ [ a-za-z ] + $ ' , item ) ] )
f close ( )           
[ ( x , y , z ) for x , y , z in a if ( x + y ) ** z > 30 ]
json dumps ( c , default=lambda o : o __dict__ )
sck setproxy ( )
np set_printoptions ( formatter= { 'float ' : lambda x : ' { 0:0 3f } ' format ( x ) } )
tbl = doc xpath ( '//body/table [ 2 ] //tr [ position ( ) > 2 ] ' ) [ 0 ]
list ( bucket list ( '' , '/ ' ) )
origin pivot ( index='label ' , columns='type ' ) [ 'value ' ]
list ( range ( n , -1 , -1 ) ) is better
a = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 4 ] ]
l append ( input ( 'e ' + str ( i ) + '= ' ) )
print ( tuple ( my_list ) )
button setstylesheet ( 'qpushbutton { background-color : # a3c1da ; color : red ; } ' )
[ [ 3 , 4 , none , none , none ] ]
set ( aa items ( ) )  intersection ( set ( bb items ( ) ) )
rows = [ i for i in range ( 0 , len ( a ) ) if a [ i ] [ 0 ] == value ]
return int ( '' join ( [ ( ' % d ' % x ) for x in numbers ] ) )
return httpresponse ( status=500 )
re sub ( ' ( \\s+ ) ( a|an|and|the ) ( \\s+ ) ' , '\x01\x03 ' , text )
datetime strptime ( s , ' % a % b % d % y % h : % m : % s gmt % z ( % z ) ' )
re compile ( ' [ \\u0020-\\u00d7ff ] ' , re debug )
score objects values ( 'student ' )  annotate ( latest_date=max ( 'date ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                
df pivot ( 'symbol ' , 'timestamp ' )  stack ( )
plt show ( )                                                                                                                                                                                                                                                                                                 
[ ( x + i * y ) for i in range ( 1 , 10 ) ]
len ( df columns )
np savez ( tmp , *getarray [ :10 ] )
sys stdin read ( 1 )
re findall ( `` [ \\w ' ] +| [   , ! ? ; ] '' , `` hello , i 'm a string ! '' )
np hstack ( [ np arange ( i , j ) for i , j in zip ( start , stop ) ] )
app run ( threaded=true ) 
model _meta get_field ( 'g ' )  get_internal_type ( )
n = int ( input ( ) )  
a decode ( 'ascii ' )
[ x for x in l if x [ 0 ]  startswith ( 'img ' ) ]
y = pd dataframe ( y , columns=list ( 'y ' ) )
tree write ( 'filename xml ' ) 
a ravel ( ) [ : a shape [ 1 ] ** 2 : a shape [ 1 ] + 1 ]
print ( mycollapsedstring split ( ' ' ) )
[ [ 3 , 1 , 2 ] , [ 1 , 3 , 1 ] , [ 2 , 1 , 3 ] ]
[ ( x + y ) for x in l2 for y in l1 ] 
plt show ( )                                                                                                                                                                                                                                                                                                  
time sleep ( spacing )
plt show ( )                                                                                                                                                                                                                                                                                                   
[ i strip ( ) for i in l ]
np fromiter ( a , dtype=np float )
print ( '/' join ( new ) )
~np isnan ( a )  any ( 1 )
df query ( 'foo == 222 | bar == 444 ' )
xxs select ( '//link/text ( ) ' )  extract ( )
os system ( 'start ' + filename )
re sub ( ' [ \\w_ ] + ' , '' , 'a_b a_z \x80\xff \u0404 ' , flags=re unicode )
ast literal_eval ( `` { 'x':1 , 'y':2 } '' )
d [ 'set1 ' ] [ 'name ' ]
open ( filename , 'rb ' )
im save ( thumbnail_file , 'jpeg ' , quality=90 )
matplotlib pyplot show ( )  
most_expensive = car objects values ( 'company_unique ' )  annotate ( max ( 'price ' ) )
dict ( set intersection ( * ( set ( d items ( ) ) for d in dicts ) ) )
return super ( mymodel , self )  save ( *args , **kwargs )
lambda item : ( item [ 0 ]  rsplit ( none , 1 ) [ 0 ] , item [ 1 ] )
s * ( a + b ) == s * a + s * b
df = df [ ~ ( ( df [ 'group_a ' ] == 0 ) | ( df [ 'group_b ' ] == 0 ) ) ]
re findall ( '\\ [ ( ? : [ ^ ] [ ] * \\ [ [ ^ ] [ ] * \\ ] ) * [ ^ ] [ ] * \\ ] ' , s , re x )
some_func ( **mydict )
my_list = sorted ( list ( dict items ( ) ) , key=lambda x : x [ 1 ] )
c = a flatten ( )
print ( url ( 'blog ' , id=123 , qualified=true ) )
mymodel _meta get_field ( 'foo ' )  verbose_name
any ( i in a for i in b )
log start ( )
sum ( x * y for x , y in zip ( a , b ) ) 
[ r for r in ( f ( char ) for char in string ) if r is not none ]
os environ [ 'debussy ' ] = str ( myintvariable )
[ 0 , 1 , 0 , 1 , 2 , 5 , 6 , 7 , 8 , 9 ]
round ( random uniform ( min_time , max_time ) , 1 )
driver find_element_by_xpath ( '//span [ text ( ) = '' ' + cat2 + ' '' ] ' )  click ( )
print ( l [ 1 ] [ 'd ' ] )
df loc [ : , ( 'quantity ' ) ] *= -1
a ravel ( ) [ i : max ( 0 , a shape [ 1 ] - i ) * a shape [ 1 ] : a shape [ 1 ] + 1 ]
app run ( )           
[ '1-5 ' , '7 ' , '9-10 ' ]
print ( 'the number is { :  2 } ' format ( 1 0 / 3 0 ) )
`` `` '' `` '' ''  join ( l )
print ( [ i for i in range ( 5 ) ] )
datetime datetime utcnow ( )  strftime ( ' % a , % d % b % y % h : % m : % s gmt ' )
plt show ( )                                                                                                                                                                                                                                                                                                    
[ 'protein ' , 'green ' , 'squishy ' ]
df
plt show ( )                                                                                                                                                                                                                                                                                                     
all ( x in 'john michael marvulli' split ( ) for x in 'john marvulli' split ( ) )
logging basicconfig ( level=logging warning )
url ( '^ ( ? p < category > \\w ) / ( ? p < filters >   * ) / $ ' , 'myview ' ) ,
array = [ 'the ' , 'brown ' , 'fox ' , 'jumps ' , 'over ' , 'the ' , 'lazy ' , 'dog ' ]
plt show ( )                                                                                                                                                                                                                                                                                                      
return '' join ( 'hello ( { } ) ' format ( i ) for i in range ( 100 ) )
re sub ( '\\s+ ( a|an|and|the ) ( \\s+ ) ' , '\x02 ' , text )
print ( re sub ( ' (  + ) ( ? < =\\1 ) ' , ' ( \\g < 0 > ) ' , test ) )
print ( re sub ( ' (   ) ( ? < =\\1 ) ' , ' ( \\g < 0 > ) ' , test ) )
myobject all ( )  order ( '-time ' )  fetch ( limit=1 ) [ 0 ]
df_new [ df_new [ 'l_ext ' ]  isin ( [ 31 , 22 , 30 , 25 , 64 ] ) ]
plt show ( )                                                                                                                                                                                                                                                                                                       
itertools repeat ( 0 , 10 )
ax set_xlim ( [ 0 , 100 ] )
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d1 keys ( ) & d2 }
dct [ key ]  append ( some_value )
print ( 'j\xe2nis' encode ( 'utf-8 ' ) )
{ 'data ' : [ { 'id ' : 1 , 'name ' : 'test item 1 ' } , { 'id ' : 2 , 'name ' : 'test item 2 ' } ] }
all ( dict_obj get ( key ) is not none for key in properties_to_check_for )
df dropna ( subset= [ 'col2 ' , 'col3 ' ] )
[ ( [ k ] + [ ( sum ( x ) / float ( len ( x ) ) ) for x in zip ( *v ) ] ) for k , v in list ( d items ( ) ) ]
a = '1 ' + '2 ' + '3 ' + '4 ' + '5 '
[ ord ( c ) for c in s ]
[ int ( a [ i : i + 3 ] ) for i in range ( 0 , len ( a ) , 3 ) ]
os makedirs ( newpath )
results sort ( key=lambda r : r person birthdate )
response = urllib request urlopen ( req , json dumps ( data ) )
screen_height = root winfo_screenheight ( )
modelwithtextfield objects filter ( text_field__iregex='^   { 7 , } $ ' )
( 5 )  bit_length ( )
a , b = np sin ( x ) , np cos ( x )
sum ( counter values ( ) )
[ 3 , 2 , 1 , 0 , 3 , 2 , 3 ]
form save ( )
self response out write ( ' , ' join ( [ 'a ' , 'cool ' , 'test ' ] ) )
b = a [ : -1 ] + ( a [ -1 ] * 2 , )
sorted ( re findall ( 'g+ ' , 'fggfggggfggfg ' ) , key=len , reverse=true )
root xpath ( ' //table : table ' , namespaces=root nsmap )
run ( 'ls ' )
df to_csv ( 'pandasfile csv ' , float_format= ' %  3f ' )
df to_sql ( 'table ' , engine , chunksize=20000 )
db execute ( 'insert into json_col values % s ' , json_value )
call ( [ 'tar ' , 'xvf ' , path ] )
plt show ( )                                                                                                                                                                                                                                                                                                        
a = [ str ( wi ) for wi in wordids ]
logging info ( 'doing something ' )
print ( np unravel_index ( result argmax ( ) , result shape ) )
fcntl ioctl ( s fileno ( ) , siocsifflags , ifr )
dir ( )
re sub ( ' ( aa+b+ ) | ( abb+ ) ' , '' , data )
auth set_access_token ( access_token , access_token_secret )
u = user objects filter ( userjob__job__name='a ' )  filter ( userjob__job__name='c ' )
collection remove ( { '_id ' : objectid ( '4c2fea1d289c7d837e000000 ' ) } )
self redirect ( '/home view ' )
fig savefig ( 'label_group_bar_example png ' )
format ( 38 2551994324 , ' 32f ' )
zip ( * [ [ 5 , 7 ] , [ 6 , 9 ] , [ 7 , 4 ] ] )
df2 = df astype ( float )
print ( re sub ( ' [ ^\\w   ] ' , '' , string ) )
img save ( ) 
root mainloop ( )                       
s split ( ' : ' ) [ -2 : ]
d [ i [ 0 ] ] = int ( i [ 1 ] )
pdb set_trace ( )   
df withcolumn ( 'new_column ' , lit ( 10 ) )
foo [ : , ( 1 ) ]
datetime combine ( date today ( ) , time ( ) ) + timedelta ( hours=2 )
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]
match = re search ( ' (  * ? ) : ( [ ^- ] * ) - (   * ) ' , line )
root mainloop ( )                        
a = np array ( a , dtype=np float128 )
windows = [ { 'script ' : 'admin py ' , 'uac_info ' : 'requireadministrator ' } ]
re sub ( ' ( [ a-za-z0-9 ] ) \\s+ ( ? = [ a-za-z0-9 ] ) ' , '\\1* ' , '3 /a 5 ! b ' )
plot ( x [ 0 ] , y [ 0 ] , 'red ' , x [ 1 ] , y [ 1 ] , 'black ' )
[ [ random random ( ) for i in range ( n ) ] for j in range ( n ) ]
c = [ ( x | y ) for x , y in zip ( a , b ) ]
[ 'hello ' , 'w\xc3\xb6rld ' ]
`` `` '' , '' '' ''  join ( map ( str , sorted ( list ( range ( 1 , 100 , 4 ) ) ) + list ( range ( 2 , 100 , 4 ) ) ) )
return { 'ip_address ' : request meta [ 'remote_addr ' ] }
from functools import reduce [ reduce ( lambda x , y : x + y , i ) for i in a ]
conn request ( 'get ' , '/oauth/access_token ' , params )
ax axvline ( pd to_datetime ( '2015-11-01 ' ) , color='r ' , linestyle= ' -- ' , lw=2 )
df [ 'total ' ] = df sum ( axis=1 )
input ( )
print ( list ( enumerate ( words ) ) )
pdb set_trace ( )    
cnxn commit ( )
print ( os path join ( dirpath , filename ) )
cursor execute ( query , data )
root quit ( ) 
encoded_string = base64 b64encode ( image_file read ( ) )
[ ( i , j ) for i in range ( 10 ) for j in range ( i ) ]
browser = webdriver safari ( quiet=true )
df join ( df [ 'stats ' ]  apply ( json loads )  apply ( pd series ) )
results = [ t [ 1 ] for t in mylist if t [ 0 ] == 10 ]
image = models imagefield ( upload_to='images ' )
{ k : list ( v ) for k , v in df groupby ( 'address ' ) [ 'id ' ] }
print ( aware astimezone ( pacific )  strftime ( ' % a % b % d % x % z ' ) )
driver quit ( ) 
ascii = '' join ( chr ( x ) for x in range ( 128 ) )
fp write ( '\n' join ( ' % s % s ' % x for x in mylist ) )
open ( filename , 'r ' )
zip ( iter ( x items ( ) ) , iter ( y items ( ) ) )
heapq nlargest ( 6 , your_list , key=itemgetter ( 1 ) )
find = re compile ( '^ (  * ? ) \\   * ' )
dates dt strftime ( ' % y- % m- % d ' )
dict ( ( name , locals ( ) [ name ] ) for name in list_of_variable_names )
ax plot ( x , y , z , label='parametric curve ' )
[ '_' join ( k + v for k , v in zip ( d , v ) ) for v in product ( *list ( d values ( ) ) ) ]
df [ df type == 'su4 ' ]  gvw hist ( bins=50 )
match = re search ( ' [ ^a-za-z ] ( is ) [ ^a-za-z ] ' , mystr )
plt show ( )                                                                                                                                                                                                                                                                                                         
print ( '\n' join ( df apply ( func , axis=1 ) ) )
os path relpath ( subdir2 , subdir1 )
df [ 'str_name ' ]  str contains ( 'c ' )
[ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ]
link = driver find_element_by_link_text ( 'details ' )
sys stdout flush ( )        
df ix [ idx ]
re match ( ' [ ff ] [ oo ] { 2 } bar ' , 'foobar ' )
k strftime ( ' % h : % m : % s , % f ' )
[ x for x in mylist if x age == 30 ]
df query ( 'col str [ 0 ] not list ( `` tc '' ) ' )
myform = myform ( request post , request=request )
`` `` '' what '' ever '' '' ''
`` `` '' what '' ev'er '' '' ''
dct get ( key , 'ham ' )
setattr ( self , key , value )
msg get_payload ( )
print ( len ( '\xd0\xb9\xd1\x86\xd1\x8b' decode ( 'utf8 ' ) ) )
[ l [ i : :5 ] for i in range ( 5 ) ]
dict ( ( k , mimes [ k ] ) for k in mimes if mimes [ k ] == 'image/tiff ' )
operator itemgetter ( *b ) ( a )
df eval ( ' ( `` yes '' == `` yes '' ) ' )
int ( str ( x ) [ -3 : ] )
test = [ 0 , 1 , 2 , 3 , 2 , 2 , 3 ]
[ ( m start ( 0 ) , m end ( 0 ) ) for m in re finditer ( pattern , string ) ]
block3 [ : ] = np rot90 ( block3 copy ( ) , -1 )
any ( map ( eval , my_list ) )
df values t tolist ( )
[ i for i in range ( len ( s1 ) ) if s1 [ i ] ! = s2 [ i ] ]
[ list ( e ) for e in zip ( * [ fl [ i : :2 ] for i in range ( 2 ) ] ) ]
df date + pd to_timedelta ( -df date dt second % 60 , unit='s ' )
df to_csv ( 'pandasfile csv ' , float_format= ' % g ' )
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] 
[ 'abc ' , 'f ' ]
line = line decode ( 'utf-8 ' )
plt show ( )                                                                                                                                                                                                                                                                                                          
print ( ' ' join ( [ ' { : 3d } ' format ( x ) for x in rij3 ] ) )
img write_to_png ( 'svg png ' )
[ el for el in re split ( ' ( \\d+ ) ' , string ) if el strip ( ) ]
l [ 1 : ]
d1 = { 'yes ' : [ 1 , 2 , 3 ] , 'no ' : [ 4 ] }
y [ argrelmax ( y ) [ 0 ] ]
root mainloop ( )                         
cv2 waitkey ( )    
line1 = [ 'ld a8,0x8910 ' , 'mul a3 , a2,8 ' , 'shl a3 , a3,4 ' , 'add a3 , a3 , a8 ' ]
mylist = [ { 'a ' : 'a ' } , { 'b ' : 'b ' } , { 'c ' : 'c ' , 'cc ' : 'cc ' } ]
soup find_all ( 'li ' , { 'class ' : 'test ' } , recursive=false )
test [ 'label ' ] = test [ 'name ' ]  apply ( lambda x : my_function ( x ) )
url ( '^ $ ' , 'home views index ' ) ,
plt show ( )                                                                                                                                                                                                                                                                                                           
url ( '^delete/ ( ? p < pk > \\d+ ) ' , views eventdetail as_view ( ) , name='delete_event ' ) ,
np delete ( a , [ 1 , 3 ] , axis=1 )
my_list sort ( )
a [ ~ ( a == 5 )  any ( 1 ) ]
big_regex = re compile ( '\\b % s\\b ' % '\\b|\\b' join ( map ( re escape , words ) ) )
dict ( [ ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) ] )
df2 [ 'cumcount ' ] = df2 groupby ( 'val1 ' )  cumcount ( )
urllib request urlopen ( 'http : //www example com ' , timeout=5 )
procname setprocname ( 'my super name ' )
urllib parse urlencode ( { 'p ' : [ 1 , 2 , 3 ] } , doseq=true )
return re sub ( '\\w+ ' , '- ' , text )
cursor execute ( 'select * from % ( table ) s ' , { 'table ' : asis ( 'my_awesome_table ' ) } )
df [ 'date ' ]  map ( pd timestamp date )  unique ( )
a = '\\u2026 '
df [ 'date ' ] += np array ( -df [ 'date ' ]  dt second % 60 , dtype= ' < m8 [ s ] ' )
df pivot ( index='a ' , columns='b ' , values='c ' )
forminstance is_valid ( )
re sub ( ' [ _\\w ] + ' , ' ' , s )  upper ( )
[ 'uncorn ' , 'corny ' , 'unicycle ' ]
plt show ( )                                                                                                                                                                                                                                                                                                            
driver get ( 'https : //username : password @ somewebsite com/ ' )
socket gethostname ( )
field = models textfield ( help_text=mark_safe ( 'some < br > html ' ) )
np repeat ( a , [ 2 , 2 , 1 ] , axis=0 )
done = [ ( i , x ) for i in [ a , b , c , d ] ]
plt setp ( axs [ 1 ]  xaxis get_majorticklabels ( ) , rotation=70 )
text configure ( state='disabled ' )
array ( [ 0 , 100 , 100 , 100 , 4 , 5 , 100 , 100 , 100 , 9 ] )
file = open ( 'report pdf ' , 'wb ' )
api update_status ( ' @ < username > my status update ' , tweetid )
plt show ( )                                                                                                                                                                                                                                                                                                             
sum ( item get ( 'one ' , 0 ) for item in list ( tadas values ( ) ) )
unique_a = np unique ( b )  view ( a dtype )  reshape ( -1 , a shape [ 1 ] )
[ i for i , x in enumerate ( testlist ) if x == 1 ]
{ 'fields ' : ( 'first_name ' , 'last_name ' , 'address ' , 'city ' , 'state ' ) }
[ ( 'remaking ' , 'o ' ) , ( 'the ' , 'o ' ) , ( 'republican party ' , 'organization ' ) ]
dict ( ( ( 'a ' , 1 ) , ( 'b ' , 2 ) ) )
dict ( ( key_from_value ( value ) , value ) for value in values )
max ( lst , key=itemgetter ( 'score ' ) )
p start ( ) 
self submenu2 setvisible ( false )
print ( ' , ' join ( '-' join ( map ( str , ( g [ 0 ] , g [ -1 ] ) [ : len ( g ) ] ) ) for g in g ) )
array ( [ 0 , 0 , 2 , 1 , 0 , 1 ] )
open ( '\\\\ ? \\c : \\whatever\\test   ' , 'w ' )
f ( [ 3 , 2 , 5 , 4 ] , [ 2 , 3 , 2 ] )
df [ 'a ' ]  apply ( lambda x : x strftime ( ' % d % m % y ' ) )
return np vstack ( ( np cos ( theta ) , np sin ( theta ) ) )  t
' % 02d : % 02d : % 02d ' % ( hours , minutes , seconds )
pdb set_trace ( )     
`` `` '' `` '' ''  join ( str ( item ) for item in my_list )
equal ( [ 1 , 2 ] , a )  all ( axis=1 )  any ( )
list ( cycle ( [ [ 0 , 3 ] , [ 1 , 0 ] , [ 3 , 1 ] ] , 0 ) )
return [ v for k , v in self items ( ) if v == value ]
g = df groupby ( df index // 2 )
len ( set ( d values ( ) ) ) == 1
response content = response content replace ( 'bad ' , 'good ' )
ax set_xticklabels ( ( '1 ' , '2 ' , '3 ' , '4 ' ) )
min ( l , key=lambda theta : angular_distance ( theta , 1 ) )
all_lst = [ [ 2 , 7 , 10 ] , [ 0 , 4 , 6 ] , [ 1 , 3 , 11 ] ]
img seek ( 1 )
print ( [ a [ 'data ' ] for a in thedata ] )
print ( multidict ( [ 'a ' , 'b ' ] , [ 'a ' , 'b ' ] , [ '1 ' , '2 ' ] , { } ) )
itertools product ( mydict [ 'item1 ' ] , mydict [ 'item2 ' ] )
image64 = image open ( fluid64 + ' % 02d jpg ' % pic )
parser add_argument ( '-w ' , action='store_true ' )
print ( 'hello ' ) 
l = [ ( x * x ) for x in range ( 0 , 10 ) ]
sysconfig get_config_var ( 'have_libreadline ' )
ts plot ( marker='o ' )
re sub ( ' ( \\w ) ( [ a-z ] ) ' , '\\1 \\2 ' , 'wordwordwwwwwwword ' )
install packages ( 'png ' , '/home/user/anaconda3/lib/r/library ' )
plt show ( )                                                                                                                                                                                                                                                                                                              
plt show ( )                                                                                                                                                                                                                                                                                                               
ec2 create_instances ( imageid= ' < ami-image-id > ' , mincount=1 , maxcount=5 )
dictionary = dict ( [ ( list [ i ] , list [ i + 1 ] ) for i in range ( 0 , len ( list ) , 2 ) ] )
plt show ( )                                                                                                                                                                                                                                                                                                                
df applymap ( time isoformat )  apply ( pd to_timedelta )
df groupby ( by=df columns , axis=1 )  apply ( gf )
dfts = df set_index ( 'date_time ' )
plt xlabel ( 'dose ' )
raise valueerror ( `` unexpected gender ; expected 'm ' or 'f ' , got % s '' % gender )
ax = fig add_subplot ( 111 , projection='3d ' )
re sub ( '_ ' , '' , re sub ( pattern , '' , x ) )
s decode ( 'hex ' ) 
l = map ( lambda x : x * 2 , l )
dfs = pd concat ( [ pd read_csv ( 'data/ ' + f ) for f in files ] )
[ [ 'a ' , 'book2 ' , '10 ' ] , [ 'b ' , 'book1 ' , '7 ' ] , [ 'b ' , 'book2 ' , '5 ' ] ]
array ( [ [ 12 , 1 , 14 , 11 ] , [ 4 , 9 , 10 , 7 ] , [ 8 , 5 , 6 , 15 ] , [ 0 , 13 , 2 , 3 ] ] )
hex ( x ) [ 2 : ]  decode ( 'hex ' )
`` `` '' { :20s } '' '' ''  format ( mystring )
kwargs [ 'key_name ' ] = kwargs [ 'name ' ]
print ( ' { :10 4f } ' format ( x ) )
warnings simplefilter ( 'always ' )
new_list = [ seq [ 0 ] for seq in yourlist ]
re sub ( ' [ _\\w ] + ' , ' ' , s )  strip ( )  upper ( )
my_dictionary = { k : f ( v ) for k , v in list ( my_dictionary items ( ) ) }
df [ 'dateonly ' ] = df [ 'time ' ]  apply ( lambda x : x date ( ) )
df loc [ ( df == 1 )  any ( axis=1 ) , df columns map ( lambda x : x startswith ( 'foo ' ) ) ]
df [ 'measurements ' ] = df reset_index ( )  groupby ( 'trial ' )  cumcount ( )
{ 'image_bytes ' : { 'b64 ' : 'dgvzdao= ' } }
[ ' ( two ' , 'plus ' , 'three ) ' , 'plus ' , 'four ' ]
csv_pd query ( 'seta==1 & setb==0 & setc==0 ' )  groupby ( 'd ' )  count ( )
model query filter ( model columnname contains ( 'sub_string ' ) )
app run ( port=port )
map ( lambda x : x + 1 , l )
sys stdout flush ( )         
df_col_merged = pd concat ( [ df_a , df_b ] , axis=1 )
s [ : :-1 ]
ip iptype ( )
[ 'a ' , 'a ' , 'b ' , 'b ' , 'c ' , 'c ' , 'd ' , 'd ' , 'e ' , 'e ' ]
a [ list ( np ogrid [ [ slice ( x ) for x in a shape ] ] [ : -1 ] ) + [ i ] ]
plt show ( )                                                                                                                                                                                                                                                                                                                 
self layout addwidget ( self button )
img save ( sys argv [ 2 ] )
db session commit ( )   
open ( 'someunicodefilename\u03bb ' )
list ( chain from_iterable ( zip ( list_a , list_b ) ) )
df [ df genre str join ( ' ' )  str contains ( 'comedy ' ) ]
{ i : j for i , j in zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) }
int ( float ( '808 666666666667 ' ) )
series = pd series ( list ( range ( 20 ) ) , dtype=float )
plt show ( )                                                                                                                                                                                                                                                                                                                  
client set_options ( headers= { 'key2 ' : 'value ' } )
scrollb grid ( row=0 , column=1 , sticky='nsew ' )
plt xlabel ( ' $ x=\\frac { \\color { red } { red text } } { \\color { blue } { blue text } } $ ' )
results = cursor fetchall ( )
raise valueerror ( 'password must be longer than 6 characters ' )
m [ m mask ]
x [ np where ( x == 5 ) ]
print ( ' [ ' , ' , ' join ( repr ( i ) for i in list ) , ' ] ' )
int ( time mktime ( dt timetuple ( ) ) )
plt show ( )                                                                                                                                                                                                                                                                                                                   
b = df [ ( df [ 'a ' ] > 1 ) & ( df [ 'a ' ] < 5 ) ]
df ix [ df [ 'a ' ]  idxmax ( ) ]
weekdays = models positiveintegerfield ( choices=weekdays )
datetime datetime now ( pytz timezone ( 'us/central ' ) )  isoformat ( )
df [ 'column ' ] = df [ 'column ' ]  fillna ( value )
df ix [ '2014-01-01 ' : '2014-02-01 ' ]
clsmembers = inspect getmembers ( sys modules [ __name__ ] , inspect isclass )
pd dataframe ( _ , columns=data columns , index=data index [ :3 ] )
{ k : v for k , v in list ( mydict items ( ) ) if k > = 6 }
print ( '\xc3\xa9' decode ( 'cp1252 ' )  capitalize ( )  encode ( 'cp1252 ' ) )
{ 'instances ' : [ { 'image_bytes ' : { 'b64 ' : 'dgvzdao= ' } } ] }
struct unpack ( 'd ' , '4081637ef7d0424a' decode ( 'hex ' ) )
df drop_duplicates ( keep='last ' , subset= [ 'valuea ' , 'valueb ' ] )
methodb ( 'argvalue ' , **kwargs )
sys stderr = open ( 'c : \\err txt ' , 'w ' )
ax tick_params ( labeltop='off ' )
plt show ( )                                                                                                                                                                                                                                                                                                                    
plt show ( )                                                                                                                                                                                                                                                                                                                     
re search ( ' @   * ' , test_string )  group ( )
df [ 'date ' ] [ df index [ -1 ] ]
a [ ( a [ 'segment ' ] == 42 ) & ( a [ 'material ' ] == 5 ) ]
width , height = dc gettextextent ( 'text to measure ' )
~df [ 'col ' ]  str contains ( word )
re findall ( '\\ [ ( [ ^\\ ] ] * ) \\ ] ' , str )
app run ( )            
[ ( x * 2 if x % 2 == 0 else x ) for x in a_list ]
jsobj [ 'a ' ] [ 'b ' ] [ 'e ' ]  append ( dict ( f=var3 ) )
print ( most_common ( [ 'goose ' , 'duck ' , 'duck ' , 'goose ' ] ) )
x , y = np mgrid [ -5:5:21j , -5:5:21j ]
browser close ( )
return min ( d [ 'id ' ] for d in l if 'id ' in d )
[ ( x * 1 0 / y ) for x , y in zip ( a , b ) ]
`` `` '' - '' '' ''  join ( a + b for a , b in zip ( t , t ) )
pygame display update ( )  
root mainloop ( )                          
plt plot ( x , m * x + b , '- ' )
print ( myform cleaned_data get ( 'description ' ) )
root mainloop ( )                           
{ { ( variable | stringformat ) : ' 3f ' } }
`` `` '' { 0 :  6g } '' '' ''  format ( 3 539 )
x = [ x for x in b split ( ) if x in a split ( ) ]
print ( s encode ( 'utf-8 ' ) )
wx frame __init__ ( self , parent )
[ 0 ] * 3
sys exit ( 'not enough args ' )
'b ' in list ( foo __dict__ values ( ) )
multiprocessing cpu_count ( )
return render_to_response ( 'my_view html ' , context )
dt datetime utcfromtimestamp ( time mktime ( date timetuple ( ) ) )
df [ ( df [ 'col1 ' ] > = 1 ) & ( df [ 'col1 ' ] < = 1 ) ]
regex = re compile ( '\\b [ a-z ] { 3 , } \\b ' )
plt show ( )                                                                                                                                                                                                                                                                                                                      
[ l for l in paragraph3 ]
map ( self queryq put , self getqueries ( ) )
sorted ( s , key=lambda x : int ( x [ -1 ] ) )
ax axvline ( x , color='k ' , linestyle= ' -- ' )
[ ( g [ 0 ] , len ( list ( g [ 1 ] ) ) ) for g in itertools groupby ( [ 'a ' , 'a ' , 'b ' , 'b ' , 'b ' ] ) ]
res = re findall ( '- ( ? ! ( ? : aa|bb ) - ) ( [ ^- ] + ) ( ? =- ) ' , s )
map ( int , inputstring split ( ' , ' ) )
return '' join ( [ ( i if ord ( i ) < 128 else ' ' ) for i in text ] )
func ( 1 , *args , **kwargs )
float ( a )
re findall ( 'car|bus| [ a-z ] ' , s )
ax set_zlabel ( ' $ v ( \\phi ) $ ' )
list ( globals ( )  keys ( ) ) [ 2 ]
setup ( name='mypkg ' , version='0 0 1 ' , install_requires= [ 'pil ' ] )
ax plot ( 0 , 0 , '-r ' , label='temp ' )
[ ( 1 , 109 ) , ( 2 , 109 ) , ( 2 , 130 ) , ( 2 , 131 ) , ( 2 , 132 ) , ( 3 , 28 ) , ( 3 , 127 ) ]
d = dict fromkeys ( string ascii_lowercase , 0 )
root mainloop ( )                            
np where ( df values == rowmax [ : , ( none ) ] )
df [ df iloc [ 0 ]  replace ( '' , np nan )  dropna ( )  index ]
df [ 'dateonly ' ] = pd to_datetime ( df [ 'dateonly ' ] )
plt show ( )                                                                                                                                                                                                                                                                                                                       
next ( ( x for x in range ( 10 ) if x > 3 ) )
candidates = db relationship ( 'candidate ' , backref='post ' , lazy='dynamic ' )
( df [ cols ] > 0 )  apply ( lambda x : ' ' join ( x [ x ]  index ) , axis=1 )
cv2 cvtcolor ( img , cv2 color_bgr2rgb )
plt show ( )                                                                                                                                                                                                                                                                                                                        
result = [ ( x + dx , y + dy ) for x , y in points for dx , dy in offsets ]
array ( [ [ true , true ] , [ true , true ] ] , dtype=bool )
gca ( )  xaxis set_major_formatter ( funcformatter ( formatter ) )
graph = [ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 1 ) , ( 3 , 4 ) , ( 4 , 3 ) ]
print ( msg [ 'subject ' ] )
parser print_help ( )
df [ 'win1 ' ] = df [ 'win ' ]  map ( lambda x : 1 if x == 'yes ' else 0 )
list ( d keys ( ) )
print ( atype get ( 'foobar ' ) )
sock bind ( ( '' , udp_port ) )
min ( [ x [ : :-1 ] for x in a ] ) [ : :-1 ]
plt show ( )                                                                                                                                                                                                                                                                                                                         
logger error ( 'your log message here ' )
x = ( x + y ) % 48
[ ord ( x ) for x in letters ]
map ( float , i split ( ' ' , 2 ) [ :2 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                          
zip ( ( 1 , 2 ) , ( 40 , 2 ) , ( 9 , 80 ) )
r = dict ( ( v , k ) for k , v in d items ( ) )
self _bar ( )
`` `` '' foo bar hello world '' '' ''  split ( ' ' , 2 )
request json [ 'foo ' ]
np genfromtxt ( txt , delimiter='\t ' , dtype='str ' )
os path join ( dir_name , base_filename + '   ' + filename_suffix )
plt show ( )                                                                                                                                                                                                                                                                                                                           
file save ( os path join ( app config [ 'upload_folder ' ] , filename ) )
print ( foo __dict__ [ 'bar ' ] )
x = map ( int , '0,1,2' split ( ' , ' ) )
print ( re findall ( ' [ ^/| ( ] + ( ? : \\ ( [ ^ ) ] *\\ ) ) * ' , re sub ( '^qr/ (   * ) /i $ ' , '\\1 ' , str ) ) )
`` `` '' { d month } / { d day } / { d year } '' '' ''  format ( d=datetime datetime now ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                            
longest_strings = [ s for s in stringlist if len ( s ) == maxlength ]
json dumps ( urlparse parse_qs ( 'a=1 & b=2 ' ) )
find sub ( '\\1 ' , text )
json dump ( datetime now ( )  strftime ( ' % y- % m- % dt % h : % m : % s ' ) )
print ( [ ( x [ 0 ] , x [ -1 ] ) for x in l ] )
time sleep ( 1 )          
np einsum ( 'ij , jk- > ijk ' , a , b )
tables = cursor fetchall ( )
df loc [ ( df == 1 )  any ( axis=1 ) ]
newsampledata reindex ( newsampledata index repeat ( n ) )  reset_index ( drop=true )
plt show ( )                                                                                                                                                                                                                                                                                                                             
print ( '\n' join ( ' % s = % s ' % ( key , value ) for key , value in d items ( ) ) )
time sleep ( 1 )           
re findall ( ' ( ? = ( \\b\\w+\\s\\b\\w+ ) ) ' , st )
df join ( df groupby ( 'id ' )  concat apply ( list )  to_frame ( 'new ' ) , on='id ' )
a sort ( key=counter ( a )  get , reverse=true )
len ( os walk ( path )  next ( ) [ 2 ] )
df dtypes
results = sorted ( list ( results items ( ) ) , key=lambda x : x [ 1 ] , reverse=true )
first , rest = l [ 0 ] , l [ 1 : ]
print ( datetime datetime now ( )  strftime ( ' % y ' ) )
[ '' , ' ' , 'none ' , ' -- ' , '-   ' , '- ' , ' : ' ]
sorted ( ( sorted ( item ) for item in data ) , key=lambda x : ( len ( x ) , x ) )
driver get ( 'https : //google com/ ' )
sorted ( os listdir ( whatever_directory ) )
[ i for i in x if 60 < i < 70 ]
difflib sequencematcher ( none , a , b )  ratio ( )
setattr ( x , attr , 'magic ' )
lst sort ( ) 
print ( ' { 0:05d } ' format ( i ) )
root iconbitmap ( default='ardulan ico ' )
print ( dt strftime ( ' % a , % b % d , % y at % i : % m % p ' ) )
[ ( x [ i ] + x [ i + 1 ] ) for i in range ( 0 , len ( x ) , 2 ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                              
self grid_rowconfigure ( 1 , weight=1 )
msg [ 'subject ' ] = 'auto hella restart report ' + sys argv [ 1 ]
os path splitext ( 'name fasta ' ) [ 0 ]
plt show ( )                                                                                                                                                                                                                                                                                                                               
logging info ( 'hello ' )
sys exit ( app exec_ ( ) )  
json loads ( s )
print ( list ( itertools product ( [ 1 , 2 ] , repeat=3 ) ) )
driver quit ( )  
{ 'bi ' : 2 , 'double ' : 2 , 'duo ' : 2 , 'two ' : 2 }
plt show ( )                                                                                                                                                                                                                                                                                                                                
logging info ( 'doing something ' ) 
[ v [ 0 ] for v in sorted ( iter ( d items ( ) ) , key=lambda k_v : ( -k_v [ 1 ] , k_v [ 0 ] ) ) ]
fu_list = [ ( k , fus_d get ( k ) , fus_s get ( k ) ) for k in fus_d keys ( ) | fus_s ]
functools reduce ( np logical_or , ( x , y , z ) )
return httpresponse ( json dumps ( results ) , content_type='application/json ' )
d = { int ( k ) : [ int ( i ) for i in v ] for k , v in list ( d items ( ) ) }
w strip ( ' ,   ' )  lower ( )
re sub ( 'term|term1|term2 ' , '' , file_name )
f write ( 'new line\n ' )
re sub ( ' ( get ) ' , '\\1 @ ' , text )
r = requests get ( 'http : //stackoverflow com ' , cookies=cj )
cursor execute ( sql )
r = requests get ( 'https : //api github com ' , auth= ( 'user ' , 'pass ' ) ) 
df groupby ( [ 'year ' , 'bread ' ] ) [ 'amount ' ]  sum ( )  reset_index ( )
singleitem = next ( iter ( mylist ) )
sys exit ( )    
s = s [ : s index ( ' zip ' ) + 4 ]
str ( bytearray ( [ 17 , 24 , 121 , 1 , 12 , 222 , 34 , 76 ] ) )
df = pd read_csv ( 'file_path ' , sep='\t ' , error_bad_lines=false )
manager add_command ( 'gunicorn ' , gunicornserver ( ) )
[ [ ( k , x [ k ] , y [ k ] ) for k in x if x [ k ] ! = y [ k ] ] for x , y in pairs if x ! = y ]
linalg svd ( a [ : , : , ( 1 ) ] )
df sort ( [ 'date ' ] )
book objects annotate ( reader_count=count ( 'readers ' ) )  order_by ( '-reader_count ' )
a decode ( 'latin1 ' )
s += ' ( ' + ' , ' join ( map ( str , tup ) ) + ' ) '
max ( [ x for x in num_list if x < 3 ] )
print ( function ( ) )
super ( modelb , self )  save ( *args , **kwargs )
struct unpack ( ' < i ' , bytes + ( '\x00 ' if bytes [ 2 ] < '\x80 ' else '\xff ' ) )
from functools import reduce reduce ( lambda res , cur : { cur : res } , reversed ( 'foo/bar/baz' split ( '/ ' ) ) , 1 )
data = request files [ 'file ' ]  read ( )
print ( dict ( new_dict ) )
[ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]
super ( mymodel , self )  save ( *args , **kwargs )  
[ int ( s ) for s in str split ( ) if s isdigit ( ) ]
np moveaxis ( np indices ( ( 4 , 5 ) ) , 0 , -1 )
pytz timezone ( 'europe/helsinki ' )  localize ( naive )
list ( { e id : e for e in somelist }  values ( ) )
rdd2 = sc parallelize ( [ ( 'foo ' , 4 ) , ( 'bar ' , 5 ) , ( 'bar ' , 6 ) ] )
print ( ' { 0:06x } ' format ( 123 ) )
[ [ 1 , 2 , 3 ] , [ 'a ' , 'b ' , 'c ' ] ]
plt show ( )                                                                                                                                                                                                                                                                                                                                 
time sleep ( 0 1 ) 
max ( a , key=a get )
a [ i , j ] = x
app run ( )             
l = re compile ( ' ( \\s ) ' )  split ( s )
l = re compile ( '\\s ' )  split ( s )
datetime datetime ( *struct unpack ( ' > hbbbbbb ' , s ) )
model fit ( [ x ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                  
[ dict ( zip ( keys , a ) ) for a in zip ( values [ : :2 ] , values [ 1 : :2 ] ) ]
plt title ( 'experimental data ' )
df groupby ( 'id ' , as_index=false )  head ( 2 )
[ item for sublist in l for item in sublist ]
[ item for sublist in list_of_lists for item in sublist if valid ( item ) ]
template_dirs = os path join ( base_dir , 'cms ' , 'templates ' , 'allauth ' ) ,
plt show ( )                                                                                                                                                                                                                                                                                                                                   
map ( int , x split ( ' ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                    
array ( [ ( 'a ' , 0 ) , ( 'b ' , 1 ) ] , dtype= [ ( 'keys ' , '|s1 ' ) , ( 'data ' , ' < i8 ' ) ] )
plt setp ( plt xticks ( ) [ 1 ] , rotation=30 , ha='right ' )
`` `` '' { : 3d } '' '' ''  format ( x )
my_instance = myclass ( name='new name ' )
thestring = thestring decode ( 'utf8 ' )
df index 
tuple ( map ( int , inputstring split ( ' , ' ) ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                     
f write ( doc render ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                      
management call_command ( 'syncdb ' , interactive=false )
session exec_command ( 'cd /home/harperville/my_scripts/ ' )
fields = tuple ( field strip ( ) for field in line split ( ' , ' ) )
date = datetime strptime ( match group ( ) , ' % y- % m- % d ' )  date ( )
shutil copyfileobj ( from_file , to_file )
a [ ( np arange ( a shape [ 0 ] ) [ : , ( none ) ] ) , : , ( b2 ) ]  transpose ( 0 , 2 , 1 )
[ x for x in d if x not in ( 'domain source ' , 'recommend suppress ' ) ]
lambda : setattr ( self , 'spam ' , 'ouch ' )
main ( )
my_dict get ( 'corse ' ) and my_dict update ( { 'corse ' : 'my definition ' } )
print ( list ( ranges ( [ 0 , 1 , 2 , 3 , 4 , 7 , 8 , 9 , 11 ] ) ) )
test objects filter ( actions__contains= [ { 'fixed_key_3 ' : [ { 'key1 ' : 'foo2 ' } ] } ] )
hashlib sha1 ( s encode ( 'utf-8 ' ) )
df apply ( lambda x : sum ( x isnull ( )  values ) , axis=1 )
{ k : v for k , v in points items ( ) if v [ 0 ] < 5 and v [ 1 ] < 5 }
return myfunc ( lambda a , b : iadd ( a , b ) )
any ( item startswith ( 'qwerty ' ) for item in mylist )
pl show ( )
self changeb ( )
main ( ) 
return s getsockname ( ) [ 0 ]
array ( [ 4 , 5 , 5 , 6 , 6 , 6 ] )
re sub ( 'foo ' , 'bar ' , s , 1 )
from functools import reduce reduce ( lambda x , y : x if len ( x ) < len ( y ) else y , l )
odeint ( dx_dt , [ 1 , 2 ] , np linspace ( 0 , 1 , 5 ) )
os killpg ( self process pid , signal sigterm )
ax set_zlabel ( 'z ' ) 
`` `` '' words ! ?   , ; : '' '' ''  rstrip ( ' ? : !   , ; ' )
' % s % % s % s ' % ( 'foo ' , 'bar ' )
`` `` '' & `` '' ''  join ( [ '_' join ( inp [ :2 ] ) , '_' join ( inp [ 2 : ] ) ] )
fh close ( )
[ '' join ( i ) for i in itertools product ( 'ab ' , repeat=4 ) ]
qs = user objects filter ( groups__name__in= [ 'foo ' , 'bar ' ] )
list ( range ( 0 , 100 , 5 ) )
np kron ( a , np ones ( ( n , n ) ) )
print ( string replace ( '\\n ' , '\n ' ) )
str2bool ( 'no ' )
str2bool ( 'stuff ' )
str2bool ( '1 ' )
str2bool ( '0 ' )
[ x for x in foo ]
plt show ( )                                                                                                                                                                                                                                                                                                                                       
[ x for x , y , z in g ]
url ( '^api/student/ ( ? p < pk >  * ) / ( ? p < pk2 >   * ) / $ ' , api studentlist as_view ( ) ) ,
f write ( ' % -40s % 6s % 10s % 2s\n ' % ( filename , type , size , modified ) )
dt = dt replace ( tzinfo=timezone ( 'europe/amsterdam ' ) )
df1 = df1 sort ( [ 'a ' , 'b ' ] , ascending= [ true , false ] )
print ( list_duplicates ( [ 1 , 2 , 3 , 2 , 1 , 5 , 6 , 5 , 5 , 5 ] ) )
b = np delete ( a , i , axis=0 )
p = multiprocessing process ( target=write , args= ( 'hello ' , ) )
print ( doc xpath ( '//element [ text ( ) = '' a '' ] ' ) [ 0 ]  tag )
root mainloop ( )                             
my_tree [ 'a ' ] [ 'b ' ] [ 'c ' ] [ 'd ' ] [ 'e ' ] = 'whatever '
my_list = [ col for row in matrix for col in row ]
print ( re findall ( '\\bv\\w+ ' , thesentence ) )
cursor execute ( 'create table components ( rowid int , name varchar ( 50 ) ) ' )
print ( soup find_all ( 'a ' , { 'class ' : 'black ' } ) )
ax set_xlabel ( 'x ' )
list ( set ( dict_a values ( ) ) & set ( dict_b values ( ) ) )
a = datetime date today ( )  year
map ( list , list ( totals items ( ) ) )
hashlib md5 ( 'fred' encode ( 'utf ' ) )  hexdigest ( )
np savetxt ( 'output dat ' , output , delimiter= ' , ' )
np argmax ( np max ( x , axis=1 ) )
array ( [ 0 49482768 , 0 53013301 , 0 4485054 , 0 49516017 , 0 47034123 ] )
reader = csv reader ( open ( 'filename ' ) , delimiter='\t ' )
cursor close ( )  
`` `` '' 3 '' '' ''  lower ( )
my_list = list ( set ( my_list ) )
{ { ( test | getkey ) : 'this works ' } }
plt show ( )                                                                                                                                                                                                                                                                                                                                        
`` `` '' { : , } '' '' ''  format ( x )  replace ( ' , ' , '   ' )
mylist = [ int ( x ) for x in '3 ,2 ,6 ' split ( ' , ' ) ]
isinstance ( var , ( int , float , complex ) )
print ( '2 + ' + str ( integer ) + ' = ' + str ( rslt ) )
plt errorbar ( x , y , yerr=err , fmt='-o ' , markersize=2 , color='k ' , label='size 2 ' )
f close ( )            
participants = models manytomanyfield ( user , related_name='conversations ' )
subprocess call ( [ 'chmod ' , '0444 ' , 'path ' ] )
student objects filter ( studentgroup__level__pk=1 )
glob glob ( ' ?  gif ' )
self path = configparser get ( 'your-config ' , 'path1 ' )
print ( b [ 'indices ' ] [ 'client_ind_2 ' ] [ 'index ' ] )
self window keypad ( 1 )
sys stdin = open ( 'simulatedinput txt ' , 'r ' )
sayhello ( 'john' lower ( ) )
a flatten ( )
files sort ( key=lambda x : os path getmtime ( x ) )
df [ df columns [ 2:5 ] ]
farm objects filter ( tree__in=treequeryset )
team = models foreignkey ( 'team ' )
int ( '11111111 ' , 2 )
ax1 ticklabel_format ( style='sci ' , scilimits= ( 0 , 0 ) , axis='y ' )
`` `` '' '' '' ''  decode ( 'utf8 ' )
bin ( '10 ' )
t start ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                         
re split ( '\\s+ ' , line )
imap4 select ( ' [ gmail ] /starred ' )
df replace ( 0 , np nan )  bfill ( 1 )  iloc [ : , ( 0 ) ]
root mainloop ( )                              
os listdir ( '\\networkshares\\folder1\\folder2\\folder3 ' )
cherrypy quickstart ( root ( ) )
df groupby ( 'a ' ) [ 'a ' ]  transform ( 'count ' )
p terminate ( ) 
df date = df date astype ( 'datetime64 ' )
return super ( mylistview , self )  dispatch ( request , *args , **kwargs )
l [ :3 ] + l [ -3 : ] 
set ( [ 1 ] )
len ( response xpath ( '//div [ @ class= '' entry-content '' ] /p ' ) )
bytearray ( '\xff ' )
plt draw ( )     
[ 'foo ' , 'bar ' , 'baz ' ]  index ( 'bar ' )
sys stdout flush ( )          
print ( calendar monthrange ( now year , now month ) [ 1 ] )
client transport write ( message )
cell value = statn
return [ row [ i ] for row in matrix ]
[ ( a - int ( a ) ) for a in l ]
cbar ax tick_params ( labelsize=10 )
vulnerability = models foreignkey ( vuln )
[ [ [ ( 0 ) for _ in range ( n ) ] for _ in range ( n ) ] for _ in range ( n ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                          
[ 'aaa ' , 'bbb ' , 'ccc ' ]
`` `` '' \\t\\n\\v\\r '' '' ''  decode ( 'string-escape ' )
a = np squeeze ( np asarray ( m ) )
root mainloop ( )                               
`` `` '' : '' '' ''  join ( x encode ( 'hex ' ) for x in 'hello world ! ' )
pd series ( [ np array ( e ) [ ~np isnan ( e ) ] for e in x values ] )
curses endwin ( )
user objects filter ( q ( income__gte=5000 ) | q ( income__isnull=true ) )
mediaitem objects all ( )  order_by ( 'upload_date ' )  select_subclasses ( )
df set_index ( 'key ' , inplace=true )
df groupby ( 'rounded_length ' )  mean ( )  force
np random uniform ( 5 , 10 , [ 2 , 3 ] )
sorted ( itemized_action_list , key=attrgetter ( 'priority ' ) )
numpy savetxt ( 'output dat ' , my_array reshape ( ( 1 , 8 ) ) , fmt= ' % f % i ' * 4 )
random choice ( string letters )
plt savefig ( '/tmp/test png ' , dpi=200 )
return [ dict ( zip ( keys , values [ i : i + n ] ) ) for i in range ( 0 , len ( values ) , n ) ]
`` `` '' { 0:16b } '' '' ''  format ( 4660 )
`` `` '' { 0:016b } '' '' ''  format ( 4660 )
nested = { a : [ ( 1 , 'a ' ) , ( 2 , 'b ' ) ] , b : [ ( 3 , 'c ' ) , ( 4 , 'd ' ) ] }
( local_dt - datetime datetime utcfromtimestamp ( timestamp ) )  seconds
res = np zeros ( ( arr shape [ 0 ] , m ) , arr dtype )
convolve_many ( [ [ 0 6 , 0 3 , 0 1 ] , [ 0 5 , 0 4 , 0 1 ] , [ 0 3 , 0 7 ] , [ 1 0 ] ] )
np where ( np in1d ( values , searchvals ) )
logger setlevel ( logging debug )   
dictionary = dict ( zip ( list [ 0 : :2 ] , list [ 1 : :2 ] ) )
plt subplot ( ' { 0 } { 1 } { 2 } ' format ( 1 , totfigs , i + 1 ) )
data = { tuple ( sorted ( item ) ) for item in lst }
url ( '^ $ ' , 'recipes views index ' ) ,
list1 = [ i for i in range ( n ) ]
df apply ( lambda x : np all ( x == 0 ) )
df plot ( x=x , y=y , style= '   ' )
sns tsplot ( melted , time=0 , unit='variable ' , value='value ' )
{ v [ 0 ] : data [ v [ 0 ] ] for v in list ( by_ip values ( ) ) }
sys stdout flush ( )           
kid objects filter ( id__in=toy_owners )
return os stat ( path )  st_birthtime
data = [ [ int ( v ) for v in line split ( ) ] for line in lines ]
[ list ( l [ 0 ] ) for l in mylist ]
myset = set ( itertools product ( list ( range ( 1 , 51 ) ) , repeat=2 ) )
json dumps ( s )
sum ( v [ 0 ] for v in list ( d values ( ) ) ) / float ( len ( d ) )
datetime datetime combine ( dateobject , datetime time min )
s translate ( none , ' , !   ; ' )
numpy array ( list ( c ) )
pattern = re compile ( '|' join ( list ( d keys ( ) ) ) )
[ ind for ind , sub in enumerate ( totalist ) if sub [ :2 ] == [ 'a ' , 'b ' ] ]
hash ( frozenset ( list ( my_dict items ( ) ) ) )
gems = pygame sprite group ( )
original [ : :-1 ]
driver = webdriver chrome ( executable_path='/usr/local/bin/chromedriver ' )
make_trie ( 'foo ' , 'bar ' , 'baz ' , 'barz ' )
root mainloop ( )                                
users objects filter ( id=comment user_id )  values_list ( 'name ' , 'email ' )
sum ( [ ( x * y ) for x , y in zip ( *lists ) ] )
result = np zeros ( b shape )
df loc [ df xs ( 'panning ' , axis=1 , level=1 )  eq ( 'panning ' )  any ( 1 ) ]
c = [ tuple ( x + b [ i ] for i , x in enumerate ( y ) ) for y in a ]
keys , values = zip ( *list ( dictionary items ( ) ) )
df write format ( 'com databricks spark csv ' )  save ( 'mycsv csv ' )
os listdir ( '\\\\server\x0colder\\subfolder\\etc ' )
db commit ( )    
dict ( [ i for i in iter ( d items ( ) ) if i [ 0 ] in validkeys ] )
sys exit ( app exec_ ( ) )   
plt colorbar ( ) 
{ 'a ' : '0x1 ' , 'c ' : '0x3 ' , 'b ' : 2 0 }
bin ( 10 )
words = set ( open ( 'filename txt ' )  read ( )  split ( ) )
rf append_fields ( arr , 'vel ' , np arange ( 3 ) , usemask=false )
s split ( ) 
blank_image = image new ( 'rgb ' , ( 800 , 600 ) )
df [ '1/2 id ' ] = map ( lambda x : x upper ( ) , df [ '1/2 id ' ] )
z = dict ( list ( x items ( ) ) + list ( y items ( ) ) )
{ 'arun ' : 'maya ' , 'bill ' : 'samantha ' , 'jack ' : 'ilena ' , 'hari ' : 'aradhana ' }
re findall ( ' < wx\\  ( ? :  * ? ) > > ' , i )
f = lambda x : '' if x is none else x
soup = beautifulsoup ( response read ( )  decode ( 'utf-8 ' , 'ignore ' ) )
g = df groupby ( 'column_name ' )
f write ( 'huzza ' )
dict ( ( itm split ( '= ' ) [ 0 ] , itm split ( '= ' ) [ 1 ] ) for itm in qstring split ( ' & ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                           
plt show ( )                                                                                                                                                                                                                                                                                                                                            
print ( sys path ) 
wb save ( 'out xlsx ' )
df [ 'column ' ] = df apply ( lambda x : df columns [ x argmax ( ) ] , axis=1 )
sys stdout flush ( )            
somelist = [ x for x in somelist if not determine ( x ) ] 
plt show ( )                                                                                                                                                                                                                                                                                                                                             
df2 reset_index ( )
ax set_xlabel ( 'hours ' )
np array ( g )  astype ( np float64 )
len ( df index )
plt show ( )                                                                                                                                                                                                                                                                                                                                              
dataframe tz_localize ( 'utc ' , level=0 )
df shift ( 365 )  rolling ( 10 )  b mean ( )
self image save ( 'test jpg ' , contentfile ( content ) , save=false )
cursor = cnx cursor ( buffered=true )
f write ( s encode ( 'utf8 ' ) )
obj = json loads ( string )
ax1 ticklabel_format ( axis='y ' , style='sci ' , scilimits= ( -2 , 2 ) )
np corrcoef ( x [ 0 : len ( x ) - 1 ] , x [ 1 : ] ) [ 0 ] [ 1 ]
print ( '\n' join ( formatted ) )
[ i for i in records if i [ 'price ' ] ]
rows sort ( key=itemgetter ( 1 ) , reverse=true )
sorted ( lst , key=lambda x : ( c [ x ] , x ) , reverse=true )
`` `` '' '' '' ''  join ( char if char isalpha ( ) else ' ' for char in test )  split ( )
pd dataframe ( s )  t 
print ( soup find ( 'span ' , { 'class ' : 'thisclass ' } ) [ 'title ' ] )
[ i for i in range ( 10 ) if i % 2 == 0 ]
stats kstest ( np random normal ( 0 , 1 , 10000 ) , 'norm ' )
__init__ py    
ax set_ylabel ( 'tpr or sensitivity ' )
srng seed ( 902340 )
sys stdout buffer write ( 'some binary data ' )
names = [ line strip ( ) for line in open ( 'names txt ' ) ]
background_image = tk photoimage ( file='c : /desktop/logo gif ' )
t start ( ) 
np minimum accumulate ( [ np arange ( 3 ) , np arange ( 2 , -1 , -1 ) , np ones ( ( 3 , ) ) ] )
os path relpath ( '/images html ' , os path dirname ( '/faq/index html ' ) )
zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] )
entries [ 'extensions ' ]  get ( 'telephone ' )
json dumps ( data )  replace ( ' '' ' , '' )
df grouby ( 'grp ' )  apply ( ols_res , xcols= [ 'x1 ' , 'x2 ' ] , ycol='y ' )
plt gca ( )  xaxis set_major_formatter ( fixedformatter ( ll ) )
print ( souphandler findall ( 'div ' , id=re compile ( '^post- ' ) ) )
thread exit ( )
{ 'func1 ' : func1 , 'func2 ' : func2 , 'func3 ' : func3 }  get ( choice ) ( )
super ( model , self )  save ( *args , **kwargs )
d = { k : frozenset ( v ) for k , v in list ( d items ( ) ) }
root mainloop ( )                                 
sorted ( data , key=itemgetter ( 1 ) )
urllib request urlretrieve ( 'http : //stackoverflow com ' , filename )
df [ 'col_name ' ] = df [ 'col_name ' ]  astype ( 'category ' )
locale setlocale ( locale lc_all , 'de_de utf-8 ' )
requests get ( 'https : //www reporo com/ ' , verify='chain pem ' )
`` `` '' `` '' ''  join ( [ i for i in word_list if i not in remove_list ] )
print ( ' , ' join ( row ) )
print ( json dumps ( data , indent=2 , sort_keys=true ) )
get_format_vars ( 'hello % ( foo ) s there % ( bar ) s ' )
middle_name = models charfield ( max_length=30 , null=true , blank=true )
df [ df [ 'a ' ]  str contains ( 'hello ' ) ]
reactor run ( ) 
df head ( 3 )
l = [ l [ i ] for i in ndx ]
print ( ssl get_server_certificate ( ( 'server test com ' , 443 ) ) )
time strftime ( ' % x % x % z ' )
variable = input ( 'input something ! : ' )
is_pangram = lambda s : not set ( 'abcdefghijklmnopqrstuvwxyz ' ) - set ( s lower ( ) )
`` `` '' { : , } '' '' ''  format ( 12345678 46 )
yourdate = dateutil parser parse ( datestring )
[ 1 , 2 ]
pd concat ( [ rng0 , rng1 , rng2 , rng3 , rng4 , rng5 ] , axis=1 )  t plot ( )
[ ( 'okay ' , 5 ) , ( 'bla ' , 5 ) ]
cv2 waitkey ( 0 )  
x = np maximum ( x , y )
list ( flatten ( elements ) )
df [ [ 'b ' , 'c ' ] ]  iloc [ [ 2 , 4 ] ]  mean ( axis=0 )
conn = mysqldb connect ( charset='utf8 ' , init_command='set names utf8 ' )
df set_index ( [ 'row_id ' , 'game_id ' ] )  unstack ( level=0 )  sortlevel ( level=1 , axis=1 )
[ '235/40/17 ' , '285/30/18 ' , '315/25/19 ' , '275/30/19 ' , '285/30/19 ' ]
l = [ map ( int , line split ( ' , ' ) ) for line in f if line strip ( ) ! = '' ]
logging getlogger ( 'requests ' )  setlevel ( logging warning )
mylen ( '\xe1\xe9\xed\xf3\xfa ' )
self __class__ __name__
time sleep ( 1 )            
f close ( )             
self _socket setsockopt ( socket sol_socket , socket so_reuseaddr , 1 )
sns set ( font='verdana ' )
word [ 1 : ]
txt replace ( '\n ' , '\r\n ' )
df drop ( df columns [ df columns str match ( 'chair ' ) ] , axis=1 )
re findall ( '\\w+= ''  * ? `` ' , comp )
my_handler = logging streamhandler ( sys stdout )
open ( filename , mode='rb ' , compresslevel=9 )
print ( date today ( )  year + 1 )
df apply ( lambda x : np sqrt ( x dot ( x ) ) , axis=1 )
super ( otherclass , self )  __init__ ( )
p_value = pd dataframe ( np zeros ( ( 2 , 2 ) , dtype='float ' ) , columns=df columns )
print ( str ( 2 ) + str ( 1 ) )
`` `` '' '' '' ''  join ( ' % 02x ' % i for i in input )
designs = design objects filter ( author__user__profile__screenname__icontains=w )
d = dict ( ( y , x ) for x , y in enumerate ( t ) )
zip ( *s ) [ 0 ]
np array ( [ 'a ' , 'b ' ] ) ! = 0
url ( '^api/ ' , include ( 'api tasks urls ' ) , name='my-api-root ' ) ,
list ( chain from_iterable ( list_of_lists ) )
myapp ( )  run ( )
return df groupby ( 'a ' )  apply ( my_func )
server serve_forever ( )    
datetime datetime now ( ) 
r = requests post ( 'http : //httpbin org/post ' , files= { 'report xls ' : open ( 'report xls ' , 'rb ' ) } )
np concatenate ( ( a , val ) )
`` `` '' , '' '' ''  join ( str ( item ) for innerlist in outerlist for item in innerlist )
a resample ( '15s ' , loffset='5s ' )
x [ 'result ' ]  fillna ( false , inplace=true )
print ( soup find ( 'span ' , { 'class ' : 'username ' } )  text )
re match ( ' * ? ( [ 0-9 ] + ) $ ' , s )  group ( 1 )
print ( [ '' join ( p ) for i in range ( 1 , len ( s ) + 1 ) for p in permutations ( s , i ) ] )
( ' %  2f ' % 1 2333333 )  replace ( '   ' , ' , ' )
map ( partial ( f , x ) , y ) == map ( f , [ x ] * len ( y ) , y )
print ( data split ( '\n ' ) )
handles , labels = ax get_legend_handles_labels ( )
a , b , c = ( int ( i ) for i in line split ( ) )
y = x - x mean ( axis=1 )  reshape ( -1 , 1 )
fig savefig ( 'plotcircles2 png ' )
f close ( )              
pd read_hdf ( 'test h5 ' , 'df ' , where='a= [ `` foo '' , '' bar '' ] & b=1 ' )
data_xls to_csv ( 'csvfile csv ' , encoding='utf-8 ' , index=false )
os path isdir ( 'bob ' )
sys path insert ( 1 , os path dirname ( os path realpath ( __file__ ) ) )
print ( ' , ' join ( '-' join ( map ( str , ( g [ 0 ] [ 1 ] , g [ -1 ] [ 1 ] ) [ : len ( g ) ] ) ) for g in g ) )
bool ( re match ( 'el ' , 'hello ' , re i ) )
sys stdout write ( '\x1b [ d \x1b [ d ' )
fts rules [ 1 ]  create_filter ( 'name_1 ' , ' > = ' , '0 ' )
self assertequal ( iline , 'it is a test ! ' )
`` `` '' '' '' ''  join ( [ a [ : :-1 ] [ i : i + 2 ] [ : :-1 ] for i in range ( 0 , len ( a ) , 2 ) ] )
df pivot_table ( 'baz ' , [ 'foo ' , 'extra ' ] , 'bar ' )  reset_index ( )
map ( list , zip ( charlist , numlist ) )
time sleep ( 5 )   
[ 'a ' , 'b ' , 'c ' , 'x ' , 'd ' , 'e ' , 'f ' , 'x ' , 'g ' , 'h ' , 'i ' , 'x ' , 'j ' ]
set ( [ os path split ( x ) [ 0 ] for x in zf namelist ( ) if '/ ' in x ] )
re split ( ' [ ^a-za-z ] | ' , 'are you 9 years old ? ' ) [ 0 ]  strip ( )
np hstack ( b )
item_pipelines = [ 'myproject pipelines somepipeline ' ]
test [ numpy logical_or reduce ( [ ( test [ : , ( 1 ) ] == x ) for x in wanted ] ) ]
results = [ s for s in strings if any ( m in s for m in matchers ) ]
cookie = flask request cookies get ( 'my_cookie ' )
s sendmail ( fromaddr , toaddr + ccaddr , msg as_string ( ) )
ndb stringproperty ( repeated=true )
multi_level_dict ( 'ab ' , 'ab ' , '12 ' )
reverse_lst = lst [ : :-1 ]
map ( int , mystring split ( ' , ' ) )
ax1 set_xticklabels ( [ ] )
seats = seat query filter ( seat invite_id ! = none )  all ( )
df [ 'match ' ] = df [ 'col1 ' ]  diff ( )  eq ( 0 )
del list [ -n : ]
arr = [ [ ] , [ ] ]
str join ( '\n ' , map ( str , result ) )
mystring split ( '_ ' ) [ 4 ]
yourstring = receivedbytes decode ( 'utf-8 ' )
[ cryptogen random ( ) for i in range ( 3 ) ]
print ( content encode ( 'latin1 ' )  decode ( 'utf8 ' ) )
np where ( np in1d ( a , b ) )
dict ( zip ( * ( [ iter ( l ) ] * 2 ) ) )
print ( requests post ( 'http : //httpbin org/post ' , data=xml , headers=headers )  text )
l [ : ] = new_list
{ 'delicious_apples ' : { 'green_apples ' : 2 } , 'green_pear ' : 4 , 'brown_muffins ' : 5 }
return strg [ n : ] + strg [ : n ]
plt xlabel ( 'x ' )
df [ ~df applymap ( np isreal )  all ( 1 ) ]
print ( ' [ { 0 ! r } ] ( { 0 : _^15 } ) ' format ( s [ :5 ] ) )
b = [ int ( i ! = 0 ) for i in a ]
driver = webdriver firefox ( )  
print ( proc communicate ( ) [ 0 ] ) 
names = [ description [ 0 ] for description in cursor description ]
obj = [ ( 'even ' if i % 2 == 0 else 'odd ' ) for i in range ( 10 ) ]
df set_index ( 'b ' )
matplotlib rcparams update ( { 'font size ' : 22 } ) 
df = xl parse ( 'sheet1 ' , header=none )
plt savefig ( 'fig pgf ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                               
np diff ( index ) / np timedelta64 ( 1 , 'm ' )
print ( ' { 0 } -- > { 1 } ' format ( num , result ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                
plt show ( )                                                                                                                                                                                                                                                                                                                                                 
dict ( ( k , v ) for k , v in list ( points items ( ) ) if all ( x < 5 for x in v ) )
inlinkdict [ docid ] = adoc [ 1 : ]
a encode ( 'utf-8 ' )
( x * x for x in range ( 10 ) )
data1 groupby ( [ 'bool ' , 'dir ' ] )  apply ( lambda x : x [ 'data ' ]  cumsum ( ) )
print ( re findall ( '\\d+ ' , re findall ( '\xab ( [ \\s\\s ] * ? ) \xbb ' , text ) [ 0 ] ) )
df = pd read_sql_query ( 'select * from `` stat_table '' ' , con=engine )
re sub ( ' ( ? = ( ? : [ ^ '' ] * '' [ ^ '' ] * '' ) * [ ^ '' ] * $ ) ' , '' , s )
style = xlwt easyxf ( 'font : bold 1 , height 280 ; ' )
main ( )  
singleitem = mylist [ -1 ]
rightmost = re compile ( '^path= ' )  sub ( '' , fullpath )
requests get ( 'https : //httpbin org/headers ' )
dparser parse ( 'monkey 10/01/1980 love banana ' , fuzzy=true , dayfirst=true )
df index = [ '/' join ( i ) for i in df index ]
[ ( ' % s+ % s ' % x ) for x in zip ( a , b ) ]
sorted ( results , key=lambda x : x [ 'year ' ] )
[ ( 0 , 's ' ) , ( -1 , 'tackoverflow is ' ) , ( 1 , 'o is very ' ) , ( 0 , ' cool ' ) ]
cherrypy quickstart ( root ( ) ) 
len ( dict [ key ] )
array append ( [ int ( x ) for x in line split ( ) ] )
p communicate ( 'continue ' )
[ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]
pd dataframe ( df to_records ( ) )
pd get_dummies ( df [ 'speed ' ] )
verts = [ [ ( 0 ) for x in range ( 100 ) ] for y in range ( 10 ) ]
createdict ( 'foo ' , 'bar ' )
env program ( 'test ' , glob ( '* cpp ' ) )
{ k : v for k , v in zip ( range ( 1 , 5 ) , count ( 7 ) ) }
cursor execute ( sql ) 
store select ( 'df ' , columns= [ 'a ' ] )
pd value_counts ( d [ [ 'col_title1 ' , 'col_title2 ' ] ]  values ravel ( ) )
main ( sys argv [ 1 : ] )
`` `` '' ^ [ a-za-z0-9 _~ ( ) ' ! * : @ , ; + ? - ] * $ '' '' ''
formatted columns = [ x strip ( )  replace ( ' ' , '_ ' ) for x in formatted columns ]
date = models datetimefield ( default=datetime now , blank=true )
sys exit ( app exec_ ( ) )    
a = [ [ ( 0 ) for i in range ( n ) ] for j in range ( 2 ** n ) ]
x = float ( x )
`` `` '' { 0 : f } '' '' ''  format ( x / y )
c = ' , ' join ( ' { } = { } ' format ( *t ) for t in zip ( a , b ) )
conn = sqlite3 connect ( 'c : \\users\\guest\\desktop\\example db ' )
sorted ( test , key=lambda x : isinstance ( x , list ) and len ( x ) or 1 )
pd series ( [ pd timestamp ( '2014-01-02 ' ) , 'thu ' , 'thu ' ] )
df [ 'weekday ' ]  loc [ 1 ]
g add_edge ( 0 , 1 , likes= [ 'milk ' , 'oj ' ] )
root mainloop ( )                                  
print ( json dumps ( '\u0411 ' , ensure_ascii=false ) )
files = [ file for file in files if not file endswith ( ( ' dat ' , ' tar ' ) ) ]
df [ 'population ' ]  str replace ( ' ( ? ! ^ ) ( ? = ( ? : \\d { 3 } ) + $ ) ' , ' , ' )
print ( request form [ 'username ' ] )
creatures [ 'birds ' ] [ 'eagle ' ] [ 'female ' ] += 1
fig show ( )
( ( a [ : , ( np newaxis ) , : ] - v ) ** 2 )  sum ( axis=-1 )  shape
stdscr getch ( )
df groupby ( 'type ' )  apply ( foo )
plt show ( )                                                                                                                                                                                                                                                                                                                                                  
entries [ 'extensions ' ]  get ( 'telephone ' , '' )
print ( datetime datetime now ( est ( ) ) )
content = browser find_element_by_id ( 'content ' )
n = np sqrt ( np einsum ( 'ij , ij- > i ' , a , a ) )
print ( int ( '' join ( str ( x ) for x in [ 7 , 7 , 7 , 7 ] ) ) )
dict ( ( name , eval ( name ) ) for name in list_of_variable_names )
session query ( base )  join ( base owner )  order_by ( player name )
cv2 puttext ( image , 'hello world ! ! ! ' , ( x , y ) , cv2 font_hershey_simplex , 2 , 255 )
( array_2d == row )  all ( -1 )  sum ( )
sorted ( [ true , false , false ] )
random sample ( range ( len ( mylist ) ) , sample_size )
array ( [ [ 0 , 1 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 1 , 0 ] ] )
os path splitext ( 'name fasta ' ) [ 0 ] + ' aln '
np argmax ( np max ( x , axis=0 ) )
pd crosstab ( a , [ b , c ] , rownames= [ 'a ' ] , colnames= [ 'b ' , 'c ' ] , dropna=false )
plt show ( )                                                                                                                                                                                                                                                                                                                                                   
df [ df index levels [ 0 ]  isin ( [ int ( i ) for i in stk_list ] ) ]
`` `` '' `` '' ''  join ( w [ : :-1 ] for w in s split ( ) )
string2 replace ( '' , string1 )
qualifier = os environ [ 'qualifier ' ]
df groupby ( 'id1 ' )  apply ( func )
mylist sort ( key=itemgetter ( 'mc_no ' ) )
df show ( )
cv showimage ( 'pil2ipl ' , cv_img )
new_string = re sub ( ' [ ^ { } ] +' format ( printable ) , '' , the_string )
print ( ' ' join ( [ function ( word ) for word in split ] ) )
output = open ( 'output_test_file txt ' , 'w ' )
process stdin flush ( )
np vstack ( counts_array )
ax xaxis set_major_locator ( ticker loglocator ( numticks=6 ) )
datetime datetime ( 2012 , 4 , 1 , 0 , 0 )  timestamp ( )
re findall ( ' +| [ ^ ] + ' , s )
df [ ~df col str startswith ( ( 't ' , 'c ' ) ) ]
qs = user objects filter ( groups__name__in= [ 'foo ' ] )
shift ( [ 1 , 2 , 3 ] , 14 )
[ list ( x ) for x in zip ( *sorted ( zip ( list1 , list2 ) , key=itemgetter ( 0 ) ) ) ]
np ndarray ( ( 2 , 3 ) , dtype=object )
print ( '\u25b2 ' )
d [ 'js ' ]  append ( { 'other ' : 'thing ' } )
date_time_secs = time mktime ( datetimeobj timetuple ( ) )
`` `` '' one hundred and twenty three with three leading zeros { 0:06 }   `` `` ''  format ( 123 )
os makedirs ( path_directory )
c execute ( 'select * from foo where bar = % s and baz = % s ' % ( param1 , param2 ) )
df [ 'dist ' ]  median ( )
{ 'e ' : 2 , 'd ' : 1 , 'g ' : 2 , 'f ' : 4 , 'a ' : 4 , 'c ' : 3 , 'b ' : 0 }
float ( ' { 0 }   { 1 } ' format ( a [ 0 ] , '' join ( str ( n ) for n in a [ 1 : ] ) ) )
m [ : , ( 0 ) ]  reshape ( 5 , 1 )  shape
ax set_axis_off ( )
words = line split ( )
my_list = [ [ 1 , 2 , 3 ] , [ 'a ' , 'b ' ] , [ 5 , 6 , 7 ] ]
print ( '' join ( x [ : :-1 ] for x in pattern split ( string ) ) )
{ 'geneid ' : 'bye ' , 'tx_id ' : 'nr439 ' , 'col_name1 ' : '4 5 ' , 'col_name2 ' : 6 7 }
queryset filter ( created_at__gte=datetime date today ( ) )
fileobject = open ( 'countable nouns raw txt ' , 'rt ' , encoding='utf8 ' )
print ( datetime utcnow ( )  strftime ( ' % y % m % d % h % m % s % f ' ) )
os getpid ( )
print ( '' join ( chr ( ord ( 'a ' ) + i ) if b else ' ' for i , b in enumerate ( bools ) ) )
print ( '\xd0\xb0\xd0\xb1\xd0\xb2\xd0\xb3\xd0\xb4 ' )
numpy nonzero ( ( a > 3 ) & ( a < 8 ) )
[ [ 'a ' , 'b ' ] , [ 'ab ' ] , [ 'abc ' ] ]
df [ 'mnth_yr ' ] = df [ 'date_column ' ]  apply ( lambda x : x strftime ( ' % b- % y ' ) )
print ( mystring split ( ' ' ) )
df filter ( 'dt_mvmt is null ' )
next ( ( i for i , v in enumerate ( l ) if is_odd ( v ) ) )
parser add_argument ( 'host ' , nargs=1 , help='ip address to lookup ' )
smtp sendmail ( send_from , send_to , msg as_string ( ) )
print ( list ( sk d items ( ) ) )
pd to_numeric ( df [ 'y ' ] , errors='coerce ' )
workbook = xlsxwriter workbook ( 'demo xlsx ' )
et write ( 'file_new xml ' )
df iloc [ df groupby ( [ 'mt ' ] )  apply ( lambda x : x [ 'count ' ]  idxmax ( ) ) ]
return super ( mymodeladmin , self )  get_form ( request , obj , **kwargs )
plt scatter ( x , y , color=c )
plt show ( )                                                                                                                                                                                                                                                                                                                                                    
settings py
int from_bytes ( 'y\xcc\xa6\xbb ' , byteorder='big ' )
print ( pd series ( df values tolist ( ) , index=df index ) )
[ [ random random ( ) for x in range ( n ) ] for y in range ( n ) ]
return [ d for d in list1 if ( d [ 'classname ' ] , d [ 'testname ' ] ) not in check ]
pd to_datetime ( pd series ( [ '05/23/2005 ' ] ) )
set ( alllists )  difference ( set ( subscriptionlists ) )
delete_module ( 'psyco ' , [ 'psycho ' , 'killererror ' ] )
print ( ' < %   *s > ' % ( len ( text ) - 2 , text ) )
print ( wn synset ( 'main_course n 01 ' )  lemma_names )
return super ( mymodelviewset , self )  dispatch ( *args , **kwargs )
df = pandas read_csv ( f1 , converters= { 'stats ' : customparser } , header=0 )
writer writerow ( [ 'date ' , 'time ' , 'user ' ] )
afc = { 'baltimore ravens ' : ( 10 , 3 ) , 'pb steelers ' : ( 3 , 4 ) }
dict ( `` { 'key1 ' : 'value1 ' } '' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                     
os system ( 'xdg-open `` % s '' ' % foldername )
call ( [ 'echo ' , '\x07 ' ] )
[ values for key , values in list ( rev_multidict items ( ) ) if len ( values ) > 1 ]
start_delta = datetime timedelta ( days=weekday , weeks=1 )
plt tight_layout ( )
pd concat ( [ df_current , df_future ] )  sort_index ( )
bin ( _ )
a = a reshape ( ( m , n ) )  t
result = [ list ( somelistofelements ) for _ in range ( x ) ]
x = list ( set ( x ) )
document getelementbyid ( 'geolocation ' )  submit ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                      
print ( all ( lst [ i ]  lower ( ) < lst [ i + 1 ]  lower ( ) for i in range ( len ( lst ) - 1 ) ) )
len ( [ x for x in s if x [ 'success ' ] ] )
max ( l , key=lambda x : ( x [ 1 ] , random random ( ) ) )
bin ( 6 ) [ 2 : ]  zfill ( 8 )
`` `` '' foo is { foo } , bar is { bar } and baz is { baz } '' '' ''  format ( **d )
dict ( zip ( it , it ) )
data apply ( lambda r : sorted ( r ) , axis=1 )  drop_duplicates ( )
staticfiles_dirs = os path join ( base_dir , 'app ' ) ,
sum ( int ( c ) for c in strs if c isdigit ( ) )
print ( text encode ( 'utf-8 ' ) )
arr [ np maximum accumulate ( np isnan ( arr ) , axis=1 ) ] = np nan
n = [ ( i if i startswith ( 'h ' ) else 'http ' + i ) for i in n ]
writer writerow ( [ val ] )
cursor execute ( sql_and_params [ 0 ] , sql_and_params [ 1 : ] )
' % 3d\t % s ' % ( 42 , 'the answer to     ' )
df sort_index ( inplace=true )
print ( df head ( ) )
print ( os path basename ( sys argv [ 0 ] ) )
plt savefig ( 'scatter_line png ' , dpi=80 )
urlpatterns += static ( settings media_url , document_root=settings media_root )
{ { a_date | date ( 'f ' ) } }
res = re findall ( '- ( ? ! ( ? : aa|bb ) - ) ( \\w+ ) ( ? =- ) ' , s )
entries_list = recipes objects order_by ( '-id ' ) [ 0:10 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                       
ax2 set_ylabel ( 'sv ' )
format ( f , ' 2f ' )  rstrip ( '0 ' )  rstrip ( '   ' )
self somevalue = somevalue
plt show ( )                                                                                                                                                                                                                                                                                                                                                        
pairs = dict ( [ match split ( ' : ' , 1 ) for match in matches ] )
df [ 'datestart ' ] = pd to_datetime ( df [ 'datestart ' ] , coerce=true )
sys getsizeof ( 'this also ' )
rufus = dog ( name='rufus ' , breeds= [ 'spaniel ' , 'terrier ' , 'labrador ' ] )
[ x for i in range ( len ( l ) ) for x in l [ i ] ]
f = open ( 'user_ids ' , 'r ' )
print ( ' , ' join ( words ) )
np vstack ( dat_list )
max ( l , key=lambda x : x [ 1 ] + random random ( ) )
df xs ( 'size ' , axis=1 , level=1 )
int ( '08 ' , 10 )
self date = d replace ( tzinfo=pytz utc )
a insert ( 0 , a pop ( ) )
key = lambda d : d get ( 'rank ' , float ( 'inf ' ) )
new = np reshape ( a , ( -1 , ncols ) )
x [ np arange ( x shape [ 0 ] ) [     , ( none ) ] , y ]
min ( list ( range ( len ( values ) ) ) , key=lambda i : ( values [ i ] , -i ) )
gtk main ( )      
`` `` '' '' '' ''  join ( [ c for c in string if c ! = `` ' '' ] )
print ( ' ' join ( [ ' { 0 : b } ' format ( x ) for x in a_bytes ] ) )
df plot ( ax=ax , kind='bar ' , legend=false )
file2 write ( ' ' join ( buffer ) )
any ( pred ( x ) for x in lst )
timestamp = dt replace ( tzinfo=timezone utc )  timestamp ( )
setattr ( person , '__mro__ ' , ( person , friendly , object ) )
print ( [ x for x in a if all ( y in x for y in b ) ] )
os startfile ( 'file txt ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                         
' % 012d ' % random randrange ( 10 ** 12 )
ax set_xticklabels ( xlbls )
cursor execute ( 'attach `` /path/to/main sqlite '' as master ' )
return httpresponseredirect ( '/splash/ ' )
np transpose ( [ list1 , list2 , list3 ] )
fout write ( binascii unhexlify ( '' join ( line split ( ) ) ) )
type ( iter ( d values ( ) ) )
url ( '^so/ ( ? p < required > \\d+ ) / ' , include ( 'myapp required_urls ' ) )
nltk tokenize word_tokenize ( 'hello , world   ' )
int ( text_widget index ( 'end-1c ' )  split ( '   ' ) [ 0 ] )
df = df / df max ( )  astype ( np float64 )
print ( ' { 0 } { 0 } ' format ( s [ :5 ] ) )
`` `` '' ^org/ ( ? p < company_name > \\w+ ) / $ '' '' ''
elem find ( ' //number [ @ topic= '' sys/phonenumber/1 '' ] ' )
conn commit ( )      
sorted ( dic , key=lambda x : dic [ x ]  get ( 'fisher ' , float ( 'inf ' ) ) )
json dumps ( separators= ( ' , ' , ' : ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                          
words = [ word replace ( ' [ br ] ' , ' < br / > ' ) for word in words ]
df1 [ 'cumcount ' ] = df1 groupby ( 'val1 ' )  cumcount ( )
print ( 'mdatetime = { } ' format ( datetime datetime fromtimestamp ( mtime ) ) )
accesstoken = retdict [ 'access_token ' ]
[ ( lambda x : x * i ) for i in range ( 4 ) ]
df = pd read_sql ( sql , cnxn )
test __name__
plt show ( )                                                                                                                                                                                                                                                                                                                                                           
os isatty ( sys stdin fileno ( ) )
pd merge ( df1 , df2 , on=common_cols , how='inner ' )
new = df resample ( 't ' , how='mean ' )
wordcount = len ( s split ( ) )
tablero = array ( 'b ' , [ boardsize , boardsize ] )
os system ( 'beep ' )
re findall ( ' [ a-z ] + ' , s )
scipy optimize leastsq ( residuals , p_guess , args= ( x , y ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                            
array ( [ [ 0 , 1 , 0 , 1 , 0 , 1 , 0 ] , [ 2 , 3 , 2 , 3 , 2 , 3 , 2 ] ] )
print ( decrement ( ) )
my_array compress ( [ ( x in [ 'this ' , 'that ' ] ) for x in my_array [ 'job ' ] ] )
termios tcsetattr ( fd , termios tcsadrain , old_settings )
np memmap ( 'test bin ' , dtype=np dtype ( ' > u2 ' ) , mode='r ' )
zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) 
df corr ( )  mask ( np equal outer ( df index values , df columns values ) )
func ( 'arg ' , 'arg2 ' , 'some value ' if condition else none )
ser write ( 'open1\r\n ' )
random choice ( mylist ) 
pd series ( np searchsorted ( [ 'no ' , 'yes ' ] , sample housing values ) , sample index )
tuple_list = [ ( a , some_process ( b ) ) for a , b in tuple_list ]
`` `` '' , `` '' ''  join ( str ( f ) for f in fruits )
s rfind ( 'l ' )
form [ 'form1 ' ] = [ 'value1 ' ]
datetime datetime strptime ( 'mar232012 ' , ' % b % d % y ' )  strftime ( ' % m/ % d/ % y ' )
[ { 'toto ' : '1 ' , 'bip ' : 'xyz ' } , { 'toto ' : '15 ' , 'bip ' : 'abu ' } ]
zeros = np where ( a == 0 ) [ 0 ]
[ int ( i ) for i in str ( 12345 ) ]
{ { objname get_fieldname_display } }
p stdin close ( )
print ( 'test \\u0259' decode ( 'unicode-escape ' ) )
print ( name decode ( 'latin-1 ' ) )
f write ( s )
logging error ( 'some error ' )
print ( 'hi ' if str1 startswith ( ' '' ' ) and str1 endswith ( ' '' ' ) else 'fails ' )
test = sorted ( test , key=lambda x : len ( x ) if type ( x ) == list else 1 )
text_file close ( ) 
sns kdeplot ( x=points [ 'x_coord ' ] , y=points [ 'y_coord ' ] , ax=ax )
sys setrecursionlimit ( )
root mainloop ( )                                   
holes = [ ( table [ i ] [ 1 ] + 1 , table [ i + 1 ] [ 0 ] - 1 ) for i in range ( len ( table ) - 1 ) ]
opener = urllib request build_opener ( urllib request httpcookieprocessor ( cj ) )
time = timeit timeit ( lambda : module expensive_func ( data ) )
a update ( b ) 
{ k : ( v * dict2 [ k ] ) for k , v in list ( dict1 items ( ) ) if k in dict2 }
df groupby ( 'deviceid ' )  apply ( after_purchase )
json dumps ( fu )
zzz = 'foo '
root title ( 'not centered ' )
map put ( key , new_value )
root mainloop ( )                                    
dic = dict ( ( y , x ) for x , y in enumerate ( al , 1 ) )
cursor execute ( 'use mydatabase ' )
img = cv2 imread ( 'parking_lot jpg ' )
text = os linesep join ( [ s for s in text splitlines ( ) if s ] )
data loc [ 0 , 'transaction_amount ' ]
[ [ 1 , 4 ] , [ 6 , 9 ] , [ 3 , 9 , 4 ] ]
print ( ' got error of type ' + str ( type ( e ) ) + ' with message ' + e message )
your_list = map ( int , ' { : b } ' format ( your_int ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                             
arr [ [ 1 , 4 , 5 ] ]
print ( [ '-' join ( words [ i : i + span ] ) for i in range ( 0 , len ( words ) , span ) ] )
logger = logging getlogger ( __name__ )  
fig tight_layout ( )
re sub ( ' ( ? < =  ) ( ? =   ) ' , '- ' , string )
cherrypy engine start ( )
root mainloop ( )                                     
map ( ord , tuple ( struct pack ( ' ! i ' , number ) ) )
df columns = pd multiindex from_tuples ( df columns to_series ( ) )
contour ( im , levels= [ 245 ] , colors='black ' , origin='image ' )
somelist [ : ] = [ x for x in somelist if not determine ( x ) ]
{ x [ 0 ] : len ( list ( x [ 1 ] ) ) for x in itertools groupby ( sorted ( mylist ) ) }
np genfromtxt ( txt , delimiter='\t ' , dtype='6int , s20 ' )
( lambda x , f : list ( y [ 1 ] for y in f ( x ) ) ) ( lst , lambda x : ( sorted ( y ) for y in x ) )
connection commit ( ) 
sum ( a )
re sub ( '\\ [  *\\ ] |\\ {   *\\ } ' , '' , one )
pdb set_trace ( )      
imp find_module ( 'eggs ' )
np split ( a , np nonzero ( np diff ( a ) ) [ 0 ] + 1 )
self button clicked connect ( self calluser )
blog comment_set all ( )
cap = cv2 videocapture ( 0 )
lines = codecs open ( 'file txt ' , 'r ' , encoding='utf-8 ' )  readlines ( )
pandas dataframe ( initialload , columns=list_of_column_names )
[ array ( [ 0 ] ) , array ( [ 47 , 48 , 49 , 50 ] ) , array ( [ 97 , 98 , 99 ] ) ]
pd concat ( [ df , pd dataframe ( 0 , df index , list ( 'cd ' ) ) ] , axis=1 )
ax set_xticklabels ( x )
userfavorite get_by_name ( user_id , parent=a_story )
ma array ( a , mask=np isnan ( a ) )  mean ( axis=0 )
uni encode ( 'utf-8 ' )
[ s strip ( )  split ( ' : ' ) for s in data_string splitlines ( ) ]
pd crosstab ( df a , df b )  apply ( lambda r : r / len ( df ) , axis=1 )
f write ( struct pack ( 'i ' , int ( bits [ : :-1 ] , 2 ) ) )
pd dataframe ( [ record_1 ] )
round ( float ( '23 45678 ' ) )
hex ( struct unpack ( ' > h ' , struct pack ( ' > h ' , -200 ) ) [ 0 ] )
app run ( debug=true )        
scipy stats hypergeom cdf ( k , m , n , n )
[ np nonzero ( np in1d ( x , c ) ) [ 0 ] for x in [ a , b , d , c ] ]
db execute ( 'insert into json_col values % s ' , json_value ) 
map ( lambda x : x + 2 , [ 1 , 2 , 3 ] )
`` `` '' '' '' ''  join ( ' { 0:04b } ' format ( int ( c , 16 ) ) for c in hex_string )
child sendline ( 'python -v\r ' )
pd dataframe ( np where ( df , 1 , 0 ) , df index , df columns )
plt show ( )                                                                                                                                                                                                                                                                                                                                                              
f = lambda x , y : x + y 
data = json load ( f )
tuple ( tup [ 0 ] for tup in a )
datetime fromtimestamp ( 1268816500 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                               
print ( frame [ frame [ 'a ' ]  isin ( mylist ) ] )
user query filter_by ( hometown='new york ' , university='usc ' )
result extend ( re split ( '_ ( ? : f ? or|and ) _ ' , s ) )
sum ( c ! = ' ' for c in word )
len ( set ( a ) ) == len ( a ) 
np isnan ( a )
np cov ( x )
plt plot ( x , y , 'o ' )
np linalg norm ( x , ord=1 )
np einsum ( 'kij- > ijk ' , m )
f = open ( 'file txt ' , 'wb ' ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                
zip ( [ 3 , 4 ] , [ 1 , 2 ] )
new_dict = dict ( ( item [ 'id ' ] , item ) for item in initial_list )
ax plot ( np nan , '-r ' , label='temp ' )
`` `` '' ( ? s ) your *regex   *here '' '' ''
urllib parse quote ( '/static/media/uploads/gallery/marrakech , morocco_be3ij2n jpg ' )
{ 'foo ' , 'bar ' , 'baz ' }  issubset ( list ( dct keys ( ) ) )
[ 1 , 4 , 5 , 6 , 7 ]
[ 'i am ' , 'show ' ]
b = bytearray ( 'bba7f69e' decode ( 'hex ' ) )
data = pd dataframe ( { 'x ' : [ 1 , 2 , 3 , 0 , 0 , 2 , 3 , 0 , 4 , 2 , 0 , 0 , 0 , 1 ] } )
inspect getmembers ( my_module , inspect isclass )
sys stdout write ( '\x1b [ 1 ; 31m ' )
s map ( lambda x : x [ :2 ] )
ioloop ioloop instance ( )  start ( )
url ( '^accounts/ ' , include ( 'registration backends default urls ' ) ) ,
al = [ al1 , al2 , al3 , al4 , al5 , al6 ]
[ list ( g ) for k , g in itertools groupby ( iterable ) ]
np equal reduce ( [ false , 0 , 1 ] )
f write ( json dumps ( data , ensure_ascii=false ) )
counter ( map ( tuple , list1 ) )
os path dirname ( fullpath )
list ( range ( len ( strs ) - 1 , -1 , -1 ) )
csv_file writerows ( the_list )
{ 'fields ' : ( ( 'first_name ' , 'last_name ' ) , 'address ' , 'city ' , 'state ' ) }
python - -version 
np cumsum ( np concatenate ( ( [ 0 ] , np bincount ( v ) ) ) ) [ v ]
[ k for k , g in groupby ( sorted ( chain from_iterable ( iter ( content values ( ) ) ) ) ) ]
df groupby ( 'a ' ) [ 'expand ' ]  apply ( list )
b create_from_csv_row ( row encode ( 'ascii ' , 'ignore ' ) )
np asarray ( [ func ( i ) for i in arr ] )
popen ( [ 'nice ' ] )  communicate ( )
importlib import_module ( 'matplotlib text ' )
a reset_index ( )  merge ( b , how='left ' )  set_index ( 'index ' )
numpy in1d ( a , b )  nonzero ( )
app run ( host='192 168 1 6 ' )
re sub ( ' , ( ? = [ ^ ] [ ] *\\ ] ) ' , '' , str )
df fillna ( 0 ) 
ax set_yticks ( [ ] )
print ( '' join ( mismatches ) )
`` `` '' `` '' ''  join ( [ str ( x ) for x in t ] )
`` `` '' foo '' '' ''  decode ( 'latin-1 ' )
re sub ( ' [ ^-\\w ] ' , ' ' , 'black # white ' )
current_module = sys modules [ __name__ ]
server starttls ( )
[ [ 1 , 2 , 4 , 8 ] , [ 2 , 3 , 21 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ]
dict ( ordereddict ( [ ( 'method ' , 'constant ' ) , ( 'data ' , '1 225 ' ) ] ) )
return ( string [ 0 + i : length + i ] for i in range ( 0 , len ( string ) , length ) )
np hstack ( [ x , y ] )
plt figure ( ) 
s = re match ( '^   * ? \\ zip ' , s )  group ( 0 )
sys exit ( 1 ) 
d update ( ( k , 'value3 ' ) for k , v in d items ( ) if v == 'value2 ' )
int ( a replace ( ' , ' , '' ) )
words = [ word for word in string split ( ) if len ( word ) == 3 ]
self val2 = kwargs get ( 'val2 ' , 'default value ' )
myobject all ( )  order ( '-time ' )
env skip_bad_hosts = true
`` `` '' my { 0 } string : { 1 } '' '' ''  format ( 'cool ' , 'hello there ! ' )
not any ( my_list )
map ( max , zip ( *alist ) )
df [ 'depth ' ] = df [ 'depth ' ]  interpolate ( method='values ' )
book objects filter ( q ( author__id=1 ) & q ( author__id=2 ) )
wb create_sheet ( 0 , 'sheet1 ' )
subset = [ x for x in df2 columns if len ( x ) > 3 ]
thread ( target=cherrypy quickstart , args= [ root ( ) ] )  start ( )
app mainloop ( )   
`` `` '' '' '' ''  join ( x for x in fn if x isdigit ( ) )
f = os path join ( path , f )
df [ last_row argsort ( ) ]
dict ( zip ( l [ : :2 ] , l [ 1 : :2 ] ) ) 
return [ ( i ** 2 ) for i in list ]
numpy where ( mask , 1 , numpy where ( numpy_array == 0 , 0 , 2 ) )
df1 resample ( '5min ' )  sum ( )
qapplication desktop ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                 
sys exit ( )     
timeit timeit ( stmt= '' 'hi ' if true else 'bye ' '' )
server serve_forever ( )     
line = line replace ( '\t ' , ' ' )
mydict = dict ( ( rows [ 0 ] , rows [ 1 ] ) for rows in reader )
result = '\n' join ( '\t' join ( map ( str , l ) ) for l in lists )
{ 'bob ' : '1 ' , 'ben ' : '3 ' , 'sue ' : '2 ' }
numpy empty ( ( 10 , 4 , 100 ) )
soup select ( 'table drug-table data-table table table-condensed table-bordered ' )
df iloc [ df groupby ( 'id ' ) [ 'date ' ]  idxmax ( ) ]
fig savefig ( 'temp png ' )
`` `` '' ^ [ a-za-z ] +/ $ '' '' ''
dict ( ( n , int ( v ) ) for n , v in ( a split ( '= ' ) for a in string split ( ) ) )
base64 b64encode ( '1' encode ( ) )
int ( dt strftime ( ' % s ' ) )
{ k : v for k , v in list ( dict items ( ) ) if v > something }
x = popen ( [ 'netstat ' , '-x ' , '-y ' , '-z ' ] , stdout=pipe )  communicate ( ) [ 0 ]
df query ( 'b == `` nat '' ' )
admin site register ( user , useradmin )
fig autofmt_xdate ( )
s = pd series ( [ 10 , 20 , 30 ] , [ 'a ' , 'b ' , 'c ' ] )
s = pd series ( [ 10 , 20 , 30 ] , [ 'x ' , 'y ' , 'z ' ] )
browser addheaders = [ ( 'user-agent ' , 'mozilla/5 0 blahblah ' ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                  
query = db gqlquery ( 'select * from entry where editor > :1 ' , none )
[ ( 1 , 3 ) , ( 3 , 4 ) ]
[ k for k , count in list ( counter ( l )  items ( ) ) if count > 1 ]
entry = [ str ( x ) for x in cols findall ( text=true ) ]
df = pd dataframe ( { 'testdata ' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] } , dtype='float ' )
writer writerow ( [ 'date ' , 'temperature 1 ' , 'temperature 2 ' ] )
df results str extract ( 'passed ( [ 0-9 ] + ) ' )  fillna ( 0 )
filename = 'c : \\documents and settings\\file ' + str ( i ) + ' txt '
re compile ( ' ( \\s { 0 , } ) + ' )
re compile ( ' ( \\s { 1 , } ) + ' )
self fields pop ( 'is_staff ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                   
df to_csv ( 'test csv ' , mode='a ' , index=false , header=false )
etree tostring ( e , pretty_print=true )
admin site register ( person , personadmin )
pygame display set_mode ( ( 1 , 1 ) )
cursor execute ( 'select * from location ' )
sorted ( iter ( citypopulation items ( ) ) , key=lambda k_v : k_v [ 1 ] [ 2 ] , reverse=true ) 
y astype ( int )
list ( '1111 ' )
df [ df c > 0 5 ] [ [ 'b ' , 'e ' ] ]  values
print ( m group ( 1 ) )
result = map ( lambda x : x [ 'value ' ] , test_data )
urllib parse unquote ( url )  decode ( 'utf8 ' ) 
data = numpy genfromtxt ( yourfilename , skiprows=n )
send = re findall ( '\\ $ ( [ ^ $ ] * ) \\ $ ' , string )
{ 'tags2 ' : [ 0 , 1 ] , 'cnt2 ' : 0 , 'cnt1 ' : 1 , 'tags1 ' : [ 0 , 1 , 'work ' ] }
localtime ( now ( ) )  replace ( hour=0 , minute=0 , second=0 , microsecond=0 )
df2 reindex ( df index )
ax set_ylabel ( 'series ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                    
re findall ( ' [ +- ] ? \\d+ ' , ' 1 sd 2 s 3 sfs 0 -1 ' )
`` `` '' '' '' ''  join ( re findall ( ' [ a-z ] [ ^a-z ] * ' , s ) [ 3 : ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                     
plt savefig ( 'example pdf ' )
df groupby ( 'class ' , group_keys=false )  apply ( f )
`` `` '' { a } { b } '' '' ''  format ( a='foo ' , b='bar ' , c='baz ' )
np random random ( ( n , n ) )
{ k : [ x for x in v if x ! = 'x ' ] for k , v in mydict items ( ) }
app = flask ( __name__ )  
glob glob ( ' ?  gif ' ) 
[ int ( el ) for el in inputstring split ( ' , ' ) ]
setattr ( i , x , f ( getattr ( i , x ) ) )
max ( x , key=x get )
re sub ( ' [ \\t\\n\\r ] ' , ' ' , '1\n2\r3\t4 ' )
df [ 'b ' ] = df [ 'a ' ]  apply ( lambda x : ' # ' + x replace ( ' ' , '' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                      
zip ( *sorted ( zip ( x , y ) , key=ig0 ) )
all_challenges = session query ( challenge )  join ( challenge attempts )  all ( )
return [ dictio for dictio in dictlist if dictio [ key ] in valuelist ]
[ 'qs ' , '5h ' , 'as ' , '2h ' , '8h ' , '7c ' , '9h ' , '5c ' , 'jh ' , '7d ' ]
return httpresponseredirect ( '/core/mypage/ ? key=value ' )
getattr ( test , method )
sum ( abs ( x - y ) for x , y in zip ( sorted ( xs ) , sorted ( ys ) ) )
df [ col ] = df [ col ]  apply ( lambda i : '' join ( i ) )
[ [ int ( y ) for y in x ] for x in values ]
return render ( request , 'myapp/subprofile_select html ' , { 'form ' : form } )
[ ordereddict ( ( k , d [ k ] ( v ) ) for k , v in l items ( ) ) for l in l ]
datetime datetime strptime ( mydate , ' % y- % m- % d % h : % m : % s , % f ' )  timetuple ( )
l = np array ( [ list ( method ( )  values ( ) ) for _ in range ( 1 , 11 ) ] )
ax xaxis set_major_locator ( locator )
re split ( ' ( ? < =\\ ) ) \\   ' , ' ( 1 2 )  2 ' )
socket = socket socket ( ( '127 0 0 1 ' , port ) )
sys stdout flush ( )             
outfile write ( infile read ( ) )
canvas create_text ( x , y , font= ( 'purisa ' , rndfont ) , text=k ) 
os path dirname ( sys argv [ 0 ] )
button clicked connect ( self commander ( command ) )
__init__ py     
input_str = sys stdin read ( )
list_c = list_c + list_a + [ 'more ' ] + list_b + [ 'var1 ' , 'var2 ' ]
print ( re findall ( pattern , x ) ) 
driver get ( 'http : //example com ' )
`` `` '' { 0:06x } '' '' ''  format ( int ( line ) )
[ i for i , item in enumerate ( a ) if item in b ]
[ tuple ( l ) for l in nested_lst ] 
thelist [ : ] = [ d for d in thelist if d get ( 'id ' ) ! = 2 ]
[ transform ( x ) for x in results if condition ( x ) ]
map ( lambda d : d [ 'value ' ] , l )
min ( x for x in lst if isinstance ( x , str ) )
server serve_forever ( )      
player filter ( name__in= [ 'mike ' , 'charles ' ] )
root grid_rowconfigure ( 0 , weight=1 )
print ( ' % d %  2f ' % ( count , conv ) )
os path abspath ( math __file__ )
sum ( map ( int , l ) )
im = image fromarray ( my_array )
`` `` '' 7061756c '' '' ''  decode ( 'hex ' )
interestingelts = ( x for x in oldlist if x not in [ 'a ' , 'c ' ] )
re split ( '|' join ( re escape ( x ) for x in list1 ) , s )
print ( 'here is a number : ' + str ( 2 ) )
`` `` '' my name is { surname } , { name } { surname }   i am { age }   `` `` ''  format ( **locals ( ) )
df columns = [ 'user ' , 'tweet ' ]
wb save ( 'border_test xlsx ' )
list_ sort ( key=lambda x : x [ 0 ] )
print ( 'hello world ' )
os path basename ( '/foldera/folderb/folderc/folderd ' )
soup find_all ( 'option ' , { 'selected ' : true } )
do_something ( ) 
[ [ ( i * j ) for i , j in zip ( *row ) ] for row in zip ( matrix1 , matrix2 ) ]
result = sorted ( iter ( promotion_items items ( ) ) , key=lambda pair : list ( pair [ 1 ]  items ( ) ) )
window connect ( 'key-press-event ' , fullscreen_toggler )
[ x for x in l if not '2 ' in x ]
sys exit ( app exec_ ( ) )     
`` `` '' { 0:08b } '' '' ''  format ( 6 )
f = open ( 'file_ ' + str ( i ) + ' dat ' , 'w ' )
print ( getpass getuser ( ) )
getattr ( model , fieldtoget )
tsk = subprocess popen ( args , stdout=subprocess pipe , stderr=subprocess stdout )
output close ( )
sorted ( list ( d items ( ) ) , key=operator itemgetter ( 1 , 0 ) )
people2 = person objects filter ( employee__company='private ' )
{ 'pigeon ' : '1 ' , 'hate ' : '10 ' , 'hello ' : '10 ' , 'would ' : '5 ' , 'adore ' : '10 ' }
ex groupby ( level='a ' )  get_group ( 1 )
re split ( ' ( \\d+ ) ' , s )
`` `` '' a b c d my json expression '' '' ''  split ( maxsplit=4 )
print ( souphandler findall ( 'div ' , id=lambda x : x and x startswith ( 'post- ' ) ) )
[ '1 ' , '2 ' , '3 ' , '4 ' , 'a ' , 'b ' , 'c ' , 'd ' ]
foo ( ) 
logging critical ( 'this is a critical error message ' )
[ int ( i ) for i in str ( number ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                       
__init__ py      
[ 'blah ' , 'bool143 ' , 'bool2 ' , 'foo ' , 'foobar2000 ' ]
os system ( cmd )
`` `` '' \\1 xby `` '' ''
pd dataframe ( a , df index , df columns )
( a1 [ : , ( numpy newaxis ) ] == a2 )  all ( axis=2 )  astype ( int )
print ( element get_attribute ( 'innerhtml ' ) )
gtk main ( )       
print ( yesterday strftime ( ' % m % d % y ' ) )
s1 reset_index ( drop=true ) * s2 reset_index ( drop=true )
data = csv reader ( f , delimiter= ' , ' , quotechar= ' '' ' )
df applymap ( np isreal )
[ ( i * y + x ) for i in range ( 10 ) ]
df reindex_axis ( sorted ( df columns ) , axis=1 )
l = list ( set ( l ) )
tuple ( struct pack ( ' ! i ' , number ) )
p = subprocess popen ( cmd , stdin=subprocess pipe , stdout=subprocess pipe )
np savetxt ( fname='newpicksdata txt ' , x=new_picks astype ( int ) , fmt= ' % i ' )
logging basicconfig ( level=logging warn )
logging formatter __init__ ( self , msg )
data [ 'value ' ] == 'true '
[ x start ( ) for x in re finditer ( 'foo ' , 'foo foo foo foo ' ) ]
var replace ( '\\ ' , '/ ' )
number = re search ( '\\d+ ' , filename )  group ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                        
sum ( c a for c in c_list )
datetime utcfromtimestamp ( float ( self timestamp ) )
return os environ [ 'server_name ' ] in ( 'localhost ' , 'www lexample com ' )
`` `` '' { num:0 { width } } '' '' ''  format ( num=123 , width=6 )
re sub ( '\\p { p } ' , lambda m : '- ' if m group ( 0 ) == '- ' else '' , text )
curses doupdate ( )
soup findall ( 'meta ' , attrs= { 'name ' : re compile ( '^description $ ' , re i ) } )
pixmap4 = pixmap scaled ( 64 , 64 , qtcore qt keepaspectratio )
a = a - a multiply ( b )
main ( )   
{ 'age ' : 35 , 'dog ' : { 'name ' : 'apollo ' } , 'name ' : 'onur ' }
[ synset name split ( '   ' ) [ 0 ] for synset in wn synsets ( 'dog ' ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                         
{ 'x ' : 'value1 ' , 'y ' : 'value2 ' , 'z ' : [ { 'a ' : 'value3 ' , 'b ' : 'value4 ' } ] }
re findall ( ' # ( \\w+ ) ' , s )
sys exit ( 0 )    
proc = subprocess popen ( [ 'git ' , 'status ' ] , stdout=subprocess pipe )
revdict = dict ( ( v , k ) for k , v in list ( ref items ( ) ) )
zip ( *lists )
df drop_duplicates ( [ 'col1 ' , 'col2 ' ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                          
dt datetime strptime ( '1985-04-12t23:20:50 52 ' , ' % y- % m- % dt % h : % m : % s  % f ' )
print ( re sub ( '\u032f+ ' , '\u032f ' , unicodedata normalize ( 'nfkd ' , s ) ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                           
dict ( ( k , 2 ) for k in a )
f close ( )               
a [ : , : :2 ] + a [ : , 1 : :2 ]
np array ( list ( g ) )
win show_all ( ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                            
arr = np arange ( 3 * 4 * 5 )  reshape ( 3 , 4 , 5 )
list1 sort ( key=convert )
[ a for a in s if s count ( a ) == 1 ] [ 0 ]
print ( `` \\i do n't know why ///i do n't have the right answer\\ ''  strip ( '/ ' ) )
numpy nonzero ( numpy in1d ( a , b ) )
browser quit ( )
print ( '' join ( [ str ( x ) for x in l ] ) )
link objects all ( )  order_by ( '-popularity ' )
plt subplots_adjust ( top=0 75 )
session commit ( )    
dict ( [ ( t __name__ , t ) for t in fun_list ] )
x = numpy asarray ( x , order='c ' )
data = json load ( open ( 'config json ' ) , object_pairs_hook=ordereddict )
`` `` '' s h a n n o n b r a d l e y '' '' ''  replace ( ' ' , ' ' ) [ : :2 ]
np squeeze ( np array ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) )  shape
sorted ( temp , key=itemgetter ( 1 ) , reverse=true )
re sub ( '\\bfoo\\b ' , cased_replacer ( 'bar ' ) , 'this is foo ' , flags=re i ) 
list ( set ( df [ 'a ' ] ) )
l = [ x for x in l if x strip ( ) ]
soup find_all ( 'a ' , class_='sister ' )
social_auth_facebook_scope = [ 'email ' ]
a [ np arange ( np shape ( a ) [ 0 ] ) [ : , ( np newaxis ) ] , np argsort ( a ) ]
array ( [ [ 1 , 6 ] , [ 2 , 6 ] , [ 3 , 8 ] , [ 4 , 10 ] , [ 5 , 6 ] , [ 5 , 7 ] ] )
plt gcf ( )  savefig ( 'correlation png ' )
file write ( '\ufeff ' )
array ( [ 0 , 1 , 4 , 9 , 16 ] )
print ( customer xpath ( ' / @ name ' ) [ 0 ] )
set ( [ i [ 1 : ] for i in line split ( ) if i startswith ( ' # ' ) ] )
df [ 'sum ' ] = df sum ( axis=1 )
print ( 'number is : %  8f ' % float ( a [ 0 ] / a [ 1 ] ) )
time strftime ( ' % x % x % z ' ) 
root mainloop ( )                                      
c = np array ( [ 1 , 2 , 3 ] )
b sort ( key=lambda x : a index ( x ) )
np put ( arr , np where ( ~np in1d ( arr , valid ) ) [ 0 ] , 0 )
df groupby ( 'user ' ) [ 'x ' ]  filter ( lambda x : x sum ( ) == 0 )  index
b [ a [ 1 , 1 ] ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                             
cv2 imwrite ( ' /result png ' , result_image )
re search ( 'sample ' , line )
[ 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 6 ]
z = arr [ : , ( 5 ) ]  sum ( )
ftp quit ( ) 
data [ data columns [ 1 : ] ]  corr ( ) [ 'special_col ' ] [ : -1 ]
[ 5 , 1 , 2 , 3 , 4 ]
htmlfile = open ( 'path to html file ' )  read ( )
ast literal_eval ( reclist )
sorted ( d , key=lambda x : ( -x [ 1 ] , x [ 0 ] ) )
[ 'setup ' , 'bar ' , 'baz ' , 'var1 ' , 'var2 ' , 'var3 ' , 'var4 ' ]
df append ( new_df , ignore_index=true )
print ( `` that 's interesting ''  encode ( 'string_escape ' ) )
df sort_index ( inplace=true ) 
site = hxs select ( `` //h1 [ @ class='state ' ] /text ( ) '' )
set ( x [ 0 ] for x in list1 )  intersection ( y [ 0 ] for y in list2 )
plt plot ( [ 10 , 11 , 12 ] , 'y ' )
print ( etree tostring ( root , pretty_print=true ) ) 
strftime ( ' % y { 0 } % m { 1 } % d { 2 } ' )  format ( *'\xe5\xb9\xb4\xe6\x9c\x88\xe6\x97\xa5 ' )
win32api getlongpathname ( win32api getshortpathname ( 'stopservices vbs ' ) )
print ( ' < a href= '' % ( url ) s '' > % ( url ) s < /a > ' % { 'url ' : my_url } )
string split ( pattern , 1 ) [ 0 ]
rdd todf ( [ 'foo ' , 'bar ' ] )
re findall ( ' ( 1 ( 23 ) ) 45 ' , '12345 ' )
root mainloop ( )                                       
[ 4 , 6 , 5 , 3 , 7 , 8 ] , [ 1 , 2 ]
db posts find ( )  sort ( 'date ' , -1 )
sys stdin isatty ( )
sys modules [ 'mymodule ' ] = mymodule
os system ( 'echo $ shell ' )
os kill ( pid , signal sigterm )
r = requests get ( url , headers=headers , proxies=proxydict )
return os path join ( directory , filename )
rotatingfilehandler ( filename , maxbytes=10 * 1024 * 1024 , backupcount=5 )
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ ] , [ ] ]
np random normal ( 0 , 1 , ( 100 , 3 ) )
driver get ( 'http : //stackoverflow com ' )
globals ( ) [ 'var ' ] = 'an object '
plt legend ( ) 
lambda x : int ( x partition ( '/ ' ) [ 0 ] [ 2 : ] )
print ( unicodedata normalize ( 'nfc ' , 'c\u0327 ' ) )
a [ -1 ] * ( a [ -1 ] + a [ 0 ] ) / 2 - sum ( a )
sorted ( your_list , key=itemgetter ( 'name ' , 'age ' ) )
your_list = [ int ( i ) for i in f read ( )  split ( ) ]
plt savefig ( 'multiple_facet_binary_hue ' )
sympy sstr ( _ )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                              
print ( 'who lives in a pineapple under the sea ? { name ! s }   ' format ( **locals ( ) ) )
[ x for d in thedict values ( ) for alist in d values ( ) for x in alist ]
self setwindowtitle ( 'qtgui qcheckbox ' )
sys exit ( app exec_ ( ) )      
pd concat ( [ data , ts ] )  sort_index ( )  interpolate ( )  reindex ( ts index )
sys stdout write ( 'edf { l } ' format ( l=line ) )
print ( repr ( the_string ) )
list ( { len ( s ) : s for s in jones }  values ( ) )
np tile ( np arange ( y ) , x )
autodoc_default_flags = [ 'members ' , 'undoc-members ' ]
print ( list ( itertools combinations ( a , i ) ) )
df_sum = df groupby ( 'parent ' )  sum ( )
'g ' in df index
subprocess call ( ' /driver exe bondville dat ' )
df set_index ( 'date_time ' )  groupby ( pd timegrouper ( 'd ' ) )  mean ( )  dropna ( )
super ( modela , self )  save ( *args , **kwargs )
root mainloop ( )                                        
print ( 'integer : { 0 } ; float : { 1 } ; string : { 2 } ' format ( a , b , c ) )
file_out [ -1 ] = file_out [ -1 ]  strip ( '\n ' )
newprefix = list ( prefix )
form = journalform ( initial= { 'tank ' : 123 } )
new_dict [ 'a ' ] [ 'b ' ] [ 'c ' ] = [ 5 ]
ax set_ylim ( 0 , 1 )
python - mserver
socket bind ( ( '127 0 0 1 ' , 80 ) )
sum ( jdcal gcal2jd ( dt year , dt month , dt day ) )
comptest ( '' )
proc = subprocess popen ( 'git status ' , stdout=subprocess pipe , shell=true )
df apply ( lambda x : pd to_numeric ( x , errors='ignore ' ) )
df query ( '111 < = b < = 500 ' )
df query ( '0 < a < 4 and 150 < b < 400 ' )
return image ( source='b1 png ' )
user query join ( user person )  filter ( person id in_ ( p id for p in people ) )  all ( )
project objects filter ( action__person=person )
df [ 'col3 ' ] = ( df [ 'col2 ' ] < = 1 )  astype ( int )
len ( [ x for x in s if x get ( 'success ' , false ) ] )
[ 0 01691603660583496 , 0 016616106033325195 , 0 016437053680419922 ]
menu = gtk menu ( )
x = min ( float ( s ) for s in l )
re search ( ' [ ^f ] ' , 'ffffooooooooo ' )  start ( )
mylist [ : ] = [ i for i in mylist if i ! = '' ]
c = np einsum ( 'kmn , kln- > kml ' , a , b )
threading thread __init__ ( self )
new_string = '' join ( ch for ch in your_string if ch isdigit ( ) )
mylist = [ int ( x ) for x in '3 ,2 ,6 ' split ( ' , ' ) if x strip ( )  isdigit ( ) ]
objects = ' and ' join ( [ ' { num } { obj } ' format ( **item ) for item in items ] )
print ( type ( ' { } ' format ( word ) ) )
`` `` '' { 0 : < 16 } '' '' ''  format ( 'hi ' )
[ 'comment form new ' , 'comment comment-xxxx     ' ]
result = re sub ( ' ( ? : @ \\s*| # \\s*|http ( ? =   * : // ) \\s* ) ' , '' , subject )
sorted ( list ( c items ( ) ) , key=itemgetter ( 0 ) )
np polyfit ( x , y , 4 )
sorted ( a , key=lambda v : ( v , random random ( ) ) )
int ( '00100101 ' , 2 )
return [ i for i , x in enumerate ( lst ) if x < a or x > b ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                               
document2 body append ( document1 find ( 'div ' , id_='someid ' )  clone ( ) )
np count_nonzero ( boolarr )
y = ( i [ 0 ] for i in x )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                
logging debug ( 'nothing special here     keep walking ' )
s split ( '   ' ) [ -1 ]
queryset filter ( created_at__range= ( start_date , end_date ) )
run ( 'mv app wsgi template app wsgi ' )
`` `` '' [ { u'name ' : u'squats ' , u'wrs ' : [ [ u'99 ' , 8 ] ] , u'id ' : 2 } ] '' '' ''  replace ( `` u ' '' , `` ' '' )
h set_color ( 'r ' )
webbrowser open ( 'mailto : test @ example com ? subject=hello world ' )
return qtcore qt itemisenabled
time sleep ( 10 ) 
response = requests post ( url , files=files )
datetime datetime ( 1970 , 1 , 1 ) + datetime timedelta ( seconds=-2082816000 )
data = numpy loadtxt ( yourfilename , skiprows=n )
( ( df [ 'a ' ] == 1 ) & ( df [ 'b ' ] == 2 ) )  any ( )
format ( 5e-10 , 'f ' )
self labeltext = 'change the value '
a transpose ( 2 , 0 , 1 )
re sub ( ' [ ^\\x00-\\x7f ] ' , ' ' , n )
[ none ] * 10
setattr ( foo , key , value )
df to_dict ( )
re findall ( '-|\\+=|==|=|\\+| [ ^-+=\\s ] + ' , 'hello-+==== =+ there ' )
b = np fill_diagonal ( np zeros_like ( a ) , value )
python - pip
f ( tup1 [ 0 ] , tup1 [ 1 ] , tup2 [ 0 ] , tup2 [ 1 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                 
ax imshow ( a , interpolation='nearest ' )
print ( bytes decode ( encoding ) )
np insert ( my_array , 0 , myvalue , axis=1 )
[ x for x in l if 'ab ' in x ]
a , b = 'string_without_spaces' split ( ' ' , 1 )
sys stdout flush ( )              
print ( df ix [ i , 'attr ' ] )
l = [ 1 , 2 , 3 ]
plt savefig ( 'test svg ' , format='svg ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                  
df index map ( lambda t : t replace ( year=2013 , month=2 , day=1 ) )
`` `` '' string 1 , string 2 , string3 '' '' ''
df = df assign ( a5= [ 'foo ' , 'bar ' , 'baz ' ] )
re findall ( ' [ a-za-z ] +\\b ( ? ! \\ ( ) ' , 'movav ( x/2 , 2 ) *movsum ( y , 3 ) *z ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                   
name decode ( 'latin-1 ' )
plt setp ( [ ax get_xticklines ( ) , ax get_yticklines ( ) ] , color=color )
z = merge_two_dicts ( x , y )
gzip open ( 'myfile gz ' )
f ( *args )
l = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
cursor close ( )   
a index ( max ( a ) ) 
p wait ( ) 
struct unpack ( ' ! h ' , p0 + p1 ) [ 0 ]
print ( 'if a hippo ways 2000 pounds , gives birth to a 100 pound calf and ' + 'then eats a 50 pound meal how much does she weigh ? ' )
ma vstack ( [ a , ma array ( np resize ( b , a shape [ 0 ] ) , mask= [ false , false , true ] ) ] )
[ ( 'mary xxiv ' , 24 ) , ( 'robert iii ' , 3 ) ]
allowed_hosts = [ '* ' ]
s write ( str ( 25 ) + '\n ' )
new_data = ( ' ' join ( w ) for w in sixgrams )
__init__ py       
g [ i , j ] = c_abs [ i , j ] + c_abs [ j , i ]
pd merge ( df , uniq_df , on='col ' , how='left ' )
round ( 1234 , -3 )
os symlink ( 'file ext ' , '/path/to/some/directory/symlink ' )
df to_csv ( 'filename txt ' , sep='\t ' , mode='wb ' , encoding='utf8 ' )
`` `` '' , `` '' ''  join ( map ( str , mylist ) )
np array ( [ [ x , x ] , [ x , x ] ] , dtype='m8 [ ms ] ' )  astype ( 'o ' ) [ 0 , 1 ]
return '' join ( random choice ( alphabet ) for i in range ( length ) )
retcode = os system ( `` echo 'foo ' & > /dev/null '' )
{ x : ( 0 ) for x in string printable }
return { 'date_now ' : datetime datetime now ( ) }
datetime strptime ( '2014-12-04 ' , ' % y- % m- % d ' )  date ( )
[ expensive_function ( x ) for x in range ( 5 ) if expensive_function ( x ) % 2 == 0 ]
tuple ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) )
[ map ( int , x ) for x in values ]
a view ( 'u1 ' )  reshape ( 4 , -1 ) [ : , 1:3 ]
re sub ( ' ( < ! -- ) | ( < ! -- ) ' , ' < comment > ' , child text , flags=re multiline )
df [ 'month_15 ' ]  astype ( 'datetime64 [ d ] ' )  tolist ( )
[ 'sin ' , '* ' , 'w ' , 'time ' ]
var < datetime datetime today ( ) - datetime timedelta ( hours=1 )
df [ df [ 'c ' ] > 0 5 ] [ [ 'b ' , 'e ' ] ]  values
alist , blist = [ [ x for x in a if x [ 0 ] == i ] for i in ( 0 , 1 ) ]
`` `` '' : '' '' ''  join ( x encode ( 'hex ' ) for x in 'hello world ! ' ) 
pool = pool ( 4 , initializer , ( ) )
df [ 'std ' ]  plot ( ax=axarr [ 1 ] )
dict ( x split ( ' : ' ) for x in lis )
' % % s % s ' % 'x '
`` `` '' { : , } '' '' ''  format ( 10000 21 )
app mainloop ( )    
browser = webdriver safari ( )
print ( math ceil ( 4 2 ) )
r = requests get ( 'http : //myserver/emoncms2/api/post ' , data=payload )
tf sqrt ( tf reduce_mean ( tf square ( tf sub ( targets , outputs ) ) ) )
`` `` '' { 0 : > 5 } '' '' ''  format ( 'ss ' )
request_csrf_token = request meta get ( 'http_x_csrftoken ' , '' )
os system ( 'open ' + filename )
sorted ( [ 10 , 3 , 2 ] )
ones = [ ( x , y ) for x , y in l if y == 1 ]
'dealer has % s showing   ' % ( self dealer [ 0 ] , self dealer [ 1 ] )
gtk main ( )        
[ ( s + mystring ) for s in mylist ]
ser readline ( )
random choice ( [ 'a ' , 'b ' , 'c ' , 'd ' ] )
return [ process_row ( row ) for row in table xpath ( ' /tr ' ) ]
result = sum ( x for x in range ( 1 , 401 , 4 ) )
value = mydict get ( 'lastname ' , mydict get ( 'firstname ' , mydict get ( 'username ' ) ) )
doctest testmod ( )
int ( float ( '20 0 ' ) )
os chmod ( path , mode )
df pivot ( index='client_id ' , columns='month ' , values='deltas ' )
[ [ 0 4 , 0 6 , 0 0 , 0 0 ] , [ 0 2 , 0 4 , 0 4 , 0 0 ] , [ 0 0 , 0 0 , 0 4 , 0 6 ] ]
df corr ( )  iloc [ : -1 , ( -1 ) ]
[ 0 ] * 4
s to_frame ( name='column_name ' )  to_excel ( 'xlfile xlsx ' , sheet_name='s ' )
list ( [ x for x in totalist if x [ :2 ] == [ 'a ' , 'b ' ] ] )
newstring = re sub ( '\\boldword\\b ' , 'newword ' , oldstring )
sorted ( l , key=lambda i : hypot ( i [ 0 ] - pt [ 0 ] , i [ 1 ] - pt [ 1 ] ) )
session = session get_by_id ( sid )
print ( json dumps ( 'r\xc5\xaf\xc5\xbee ' , ensure_ascii=false ) )
f write ( ' # data for class a\n ' ) 
`` `` '' \\ $ \\d+ ( ? : \\ \\d { 2 } ) ? '' '' ''
`` `` '' a single ' char '' '' ''  replace ( `` ' '' , '' )
`` `` '' `` '' ''  join ( re split ( ' ( ? < = [   ? ! ] ) \\s+ ' , phrase , 2 ) [ : -1 ] )
ar = [ r [ 0 ] for r in cur fetchall ( ) ]
all_subdirs = [ d for d in os listdir ( '   ' ) if os path isdir ( d ) ]
frozenset ( list ( a items ( ) ) )
base64 b64decode ( 'ame= ' )  decode ( 'utf-16be ' )
df = pd read_csv ( 'c : \\temp1 txt ' , parse_dates= [ 0 ] , infer_datetime_format=true )
myclass ( )  say ( 'hello ' )
pd dataframe ( np vstack ( sometuple )  t , columns= [ 'birdtype ' , 'birdcount ' ] )
{ 'apple ' : 'cat ' , 'banana ' : 'dog ' }
tuplex = [ x for x in tuplex if x > 5 ]
norm ppf ( norm cdf ( 1 96 ) )
re findall ( ' [ a-z ] * ' , '123abc789 ' )
re findall ( ' [ a-z ] * ' , '123456789 ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                    
root = tree getroot ( )
subprocess call ( [ 'ls ' , '-l ' ] )
sorted ( set ( )  union ( *input_list ) )
plt gca ( )  set_position ( [ 0 , 0 , 1 , 1 ] )
[ 'e ' , 'f ' ]
outbytes = yourstring encode ( 'utf-8 ' )
hex ( 8 )  replace ( '0x ' , '' )
`` `` '' { 0 :  2f } '' '' ''  format ( 5 )
list2 = list1 + [ '' ] * ( 5 - len ( list1 ) )
d = { k : [ ] for k in keys }
text = text replace ( 'very ' , 'not very ' , 1 )
f close ( )                
print ( '' join ( x stripped_strings ) )
forms modelform __init__ ( self , *args , **kwargs )
os path dirname ( os path join ( output_dir , '' ) )
socket socket ( socket af_inet , socket sock_dgram )
file read ( 1 )
obj has_perm ( 'drivers read_car ' )
f seek ( 0 )
hex_list = ( ' { :02x } ' format ( ord ( c ) ) for c in fp read ( ) )
item objects values ( 'category ' )  annotate ( count ( 'category ' ) )  order_by ( )
tree find ( ' //enddate ' )  text = '1/1/2011 '
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                     
d [ 'a ' ] [ : -1 ] < d [ 'c ' ] [ 1 : ]
print ( nat index ( nat germany ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                      
plt gca ( )  xaxis set_major_formatter ( mdates dateformatter ( ' % m/ % d/ % y ' ) )
df [ 'month_15 ' ]  astype ( 'datetime64 [ d ] ' )  dtype
plt subplots_adjust ( bottom=0 2 )
random choice ( string ascii_letters + string digits )
re findall ( ' ( b+ab+ ) + ' , mystring )
driver get ( 'https : //www sunnah com/bukhari/5 ' )
form = mymodelform ( request post , instance=my_record )
a = [ map ( int , row split ( ) ) for row in stdin ]
[ ' { :  2f } ' format ( x ) for x in nums ]
list ( itertools accumulate ( lst , lambda a , b : tuple ( map ( sum , zip ( a , b ) ) ) ) )
plt axis ( 'tight ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                       
main ( )    
numpy random shuffle ( a [ 1 : ] )
simplelist append ( x )
[ word for line in f for word in line split ( ) ]
print ( arr [ [ 1 , 4 , 5 ] ] )
imagedata image = str ( self request get ( 'image ' ) )
integers = [ ( int ( i ) - 1 ) for i in line split ( ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                        
print ( list ( itertools chain ( * [ l for l in lst if l is not none ] ) ) [ -5 : ] )
int ( ' { 0 : b } ' format ( n ) [ : :-1 ] , 2 )
`` `` '' ( desired ) +| ( input ) +| ( strings ) + '' '' ''
p = ax scatter ( xs , ys , zs , c=cs , marker=m )
re split ( ' ( ? u ) \\s ' , 'a\u200bc d ' )
list ( itertools chain from_iterable ( list ( d values ( ) ) ) )
`` `` '' , `` '' ''  join ( ' { } { } ' format ( k , v ) for k , v in list ( d items ( ) ) )
collections counter ( a )
self show ( ) 
{ d [ 0 ] : ( ' ' join ( d [ 1 : ] ) if d [ 1 : ] else 0 ) for d in data }
[ numbers [ i % len ( numbers ) ] for i in range ( start , start + len ( numbers ) ) ]
new_tag = self new_soup new_tag ( 'div ' , id='file_history ' )
logging getlogger ( )  handlers [ 0 ]  setformatter ( fr )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                         
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                          
json dumps ( [ dict ( mpn=pn ) for pn in lst ] )
s = re split ( ' [ 0-9 ] { 5 , } ' , string ) [ 0 ]  strip ( )
'repr : % r str : % s ' % ( 'foo ' , 'foo ' )
plt imshow ( bg , cmap=plt get_cmap ( 'gray ' ) , vmin=0 , vmax=255 )
df = df drop ( 'location ' , axis=1 )
browser get ( 'http : //www google com ' )
plt imshow ( cv2 cvtcolor ( cube , cv2 color_bgr2rgb ) )
super ( mysubclassbetter , self )  __init__ ( )
reactor run ( )  
df [ 'c ' ] = numpy where ( df [ 'b ' ] > 5 , df [ 'a ' ] , 0 1 * df [ 'a ' ] * df [ 'b ' ] )
print ( list_end_counter ( [ 1 , 2 , 1 , 1 , 1 , 1 , 1 , 1 ] ) )
map ( itemgetter ( 1 ) , elements )
root deiconify ( )
l [ :3 ] + l [ -3 : ]  
test reshape ( ( 4 , 4 ) ) [ : , :2 ]  reshape ( ( 2 , 4 ) )
foo = '' join ( foo split ( ) ) [ : -3 ]  upper ( )
dt = tz localize ( naive , is_dst=true )
print ( json dumps ( result ) )
cur execute ( 'select 1 as a ' )
print ( applejuice __name__ )
sys path append ( module_path )
d += datetime timedelta ( 1 )
subprocess call ( cmd , stdin=f )
map ( lambda y : [ np mean ( y [ i : i + length ] ) for i in range ( 0 , len ( y ) , length ) ] , a )
testarray = ast literal_eval ( teststr )
np dot ( x , y ) 
from functools import reduce reduce ( lambda a , b : [ a , b ] , [ 1 , 2 , 3 , 4 ] , 'seed ' )
self variable_evidence arrays append ( ( self , 'basic_in ' ) )
bool ( random getrandbits ( 1 ) )
os kill ( 5383 , signal sigkill )
( arr == arr [ 0 ] )  all ( )
[ ( 0 , 0 , 1 , 1 ) , ( 0 , 1 , 0 , 1 ) ]
binary_f ( lambda v : v > = '4 2 ' , [ '1 0 ' , '1 14 ' , '2 3 ' , '3 1 ' , '4 ' ] )
gevent joinall ( jobs )
test __defaults__
tuple ( a [ : -1 ]  split ( ' ; ' ) )
myarray = np load ( open ( 'array npy ' , 'rb ' ) )
df [ [ 'b ' , 'c ' ] ]  iloc [ [ 2 , 4 ] ]
sys exit ( main ( sys argv [ 1 ] , sys argv [ 2 ] ) )
a = np delete ( a , 50 , 1 )
print ( json dumps ( result ) ) 
pd melt ( df )  groupby ( [ 'variable ' , 'value ' ] ) [ 'value ' ]  count ( )  unstack ( )  t
my_dictionary = dict ( map ( lambda k_v : ( k_v [ 0 ] , f ( k_v [ 1 ] ) ) , iter ( my_dictionary items ( ) ) ) )
urllib parse unquote ( 'id % 3d184ff84d27c3613d & quality=medium ' )
hwnd = win32gui getforegroundwindow ( )
return zipfile zipfile ( path )
[ sum ( zip ( *x ) [ 1 ] ) for x in data ]
colored red ( 'red string ' )
plt plot ( [ 1 , 2 ] , lw=4 , c= ' # 8f9805 ' )
data groupby ( level= [ 0 , 1 ] )  sum ( )
res setdefault ( item [ 'a ' ] , [ ] )  append ( item )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                           
sys exit ( 1 )  
print ( prda decode ( 'utf-8 ' ) )
'\ud800 ' , '\udc00 ' , '- ' , '\udbff ' , '\udfff '
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                            
mymodel objects filter ( title__exact= '' )
img = image open ( file )
res_list = [ i [ 0 ] for i in rows ]
df groupby ( [ 'col5 ' , 'col2 ' ] )  size ( )  reset_index ( )  groupby ( 'col2 ' ) [ [ 0 ] ]  max ( )
plt savefig ( 'myfig png ' , dpi=1000 )
sys exit ( 1 )   
url ( '^profile/ ( ? p < user_id > \\d+ ) / $ ' , '     ' , name='profile ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                             
im = cv2 imread ( 'image1 png ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                              
logger error ( 'test abc ' )
a_string = 'this is a string '
np polyfit ( x , y , 1 )
subprocess call ( [ 'rxvt ' , '-e ' , 'python bb py ' ] )
a [ f ]
score = sum ( [ ( x * y ) for x , y in zip ( a , b ) ] )
{ 'color ' : 'orange ' , 'data ' : 'none ' , 'size ' : 'big ' }
frame = pd read_csv ( path , names=columns )
b = [ i for sub in a for i in sub ]
`` `` '' '' '' ''  join ( reverse ( 'hello ' ) )
df plot ( style= [ 'o ' , 'rx ' ] )
item_pipelines = { 'myproject pipelines csvpipeline ' : 300 }
[ j for i in range ( 100 ) if i > 10 for j in range ( i ) if j < 20 ]
return render_template ( 'hello html ' , name=name )
re split ( '\\s+ ' , s )
list ( product ( list ( range ( 3 ) ) , repeat=4 ) )
s translate ( none , ' !   ; , ' )
app = bottle bottle ( )
a = array ( [ [ 2 , 3 , 4 ] , [ 3 , 4 , 5 ] ] )
yourstring = '' join ( ( 'l ' , 'yourstring ' , 'll ' ) )
os close ( fh2 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                               
l sort ( key=lambda x : x count ( '+ ' ) )
print ( w cget ( 'text ' ) )
df = pd dataframe ( { 'r ' : px2 [ : , ( 0 ) ] , 'g ' : px2 [ : , ( 1 ) ] , 'b ' : px2 [ : , ( 2 ) ] } )
df groupby ( 'binned_a ' )  describe ( )  unstack ( )
os path isfile ( 'bob txt ' )
im save ( 'out png ' )
cursor commit ( ) 
[ [ y for y in x if y not in to_del ] for x in my_list ]
[ 1 , 2 , 3 , 4 ]  
my_list = [ line rstrip ( '\n ' ) for line in f ]
plt figure ( )  
print ( sum ( map ( ord , my_string ) ) )
a [ key ]  append ( 1 )
c most_common ( 1 )
sum ( d values ( ) )   
return 'hello world ! % s , % s ' % ( x , y )
np arange ( 3 )
subdomain = url hostname split ( '   ' ) [ 0 ]
[ ( int ( i ) if i isdigit ( ) else float ( i ) ) for i in s ]
str trim ( )  split ( '\\s+ ' )
x = [ [ none , none , none , none , none , none ] ] * 6
[ 'code ' , 'reference ' , 'type ' , 'amount ' ]
sql write_frame ( price2 , name='price2 ' , con=cnx )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                
plt minorticks_off ( )
my_pattern = re compile ( '\xde\xad [ @ -o ]   ' )
output close ( ) 
`` `` '' a string '' '' ''  decode ( 'utf-8 ' )
decimal power ( decimal ( '2 ' ) , decimal ( '2 5 ' ) )
sorted ( iter ( mydict items ( ) ) , key=lambda k_v : sum ( k_v [ 1 ] ) , reverse=true ) [ :3 ]
data = np transpose ( data , ( 0 , 3 , 1 , 2 ) )
re sub ( ' ( ? < =\\  ) ( ? ! \\s ) ' , ' ' , para )
ax get_xaxis ( )  get_major_formatter ( )  set_scientific ( false )
app = flask ( __name__ )   
forms [ 3 ] [ 'sex ' ] = [ 'male ' ]
tree delete ( *tree get_children ( ) )
filename startswith ( 'run ' ) and filename endswith ( ' py ' )
key = lambda d : ( not 'rank ' in d , d [ 'rank ' ] )
[ n for i , n in enumerate ( xs ) if i == 0 or n ! = xs [ i - 1 ] ]
foo ( )  
dev = boto3 session session ( profile_name='dev ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                 
r = np ptp ( a , axis=1 )
d update ( ( b , a [ : , ( i ) ] ) for i , b in enumerate ( a ) )
subprocess popen ( [ 'subl ' , '-w ' , 'parameters py ' ] )  wait ( )
indices = [ i for i , s in enumerate ( mylist ) if 'aa ' in s ]
modela objects filter ( q ( modelb___field2='b2 ' ) | q ( modelc___field3='c3 ' ) )
cbar set_ticklabels ( [ mn , md , mx ] )
next ( ( i for i , val in enumerate ( lst ) if np all ( val == array ) ) , -1 )
reactor run ( )   
c1 [ np logical_and ( c2 == 2 , c3 == 3 ) ]
fig show ( ) 
u = user ( name=request post get ( 'user ' ) )
root mainloop ( )                                         
df groupby ( df index year // 10 * 10 )  sum ( )
x = [ [ foo for i in range ( 10 ) ] for j in range ( 10 ) ]
self response out write ( self request body )
plt figure ( figsize= ( 10 , 8 ) )
d [ 'a ' ] [ 1 : ] < d [ 'c ' ] [ : -1 ]
reg = re compile ( '\\d { 3 } \\d { 3 } \\d { 4 } ' )
new_list = [ ' ' join ( words ) for words in words_list ]
plt legend ( loc='upper left ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                  
dict ( config items ( 'section ' ) )
`` `` '' hello '' '' ''  decode ( encoding )
category objects filter ( category__isnull=true )
ax w_yaxis set_ticklabels ( [ ] )
sys path append ( os path join ( os path dirname ( __file__ ) , '   ' , 'common ' ) )
df to_csv ( 'pandas_test txt ' , header=false , index=false , na_rep= ' ' )
[ len ( x ) for x in a [ 0 ] ] 
[ 'elm0 ' , 'elm1 ' , 'elm2 ' , 'elm9 ' , 'elm10 ' , 'elm11 ' , 'elm12 ' , 'elm13 ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                   
d [ 'foo ' ]
os path join ( mydir , myfile )
[ 1 , 2 , 3 , 2 ]  index ( 2 )
df iloc [ df index get_level_values ( 'a ' ) == 1 ]
pattern = ' ( dt\\s+ ) + ( ( rb\\s+ ) +| ( jj\\s+ ) + ) ( nn\\s* ) *nn $ '
print ( repr ( a )  replace ( ' ' , '\\s ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                    
rename ( 'c : \\temp\\xx ' , '* doc ' , 'new ( % s ) ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                     
[ ( false , 0 ) , ( false , 1 ) , ( false , 2 ) , ( false , 3 ) , ( false , 4 ) , ( true , none ) ]
sys modules [ 'm ' ]
print ( ' , ' join ( map ( str , list ) ) )
driver quit ( )   
df = df [ df [ 'found ' ] == 'no match ' ]
map ( ord , 'hello , \u9a6c\u514b ' )
list1 [ 0 ] [ 2 ]
dummy = np array ( [ [ 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 1 ] ] )  t
print ( type ( collection1 find_one ( ) [ 'albums ' ] [ 0 ] ) )
[ v for i , v in enumerate ( mylist ) if i not in toremove ]
( df == 1 )  sum ( )
asyncio get_event_loop ( )  run_forever ( )
x = [ 1 , 3 , 5 ]
np flatnonzero ( x [ : -1 ] ! = x [ 1 : ] )  mean ( ) + 0 5
datetime ( date year , date month , date day )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                      
bool ( re compile ( '^ [ a-z0-9\\   ] +\\z ' )  match ( '1234\n ' ) )
return struct unpack ( ' < i ' , struct pack ( ' > i ' , i ) ) [ 0 ]
df [ 'quarter ' ] = df [ 'date ' ]  dt quarter
df unstack ( )  sample ( 3 , replace=true )  stack ( )
return map ( lambda f : f ( *args ) , funcs )
`` `` '' τoρνoς '' '' ''  decode ( 'utf-8 ' )
numpy zeros ( ( i , j , k ) )
y = [ i [ 0 ] for i in x ] 
print ( ' ' join ( format ( ord ( x ) , 'b ' ) for x in a ) )
mystring = mystring replace ( '\xc2\xa0 ' , ' ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                       
df ix [ :5 , :10 ]
[ x for x in a if x < = 1 or x > = 4 ]
b = np sort ( a [     , : -1 ] , axis=-1 )
proc communicate ( )
`` `` '' there is a way '' '' ''  title ( )
f ( *args , **kwargs )
from functools import reduce reduce ( np dot , [ s0 , sx , sy , sz ] )
`` `` '' hello world foo bar '' '' ''  rsplit ( '   ' , 1 )
mylist = [ i for i in mylist if i ! = '' ]
c = [ item for pair in zip ( a , b ) for item in pair ]
ax lines pop ( 0 )
self assertequal ( 'foo ' , 'bar ' )
s = re sub ( ' [ ^\\w\\s ] ' , '' , s )
driver find_element_by_name ( 'submit ' )  click ( )
unicodedata normalize ( 'nfkd ' , source )  encode ( 'ascii ' , 'ignore ' )
array = np array ( [ 1 , 2 , 3 , 4 ] )
os system ( 'some_command & ' )
re sub ( '|' join ( map ( re escape , replace_list ) ) , '' , words )
plt imshow ( mmm * data , cmap='rainbow ' )
sorted ( thing objects all ( ) , key=lambda t : t name )
product ( list ( range ( 3 ) ) , list ( range ( 4 ) ) , [ 'a ' , 'b ' , 'c ' ] , some_other_iterable )
sudo ( 'python manage py collectstatic -- noinput ' , user='www-data ' )
ssh close ( )  
sock setsockopt ( socket sol_socket , socket so_reuseaddr , 1 )  
root mainloop ( )                                          
`` `` '' \\bcve-\\d+ ( ? : -\\d+ ) ? '' '' ''
os system ( 'cd c : \\mydir ' )
ast literal_eval ( `` u ' '' + zzz + `` ' '' )
a [ : , ( 0 ) ] [ mask ]
a [ : , 3 : ]  flat [ np in1d ( a [ : , 3 : ] , b ) ] = 0
plt plot ( x [ i : i + 2 ] , y [ i : i + 2 ] )
l = [ i split ( ) for i in l ]
print ( struct unpack ( ' > i ' , '\x00 ' + s ) [ 0 ] )
reactor run ( )    
ax set_yticklabels ( [ ] )
`` `` ''  ( ? = [ mbdpi ] { 3 }  ) \\w*i\\w* '' '' ''
self searchqueryset filter ( group__isnull=true )
some_list remove ( thing )
print ( re sub ( ' [ \\ [ \\ ] ] ' , '' , np array_str ( a ) ) )
datetime datetime ( 1 , 1 , 1 ) + datetime timedelta ( microseconds=ticks / 10 )
return [ x for x in l if x % 2 == 0 ]
logger setlevel ( logging debug )    
np cross ( a , b , axis=0 )
c = dict ( list ( a items ( ) ) | list ( b items ( ) ) )
{ 'mike ' : [ [ 1 , 4 ] , [ 5 , 7 ] ] , 'joe ' : [ [ 5 , 7 ] , [ 6 , 9 ] , [ 7 , 4 ] ] }
cursor execute ( 'select @ x : = @ x+1 from some_table ' )
self canvas pack ( )
plt fill_between ( x , y2 , y3 , color= 'm ' , alpha=0 5 )
root mainloop ( )                                           
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                        
[ 1 , 1 , 1 ] < [ 1 , 1 , 2 ]
df query ( 'a in @ keys ' )
sys stdout flush ( )               
pd concat ( [ df2 [ df2 name == 'jane ' ]  t , df2 [ df2 name == 'joe ' ]  t ] )
df iloc [ i ]
m = list ( set ( l ) )
df [ df apply ( lambda x : min ( x ) == max ( x ) , 1 ) ]
exec ( compile ( open ( 'c : \\test py ' )  read ( ) , 'c : \\test py ' , 'exec ' ) )
app run ( debug=true )         
zip ( my_list , map ( my_dictionary get , my_list ) )
[ [ 9 , 30 , 'am ' ] , [ 5 , 0 , 'pm ' ] ]
request meta [ 'query_string ' ]
np column_stack ( [ [ 1 , 2 , 3 , 4 , 5 ] , [ 1 , 2 , 3 , 4 , 5 ] ] )
logger = logging getlogger ( __name__ )   
gzip gzipfile ( 'output file name ' , 'wb ' )
s split ( ' ' , 1 )
my_list sort ( key=nonesorter )
fieldset = dict ( ( k , v ) for k , v in fieldset items ( ) if len ( v ) ! = 1 )
__init__ py        
asserttrue ( math isnan ( nan_value ) )
sum ( v for k , v in c items ( ) if v > 1 )
s send ( my_bytes )
pylab show ( )
np place ( a , np isnan ( a ) , 0 )
find_nth ( 'foofoofoofoo ' , 'foofoo ' , 2 )
element = driver find_element_by_class_name ( 'class_name ' )  text
writer writerows ( cursor fetchall ( ) )
datetime datetime strptime ( conformed_timestamp , ' % y % m % dt % h % m % s  % f % z ' )
array ( [ [ 0 , 1 , 2 ] , [ 0 , 2 , 0 ] , [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 1 , 2 ] ] )
y mean ( axis=1 )  mean ( axis=-1 )
s [ 'b ' ]  iloc [ 1:10 ]
zipfile write ( a , compress_type=zipfile zip_deflated )
sys stdout flush ( )                
draw ( )
pylab show ( ) 
a = numpy array ( [ 0 , 3 , 0 , 1 , 0 , 1 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 3 , 4 ] ) collections counter ( a )
from kazoo client import kazooclient
print ( 'pictures\\12761_1 jpg' replace ( '\\ ' , '/ ' ) )
x loc [ ( x b > = 111 0 ) & ( x b < = 500 0 ) ]  set_index ( [ 'a ' , 'b ' ] )
basetwo ( '10010 ' )
re findall ( '\\d+ ' , s )
setattr ( self , k , v )
logging debug ( 'this is a message from another place   ' )
x reshape ( 2 , 2 , 5 )  transpose ( 1 , 0 , 2 )  reshape ( 4 , 5 )
l = [ item lower ( ) for item in l ]
[ item for item in my_list if some_condition ( ) ] 
np maximum accumulate ( ( a2 < 0 ) [ : , : :-1 ] , axis=1 ) [ : , : :-1 ]
system ( 'python myscript py ' ) 
session query ( q )  limit ( 10 )
tuple ( [ tuple ( row ) for row in myarray ] )
help ( my_func )
p1 start ( )
ax tick_params ( labelbottom='off ' , labeltop='on ' )
browser execute_script ( 'return globalvar ; ' )
post objects filter ( createdat__lte=datetime now ( ) - timedelta ( days=plan days ) )
img save ( 'greyscale png ' )
coord = tuple ( sum ( x ) for x in zip ( coord , change ) )
os environ [ 'application_id ' ]
sorted ( lst , key=lambda l : ( l lower ( ) , l ) )
df drop ( [ 't1_v6 ' ] , axis=1 )
print ( struct unpack ( ' ! i ' , socket inet_aton ( '127 0 0 1 ' ) ) [ 0 ] )
get_group_rows ( df , 'a ' , 'b ' , 'median ' , ' > ' )
users = relationship ( 'user ' , backref='account ' )
[ 'one ' , 'two ' , 'eerht ' , 'four ' , 'five ' , 'xis ' , 'seven ' , 'eight ' , 'enin ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                         
time mktime ( time gmtime ( 0 ) )
print ( url ( 'blog ' , id=123 , qualified=true , host='example com ' ) )
new_items = [ ( x if x % 2 else none ) for x in items ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                          
getattr ( foo_obj , command ) ( )
headers = [ ( 'x-attribute ' , 'a ' ) , ( 'x-attribute ' , 'b ' ) ]
output write ( ' { 0 } : { 1 } \n' format ( nfeature [ 0 ] + 1 , nfeature [ 1 ] ) )
list ( itertools product ( list ( range ( 1 , 3 ) ) , list ( range ( 1 , 5 ) ) ) )
print ( doc xpath ( '//aws : weather/aws : ob/aws : temp ' ) [ 0 ]  text )
df = pd dataframe from_dict ( data )
df resample ( '30s ' , how= { 'volume ' : 'sum ' } )
sys setdefaultencoding ( 'utf8 ' )
df plot ( kind='bar ' )
root title ( 'ttk notebook ' )
print ( d [ 'glossary ' ] [ 'title ' ] )
print ( result group ( 0 ) )
execute_from_command_line ( [ 'manage py ' , 'syncdb ' ] )
ordereddict ( heapq nlargest ( 3 , iter ( mydict items ( ) ) , key=lambda tup : sum ( tup [ 1 ] ) ) )
time sleep ( 1 )             
form = mymodelform ( instance=someinst )
reader = csv reader ( open ( 'test csv ' ) , delimiter='| # | ' )
self bind ( wx evt_paint , self onpaint )
db execute ( 'insert into json_col values ( ' + json_value + ' ) ' )
list filter ( _ ! = somevalue )
df [ 'c ' ] = df apply ( lambda row : row [ 'a ' ] + row [ 'b ' ] , axis=1 )
{ l [ 1 ] : l for l in lol }
subprocess call ( [ 'pip ' , 'install ' , '-e ' , home_dir , 'django ' ] )
ax1 scatter ( data [ 0 ] , data [ 1 ] , marker='o ' , c='b ' , s=data [ 2 ] , label='the data ' )
data = json loads ( request post [ 'mydata ' ] ) if 'mydata ' in request post else { }
any ( k in s for k in keywords )
print ( ( name , 'has been sorted into ' , ransport ) )
print ( type ( tf constant ( [ 1 , 2 , 3 ] )  eval ( ) ) )
re sub ( '\\b0+ ( ? ! \\b ) ' , '' , '012 + 2 + 0 - 01 + 204 - 0 ' )
grades append ( lists [ i ]  rstrip ( '\n ' )  split ( ' , ' ) )
len ( a ) == len ( b ) and all ( a count ( i ) == b count ( i ) for i in a )
print ( date fromtimestamp ( 1241711346274 / 1000 0 ) )
request get get ( 'mains ' , '' )
a [ a == 2 ] = 10
self x config ( state='normal ' )
counter objects filter ( name=name )  update ( count=f ( 'count ' ) + 1 )
df [ [ 0 , 2 , 3 ] ]  apply ( ' , ' join , axis=1 )
sorted ( lst , key=operator itemgetter ( 1 ) , reverse=true )
cols = list ( df columns values ) 
ax legend ( ) 
re sub ( '\\s\\s+ ' , ' ' , s )
[ x for x in primes if '0 ' not in str ( x ) ]
gtk main ( )         
df [ df [ 'count ' ] == df groupby ( [ 'mt ' ] ) [ 'count ' ]  transform ( max ) ]
plt colorbar ( )  set_label ( label='a label ' , size=15 , weight='bold ' )
dict ( ( k , v [ '_status ' ] [ 'md5 ' ] ) for k , v in list ( json_result items ( ) ) )
global_dict [ 'baz ' ] = 'world '
os path isfile ( 'c : \\users\\xxx\\desktop\\xxx ' )
myscript py
s split ( 'fdasfdsafdsa ' , 1 ) [ 0 ]
nx draw ( g )
signal signal ( signal sigint , signal_handler )
root mainloop ( )                                            
' % s/ % s/ % s ' % ( dt month , dt day , dt year )
df = df append ( pd read_sql ( querystring , cnxn , params= [ i ] ) )
df [ 'c ' ] = df [ 'b ' ]  fillna ( df [ 'a ' ] )
nx draw_networkx_edges ( g , pos , edgelist=red_edges , edge_color='r ' , arrows=true )
print ( resp [ 'headers ' ] [ 'host ' ] )
json_file write ( ' { } \n' format ( json dumps ( data ) ) )
os path abspath ( 'link/file ' )
[ { 'y ' : 2 , 'location ' : 2 } , { 'z ' : 3 , 'location ' : 2 } ]
cmdclass = { 'install ' : install_ }
os system ( `` bash -c 'echo $ 0 ' '' )
n = sum ( [ ( len ( v ) + 1 ) for k , v in list ( dict_test items ( ) ) ] )
`` `` '' , '' '' ''  join ( map ( str , a ) )
print ( soup prettify ( ) ) 
[ random choice ( list_of_lists ) for _ in range ( sample_size ) ]
myset = set ( ( x , y ) for x in range ( 1 , 51 ) for y in range ( 1 , 51 ) )
bisect ( list_of_tuples , ( 3 , none ) )
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] ]
s groupby ( level= [ 'first ' , 'second ' ] )  sum ( )
bool_list = [ false ] * len ( bool_list )
sorted ( unsorted_list , key=lambda x : int ( x [ 3 ] ) )
numpy intersect1d ( a , b )
label3 = numpy dstack ( ( label255 , label255 , label255 ) )
a [ np ix_ ( [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ) ] 
spdf rdd first ( )
[ i for i , ( a , b ) in enumerate ( zip ( vec1 , vec2 ) ) if a == b ] 
exec ( compile ( open ( 'c : \\x\\y\\z ' )  read ( ) , 'c : \\x\\y\\z ' , 'exec ' ) )
root = tk ( )
return super ( myadmin , self )  formfield_for_dbfield ( db_field , **kwargs )
json loads ( s ) 
wjdata = json load ( urllib request urlopen ( 'url ' ) )
tostring ( element )  split ( ' > ' , 1 ) [ 1 ]  rsplit ( ' < / ' , 1 )
dict ( j for i in l for j in list ( i items ( ) ) )
line = line split ( '\t ' )
sys stdout write ( 'hello ' )
decimal ( '1 03 ' )
ax set_xticks ( [ ] ) 
outfile write ( line )
df_one join ( df_two , df_one [ 'col1 ' ] == df_two [ 'col1 ' ] , 'inner ' )
print ( re findall ( '^   *\\  $ \\z ' , data , re multiline ) )
x [ [ [ 1 ] , [ 3 ] ] , [ 1 , 3 ] ]
numpy repeat ( [ 1 , 2 , 3 , 4 ] , [ 3 , 3 , 2 , 2 ] )
map ( lambda x : x + 1 , [ 1 , 2 , 3 ] )
df = pd dataframe ( data=matrix toarray ( ) , columns=names , index=raw )
print ( ' ' join ( i ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                           
a = matrix ( [ [ 2 , 2 , 3 ] , [ 11 , 24 , 13 ] , [ 21 , 22 , 46 ] ] )
[ { 'data ' : 0 } , { 'data ' : 1 } , { 'data ' : 2 } ]
pattern = re compile ( ' [ ^\\u0000-\\uffff ] ' , re unicode )
print ( df [ 'new_col ' ] )
df [ [ 'adj close ' , '100ma ' ] ]  plot ( ax=axarr [ 0 ] )
a indptr = np array ( [ 0 , 0 , 0 , 1 , 1 , 1 , 2 ] , dtype=np int32 )
print ( [ s [ i ] for i in index ] )
print ( ( i , [ round ( 255 * x ) for x in rgb ] ) )
[ -2 , -2 , -2 , -2 , -8 , -8 , -8 , -8 , -8 , -8 ]
ssh_client set_missing_host_key_policy ( paramiko autoaddpolicy ( ) ) 
[ 'e ' , 'd ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                            
silly_var ( )
do_stuff ( )
df to_excel ( 'test xlsx ' , sheet_name='sheet1 ' , index=false )
cv2 waitkey ( 0 )   
{ 'some_key ' : 'some_val ' , 'other_key ' : 'new_val ' }
r headers [ 'content-disposition ' ]
plt style use ( 'seaborn-dark-palette ' )
list ( range ( 11 , 17 ) ) 
thread ( target=fct )  start ( )
ax spines [ 'left ' ]  set_visible ( false )
ax spines [ 'top ' ]  set_visible ( false )
[ len ( x ) for x in s split ( ) ] 
sys path append ( '/var/www/cloudloon ' )
[ y for y in a if y not in b ] 
map ( lambda x : x strip ( ) , l )
df insert ( idx , col_name , value )
return [ ( x + 1 ) for x in y ]
[ ( 3 * x ) for x in [ 111 , 222 , 333 ] ]
defaultdict ( lambda : defaultdict ( dict ) )
plt scatter ( x , y , c=t , cmap='jet ' )
pd read_csv ( 'test ' )
db session add ( query )
df groupby ( 'd ' )  apply ( f )
group objects get ( id=1 )  members filter ( is_main_user=true ) [ 0 ]
l = request user groups values_list ( 'name ' , flat=true )
sqs filter ( has_been_sent=true )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                             
regex = re compile ( '\\d+ ( ? : ,\\d+ ) * ' )
b = df [ ( df [ 'time ' ] > x ) & ( df [ 'time ' ] < y ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                              
urllib request urlopen ( 'http : //www python org/ ' )
return render_template ( 'recipes/createrecipe html ' , form=form )
time sleep ( 30 0 )
rdf unstack ( [ 'first ' , 'third ' ] )
post objects filter ( user=request user )  order_by ( '-timestamp ' )
df sort_index ( ) 
np linspace ( 0 , 5 , 10 )
ax set_zlabel ( 'amount ' )
json_file write ( ' { } \n' format ( json dumps ( new_data ) ) )
numpy transpose ( [ numpy tile ( x , len ( y ) ) , numpy repeat ( y , len ( x ) ) ] )
mylist = [ 'b ' , 'c ' , 'a ' ] mylist sort ( )
np array ( x )  reshape ( 2 , 2 , 4 )
rdd todf ( )  show ( )
df stack ( level=0 )  groupby ( 'team ' )  tail ( 1 )
regex = re compile ( '\\s* [ ff ] eat\\ \\s* ' )
ssh connect ( '127 0 0 1 ' , username='jesse ' , password='lol ' )
admin site unregister ( site )
plt figure ( figsize= ( 5 , 6 ) )
print ( ' { } \n' format ( df ) )
{ i : ( 0 ) for i in range ( 0 , 10 ) }
re sub ( '\\ { \\ {   *\\ } \\ } ' , '' , s )
print ( counter ( [ 3 , 3 , 3 , 4 , 4 , 2 ] )  most_common ( ) )
`` `` '' ( [ 0-9 ] { { 1,3 } } [ % ] ) ( [ { 0 } ] ? ) '' '' ''  format ( config series )
subprocess call ( [ 'python ' , 'helloworld py ' ] )
os setsid ( )
app debug = true 
re findall ( '   { 1,2 } ' , s , re dotall )
drawpropagation ( 1 0 , 1 0 , numpy linspace ( -2 , 2 , 10 ) )
proc wait ( )
kdll createsymboliclinka ( 'd : \testdir ' , 'd : \testdir_link ' , 1 )
df drop ( df ix [ : , 'unnamed : 24 ' : 'unnamed : 60 ' ]  head ( 0 )  columns , axis=1 )
[ item for sublist in ( list_of_lists for item in sublist ) ]
[ a for a in a objects all ( ) if a b_set count ( ) < 2 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                               
session visit ( ' < url to visit with proper cookies > ' )
z = merge_dicts ( a , b , c , d , e , f , g )
df [ 'quantity ' ] = df [ 'quantity ' ]  apply ( lambda x : x * -1 )
logging basicconfig ( level=logging debug )
ax set_xlabel ( 'x label ' )
return int ( s [ 1 : ] , 2 ) / 2 0 ** ( len ( s ) - 1 )
os path splitext ( os path basename ( f ) )
os execv ( '/bin/echo ' , [ 'echo ' , 'foo ' , 'bar ' ] )
print ( ' '' % s '' : % x ' % ( hashstr , hash ) )
[ x [ 0 ] for x in a ] 
any ( i in ' < string > ' for i in ( '11 ' , '22 ' , '33 ' ) )
print ( re sub ( ' [ a-za-z ? ] ' , '' , my_string )  strip ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                
list ( my_dict items ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                 
df [ list ( df [ 'stats ' ] [ 0 ]  keys ( ) ) ] = df [ 'stats ' ]  apply ( pandas series )
list ( a [ np triu_indices ( 3 ) ] )
line = line rstrip ( '\n ' )
array ( [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                  
[ w for w in re split ( '\\w ' , 'hello world , my name is     james ! ' ) if w ]
numpy argwhere ( a max ( ) == a )
connection = cql connect ( 'localhost:9160 ' , cql_version='3 0 0 ' )
l3 = [ x for x in l1 if x not in l2 ]
lines sort ( ) 
np random seed ( 1 )
getattr ( getattr ( getattr ( f , 'bar ' ) , 'baz ' ) , 'quux ' )
return [ t [ len ( parm ) : ] for t in dir split ( '_ ' ) if t startswith ( parm ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                   
datetime datetime strptime ( '5/10/1955 ' , ' % d/ % m/ % y ' )  strftime ( ' % y- % m- % d ' )
filtered_dict = { k : v for k , v in my_dict items ( ) if not st isdisjoint ( v ) }
cur execute ( 'select add_user ( % ( nr ) s , % ( email ) s ,     )     ' , user )
simplelist = [ simpleclass ( count ) for count in range ( 4 ) ]
plt rc ( 'grid ' , linestyle='- ' , color='black ' )
( lambda x , y : x + y ) ( 1 , 2 )
{ { users | selectattr ( 'email ' , 'equalto ' , 'foo @ bar invalid ' ) } }
w [ 'female ' ] = w [ 'female ' ]  map ( { 'female ' : 1 , 'male ' : 0 } )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                    
`` `` '' '' '' ''  join ( sorted ( x ) )
[ add ( x , 2 ) for x in [ 1 , 2 , 3 ] ]
re findall ( '\\d+ ' , `` hello 42 i 'm a 32 string 30 '' )
print ( random choice ( open ( 'wordsforgames txt ' )  readline ( )  split ( ) ) )
array ( [ 0 , 0 , 1 , 0 , 0 , 1 , 0 ] )
[ { 'model ' : 'myapp user ' , 'pk ' : '89900 ' , 'fields ' : { 'name ' : 'clelio de paula ' } } ]
comment = forms charfield ( label= '' , help_text= '' , widget=forms textarea ( ) )
df ix [ : , ( ~np in1d ( df dtypes , [ 'object ' , 'datetime ' ] ) ) ] *= 3
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                     
ax set_xticks ( [ ] )  
doctest testmod ( ) 
data_3levels unstack ( 'l3 ' )  mul ( data_2levels , axis=0 )  stack ( )
df c_contofficeid str replace ( '^12 ' , '' )  to_frame ( )
max ( enumerate ( props ) , key=lambda tup : len ( tup [ 1 ] ) )
( m == 0 )  t nonzero ( )
logging exception ( 'zerodivisionerror : { 0 } ' format ( e ) )
a [ np lexsort ( a [ : , : :-1 ]  t ) ]
plt plot ( x , y ) 
numpy mean ( gp2 )
a [ key ]  append ( 2 )
my_dict2 = { y : x for x , y in my_dict items ( ) }
mongo db collection update ( { } , { ' $ unset ' : { 'parent toremove ' : 1 } } , multi=true )
return func ( *args , **kwargs )
print ( 'a random string : ' + get_random_unicode ( 10 ) )
c execute ( 'create table test ( guid guid primary key , name text ) ' )
os path getsize ( 'large tar gz ' ) > > 20
cursor execute ( sql , ( thedata , ) )
df iloc [ : , ( [ 0 ] ) ]
sum ( [ true , true , true , false , false ] )
return ' ' join ( word [ : :-1 ] for word in sentence split ( ) )
print ( pd dataframe ( list ( file_to_adverb_dict items ( ) ) , columns= [ 'file_names ' , 'col1 ' ] ) )
[ key for key , val in list ( dct items ( ) ) if val ]
int ( 0 if value is none else value )
data = np array ( data , dtype='float ' )
ax2 plot ( x , y , 'bo ' ) 
parser add_argument ( '-c ' , ' -- chunksize ' , type=int , help='no metavar specified ' )
root mainloop ( )                                             
[ heapq nsmallest ( x , 2 ) [ 1 ] for x in list_of_lists ]
plt savefig ( 'piechart png ' , bbox_inches='tight ' )
a = [ ( b + 4 if b < 0 else b ) for b in a ]
[ 'x ' , ' ' , 'y ' , none , ' ' , 'z ' ]
{ 'a ' : '15 ' , 'c ' : 'false ' , 'b ' : '8 ' , 'd ' : ' [ somevar , a=0 1 , b=77 , c=true ] ' }
text_file write ( 'purchase amount : { 0 } ' format ( totalamount ) )
b = a [ : ]
df columns = [ 'w ' , 'x ' , 'y ' , 'z ' ]
assert rdd squares ( )  collect ( ) == rdd map ( lambda x : x * x )  collect ( )
l append ( [ 7 , 8 , 9 ] )
`` `` '' ^ [ \\t ] * # define (  *\\\\\\n ) +   * $ '' '' ''
print ( ' , ' join ( data [ : -2 ] + [ ' and ' join ( data [ -2 : ] ) ] ) )
zipfile zipfile ( zipbytes )
random_key = os urandom ( 16 )
c = ' , ' join ( ' % s= % s ' % t for t in zip ( a , b ) )
np allclose ( a , b )
' , ' join ( my_list [ : -1 ] ) + ' & ' + my_list [ -1 ]
fig = plt figure ( )
http_server listen ( int ( os environ get ( 'port ' ) ) , address=os environ [ 'ip ' ] )
any ( np array_equal ( np array ( [ [ 0 , 0 ] , [ 0 , 0 ] ] ) , x ) for x in my_list )
[ ( x , y ) for x , y in numpy ndindex ( a shape ) ]
admin site register ( user , useradmin ) 
df columns set_levels ( [ 'one ' , 'two ' ] , level=0 , inplace=true )
l = ast literal_eval ( s )
plt draw ( )      
df apply ( lambda x : pd factorize ( x ) [ 0 ] )
df loc [ ( df [ 'type ' ] == 'dog ' ) & df [ 'killed ' ] ]
self process terminate ( ) 
soup = beautifulsoup ( html )
`` `` '' { 0 } { 1 } { 1 } '' '' ''  format ( 'foo ' , 'bar ' )
sorted ( chain ( a , b ) , key=lambda x : x name )
[ { 'a ' : 123 , 'b ' : 1234 } , { 'a ' : 3222 , 'b ' : 1234 } ]
pd dataframe ( s groupby ( level=0 )  apply ( list )  to_dict ( ) )
name = sys argv [ 1 ]
df = pd dataframe ( [ 'some ' , 'short ' , 'string ' , 'has ' , 'foo ' ] , columns= [ 'col1 ' ] )
gtk main ( )          
admin site register ( yourmodel , yourmodeladmin )
int ( 3 1415 )
d = defaultdict ( lambda : defaultdict ( int ) )
my_dict = ast literal_eval ( ' { { { 0 } } } ' format ( my_string ) )
self axes imshow ( self data , interpolation='quadric ' , aspect='auto ' )
a [ i , j ] = 5
sum ( 1 for row in rows for i in row if i )
`` `` '' '' '' ''  join ( map ( chr , l ) )
c bin [ 2 : ]
gtk main ( )           
driver get ( 'http : //www w3c org ' )
[ 0 ] * 10000
print ( pattern match ( 'something/foo-en-gb/file txt ' )  groupdict ( ) )
b = np delete ( a , [ 2 , 3 , 6 ] )
locals ( )  update ( my_dict )
[ ( movie_dict [ 'title ' ] , movie_dict [ 'year ' ] ) for movie_dict in movie_dicts ]
var1 , var2 , var3 = ( ll + [ none ] * 3 ) [ :3 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                      
{ k : sum ( v ) for k , v in list ( trimmed items ( ) ) }
time sleep ( 1 )              
output = np frombuffer ( data , 'b ' )  reshape ( -1 , 3 ) [ : , 1 : ]  flatten ( )  view ( 'i2 ' )
print ( getattr ( somemodule , class_name ) )
f write ( ' ' join ( str ( s ) for s in t ) + '\n ' )
plt savefig ( 'test pdf ' )
df [ 'name ' ] = 'abc '
def utf8len ( s ) : return len ( s encode ( 'utf-8 ' ) )
os path getsize ( 'flickrapi-1 2 tar gz ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                       
time sleep ( 1500 )
input = open ( fullpath , 'rb ' )
chart add_series ( { 'values ' : '=sheet1 ! $ c $ 1 : $ c $ 5 ' , 'fill ' : { 'color ' : 'yellow ' } } )
df [ 'date_int ' ] = df date astype ( np int64 )
s split ( ' & ' )
print ( pdf_file read ( ) )
legend ( )  orientation = 'top_left '
( dist ** 2 )  sum ( axis=1 ) ** 0 5
int ( round ( 123 , -2 ) ) 
df_row_merged = pd concat ( [ df_a , df_b ] , ignore_index=true )
print ( sys stdin read ( ) )
exec ( compile ( open ( 'c : \\python\\main_menu py ' )  read ( ) , 'c : \\python\\main_menu py ' , 'exec ' ) )
p wait ( )  
g write ( ' # comment\n ' )
{ { url_for ( 'static ' , filename= ' [ filenameofstaticfile ] ' ) } }
sheet write ( 1 , 0 , 1 )
lst = [ os path splitext ( x ) [ 0 ] for x in accounts ]
`` `` '' { : *^30 } '' '' ''  format ( 'centered ' )
app run ( host='localhost ' , port=23423 )
eval ( `` __import__ ( 'sys ' )  exit ( 1 ) '' )
eval ( '1 + 1 ' )
odeint ( func , y0 , t , a , b , c )
np hstack ( [ np atleast_2d ( [ 1 , 2 , 3 , 4 , 5 ] )  t , np atleast_2d ( [ 1 , 2 , 3 , 4 , 5 ] )  t ] )
np dot ( i , np ones ( ( 7 , ) , int ) )
soup body findall ( text=re compile ( '^python $ ' ) )
{ ' ' join ( [ keys [ char ] for char in k ] ) : v for k , v in list ( event_types items ( ) ) }
print ( p map_async ( f , [ 1 , 2 , 3 ] ) )
lambda x : x if x < 3 else none
fig colorbar ( p )
sys path append ( os path dirname ( os path dirname ( os path abspath ( __file__ ) ) ) )
df to_csv ( f , index=false , header=false )
bids append ( int ( bid ) )
headerrows [ 0 ] [ 10 ]  findnext ( 'b ' )  string
connection close ( ) 
some_model objects filter ( id__in=ids_list )  delete ( )
df groupby ( 'a ' ) [ 'c ' ]  transform ( zscore )
platform architecture ( )
print ( date strftime ( ' % a , % d % b % y % h : % m : % s ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                        
matplotlib use ( 'module : //mplh5canvas backend_h5canvas ' )
my_list2 , my_list1 = map ( list , zip ( *my_list ) )
return sum ( 1 for c in string if c islower ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                         
[ a [ i // 2 ] for i in range ( len ( a ) * 2 ) ]
wcswidth ( '\xe1\x84\x80\xe1\x85\xa1\xe1\x86\xa8 ' )
urllib parse unquote_plus ( 'andr % c3 % a9+t % c3 % a9chin % c3 % a9 ' )  decode ( 'utf-8 ' )
[ 1505 ]
format ( num , '016b ' )
df [ df [ 'column name ' ]  map ( len ) < 2 ]
print ( 'the average is : ' + format ( average , ' ,  3f ' ) + ' % ' )
pickle dumps ( threading lock ( ) )
fig savefig ( 'sub directory/graph png ' )
df [ df columns difference ( [ 't1_v6 ' ] ) ]
`` `` '' , `` '' ''  join ( map ( str , tups ) )
locals ( ) [ 'i ' ]
os system ( 'cls ' ) 
pd series ( np einsum ( 'ij- > i ' , s values reshape ( -1 , 3 ) ) )
content = request json [ 'content ' ]
open ( f name )  read ( )
sys exit ( )      
ax plot_surface ( x , y , z , rstride=1 , cstride=1 , cmap=cm jet )
df loc [ ( df isnull ( )  any ( axis=1 ) ) , : ] = np nan
data iloc [ 499:999 ]  plot ( y='value ' )
df topandas ( )
int ( sum ( jdcal gcal2jd ( dt year , dt month , dt day ) ) )
a_lower = dict ( ( k lower ( ) , v ) for k , v in list ( a items ( ) ) )
{ tuple ( x ) for x in l1 }  intersection ( map ( tuple , l2 ) )
print ( celery current_task task_id )
starf = [ int ( i ) for i in starf ]
sum ( zip ( *structure ) [ 1 ] )
plt hist ( [ x , y ] , color= [ 'r ' , 'b ' ] , alpha=0 5 )
x reshape ( 2 , 2 , 5 )  transpose ( 1 , 0 , 2 )
locals ( ) [ 4 ]
i = input ( 'please enter name [ jack ] : ' ) or 'jack '
collection1 find ( { 'albums ' : { ' $ in ' : [ 3 , 7 , 8 ] } } )
s1 intersection ( s2 )
plt gca ( )  invert_yaxis ( ) 
[ list ( itertools chain ( *x ) ) for x in zip ( l1 , l2 ) ]
sys stdout write ( '\rcomplete ! \n ' )
ndb keyproperty ( kind='foo ' , required=true )
s = socket socket ( socket af_inet , socket sock_dgram )
tostring ( element )  split ( ' > ' , 1 ) [ 1 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                          
{ k : [ ( a + b ) for a , b in zip ( *v ) ] for k , v in list ( d items ( ) ) }
sys path insert ( 0 , os path join ( project_root , 'apps ' ) )
text = str ( combobox1 currenttext ( ) )
the_dump = json dumps ( [ 'foo ' , { 'bar ' : [ 'baz ' , none , 1 0 , 2 ] } ] )
len ( [ _ for s in re finditer ( ' ( ? =aa ) ' , 'aaa ' ) ] )
df groupby ( [ 'a ' , 's ' ] ) [ cols ]  agg ( [ 'sum ' , 'size ' ] )
datetime datetime combine ( birthdate , datetime time ( ) )
pd read_hdf ( '/tmp/out h5 ' , 'results_table ' , where='a in [ 1,3,4 ] ' )
s encode ( 'utf8 ' ) 
df [ df name isin ( [ 'alice ' , 'bob ' ] ) ]
a * b [ : , ( np newaxis ) ]
a = [ 'a ' , 'a ' , 'a ' , 'a ' , 'b ' , 'b ' , 'c ' , 'c ' , 'c ' , 'd ' , 'e ' , 'e ' , 'e ' , 'e ' , 'e ' ]
np dot ( np dot ( i , np ones ( ( 7 , ) , int ) ) , mat )
z = int ( str ( x ) + str ( y ) )
x = line rstrip ( '\n ' )  split ( ' , ' )
np mgrid [ 0:5 , 0:5 ]  transpose ( 1 , 2 , 0 )  reshape ( -1 , 2 )
list ( dict keys ( ) )
f write ( struct pack ( 'i ' , value ) )
plt axvspan ( x , x2 , facecolor='g ' , alpha=0 5 )
print ( str ( 'a ' ) )
cmd = subprocess popen ( [ 'sed ' , '-n ' , ' $ = ' , filename ] , stdout=subprocess pipe )
`` `` '' '' '' ''  join ( ch for ch , _ in itertools groupby ( foo ) )
widgets = { 'delivery_date ' : forms dateinput ( attrs= { 'id ' : 'datepicker ' } ) }
np array ( 12345678901234 , dtype=np int32 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                           
{ { post featured_image } }
codecs decode ( '\\u000d ' , 'unicode-escape ' )
cv2 rectangle ( img , ( x , y ) , ( x + w , y + h ) , ( 255 , 0 , 0 ) , 2 )
sys path append ( '/foo/bar/mock-0 3 1 ' )
`` `` '' '' '' ''  join ( chr ( int ( data [ i : i + 2 ] , 16 ) ) for i in range ( 0 , len ( data ) , 2 ) )
cv2 imshow ( 'image ' , img )
[ ( 2 * x ) for x in some_list if x > 2 ]
f = open ( 'file txt ' , 'wb ' )  
numpy array ( [ 1 2 , 'abc ' ] , dtype=object )
toy objects filter ( owner__parent__id=1 )
df groupby ( [ df index map ( lambda t : t minute ) , 'source ' ] )
open ( 'output xml ' , 'wb ' )  write ( dom toxml ( ) )
print ( find_words ( 'tableprechaun ' , words=set ( [ 'tab ' , 'table ' , 'leprechaun ' ] ) ) )
random uniform ( -1 , 1 )
results = sorted ( ranks , key=lambda x : int ( x [ 'rank ' ]  replace ( ' , ' , '' ) ) )
`` `` '' , `` '' ''  join ( ( 'abc ' , 'def ' , 'ghi ' ) )
[ '' join ( x ) for x in window ( '7316717 ' , 3 ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                            
z , = set ( ( 'a ' , 'b ' , 'c ' ) ) - set ( ( x , y ) )
b = numpy array ( [ a [ 0 , 0 , 1 ] , a [ 2 , 1 , 2 ] ] )
[ 'x ' , 'cos ' ]
json dump ( data , outfile , ensure_ascii=false )
tags = soup find_all ( lambda tag : tag has_attr ( 'src ' ) )
data = [ [ int ( i ) for i in line split ( ) ] for line in original ]
print ( `` ' % -100s ' '' % 'hi ' )
df mut str extract ( 'a : ( t ) |a : ( g ) |a : ( c ) |a : ( - ) ' )
subsampled = df ix [ ( choice ( x ) for x in list ( grouped groups values ( ) ) ) ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                             
self response out write ( key )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                              
print ( os path join ( subdir , file ) )
img = cv2 imread ( 'undistorted jpg ' , 0 )
received_json_data = json loads ( request body decode ( 'utf-8 ' ) )
greet_selves ( )
`` `` '' sico87 is an awful python developer '' '' ''  split ( ' ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                               
[ next ( iter ( s ) ) for _ in range ( 10 ) ]
cidrs = netaddr ip_range_to_cidrs ( ip_start , ip_end )
response = requests post ( url , data=data )
ssh_client set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )  
np array ( [ 1 , 2 , 3 ] , ndmin=2 )  t
[ os path split ( r ) [ -1 ] for r , d , f in os walk ( tree ) if not d ]
return [ 1 , 2 , 3 ]
plt setp ( ax get_yticklabels ( ) , color='darkblue ' )
df1 iloc [ [ 1 , 3 , 5 ] , [ 1 , 3 ] ]
max ( lis , key=lambda x : x [ 1 ] )
form = myform ( myfield= [ '1 ' , '3 ' ] )
{ 'jhonny ' : 'green ' , 'steve ' : 'blue ' }
pprint ( [ ordereddict ( zip ( names , subl ) ) for subl in list_of_lists ] )
( df ! = 0 )  any ( axis=0 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                
`` `` '' `` '' ''  join ( map ( bin , bytearray ( st ) ) )
tornado ioloop ioloop instance ( )  start ( ) 
total_rows [ 'columnid ' ] = total_rows [ 'columnid ' ]  astype ( str )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                 
re findall ( rx , st , re verbose )
os system ( 'echo { 0 } ' format ( probe1 ) )
{ key : data [ key ] for key in data if not_seen ( key split ( ' : ' ) [ 0 ] ) }
max ( a , key=sum )
ax set_title ( 'title for first plot ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                  
root mainloop ( )                                              
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                   
testvar = input ( 'ask user for something   ' )
a [ ( [ i for i in range ( a shape [ 0 ] ) if i ! = 1 ] ) , : , : ]
{ 'a ' : 'hello ' , 'b ' : 'world ' }
logging debug ( 'hi ' )
myfile close ( )
f subs ( x , 1 )
[ ( x , y ) for x in a for y in b ]
sys stdout buffer write ( pdf_file read ( ) )
plt subplot ( 2 , 1 , 1 )
df [ 'region name ' ] = df [ 'region name ' ]  str replace ( ' \\ (  + $ ' , '' )
webbrowser open ( filename )
print ( requests get ( url , data=data , cookies=cookies )  text )
`` `` '' ' ( [ ^ ' ] | '' ) * ' '' '' ''
s encode ( 'latin-1 ' )  decode ( 'utf8 ' )
plt rcparams [ 'line color ' ] = 'white '
datetime datetime ( ddd year , ddd month , ddd day )
sorted ( list ( range ( len ( s ) ) ) , key=lambda k : s [ k ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                    
re sub ( '\\bdelhi\\b ( ? = ( ? : '' [ ^ '' ] * '' | [ ^ '' ] ) * $ ) ' , '' , a )
re findall ( '\\s+ ' , s )
assert not is_subseq ( 'ca ' , 'abc ' )
reactor run ( )     
data [ 'lat ' ]
df grouby ( 'grp ' )  apply ( ols_res , [ 'x1 ' , 'x2 ' ] , 'y ' )
foo ( )   
tags = soup find_all ( [ 'hr ' , 'strong ' ] )
mydict = { 'name ' : [ 'peter ' , 'janice ' , 'andy ' ] , 'age ' : [ 10 , 30 , 15 ] }
sys stdout = sys __stdout__
testf ( df [ 'month_15 ' ]  astype ( 'datetime64 [ d ] ' )  values )
[ [ [ 'x ' , ' > ' , '7 ' ] , 'and ' , [ [ 'x ' , ' < ' , '8 ' ] , 'or ' , [ 'x ' , '= ' , '4 ' ] ] ] ]
[ str ( n ) for n in range ( 10 ) ]
mpl use ( 'wxagg ' ) 
print ( os path join ( directory , file ) )
df [ 'date ' ] [ 0 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                     
filtered_dict = { k : v for k , v in list ( d items ( ) ) if filter_string in k }
set ( dic1 keys ( ) ) == set ( dic2 keys ( ) )
print ( request headers [ 'host ' ] )
{ 'va1 ' : `` $ input params ( 'val1 ' ) '' , 'val2 ' : `` $ input params ( 'val2 ' ) '' }
hex_string = 'deadbeef '
result = copy deepcopy ( old_dict ) if old_dict is not none else { }
df iloc [ 2:6 ]  plot ( y='b ' )
mymidi addnote ( track , channel , pitch , time , duration , volume )
plt plot ( x , y , color=c , marker='o ' , label='xyz ' )
root mainloop ( )                                               
int ( float ( s ) )
os system ( 'path/to/my_script sh ' )
os system ( 'your_command_here ; second_command ; third ; etc ' )
min ( list ( range ( len ( a ) ) ) , key=lambda i : abs ( a [ i ] - 11 5 ) )
msg attach ( mimetext ( text ) )
`` `` '' { { x foo } } '' '' ''
`` `` '' test png '' '' ''  endswith ( ( 'jpg ' , 'png ' , 'gif ' ) )
re findall ( ' ( ? u ) \\b\\w\\w+\\b ' , 'this is a sentence ! this is another one   ' )
s loc [ slice ( 'a ' , 'b ' ) , slice ( 2 , 10 ) ]
reactor run ( )      
print ( doctree toprettyxml ( ) )
combined = list ( itertools chain from_iterable ( lists ) )
file_contents = f read ( )
print ( line rstrip ( ) )
df [ [ 'a ' , 'b ' ] ]  max ( axis=1 )
np random multivariate_normal ( mean , cov , 10000 )
df groupby ( 'id ' ) [ ' < colname > ' ]  agg ( [ 'std ' , 'mean ' ] )
request headers get ( 'your-header-name ' )
raise validationerror ( 'at least one address is required   ' )
plt savefig ( 'confusion_matrix png ' , format='png ' )
mylist [ 1 : ] == [ 'comment ' ]
list ( l ) == [ 0 ] * len ( l )
ax2 set_ylabel ( 'name2 ' , fontsize=14 , color='blue ' )
dict ( mylist )
print ( ' [ done ] ' )
np concatenate ( ( a [ : :-1 , : ] , a ) , axis=0 )
mylist [ 0 ] [ :1 ]
print ( root xpath ( `` //article [ @ type='news ' ] /content/text ( ) '' ) )
fig autofmt_xdate ( ) 
[ random random ( ) for _ in range ( 0 , 10 ) ]
map ( my_dictionary get , my_list )
list ( json_parse ( open ( 'data ' ) ) )
plt savefig ( 'test png ' , bbox_inches='tight ' ) 
print ( numpy array ( [ x ( ) ] , dtype=object ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                      
sympify ( '1/ ( x+1 ) +4*x/ ( x-1 ) +3-4*x**2+10*x**2 ' , evaluate=false )  args
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                       
y mean ( axis= ( 1 , 3 ) )
word = [ '* ' ] * len ( word )
[ x for x in data if x [ 'site ' ] == 'superuser ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                        
[ ( x [ 1 ] , x [ 2 ] ) for x in ( x split ( ' ; ' ) for x in a split ( '\n ' ) ) if x [ 1 ] ! = 5 ]
time sleep ( 5 )    
map ( truediv , a , b )
a = np frombuffer ( data )
urllib request urlopen ( 'http : //google com ' )  getcode ( )
ax set_xscale ( 'custom ' )
setup2 = dict ( list ( setup1 items ( ) ) + list ( { 'param1 ' : val10 , 'param2 ' : val20 }  items ( ) ) )
df [ ( df < = 2 )  all ( axis=1 ) ]
df xs ( 1 , level='a ' , drop_level=false )
np allclose ( ans1 , ans2 )
f write ( e8 )
[ i for i in range ( len ( word ) ) if word [ i ] == letter ]
print ( ' , ' join ( list ) )
ax spines [ 'right ' ]  set_visible ( false )  
print ( soup prettify ( ) )  
print ( ' %  1e ' % x )
csv writer ( open ( 'abx csv ' , 'w ' ) , delimiter= ' ' )  writerows ( filtered )
all ( '\u4e00 ' < = c < = '\u9fff ' for c in name decode ( 'utf-8 ' ) )
d = collections defaultdict ( lambda : [ 0 , [ ] ] )
thing save ( )
from functools import reduce reduce ( set intersection , [ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 3 , 4 , 5 , 6 , 7 ] ] )
func2 ( 1 , 2 , 3 , 4 , 5 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                         
subbed = re sub ( '\\s { 2 , } ' , '| ' , line strip ( ) )
[ random sample ( s , 1 ) [ 0 ] for _ in range ( 10 ) ]
serialized_obj = serializers serialize ( 'json ' , [ obj ] )
app run ( )              
data [ 'result ' ] = data [ 'result ' ]  map ( lambda x : x lstrip ( '+- ' )  rstrip ( 'aabbcc ' ) )
[ [ 7 , 8 , 9 ] , [ 4 , 5 , 6 ] , [ 1 , 2 , 3 ] ]
max ( playerlist , key=lambda p : max ( p [ 1 : ] ) ) [ 0 ]
sys path insert ( 0 , 'path/to/your/py_file ' )
set ( a ) & set ( b )
setup ( console= [ 'myscript py ' ] , options=options )
sys exit ( 0 )     
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                          
print ( repr ( a decode ( 'unicode-escape ' ) ) )
{ 'new_key ' : 'new_value ' , '67790 ' : { '1 ' : { 'kwh ' : 319 4 } } }
db session commit ( )    
c setopt ( pycurl cookiefile , 'cookie txt ' )
np linalg norm ( a - b , axis=-1 )
[ 0 , 16 , 17 , 18 ]
df where ( ( df > df shift ( 1 ) )  values & ( df d == 1 ) [ : , ( none ) ] , np nan )
`` `` '' \\1 '' '' ''
random shuffle ( array )
json dumps ( { str ( k ) : v for k , v in list ( data items ( ) ) } )
f writerow ( [ 'pk ' , 'model ' , 'codename ' , 'name ' , 'content_type ' ] )
[ ( 'a ' , 1 , 2 ) , ( 'b ' , 3 , 4 ) ]
sorted ( d , key=d get , reverse=true )
c = [ ( i , 0 ) for i in a ]
{ 'name ' : [ p [ 'name ' ] for p in persons ] , 'age ' : [ p [ 'age ' ] for p in persons ] }
persons = sorted ( persons , key=lambda person : person [ 'name ' ] )
return response ( serializer errors , status=status http_400_bad_request )
pandas to_datetime ( 'today ' )
counter ( { 'a ' : 3 , 'c ' : 3 , 'b ' : 2 , 'd ' : 1 } )
np isnan ( np array ( [ np nan , 0 ] , dtype=object ) )
df to_sql ( 'demand_forecast_t ' , engine , if_exists='replace ' , index=false )
mylist = [ inst1 , inst2 ]
result = ( list_ [ 0 ] [ 0 ] + list_ [ 1 ] [ 0 ] ) * ( list_ [ 0 ] [ 1 ] + list_ [ 1 ] [ 1 ] )
zip ( *elements ) [ 1 ]
[ 50 1 , 50 2 , 50 3 , 50 4 , 60 1 , 60 2 , 60 3 , 60 4 , 70 1 , 70 2 , 70 3 , 70 4 ]
print ( df applymap ( lambda x : str ( x )  isdigit ( ) ) )
q = model objects filter ( q ( field1=f1 ) | q ( field2=f2 ) )  distinct ( )
set ( [ 'cheese ' , 'tomato ' ] )
ax yaxis set_major_formatter ( formatstrformatter ( ' %  2f ' ) )
sum ( sum ( 1 for i in row if i ) for row in rows )
print ( re sub ( ' (  + ? ) ( going|you| $ ) ' , subit , s ) )
zip ( keys , values )
return repr ( s )
pd concat ( [ foo [ 'country ' ] , z ] , axis=1 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                           
f write ( 'foo\nbar\nbaz\n ' )
json1_data = json loads ( json1_str ) [ 0 ]
rdd = sc parallelize ( [ ( 1 , 2 ) ] )
ax legend ( )  
ax set_title ( 'roc space ' )
file write ( dumps ( { 'numbers ' : n , 'strings ' : s , 'x ' : x , 'y ' : y } , file , indent=4 ) )
subprocess call ( [ '7z ' , 'a ' , filename + ' 7z ' , '*   * ' ] )
logging formatter ( fmt= ' % ( asctime ) s  % ( msecs ) 03d ' , datefmt= ' % y- % m- % d , % h : % m : % s ' )
sum ( [ v [ 0 ] for v in list ( d values ( ) ) ] ) / float ( len ( d ) )
df2 rename_axis ( { 'student ' : 'name ' } , axis=1 , inplace=true )
time sleep ( 1 )               
time sleep ( 0 1 )  
smaller_array = np delete ( array , index )
sys stdout flush ( )                 
total = sum ( int ( r [ 1 ] ) for r in csv reader ( fin ) )
( 1 + math cos ( i ) ) ** ( 1 / 3 0 )
sys path append ( '   ' ) 
ax set_xlim ( 0 , 7 )
int ( 'aeae ' , 16 )
df iloc [ ( [ 1 , 3 ] ) , : ]
plt hist ( b , bins )
get_ip_address ( 'eth0 ' )
[ ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) ]
df groupby ( [ 'a ' , 'b ' ] )  max ( ) [ 'c ' ]
int ( '' join ( [ hex ( ord ( x ) ) [ 2 : ] for x in 'yz ' ] ) , 16 )
print ( np random randint ( 0 , 100 , 10 ) )
[ ( mylist [ i : ] + [ newelement ] + mylist [ : i ] ) for i in range ( len ( mylist ) , -1 , -1 ) ]
x pop ( random randrange ( len ( x ) ) )
ssh_client connect ( 'server ' , username='username ' , password='password ' )
df = df / df loc [ df abs ( )  idxmax ( ) ]  astype ( np float64 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                            
q write ( '' join ( w ) )
df reset_index ( level=0 , inplace=true )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                             
sorted ( lst , reverse=true , key=operator itemgetter ( 0 ) )
np argwhere ( a [ : , ( 1 ) ] == -1 ) [ np argmin ( a [ a [ : , ( 1 ) ] == -1 , 0 ] ) ]
print ( [ tryeval ( x ) for x in l ] )
python - mplatform
[ ( m + str ( n ) ) for m , n in zip ( b , a ) ]
[ x start ( ) for x in re finditer ( '\\| ' , str ) ]
sum ( int ( n ) for n in str ( 2 ** 1000 ) )
match = re search ( ' ( ? < =value= ? ) ( [ ^ & > ] + ) ' , strjunk )
self new_soup body insert ( 3 , new_tag )
hash , hash2 = hashlittle2 ( hashstr , 3735928559 , 3735928559 )
g1 columns = [ 'agd_mean ' , 'agd_std ' , 'hgd_mean ' , 'hgd_std ' ]
[ ' { } _ { } ' format ( k , v ) for k , l in list ( d items ( ) ) for v in l ]
[ l [ i : i + 3 ] for i in range ( 0 , len ( l ) , 3 ) ]
pandas io parsers read_csv ( 'input csv ' , parse_dates= [ [ 0 , 1 , 2 ] ] , header=none )
u8 decode ( 'utf-8 ' ) == v decode ( 'latin1 ' ) == u16 decode ( 'utf-16 ' )
sys stdout write ( '\rdoing thing % i ' % i )
new_list append ( fruit )
[ '1 ' , '15 ' , '-23 ' , '-23 ' , '15 ' , '4 ' ]
plt savefig ( 'figure % d png ' % i )
print ( ' { :  6f } ' format ( i ) )
re split ( ' [ ^0-9a-za-z ] + ' , strs )
getattr ( __builtin__ , 'int ' )
return random choice ( words )
`` `` '' `` '' ''  join ( sorted ( k + ' : ' + v for k , v in list ( d items ( ) ) ) )
time sleep ( 1 )                
sum ( i % 4 == 3 for i in l )
myfunc ( *args )
time sleep ( 1 )                 
foo ( )    
s dropna ( )
br set_handle_robots ( false )
zip ( big_list [ : ] , big_list [ 1 : ] , big_list [ 2 : ] )
img save ( '/tmp/image bmp ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                              
df groupby ( [ 'mt ' ] , sort=false ) [ 'count ' ]  max ( )
[ int ( s ) for s in i split ( ) if s isdigit ( ) ]
pprint ( the_list )
random shuffle ( l )
arr = [ [ ] ] * 3
df_example iloc [ ( [ 1 , 4 ] ) , : -1 ]  t corr ( )
{ 'age ' : '12 ' , 'name ' : 'bob ' , 'hobbies ' : 'games , reading ' , 'phrase ' : `` i 'm cool ! '' }
myval = myval if myval is not none else defaultval
max ( d , key=d get )
print ( first_list + list ( set ( second_list ) - set ( first_list ) ) )
datetime date ( 2002 , 12 , 4 )  strftime ( ' % y % m % d ' )
cmat stack ( )  to_frame ( 'item ' )  query ( ' 3 < item <  9 ' )
ax legend ( )   
result update ( ( k , v ) for k , v in user items ( ) if v is not none )
lambda i : i [ 0 ]
writefile = codecs open ( 'write txt ' , 'w ' , 'utf-8 ' )
s write ( '\x0204 ; 0 ? : = ; \x03 ' )
pd [ 'a ' ]  tolist ( )
agg [ agg [ 'size ' ] > 100 ]  sort_values ( by='ave_age ' , ascending=true )  head ( 5 )
np array ( m2 ) [ : , ( 1 ) ] > 10
pd read_hdf ( 'my_store h5 ' , 'a_table_node ' , [ 'index > 100 ' ] )
np concatenate ( ( a [ : :-1 , : ] , a [ 1 : , : ] ) , axis=0 )
{ frozenset ( [ 1 , 2 , 3 ] ) : 4 , frozenset ( [ 1 ] ) : 5 }
c execute ( 'bla bla bla sql ' )
np mean ( a , axis=1 )
array ( [ true , true , true , false , false , false , false ] , dtype=bool )
run ( 'env | grep bar ' )
print ( binascii unhexlify ( '7061756c ' ) )
grep ( 'text ' , 'path/to/files/* ' )
win connect ( 'delete-event ' , gtk main_quit )
os path abspath ( '  /link/file ' )
app run ( )               
do_something_with ( line )
df between_time ( '12:00 ' , '13:00 ' )
print ( link get ( 'href ' ) ) 
r = requests post ( url , data=json dumps ( data ) , headers=headers )
[ [ ( 2 , 45 ) , ( 3 , 67 ) ] , [ ( 4 , 56 ) , ( 5 , 78 ) ] , [ ( 2 , 98 ) ] ]
soup select ( 'tr colour blue ' )
lambda x : x if x is not none else ''
existing = db session query ( task )  filter_by ( challenge_slug=slug )
is_const ( a ) and a decl ( )  kind ( ) == z3_op_uninterpreted
[ x [ 0 ] for x in tuple_list ]
ax set_ylabel ( 'temperature ( $ ^\\circ $ c ) ' )
loggerb = logging getlogger ( __name__ + ' b ' )
new_list = [ ( a , new_b ) for a , b in tuple_list ]
sorted ( [ 'a ' , 'b ' , 'c ' , '\xc3\xa4 ' ] )
f close ( )                 
imp find_module ( 'threading ' )
s = df [ 'm ' ]  replace ( { 'march ' : 0 , 'april ' : 1 , 'dec ' : 3 } )
a = np random randn ( 1000 , 1000 )
savetxt ( fname='newpicksdata txt ' , x=new_picks astype ( int ) , fmt= ' %  0f\n ' )
ax set_xlim ( [ 0 , 1 ] )
sorted ( list ( a items ( ) ) , key=itemgetter ( 1 ) , reverse=true )
time sleep ( 1 )                  
df loc [ df [ 'c ' ] > 0 5 , [ 'a ' , 'd ' ] ]  values
fig show ( )  
self text pack ( fill='both ' , expand=true )
[ 'a ' , 'b ' , 'c ' , 'd ' ] , [ 'a ' , 'b ' , 'c ' ]
print ( part get_payload ( ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                               
url = reverse ( 'my_api actor_resource ' , args= { 'id ' : actor id } )
[ 'x ' , 'y ' , 'z ' , 'car ' , 'bus ' , 'a ' , 'b ' , 'c ' , 'car ' , ' ! ' ]
`` `` '' \\xc3\\x85あ '' '' ''  encode ( 'utf-8 ' )  decode ( 'unicode_escape ' )  encode ( 'latin-1 ' )
sorted ( l , key=lambda s : ( s isdigit ( ) , s ) )
ax plot_wireframe ( t , z , abs ( u ) , cstride=1000 )
os listdir ( '\\\\myshare/folder ' )
self grid_columnconfigure ( 0 , weight=1 )
omniboxhwnd = win32gui findwindowex ( hwnd , 0 , 'chrome_omniboxview ' , none )
root mainloop ( )                                                
max ( x , key=lambda i : x [ i ] )
subprocess call ( [ 'taskkill ' , '/f ' , '/t ' , '/pid ' , str ( p pid ) ] )
arr = np append ( arr , np array ( [ [ 4 , 5 , 6 ] ] ) , axis=0 )
[ list ( map ( int , x ) ) for x in values ]
r = requests post ( url , files=files )
graph add_edge ( 'a ' , 'b ' , weight=20 )
code interact ( local=locals ( ) )
re findall ( ' ( ? : a|b|c ) d ' , 'bde ' )
_w ( )
struct pack ( 'h ' , 824 )
pdb set_trace ( )       
df apply ( lambda x : combine ( x [ 'meeting date ' ] , x [ 'meeting time ' ] ) , axis=1 )
matplotlib pyplot show ( )   
schema = models textfield ( default=get_default_json )
np isclose ( [ 10000000000 0 , 1e-07 ] , [ 10000100000 0 , 1e-08 ] )
int ( x ) / int ( y ) == math floor ( float ( x ) / float ( y ) )
new_dict = { k : my_dict [ k ] for k in my_list if k in my_dict }
min ( [ x for x in [ none , 1 , 2 ] if x is not none ] )
_cxn commit ( )
gtk main ( )            
arr2 t [ numpy array ( zip ( list ( range ( 0 , 3 ) ) , list ( range ( 1 , 4 ) ) ) ) ]
print ( df1 [ 'a ' ]  unstack ( ) )
set intersection ( * ( set ( x ) for x in d values ( ) ) )
root grid_columnconfigure ( 0 , weight=1 )
[ { 'count ' : 3 , 'domain ' : 'ratios ' } , { 'count ' : 6 , 'domain ' : 'geometry ' } ]
df loc [ df id == 103 , [ 'firstname ' , 'lastname ' ] ] = 'matt ' , 'jones '
sum ( i for i in a )
current , dirs , files = next ( os walk ( '/path ' ) )
print ( ' { % s } ' % ' , ' join ( [ ( ' '' % s '' : `` % s '' ' % ( k , v ) ) for k , v in list ( pairs items ( ) ) ] ) )
matplotlib use ( 'template ' )
pygame display set_mode ( size )
df sub ( df a , axis=0 )
print ( open ( 'file-with-string ' , 'rb ' )  read ( )  decode ( 'base64 ' ) )
dict ( ( k , mydict [ k ] ) for k in keys_to_select if k in mydict )
c1 = [ float ( i ) for i in c if i ]
`` `` '' sico87 is an awful python developer '' '' ''  split ( ' ' , 1 )
unicodedata normalize ( 'nfd ' , myfoo )  encode ( 'ascii ' , 'ignore ' )
[ d [ key ] for d in dicts if key in d ]
df [ 'max ' ] = df [ [ 'communications ' , 'business ' ] ]  idxmax ( axis=1 )
[ ( [ 1 ] * 4 ) for n in range ( 3 ) ]
str ( 1 )  zfill ( 2 )
print ( line rstrip ( ) ) 
out = [ a , b , c , d , e , f ]
my_array , my_variable = my_function ( )
reactor run ( )       
list1 sort ( key=int )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                
df reindex ( np random permutation ( df index ) )
ax plot ( x , y )
cbar ax set_yticklabels ( [ 'lo ' , 'med ' , 'hi ' ] )
{ 'id ' : 'name ' , 'label ' : 'name ' , 'type ' : 'string ' }
print ( 'baz `` \\ '' ' )
sorted ( lst , key=lambda x : ( -counts [ x ] , firstidx [ x ] ) )
[ w for w in open ( 'file txt ' ) if not re search ( ' ( [ aeiou ] ) \\1 ' , w ) ]
sys stdout write ( chr ( x ) )
sorted ( lst , key=str lower )
return set ( zip ( * [ lst [ i : ] for i in range ( n ) ] ) )
fig savefig ( 'test2png png ' , dpi=100 )
logging debug ( 'value of my var is % s ' , str ( var ) )
{ { value | linebreaks } }
s = ' ' join ( word [ 0 ]  upper ( ) + word [ 1 : ] for word in s split ( ) )
print ( sint ( '1340 ' ) )
new_df = pd dataframe ( list ( original [ 'user ' ] ) )
[ set ( [ 'a ' , '' ] ) , set ( [ '' , 'b ' ] ) ]
{ 'user ' : 'username ' , 'password ' : 'passwd ' }
img save ( 'image2 png ' )
[ 'test , a ' , 'foo , bar '' , baz ' , 'bar \xc3\xa4 baz ' ]
a = [ ( a [ i + 1 ] + a [ i ] ) for i in range ( len ( a ) - 1 ) ]
a , b , c , d = x split ( ' ' )
return [ numbers [ i ] for i in range ( len ( numbers ) ) if i not in indices ]
print ( os path join ( path , filename ) )
yourlist = [ ' { } _ { } _ { } ' format ( s rsplit ( '_ ' , 2 ) [ 0 ] , x , y ) for s in yourlist ]
print ( mydate strftime ( ' % y- % m- % d ' ) )
ax spines [ 'top ' ]  set_color ( 'red ' )
df_new = df [ ( df [ 'time ' ] > start_time ) & ( df [ 'time ' ] < end_time ) ]
[ i for e in bad for i in my_list if e in i ]
( s * 5 )  tolist ( )
raise forms validationerror ( 'please enter a valid penn email address ' )
print ( ' { 0 } , { 0 : s } , { 0 : d } , { 0:02x } , { 0 : f } ' format ( ten ) )
mydict [ item [ 1 ] ] += item [ 2 ]
scipy sparse csr_matrix ( df values )
fig savefig ( 'test pdf ' )
bins = np linspace ( 0 , 360 , 10 )
bin ( 0 )
new_data = np vectorize ( boolstr_to_floatstr ) ( data )  astype ( float )
parser add_argument ( 'input2 ' , nargs='+ ' , type=int )
print ( result [ 0 ] [ 'status ' ] ) 
time sleep ( 1 )                   
y = int ( eval ( input ( 'enter a number : ' ) ) )
print ( repr ( sys argv [ 1 ]  decode ( 'utf-8 ' ) ) )
template render ( index_variables )  encode ( 'utf-8 ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                 
current_app logger info ( 'grolsh ' )
root wm_title ( 'hello , world ' )
popen ( [ 'python ' , 'stripcore py ' ] )
db rollback ( )
stopword_pattern match ( '1999 ' )
np any ( my_array [ : , ( 0 ) ] == value )
print ( ( 'nope , that is not a two   that is a ' , x ) )
os getpid ( ) 
rand_smpl = [ mylist [ i ] for i in sorted ( random sample ( range ( len ( mylist ) ) , 4 ) ) ]
len ( os listdir ( 'path/desktop ' ) )
subprocess check_output ( [ 'python ' , 'helloworld py ' ] )
'hell\xf2 world' encode ( 'latin-1 ' )
list ( [ x for x in l if x not in f ] )
lst = [ int ( i ) for i in str ( num ) ]
rc ( 'text ' , usetex=true )
zip ( [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] , [ 13 , 14 ] )
obj save ( ) 
res = list ( set ( a ) ^ set ( b ) )
( '^admin/ ' , include ( admin site urls ) ) ,
dict ( ( ( h , h * 2 ) for h in range ( 5 ) ) , foo='foo ' , ** { 'bar ' : 'bar ' } )
sys stdout write ( str ( x ) )
print ( [ ' { 0:0 2f } ' format ( i ) for i in a ] )
plot ( x , y , 'r   ' , alpha=0 2 )
l sort ( key=sum_nested )
df [ df loc [ : ] == '' ] = df copy ( )  shift ( 2 , axis=1 )
ctypes cdll ( 'c : \\program files ( x86 ) \\java\\jre1 8 0_40\\bin\\client\\jvm dll ' )
datetime datetime strptime ( time ctime ( ) , ' % a % b % d % h : % m : % s % y ' )
driver get ( 'http : //stackoverflow com ' ) 
repr ( d ) [ 1 : -1 ]  replace ( ' : ' , '' )
np fill_diagonal ( df values , 0 )
__init__ py         
cherrypy quickstart ( helloworld ( ) )
return '' join ( random choice ( char ) for x in range ( length ) )
[ i for i , j in enumerate ( a ) if j == m ]
myset = set ( [ mystring ] )
self matches = [ s for s in self options if s and s startswith ( text ) ]
os environ pop ( 'pythonhome ' )
mymodel objects all ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                  
difflib sequencematcher ( none , a , b )  ratio ( ) 
ordered = sorted ( lst , key=lambda d : [ 2 , 3 , 1 , 4 ]  index ( int ( d [ 'id ' ] ) ) )
length = len ( list ( clusterlist ) )
norm = [ ( float ( i ) / sum ( raw ) ) for i in raw ]
df groupby ( 'name ' ) [ [ 'id ' , 'email ' ] ]  first ( )
data append ( json loads ( line ) )
sorted ( zipped , key=operator itemgetter ( 1 ) )
os path exists ( ' /lib dll ' )
df [ df columns isin ( [ 'a ' , 'b ' , 'c ' ] ) & ( df < 0 ) ] = np nan
c = sum ( 1 for word in words if word [ 0 ] == word [ -1 ] )
set ( [ 'foo ' ] )
my_words = wiki objects order_by ( 'word ' )
array = [ [ int ( j ) for j in i split ( ' , ' ) ] for i in tmp ]
cnx commit ( )
ax set_xlabel ( 'x axis ' )
np eye ( foo shape [ 1 ] ) * foo [ : , ( np newaxis ) ]
root mainloop ( )                                                 
app run ( )                
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                   
mydict pop ( key , none )
[ map ( dict get , list ( range ( 1 , 6 ) ) ) for _ in range ( 10 ) ]
author = models foreignkey ( user , null=true , blank=true )
print ( f read ( )  decode ( 'utf8 ' ) )
open ( '//host/share/path/to/file ' )
corrs = df corr ( )
re sub ( reg , rep , text )
py_finalize ( )
conn commit ( )       
im save ( 'my_image png ' )
print ( ' [ ' + ' , ' join ( `` ' '' + str ( x ) + `` ' '' for x in s ) + ' ] ' ) 
self cdr = cdr
my_function = __import__ ( 'my_apps views ' )  my_function
ax set_xlabel ( 'distance from heated face ( $ 10^ { -2 } $ m ) ' )
x = np array ( [ ( 1 , 0 ) , ( 0 , 1 ) ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                    
next ( ( i for i , v in enumerate ( a ) if i == 666 ) , none )
gtk main_iteration ( )
new = [ int ( i ) for i in old ]
hismgr = get_ipython ( )  history_manager
s = '' join ( f ( c ) for c in s )
any ( x in set ( b ) for x in a )
article objects annotate ( like_count=count ( 'likes ' ) )  order_by ( '-like_count ' ) 
print ( settings base_dir )
a = pexpect spawn ( 'program ' , env= { 'term ' : 'dumb ' } )
foo = '' join ( foo split ( ) )
s = input ( ' -- > ' )
requests get ( url , params=query )
a [ b == x ]  sum ( )
rawbytes decode ( 'utf-8 ' )
ax set_xticklabels ( [ ] )
sys stdin isatty ( ) 
ax xaxis set_major_formatter ( xfmt )
driver get ( 'http : //www example com ' )
df [ 'city ' ] = df [ 'city ' ]  str replace ( '\xeb ' , 'e ' )
plt xlabel ( 'hours ' )
sys stdout flush ( )                  
sum ( [ i for i in range ( 1000 ) if i % 3 == 0 or i % 5 == 0 ] )
parser add_option ( '-f ' , ' -- file ' , dest='filename ' , help='foo help ' )
subprocess call ( [ 'php ' , 'path/to/script php ' ] )
np where ( np eye ( a shape [ 0 ] , dtype=bool ) , a , a t + a )
[ 'x ' , 'y ' , 'z ' , 'car ' , 'bus ' , 'a ' , 'b ' , 'c ' , 'car ' ]
print ( opener open ( 'http : //www google com ' )  read ( ) )
self bind ( wx evt_left_dclick , self ondoubleclick )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                     
df [ 'c ' ] = ( df a str [ -1 ] == df b )  astype ( int )
logging getlogger ( 'foo ' )
datetime datetime now ( ) - datetime timedelta ( minutes=15 )
float ( ' { 0 }   { 1 } ' format ( *a ) )
sys stdout flush ( )                   
app exec_ ( )  
[ { 'data ' : 2 } , { 'data ' : 2 } , { 'data ' : 2 } ]
print ( os path abspath ( 'test/link/file ' ) )
ma array ( a , mask=np isnan ( a ) )
`` `` '' '' '' ''  join ( str ( ord ( c ) ) for c in s )
[ ( j - i ) for i , j in zip ( t [ : -1 ] , t [ 1 : ] ) ]
`` `` '' '' '' ''  join ( set ( foo ) ) 
f write ( '\u5e73\u621015 ' )
bytetable = [ ( '00000000 ' + bin ( x ) [ 2 : ] ) [ -8 : ] for x in range ( 256 ) ]
writer writerow ( row )
print ( '   ' join ( [ bin ( int ( x ) + 256 ) [ 3 : ] for x in ip split ( '   ' ) ] ) )
all ( b > = a for a , b in zip ( the_list , it ) )
[ 'watermelon ' , 'peach ' ]
1 , 5 , none , ( 1 , 5 ) , ( 1 , 5 )
[ ( n / d ) for n , d in ( map ( float , i split ( '/ ' ) ) for i in data ) ]
sys path append ( '   ' )  
zip ( *a )  
print ( d strftime ( ' % m/ % d/ % y ' ) )
ax set_title ( 'custom legend ' )
ax set_title ( 'normal way to plot ' )
conn execute ( 'savepoint sptest ; ' )
conn execute ( 'rollback to savepoint sptest ; ' )
[ '*abc ' , '*de ' , '*f ' , '*g ' ]
print ( re match ( ' [ ^/ ] + ' , text ) )
sorted ( timestamps , key=lambda d : map ( int , d split ( '- ' ) ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                      
v = df [ 'value ' ]  dropna ( )
all ( x isalpha ( ) for x in [ 'ab1 ' , 'def ' ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                       
var1 , var2 = [ int ( x ) for x in input ( 'enter two numbers here : ' )  split ( ) ]
[ word for word in l if word isalnum ( ) ]
c = [ x for x in b if x in _auxset ]
[ list ( x [ 1 ] ) for x in itertools groupby ( data , lambda x : x == 0 ) if not x [ 0 ] ]
zip ( * ( [ iter ( num_str split ( ' , ' ) ) ] * 4 ) )
df [ df time diff ( )  fillna ( pd timedelta ( '60s ' ) ) > = pd timedelta ( '60s ' ) ]
loop run ( )
list ( itertools chain ( * [ ( [ k ] * v ) for k , v in list ( d items ( ) ) ] ) )
self save ( )
print ( time mktime ( d timetuple ( ) ) )
d update ( ( k , v ) for k , v in user items ( ) if v is not none )
`` `` '' { :  2f } '' '' ''  format ( round ( 2606 89579999999 , 2 ) )
any ( x startswith ( ' % s/ ' % name rstrip ( '/ ' ) ) for x in z namelist ( ) )
df rename ( columns= { 'two ' : 'new_name ' } , inplace=true )
df [ 'time ' ] = df time map ( lambda x : pd datetools parse ( x )  time ( ) )
`` `` '' { } { } '' '' ''  format ( s , i )
np roll ( a , 1 )
print ( [ [ j split ( ' ( ' ) [ 0 ] for j in i split ( ) ] for i in l1 ] )
round ( number * 2 ) / 2 0
x loc [ ( x b > = 111 0 ) & ( x b < = 500 0 ) ]  set_index ( [ 'a ' , 'b ' ] )  index
[ [ 1 , 2 , 3 , 4 , 5 ] , [ 2 , 3 , 4 ] , [ 1 , 2 ] ]
ares = np einsum ( 'ijkl , k- > ijkl ' , a , v )
pprint ( sys path )
[ 'http : //stackoverflow com/foobar ' , 'http : //stackoverflow com/baz ' ]
a [ i , j ]
e = element findall ( 'items/item/itemattributes/listprice/amount ' )
print ( doc toprettyxml ( ) )
dict ( i split ( '= ' ) for i in x )
parts = [ your_string [ i : i + n ] for i in range ( 0 , len ( your_string ) , n ) ]
app logger setlevel ( logging debug )
random shuffle ( lst )
data_slices sort ( key=lambda s : s [ -1 ]  start )
reactor run ( )        
do_something ( )  
return '\n' join ( lines )
parser add_argument ( 'bar ' , nargs='* ' , default= [ 1 , 2 , 3 ] , help='bar ! ' )
np arange ( 12 )  reshape ( 3 , 4 )
sorted ( mydict , key=lambda key : mydict [ key ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                        
cursor execute ( 'select guestname , content , entryid from entries ' )
x , y = map ( os getpid , ( 'process1 ' , 'process2 ' ) )
results = list ( map ( int , results ) )
numpy array ( data , dtype= [ ( 'label ' , 's2 ' ) , ( 'x ' , float ) , ( 'y ' , float ) ] )
run ( 'ls -lart ' )
df where ( ( df > df shift ( 1 ) )  values & dataframe ( df d == 1 )  values )
os system ( 'v4l2-ctl -d 0 -c focus_absolute=250 ' )
user put ( )
s = s replace ( ' , ' , '' ) 
list ( itertools product ( list ( range ( 2 ) ) , repeat=3 ) )
cv waitkey ( 0 )
3 not in [ 1 , 2 , 'a ' ]
dfrm drop ( dfrm index [ len ( dfrm ) - 1 ] )
socket close ( )
[ 'e ' , 'b ' , 'f ' , 'c ' , 'a ' , 'd ' ]
subprocess popen ( 'move output txt  /acc/output- % d txt ' % v )
df stack ( )  reset_index ( level= [ 0 , 1 ] , drop=true )
img show ( ) 
return t1start < = t2start < = t1end or t2start < = t1start < = t2end
df iloc [ indexers ]
str ( a , 'unicode-escape ' )
{ 'username ' : 'clelio ' , 'name ' : 'clelio de paula ' }
eastern localize ( datetime ( 2002 , 10 , 27 , 1 , 30 , 0 ) , is_dst=none )
plt legend ( loc=4 )
cordi1 = [ [ int ( i ) for i in line split ( ) ] for line in data ]
re compile ( ' [ ' )
plt savefig ( 'rasterized_transparency eps ' )
foo foo ( )
t = [ [ ] , [ 1 , 2 ] , [ 5 ] , [ 1 , 2 , 5 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 6 ] ]
np linalg eigvals ( df replace ( 'n/a ' , 0 )  astype ( float ) )
message send ( )
json_string = json dumps ( list_name , default=obj_dict )
`` `` '' { : , } '' '' ''  format ( x )
[ x for b in a for x in b ] 
unittest main ( )       
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                         
df1 join ( df2 , how='inner ' )
br select_form ( nr=1 )
ax xaxis set_major_formatter ( dates dateformatter ( ' % h : % m ' ) )
ax xaxis set_visible ( false )
htmlspaced = re sub ( '\\r\\n ' , ' ' , html )
[ ( int ( i ) if int ( i ) == i else i ) for i in li ]
raise exception ( 'degree of ngrams ( n ) needs to be bigger than skip ( k ) ' )
image = gtk image_new_from_pixbuf ( pixbuf )
s write ( 'midi ' , '/users/cuthbert/desktop/newfilename mid ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                          
ssh exec_command ( '    profile ; cd /home/test/ ; $ run  /test sh ' )
{ key : val for key , val in parent_dict items ( ) if 2 < key < 4 }
print ( maximize_nonoverlapping_count ( [ [ 3 , 4 ] , [ 5 , 8 ] , [ 0 , 6 ] , [ 1 , 2 ] ] ) )
cursor = db cursor ( dictionary=true )
[ 'this ' , 'day ' , 'is ' ]
numpy in1d ( a , b )
driver get ( 'https : //stackoverflow com ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                           
df fillna ( 'o ' )
sorted ( mylist , key=cmp_to_key ( locale strcoll ) )
np array ( [ ( arr + i ) for i in np arange ( -0 2 , 0 25 , 0 1 ) ] )  t ravel ( )
tf constant ( 1 ) + tf constant ( 2 )
`` `` '' { : b } '' '' ''  format ( some_int )
' % % % s % % ' % 'player_id '
[ 'foo ' , 'bar hello world ' ]
min ( [ t for t in l if not math isnan ( t [ 1 ] ) ] , key=itemgetter ( 1 ) )
plt plot ( [ 1 , 2 , 3 ] , 'r- ' , label='sample label red ' )
return hex ( struct unpack ( ' < i ' , struct pack ( ' < f ' , f ) ) [ 0 ] )
{ 'label_bbb ' : 'hereaswell ' , 'labela ' : 'thereissomethinghere ' }
sorted ( l1 + l2 )
zeros = [ ( [ 0 ] * m ) for _ in range ( n ) ]
5 * ( 4 * ( 3 * ( 2 * ( 1 * 1 ) ) ) )
[ list ( i group ( 1 , 2 ) ) for i in re finditer ( ' ( \\d { 2 } ) ( 020511|00 ) ' , thestr ) ]
driver switch_to_alert ( )  accept ( )
a = input ( 'prompt : ' )
sys exit ( )       
return dict ( [ k_v for k_v in list ( d1 items ( ) ) if k_v [ 0 ] in d2 and d2 [ k_v [ 0 ] ] == k_v [ 1 ] ] )
random sample ( list ( range ( 1 , 10 ) ) , 5 )
output = subprocess check_output ( [ 'ping ' , '-c ' , '2 ' , '-w ' , '2 ' , '1 1 1 1 ' ] )
ax set_title ( 'title for second plot ' )
list ( range ( 0 , 10 , 3 ) )
pd merge ( df , size2_col , on= [ 'adult ' ] )
im save ( 'output png ' )
c = np unique ( a , return_inverse=1 ) [ 1 ]
series ( [ str ( x ) for x in htmldata ] )
my_dict setdefault ( 'foo ' , { } ) [ 'bar ' ] = some_var
ax xaxis set_major_formatter ( mdates dateformatter ( ' % d  % m  % y ' ) )
print ( [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( 0 , len ( lst ) , 2 ) ] )
session commit ( )     
self main pack ( side='right ' , fill='both ' , expand=true )
ftp quit ( )  
f = io stringio ( 'foo ' )
a transpose ( 2 , 1 , 0 )
df select ( lambda x : re search ( 'prefix $ ' , str ( x ) ) is none , axis=1 )
lst append ( os path splitext ( x ) [ 0 ] )
return re split ( seperator , f read ( ) )
mytextctrl setfont ( font1 )
df2 [ 'group2 ' ]
a == a [ ( 0 ) , : ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                            
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 20 , 31 ]
`` `` '' select { 0 } from searchterms where onstate = 1 '' '' ''  format ( ' , ' join ( columns ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                             
t = time mktime ( time strptime ( '29 08 2011 11:05:02 ' , ' % d  % m  % y % h : % m : % s ' ) )
re findall ( 'alpha (  * ? ) bravo ' , st )
df groupby ( [ 'category ' ] ) [ [ 'data_1 ' , 'data_2 ' ] ]  transform ( f )
zip ( l , l [ 1 : ] )
driver find_element_by_xpath ( `` //a [ contains ( text ( ) , 'dev tgz ' ) ] '' )  click ( )
print ( [ ( s , s in st1 ) for s in re findall ( pat , st2 ) ] )
print ( rev ( [ 1 , 2 , 3 , 4 ] ) )
df idxmax ( axis=1 )
mylist [ : ] = [ s replace ( ' : ' , '' ) for s in mylist ]
ax xaxis set_tick_params ( labeltop='on ' )
forms [ 3 ] [ 'sex ' ] = 'male '
print ( item [ 0 ] , ' , ' join ( map ( str , item [ 1 : ] ) ) )
print ( doc find ( 'web : offset ' )  string )
ax legend ( loc='center right ' , bbox_to_anchor= ( 1 , 1 ) , ncol=4 )
return qs values ( 'date ' )  annotate ( sum ( 'amount ' ) )  order_by ( 'date ' ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                              
[ x for y in l for x in y ]
pd to_datetime ( pd series ( [ '05/23/2005 ' ] ) , format= ' % m/ % d/ % y ' )
ax spines [ 'bottom ' ]  set_color ( 'red ' )
p1 = subprocess popen ( [ 'cmd ' , '/c ' , 'date ' ] , stdout=subprocess pipe ) p1 communicate ( ) [ 0 ]
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , 'a\n ' )
rst_epilog = '   |my_conf_val| replace : : % d ' % my_config_value
np einsum ( 'ij , jk- > ik ' , nodes , x ** np array ( [ 2 , 1 , 0 ] ) [ : , ( none ) ] )
max ( self allpartners , key=attrgetter ( 'attrone ' ) )  attrone
{ 'key1 ' : 'value1 ' , 'key2 ' : 'value2 , still_value2 , not_key1= '' not_value1 '' ' }
str = re sub ( ' ( & [ a-za-z ] ) ' , dictsub , str )
`` `` '' internet\\jdoe '' '' ''
ax set_xlabel ( 'performance ' )
list ( range ( x1 , x2 + 1 ) )
re split ( ' [ ^\\d\\   ] + ' , s )
start_year = models integerfield ( max_length=4 , blank=false , null=true )
root mainloop ( )                                                  
print ( dir ( sys modules [ '__builtin__ ' ] ) )
method ( )
return os path dirname ( os path realpath ( sys argv [ 0 ] ) )
writer writerow ( [ ] )
im save ( 'out png ' ) 
value = request form getlist ( 'check ' )
ast literal_eval ( ' [ 1,2,3 ] ' ) 
time strftime ( ' % y- % m- % d % h : % m ' , time strptime ( s , ' % d- % m- % y % h : % m ' ) )
os system ( 'getcameras py `` path_to_the_scene '' ' )
mymode objects values ( 'day ' )  annotate ( sum ( 'visits ' ) )  filter ( day__week_day=1 )
print ( to_float ( '\xc2\xbe ' ) )
next ( ( e for e in mylist if my_criteria ( e ) ) , none )
x groupby ( pd periodindex ( x columns , freq='q ' ) , axis=1 )  mean ( )
total = sum ( map ( float , s split ( ' , ' ) ) )
print ( '\n' join ( sorted ( d [ 'name ' ] for d in thisismylist ) ) )
plt gca ( )  set_xlim ( left=0 )
pd concat ( [ df_a , df_b ] , axis=1 )
print ( d [ 'dict2 ' ] [ 'quux ' ] )
time sleep ( 0 1 )   
{ tuple ( key ) : value for key , value in zip ( bins , count ) }
cmd ( 'atz ' , serial serial ( '/dev/ttyusb0 ' , timeout=1 , baudrate=115000 ) )
[ '1 7 0b0 ' , '1 7 0 ' , '1 11 0 ' ]
p start ( )  
map ( int , bin ( 6 ) [ 2 : ] )
winsound playsound ( 'alert wav ' )
[ 10 , 9 , 8 , 4 , 7 ]
calendar timegm ( time gmtime ( ) )
conn commit ( )        
{ key : list ( set difference ( set ( a [ key ] ) , b get ( key , [ ] ) ) ) for key in a }
[ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 4 ) , ( 4 , 5 ) , ( 5 , 6 ) , ( 6 , 1 ) ] 
df2 = df astype ( object )  where ( pd notnull ( df ) , none )
wn synsets ( 'small ' )
print ( file_contents )
plt savefig ( 'd : \\mpl_logo png ' , dpi=dpi , transparent=true )
print ( list ( chain from_iterable ( ( x , x + 1 ) for x in l ) ) )
print ( ( 'total handled exceptions : ' , number_of_exceptions ) )
[ 'c ' , 'd ' , 'e ' , 'f ' , 'g ' ]
[ ( a , b , c ) for a in [ 1 , 2 , 3 ] for b in [ 'a ' , 'b ' ] for c in [ 4 , 5 ] ]
nx draw_spring ( g )
df index  
[ [ [ x , y ] for x in list1 ] for y in list2 ]
ast literal_eval ( ' '' hello '' + '' world '' ' )
print ( os path dirname ( __file__ ) )
call ( [ 'vim ' , 'hello txt ' ] )
ssh connect ( ip [ 0 ] , username=user [ 0 ] , pkey=mykey )
df [ ( df iloc [ : , -12 : ] == -1 )  all ( axis=1 ) ]
[ 'f2 ' , 'f3 ' , 'f4 ' , ' < module > ' ]
a __init__ ( *args , **kwargs )
a [ ~np isnan ( a )  any ( 1 ) ]
format ( x , ' , ' )  replace ( ' , ' , '   ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                               
regexps append ( { 'left ' : ' [ ^\\\\ ] %   * ' , 'right ' : '' } )
[ '48 ' , '65 ' , '6c ' , '6c ' , '6f ' ]
list ( streetcat _meta parents keys ( ) ) [ -1 ]
print ( f read ( ) )
out_file write ( '\n' join ( data ) )
sorted ( a ) == sorted ( b )
setup ( name='cls ' , py_modules= [ 'cls ' ] )
ssh exec_command ( 'nohup sleep 300 & ' )
set ( data1 ) & set ( data2 )
pl show ( ) 
list ( map ( str strip , l ) )
df2 columns = [ 'letter ' , 'num ' ]
ax get_xticklines ( ) [ i ]  set_visible ( false )
time sleep ( 0 5 ) 
[ v for k , v in list ( my_dict items ( ) ) if k startswith ( 'date ' ) ]
df dot ( weight )
chr ( 128512 )
plt gca ( )  set_aspect ( 'equal ' )
df groupby ( 'a ' )  apply ( lambda x : list ( np repeat ( x [ 'b ' ]  values , x [ 'quantity ' ] ) ) )
array [ ( i [ 0 ] ) , ( i [ 1 ] ) , ( i [ 2 ] ) ,     , ( i [ n - 1 ] ) ]
df selectexpr ( 'year ( timestamp ) as year ' , 'value ' )  groupby ( 'year ' )  sum ( )
spp1 add_argument ( 'vars ' , nargs='* ' )
return struct pack ( 'f ' * len ( data ) , *data )
[ 2 , 3 ] in [ v [ i : i + 2 ] for i in range ( len ( v ) - 1 ) ]
re sub ( '\\s+\\z ' , '' , s )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                
[ 6 , 7 , 8 , 9 ]
json dumps ( data , ensure_ascii=false )  encode ( 'utf8 ' )
a2 , b2 = zip ( *sorted ( zip ( a , b ) , key=lambda x : x [ 1 ] ) )
re sub ( '\\ ( ( \\d+ ) \\ ) ' , '\\1 ' , a )
project objects filter ( person_set__name='john ' )
len ( [ x for x in frequencies if x > 0 ] )
x [ : , 1 : :2 ]
df [ 0 ]  apply ( lambda x : ( 0 , 0 ) if x is np nan else x )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
mergedgroupdict ( ' ( ? p < b >  b  ) | ( ? p < i >  i   ) ' , 'abcdefghijk ' [ : :-1 ] )
app run ( )                 
inlinkdict [ docid ] = adoc [ 1 : ] if adoc [ 1 : ] else 0
print ( [ d strftime ( ' % d/ % m/ % y ' ) for d in rr [ : :2 ] ] )
the_regex = re compile ( re escape ( the_value ) )
print ( element_count ( [ [ [ [ [ [ [ [ 1 , 2 , 3 ] ] ] ] ] ] ] ] ) )
np int32 ( np int64 ( 3289288566 ) )
myarray = np zeros ( ( 6 , 6 ) )
root mainloop ( )                                                   
( 0 , 1 ) not in ( ( x % 2 , y % 2 ) for x , y in zip ( values , values [ 1 : ] ) )
`` `` '' { `` asset_id '' : `` 575155948f7d4c4ebccb02d4e8f84d2f '' , `` body '' : `` \\u003cscript\\u003e\\u003c/script\\u003e '' , `` asset_created '' : null } '' '' ''
return super ( )  __new__ ( metacls , cls , bases , clsdict )
c = np hstack ( ( a , b [ : , 1 : ] ) )
from functools import reduce reduce ( dict __getitem__ , l , d )
sys exit ( 1 )    
str split ( ' & ' , 8 )
print ( date ( today year + 1 , today month , today day ) )
json dumps ( definitions objects values_list ( 'title ' , flat=true ) )
`` `` '' this is the first line of my text which will be joined to a second   '' '' ''
hasattr ( fn , '__call__ ' )
print ( re sub ( ' < [ a-za-z\\/ ] [ ^ > ] * > ' , '' , my_string ) )
fringe8 ( ( 2 , 2 ) , ( 1 , 1 , 3 , 3 ) )
values = ( int ( i ) for i in values split ( ' , ' ) )
re split ( ' [ , ; ] + ' , 'this , is ; a , ; string ' )
list ( '\u8fd9\u662f\u4e00\u4e2a\u53e5\u5b50 ' )
df rename ( columns=lambda x : x lower ( )  replace ( ' ' , '_ ' ) )
sum ( decimal ( n ) * decimal ( 10 ) ** decimal ( i ) for i , n in zip ( count ( 0 , -1 ) , a ) )
sqlalchemy_database_uri = 'postgresql : //user : pw @ localhost/somedb '
replace_line ( 'stats txt ' , 0 , 'mage ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
print ( '\n' join ( [ ' , ' join ( x ) for x in a ] ) , file=f )
`` `` '' they 're bill 's friends from the uk '' '' ''  title ( )
[ float ( i ) for i in a strip ( ' { } ' )  split ( ' , ' ) ]
myclass __dict__
df1 [ 'value ' ]  unstack ( 0 )  asfreq ( 'd ' )  ffill ( )
x1 = sorted ( x , key=lambda t : t [ 2 ] , reverse=true )
df = pd dataframe ( [ df sum ( ) ] * len ( df ) )
pd crosstab ( df saleid , df upc )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
res pivot ( index='own ' , columns='brand ' , values='rating ' )
np unique ( df [ [ 'col1 ' , 'col2 ' ] ]  values )
print ( data reshape ( -1 , 2 )  mean ( axis=1 ) )
screen = pygame display set_mode ( ( 1600 , 900 ) )
s loc [ s str startswith ( 'a ' , na=false ) ]
max ( n for n in range ( 1000 ) if str ( n ) == str ( n ) [ : :-1 ] and is_prime ( n ) )
np maximum accumulate ( q [ : , : :-1 ] , axis=1 ) [ : , : :-1 ]
legend figure canvas mpl_connect ( 'motion_notify_event ' , self on_motion )
clf fit ( x_train , y_train )
foodict = { k : v for k , v in list ( mydict items ( ) ) if k startswith ( 'foo ' ) }
np random seed ( 1 ) 
rect = picture get_rect ( )
kludged = re sub ( ' ( ? i ) ( [ a-z_ ]  * ? ) : ' , ' '' \\1 '' : ' , string )
main ( )     
datetime time ( )
test f ( 0 )
df stack ( )  between ( 2 , 10 , inclusive=false )  unstack ( )
y = [ j for i in x for j in i ]
index_list = df [ ( df [ 'a ' ] == 2 ) & ( df [ 'b ' ] == 3 ) ]  index tolist ( )
my_list [ 0 ] = 'cake '
sys path append ( '/path/to/apps ' )
np einsum ( '     j ,     j- >     ' , vf , vf , dtype=np double ) [ -1 , -1 , -1 ]
pyautogui typewrite ( 'any text you want to type ' )
hex ( x ) [ 2 : ]
im = image open ( image_file )
return render_to_response ( 'foo html ' , { 'results ' : decoded_json [ 'result ' ] } )
session delete ( instance )
`` `` '' , '' '' ''  join ( map ( str , li2 ) )
result append ( b [ index ] )
env password = 'yourpassword '
p series ( [ 1 , 3 , 5 , 10 , 12 , 20 , 21 , 25 ] )  hist ( bins=3 , range= ( 0 , 30 ) )  figure
server starttls ( ) 
os environ [ 'python_egg_cache ' ] = path
df loc [ gb groups [ 'foo ' ] ]
s = s decode ( 'cp1250 ' )
sum ( 1 for d in my_list if d get ( 'id ' ) == 1 )
form myfield data = [ '1 ' , '3 ' ]
print ( f ( 1 , 2 , 3 ) )
mytel write ( 'login\n ' )
np concatenate ( counts_array )  reshape ( len ( counts_array ) , -1 )
urllib request urlopen ( your_url , proxies= { 'http ' : 'http : //192 168 0 1:80 ' } )
print ( '\n' join ( [ x rsplit ( none , 1 ) [ 0 ] for x in target strip ( )  split ( '\n ' ) ] ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
foo = foo replace ( ' ' , '' ) [ : -3 ]  upper ( )
name = sys argv [ 1 : ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
itemindex = numpy where ( array == item )
file = str ( qfiledialog getexistingdirectory ( self , 'select directory ' ) )
r = np kron ( np diag ( [ 1 , 2 , 3 ] ) , np ones ( ( 3 , 3 ) , dtype='int ' ) )
s groupby ( level=0 )  apply ( list )
return httpresponse ( open ( 'myxmlfile xml ' )  read ( ) , content_type='text/xml ' )
df groupby ( [ df index date , 'action ' ] )  count ( )
df convert_objects ( convert_numeric=true )
super ( usuarioform , self )  __init__ ( *args , **kwargs )
pobj stdin flush ( )
script_root = os path dirname ( os path realpath ( __file__ ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
super ( myuser , self )  save ( using='database_2 ' )
foo ( )     
multiprocessing process __init__ ( self ) 
counter ( { '1 ' : 6 , '2 ' : 4 , '7 ' : 3 , '10 ' : 2 } )
[ sum ( x ) for x in zip ( *lists_of_lists ) ]
`` `` ''   * ? \\b '' '' ''
u = user objects filter ( userjob__job=a )  filter ( userjob__job=c )
pd concat ( [ pd series ( initial_value ) , cum_growth ] )  reset_index ( drop=true )
xml_soup = beautifulsoup ( xml_object , 'xml ' )
line = x split ( none , 4 )
np concatenate ( input_list )  ravel ( )
return ' { 0:0 { x } d } ' format ( random randint ( 0 , 10 ** x - 1 ) , x=x )
a [ 0 ]
app run ( )                  
mp process ( target=foo , args= ( x , ) )  start ( )
sys stdout write ( line ) 
is_pangram ( 'do big jackdaws love my sphinx of quartz ? ' )
df drop ( df columns [ i ] , axis=1 )
getattr ( o , 'a ' ) ( 1 ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
sys path append ( 'c : \\path\\to\\dll ' )
my_dict [ 1 ] [ 2 ] = 3
ax xaxis set_major_locator ( locator ) 
a ravel ( ) [ np in1d ( a , b ) ] = 0
my_list sort ( key=my_key )
cv2 waitkey ( 0 )    
os path expanduser ( path )
time sleep ( 1 )                    
wordsep_re = re compile ( ' ( \\s+| ( ? : -|\\+|\\*\\*|\\* ) ) ' )
return httpresponseredirect ( '/path/ ' )
p = re compile ( 'name (  * ? ) is valid ' )
count_chars ( s , [ 'a ' , 'a ' , 'z ' ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
df ix [ :5 , :10 ] 
soup findall ( 'meta ' , name=re compile ( '^description $ ' , re i ) )
pd read_csv ( 'whitespace csv ' , header=none , delimiter='\\s+ ' )
new = text [ :1 ] + 'z ' + text [ 2 : ]
a ravel ( )
ax set_xticklabels ( nonrepetitive_x )
del pkt [ tcp ]  chksum
`` `` '' '' '' ''  join ( g )
return [ x for i , x in enumerate ( numbers ) if i not in indices ]
re findall ( '\\d ( \\d { 5 } ) \\d ' , ' ' + s + ' ' )
dic [ 'test ' ] [ 'class ' ] = { 'section ' : 5 }
xml find ( ' /bar ' )  attrib [ 'key ' ]
s = s replace ( ' { ' , ' { { ' )  replace ( ' } ' , ' } } ' )
orders objects filter ( order_date__year=2010 )
a [ 0 ] [ 0:4 ]
sys path insert ( 0 , '/home/zartch/pycharmprojects/scrapy-django-minimal/myweb ' )
conn rollback ( )
stuff replace ( ' and ' , '/ ' ) 
a [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 2 ] ]
set intersection ( *map ( set , d ) )
df columns droplevel ( 1 )
count1 = int ( config get ( 'counter ' , 'count1 ' ) )
binascii crc32 ( binascii a2b_hex ( '18329a7e ' ) )
[ 2 , 6 , 8 , 7 , 9 , 6 , 5 , 4 , 2 ]
print ( s decode ( 'unicode_escape ' )  encode ( 'ascii ' , 'ignore ' ) )
sorted ( iterable , cmp=none , key=none , reverse=false )
[ '__builtins__ ' , '__doc__ ' , '__loader__ ' , '__name__ ' , '__package__ ' ]
perimeter = 'xyz '
int ( '0xaeae ' , 16 )
[ [ ] ] * 10
ndim_grid ( [ 2 , -2 ] , [ 5 , 3 ] )
plt gca ( )  xaxis set_major_formatter ( dateformatter ( ' % h : % m : % s ' ) )
sorted ( dic , key=lambda k : dic [ k ] [ 'fisher ' ] )
file write ( ' % s % s % s ' % ( ranks [ a ] , ranks [ b ] , count ) )
( '^password_reset_done/ $ ' , 'django contrib auth views password_reset_done ' ) ,
`` `` '' a_foobar_foobar baz golf_cart foo '' '' ''
time sleep ( 0 1 )    
logging info ( 'some message ' )
[ ( 1 , 2 ) , ( 3 , 4 ) , ( 1 , 3 ) , ( 2 , 4 ) , ( 1 , 4 ) , ( 2 , 3 ) ]
lambda i=i : pprint ( i )
re sub ( '\\d+ ' , lambda x : x group ( )  zfill ( padding ) , s )
print ( r dtype )
ax axes get_xaxis ( )  set_visible ( false )
regx = re compile ( '\\s+and\\s+|\\s* , \\s* ' )
str isalpha ( )
sys exit ( app exec_ ( ) )       
files = [ fi for fi in files if not fi endswith ( ' dat ' ) ]
print ( df [ 'col ' ] [ 0 : i ]  mean ( ) )
plt imshow ( data , interpolation='none ' , vmin=0 )
{ i : functools reduce ( dict __getitem__ , keys , d [ i ] ) for i in d }
{ 'alg ' : 'hs256 ' , 'typ ' : 'jwt ' }
mylist = [ ( 'xxx ' if v == 'abc ' else v ) for v in mylist ]
sc parallelize ( [ row ( foo=1 , bar=2 ) ] )  todf ( )  select ( 'foo ' , 'bar ' )
os chown ( path , uid , gid )
sys path append ( '/path/to/your/djangoproject/ ' )
set ( map ( tuple , listb ) ) < = set ( map ( tuple , lista ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
max ( lst , key=lambda d : d [ 'score ' ] )
sorted ( lis , key=lambda a : infinity ( ) if a [ 'name ' ] is none else a [ 'name ' ] )
( x for x in list )
print ( sum ( num for num in numbers if num % 2 == 1 ) )
dict ( zip ( i , i ) )
' % ( foo ) s % ( bar ) d ' % { 'bar ' : 42 , 'foo ' : 'spam ' , 'baz ' : none }
d = datetime strptime ( date_str , ' % y- % m- % d ' )
np array ( [ a , a ] )  shape
[ [ ] , [ ] , [ ] ]
ax legend ( loc='upper left ' )
print ( list ( combinations ( [ 'hel ' , 'lo ' , 'bye ' ] , 2 ) ) )
myplsda = plsregression ( )  fit ( x=xdata , y=dummy )
instance __class__ __name__ 
json dump ( data , outfile )
time sleep ( 60 )
print ( max ( group , key=lambda k : len ( list ( k [ 1 ] ) ) ) )
f close ( )                  
some_func ( *params ) 
[ ( 'a ' , '1 ' ) , ( 'b ' , '2 ' ) , ( 'c ' , '3 ' ) , ( 'd ' , '4 ' ) ]
os system ( 'cls ' if os name == 'nt ' else 'clear ' )
column_names = [ item [ 0 ] for item in cursor description ]
numpy clip ( x , 0 , 255 )
x reshape ( 2 , 2 , 5 )
ds loc [ 'wiki ' : 'wikj ' ]
lines sort ( key=itemgetter ( 2 ) , reverse=true )
[ i for i in range ( 100 ) if i > 10 if i < 50 ]
re sub ( ' and ( ? =   * and ) ' , ' , ' , str )
df groupby ( 'group ' )  transform ( pd rolling_mean , 2 , min_periods=2 )
sorted ( { x for v in content values ( ) for x in v } )
set ( tuple ( i ) for i in l )
console = logging streamhandler ( )
set ( [ 1 , 2 ] )
j = image fromarray ( b , mode='rgb ' )
self ham = dict ( )
certificat = signers [ 0 ]
unravel_index ( a argmax ( ) , a shape )
[ e for i , e in enumerate ( main_list ) if i in indexes ]
cv2 rectangle ( image , ( x , y ) , ( x + w , y + h ) , ( 255 , 255 , 0 ) , 5 )
self ui closebutton clicked connect ( self closeit )
`` `` '' \\d+ ( \\ \\d+ ) * $ '' '' ''
return sum ( int ( x ) for x in digit if x isdigit ( ) )
re findall ( '\\d+| [ ^\\d\\s ] + ' , string )
sys stdout = codecs getwriter ( 'utf-8 ' ) ( sys stdout detach ( ) )
print ( type ( word decode ( 'utf-8 ' ) ) )
pytz timezone ( 'us/eastern ' )
app run ( )                   
configfiles = glob glob ( 'c : \\users\\sam\\desktop\\*\\* txt ' )
df [ 'a ' ]  replace ( to_replace=0 , method='ffill ' )
atb = a stack ( 0 )  dot ( twos )  unstack ( )
[ [ 1 , 1 , 2 , 2 ] , [ 1 , 1 , 2 , 2 ] , [ 3 , 3 , 4 , 4 ] , [ 3 , 3 , 4 , 4 ] ]
r = requests post ( url , files=files , data=data , headers=headers )
`` `` '' : '' '' ''  join ( ' { :02x } ' format ( ord ( c ) ) for c in s )
plt plot ( x , y )  
print ( '' join ( format ( x , '02x ' ) for x in array_alpha ) )
df2 = df [ 'labels ' ]  str get_dummies ( sep= ' , ' )
my_array , my_variable = my_function ( ) 
print ( struct pack ( 'i ' , val )  encode ( 'base64 ' ) )
driver quit ( )    
root mainloop ( )                                                    
p ylabel ( ' $ \\cos { ( x ) } \\cdot { } 10^4 $ ' , labelpad=20 )
[ k for k , v in colour items ( ) if v == min_val ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
worksheet write ( 1 , 0 , label='formatted value ' , style=style )
blob_reader = blobstore blobreader ( 'my_blobstore_key ' )
[ y for y in a if y not in b ]  
np fft fft ( xfiltered )
root mainloop ( )                                                     
max ( lis , key=lambda x : int ( x ) )
matplotlib pyplot plot ( raw_audio_data )
[ int ( char ) for char in str ( 634 ) ]
{ { url_for ( 'post_blueprint get_post ' , **post ) } }
re sub ( ' + ' , ' ' , 'the quick brown fox ' )
root grid_rowconfigure ( 1 , weight=1 )
`` `` '' 1 '' '' ''  encode ( )
host_port = info [ 'networksettings ' ] [ 'ports ' ] [ '1337 ' ] [ 0 ] [ 'hostport ' ]
self setwindowtitle ( 'checkbox ' )
self setwindowtitle ( '' )
print ( re sub ( '-+ ' , '- ' , astr ) )
print ( ( 'after , outer_list = ' , outer_list ) )
palette append ( ( 0 , 0 , 0 ) )
print ( eval ( 'self post id ' ) )
today + datetime timedelta ( days=1 )
np einsum ( 'ij , jk- > jik ' , a , b )
df c [ df b == 'x ' ] = df c shift ( -1 )
print ( len ( str ( decimal decimal ( '0 1 ' ) ) ) )
df corr ( )  ix [ ( 'special_col ' ) , : -1 ]
map ( lambda d : d get ( 'value ' , 'default value ' ) , l )
newnums = [ i for i , x in enumerate ( nums ) if x == 12 ]
[ peaks ( [ x , y ] ) for x , y in zip ( xscat , yscat ) ]
raise valueerror ( 'some problem : % s ' % value )
print ( json dumps ( dict ( table_data ) ) )
df to_sql ( 'table_name ' , engine )
`` `` '' gcc 4 9 2 '' '' ''
sorted ( li1 , key=k )
list ( range ( 0 , 6 , 2 ) )
p = re compile ( 'name (   * ) is valid ' )
{ x split ( ' : ' ) [ 0 ] : x split ( ' : ' ) [ 1 ] for x in a }
admin site register ( foo , fooadmin )
re sub ( ' ( \\d+ ) ' , lambda m : ' %  0f ' % ( float ( m group ( 1 ) ) * 2 ) , 'test line 123 ' )
`` `` '' { :02 } : { :02 } : { :02 } '' '' ''  format ( int ( 0 0 ) , int ( 0 9 ) , int ( 67 5 ) )
numpy zeros ( ( 3 , 3 ) )
plt axvline ( x=2 20589566 )
0 , '2012-11-06t16:23:36-05:00 ' , 0 , none , 23759918 , 'baseline ' , '0 to 100 ' , null , 105114 , 2009524 , true , 'charge ' , 'charge '
print ( `` i am jack 's raging bile duct '' )
df column_a apply ( to_binary )
df [ 'data ' ] = pd to_datetime ( df [ 'data ' ] , format= ' % d/ % b/ % y : % h : % m : % s ' )
df max ( )
sys path append ( os path expanduser ( '~/python/libs ' ) )
os path commonpath ( [ '/the/dir ' , os path realpath ( filename ) ] ) == '/the/dir '
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
'172 16 0 3 ' , '25/sep/2002:14:04:19 +0200 ' , 'get / http/1 1 ' , '401 ' , '' , 'mozilla/5 0 ( x11 ; u ; linux i686 ; en-us ; rv:1 1 ) gecko/20020827 '
self assertequal ( r , 'jaja-lol-mememeoo-a ' )
yacc yacc ( debug=0 , write_tables=0 )
nx draw_networkx_edges ( g , pos , edgelist=black_edges , arrows=false )
sys exit ( )        
good_data = [ data [ ( n ) , : ] [ flag == 1 ]  tolist ( ) for n in range ( data shape [ 0 ] ) ]
mydatetime strftime ( ' % -m/ % d/ % y % -i : % m % p ' )
img [ : , : , ( 0 ) ] = 0
os chdir ( '\xd7\x90 ' )
self setsizer ( sizer )
sum ( x > 0 for x in frequencies )
`` `` '' this is a verylong string toofor sure     '' '' ''
[ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' , 'f ' , 'g ' , 'h ' , 'i ' , 'j ' ]
print ( get_sec ( '0:00:25 ' ) )
pickle dump ( mydict , open ( '/tmp/test pkl ' , 'wb ' ) )
json dumps ( geodata )
param , value = line split ( '= ' , 1 )
print ( a reshape ( -1 , k ) [ np arange ( n * m ) , b ravel ( ) ] )
f write ( ' % d ' % number )
l = [ ( 1 , 4 ) , ( 8 , 10 ) , ( 19 , 25 ) , ( 10 , 13 ) , ( 14 , 16 ) , ( 25 , 30 ) ]
print ( pd merge ( df1 , df2 , on='b ' ) )
np in1d ( a , b )  any ( )
session query ( zkuser )  filter ( zkuser groups any ( zkgroup id in_ ( [ 1 , 2 , 3 ] ) ) )
`` `` '' google com   1700 in txt `` v=spf1 include : _netblocks google com ip4:216 73 93 70/31 ip4:216 73 93 72/31 ~all\ '' '' '' ''
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
y = set ( x flatten ( ) )
return date today ( ) > self date
pygame init ( )
driver execute_script ( 'window scrollto ( 0 , document body scrollheight ) ; ' )  
image ( 'img png ' )  write ( 'clipboard : ' )
writer = csv writer ( output , delimiter='\n ' )
sorted ( itertools product ( ( 0 , 1 ) , repeat=3 ) , key=lambda x : sum ( x ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
pd pivot ( index=df [ 'b1 ' ] , columns=df index , values=df [ 'b2 ' ] )  plot ( )
canvas create_image ( 0 , 0 , anchor=nw , image=displayplantimage )
channel queue_bind ( exchange='amq direct ' , queue='hello ' )
re split ( '\\|| < > ' , input )
age = models integerfield ( blank=true , null=true )
root mainloop ( )                                                      
[ ( key , len ( list ( it ) ) ) for key , it in itertools groupby ( list_one ) ]
df isnull ( )
list ( pad ( [ 1 , 2 , 3 ] , 7 , '' ) )
print ( `` all normal prints after 'reset ' above   '' )
{ 'list of things ' : [ 'alice ' , 'bob ' , 'evan ' ] }
df1 apply ( lambda s : df2 corrwith ( s ) )
self response out write ( html )
plt plot ( list ( range ( 10 ) ) )
print ( `` i 'm meth_b '' )
[ int ( x ) for line in data for x in line split ( ) ]
print ( 'location : url\r\n ' )
genfromtxt ( 'missing1 dat ' , delimiter= ' , ' , filling_values=99 )
ax plot ( x , y , color=uniqueish_color ( ) )
qtgui qmainwindow __init__ ( self , parent )
os chdir ( 'l : ' )
os chdir ( 'l : \\letter ' )
os chdir ( 'z : ' )
os chdir ( 'l : \\ ' )
print ( etree tostring ( root , pretty_print=true ) )  
mylist = sorted ( mylist , key=lambda k : ( k [ 'name ' ]  lower ( ) , -k [ 'age ' ] ) )
getattr ( a , 'print_test ' ) ( )
sdb close ( )
np mgrid [ [ slice ( row [ 0 ] , row [ 1 ] , n * 1j ) for row , n in zip ( bounds , n_bins ) ] ]
return super ( usersettingsview , self )  dispatch ( *args , **kwargs )
from functools import reduce reduce ( lambda x , y : x ^ y , [ hash ( item ) for item in list ( d items ( ) ) ] )
results = [ r for k in keywords for r in re findall ( k , message lower ( ) ) ]
re findall ( '\\bpresent\\b ' , tale )
a append ( 'name like % % % s ' % b [ 'by_name ' ] )
[ 'barack obama ' , 'bill gates ' ]
getattr ( this_prize , choice )
[ ( '1 ' , 6 ) , ( '2 ' , 4 ) , ( '7 ' , 3 ) , ( '10 ' , 2 ) ]
[ [ 1 , -2 ] , [ 3 , -2 ] ]
root mainloop ( )                                                       
cur execute ( 'insert into some_table ( somecol ) values ( % s ) ' , ( dt , ) )
k = [ 1 , 1 , 2 , 3 ]
time sleep ( 0 2 )
int ( bin ( n ) [ :1 : -1 ] , 2 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
requests post ( url , data=body , headers=headers )
print ( [ hex ( x ) for x in numbers ] )
writer writerows ( [ 'hi , there ' ] )
zip ( string , string [ 1 : ] , string [ 2 : ] )
numpy set_printoptions ( formatter= { 'float ' : lambda x : 'float : ' + str ( x ) } )
[ ' { } _ { } ' format ( k , v ) for k , v in list ( d items ( ) ) ]
win show_all ( )  
sum ( decimal ( i ) for i in a )
re search ( '^ ( ( ? ! bantime| ( invokername=server ) )   ) * $ ' , s , re m )  group ( )
np split ( x reshape ( x shape [ 0 ] , -1 ) , 9 , axis=1 )
tup index ( 'string2 ' )
conn close ( )
g = nx balanced_tree ( 10 , 10 )
process terminate ( )
print ( re sub ( ' ( \\\\u [ 0-9a-fa-f ] + ) ' , unescapematch , 'wi\\u2011fi ' ) )
hdl = logging filehandler ( 'hits log ' )
a = re compile ( 'p ( ? : resent|eople ) ' )
a = re compile ( 'p ( ? : resent ) ' )
f close ( )                   
xxxxx yyyyy zzzzz
d = os path dirname ( os getcwd ( ) )
alpha = img convert ( 'rgba ' )  split ( ) [ -1 ]
list2 == sorted ( list2 , key=lambda c : list1 index ( c ) )
dict ( ( y , x ) for x , y in t )
df words str contains ( 'he ' )  sum ( )
print ( len ( set ( w lower ( ) for w in open ( 'filename dat ' )  read ( )  split ( ) ) ) )
df [ 'sum ' ] = df [ 'a ' ] + df [ 'c ' ]
plt title ( 'utilisateur ' )
return response ( { 'detail ' : 'this works ' , 'report ' : report_encoded } )
myothermodule py
[ [ '4824 ' ] , [ '482 ' , '4 ' ] , [ '48 ' , '24 ' ] , [ '4 ' , '824 ' ] , [ '4 ' , '82 ' , '4 ' ] ]
print ( repr ( s ) )
`` `` '' '' '' ''  join ( k for k , g in groupby ( sorted ( 'aaabcabccd ' ) ) )
pytz utc localize ( utc_time , is_dst=none )  astimezone ( tz )
my_function ( **data ) 
my_list [ bounds [ 0 ] : bounds [ 1 ] + 1 ] = [ 'foo ' ] * ( bounds [ 1 ] + 1 - bounds [ 0 ] )
'fue ' + '\u0301 '
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
d = { 'i ' : 1 , 'j ' : 1 }
[ s [ 0 ] for s in formula split ( '+ ' ) ]
print ( list ( range ( n , ( m + 1 ) * n , n ) ) )
`` `` '' : :2012-05-14 18:10:20 856000 : : '' '' ''  translate ( none , ' -   : ' )
mystring translate ( none , string punctuation )
newdf = df withcolumn ( 'total ' , sum ( df [ col ] for col in df columns ) )
type ( theobject )  __name__ in dir ( __builtins__ )
print ( list ( powerset ( [ 4 , 5 , 6 ] ) ) )
root mainloop ( )                                                        
print ( '\n' join ( op ) )
li = map ( lambda x : ' { 0 } - { 1 } ' format ( x , grade ( x ) ) , s )
func ( )
check ( 'abc ' )
len ( foo split ( '   ' ) [ 1 ] )
[ [ cell for cell in row ] for row in x ]
s [ : :-1 ] 
text_file close ( )  
np unique ( df [ [ 'col1 ' , 'col2 ' ] ] )
print ( [ [ x for x in a if len ( x ) == i ] for i in set ( len ( k ) for k in a ) ] )
b = np array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
y = x astype ( int )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
{ ( 1 ) : { ( 2 ) : [ ( 2 , 3 ) , ( 1 , 7 ) ] } }
root mainloop ( )                                                         
signal signal ( signal sigint , quit_gracefully )
all ( ( c [ i ] == np cross ( a [ i ] , b [ i ] ) )  all ( ) for i in range ( len ( c ) ) )
return self request user
mainscreen ( )
print ( `` ///i do n't know why ///i do n't have the right answer/// ''  strip ( '/ ' ) )
ax xaxis set_major_formatter ( myfmt )
ax set_yticklabels ( [ ] ) 
sys stdout flush ( )                    
uly = uly replace ( '- ' , 's ' ) if '- ' in uly else 'n ' + uly
findreplace ( 'some_dir ' , 'find this ' , 'replace with this ' , '* txt ' )
self assertequal ( my_patch_method , patch_my_lib ( )  target_method __func__ )
logging getlogger ( )  setlevel ( logging info )
print ( parser parse_args ( ' -- foo b cmd -- arg1 xx zz -- foobar' split ( ) ) )
current_time = ( datetime now ( ) - timedelta ( seconds=10 ) )  time ( )
sns regplot ( 'rdiff ' , 'pct ' , df , corr_func=stats pearsonr )
sum ( counter ( { 'a ' : 2 , 'b ' : 2 , 'c ' : 2 , 'd ' : 1 } )  values ( ) )
pgdb paramstyle
df = df [ ~df [ 'user name ' ]  str endswith ( ( 'da ' , 'pl ' ) ) ]
time sleep ( 5 )     
[ l [ i ] for i in [ 2 , 1 , 0 ] ]
`` `` '' abc abc abcd ab '' '' ''  replace ( 'abc ' , 'def ' )
re sub ( ' ( ? < =\\w ) ( ? =\\w ) ' , '- ' , str )
os system ( 'scp file user @ server : path ' )
return httpresponseredirect ( '/path/ ' ) 
fig tight_layout ( ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
print ( dict ( re findall ( '\\ { ( \\s+ ) \\s+\\ { * (  * ? ) \\ } + ' , x ) ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
binascii hexlify ( 'dummy string ' )
self f close ( )
x [ 1 : :2 , 1 : :2 ]
arr [ arr > 0 ]  min ( )
etree tostring ( div )
painter restore ( )
text = text replace ( ' ? `` ' , ' ? `` ' )  replace ( ' ! `` ' , ' ! `` ' )  replace ( '   `` ' , '  `` ' )
df loc [ : , ( slice ( none ) , 'a ' ) ]
zlib decompress ( data )
datetime strptime ( data [ 4 ]  partition ( 't ' ) [ 0 ] , ' % y- % m- % d ' )  date ( )
[ 'asp10 ' , 'asp11 ' , 'asp15 ' , 'asp16 ' , 'asp210 ' , 'asp211 ' ]
datetime strptime ( '2012-02-10 ' , ' % y- % m- % d ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
regexref = re compile ( '\\w ' , re unicode )
array ( [ [ 0 ] , [ 7 ] , [ 1 ] , [ 0 ] , [ 4 ] , [ 0 ] , [ 0 ] , [ 0 ] , [ 0 ] , [ 1 ] , [ 0 ] , [ 0 ] , [ 0 ] ] )
out = mat [ 0 ] * ( len ( ixs ) - len ( nzidx ) ) + mat [ ixs [ nzidx ] ]  sum ( axis=0 )
return [ str [ start : start + num ] for start in range ( 0 , len ( str ) , num ) ]
np asarray ( v )  min ( 0 )
dtype ( [ ( 'x ' , ' < i8 ' ) , ( 'y ' , 's ' ) ] )
base = df index get_loc ( 18 )
[ [ 0 , 0 ] , [ 1 , 1 ] ]
df groupby ( 'grp ' )  agg ( f )
re split ( ' [ \\n\\r ] + ' , line )
ax2 set_xlim ( [ 0 , 5 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
my_sorted_tuple = tuple ( sorted ( my_tuple , key=lambda item : item [ 1 ] ) )
plt subplot ( 2 , 1 , 2 )
x = dict ( zip ( list ( range ( 0 , 10 ) ) , itertools repeat ( 0 ) ) )
list ( item [ 1 ] for item in pkgutil iter_modules ( ) )
datetime datetime date ( 2011 , 1 , 1 )
i , = np where ( a == value )
cv2 destroyallwindows ( )     
df groupby ( 'a ' ) [ 'b ' ]  apply ( list )
b = numpy append ( a , numpy zeros ( [ len ( a ) , 1 ] ) , 1 )
self assertequal ( output , 'hello world ! ' )
cprofile runctx ( 'your code here ' , globals ( ) , locals ( ) , 'output_file ' )
a [ np random choice ( a shape [ 0 ] , num_rows_2_sample ) ]
fig , ax = plt subplots ( figsize= ( 6 , 1 ) )
pil_im show ( )
mlab show ( )
ax set_yticks ( [ ] ) 
pd concat ( [ s1 , s2 ] , axis=1 )
file write ( str ( m ) )
'87 ' , 'e9 ' , 'b1 ' , 'a4 ' , '0a ' , '92 ' , '9a ' , 'b6 ' , '13 ' , '56 ' , '65 ' , 'c2 '
sys stdout flush ( )                     
subprocess call ( [ 'wget ' , 'your ' , 'parameters ' , 'here ' ] )
activity objects filter ( list__topic=my_topic )
app exec_ ( )   
sys stdout write ( '\x1b [ k ' )
array ( [ 53 9 , 80 85 , 111 72 , 52 92 , 126 91 ] )
request headers get ( 'user-agent ' ) 
np logical_or reduce ( ( x , y , z ) )
writer writerow ( [ item ] )
display_axes set_rlim ( [ -1 , 1 ] )
xl workbooks open ( 'c : \\foo\\bar xlsx ' )
plt rcparams [ 'patch edgecolor ' ] = 'white '
print ( text encode ( )  decode ( 'unicode-escape ' ) )
print ( 'valid ' if re match ( '^ [ a-za-z0-9_ ] * $ ' , word ) else 'invalid ' )
print ( soup find ( 'div ' , { 'id ' : 'resultstats ' } )  text )
print ( rawstr ( test7 ) )
{ { settings my_setting_name } }
data decode ( 'utf8 ' )  encode ( 'latin1 ' )  decode ( 'gb2312 ' )
[ s strip ( ) for s in data_string splitlines ( ) ]
re sub ( ' [ ^0-9+ _ - ] + ' , '' , strs )
fo write ( fp read ( ) )
cursor execute ( 'select c1 from t1 where c1 regexp ? ' , [ search_term ] )
sess run ( assign_op )
ts reindex ( pd date_range ( min ( date_index ) , max ( date_index ) ) )
bbox_data = ax transdata inverted ( )  transform ( bbox )
df1 sort ( [ 'a ' , 'b ' ] , ascending= [ true , false ] )
print ( alphs [ : i ] + alphs [ i : :-1 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
[ dict ( zip ( d , v ) ) for v in product ( *list ( d values ( ) ) ) ]
self text pack ( )
a = numpy frombuffer ( buffer , float )
mylist = list ( set ( mylist ) )
letters = [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' , 'f ' , 'g ' , 'h ' , 'i ' , 'j ' ]
print ( sorted ( list ( a items ( ) ) , key=lambda t : get_key ( t [ 0 ] ) ) )
map ( lambda x : func ( *x ) , [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] )
min ( s find ( i ) if i in s else none for i in a )
print ( re findall ( '\\ [ ( [ ^ ] ] * ) \\ ] ' , s ) )
np linalg eigvals ( df apply ( pd to_numeric , errors='coerce ' )  fillna ( 0 ) )
np in1d ( a , b )  reshape ( a shape )  any ( axis=1 )
self assertequal ( my_patch_method , patch_my_lib ( )  target_method __func__ ) 
sys stdout write ( '\r ' )
 
[ ( 1 , 2 , 3 ) , ( 1 , 2 , 3 ) ]
run ( 'ls ' ) 
list ( dict ( ( v [ 'id ' ] , v ) for v in l )  values ( ) )
mysublist = [ dict ( ( k , v ) for k , v in mydict items ( ) if v field2 > = 2 ) ]
del my_dict [ k ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
squared = [ ( x ** 2 ) for x in lst ]
webbrowser open ( 'http : //xkcd com/353/ ' )
sys stdout = codecs getwriter ( 'utf-8 ' ) ( sys stdout )
`` `` '' 12344 '' '' ''  zfill ( 10 )
threading thread ( target=play1 )  start ( )
[ 'x ' , 'b2 ' , 'b11 ' , 'b22 ' , 'b ' , 'b1 ' , 'b21 ' , 'c ' , 'q1 ' , 'c11 ' , 'c2 ' ]
print ( ' ' join ( [ str ( i ) for i in a ] ) )
x = np random rand ( 5 , 1 )
print ( ( 'notebook_full_path : \n ' , notebook_full_path ) )
driver get ( 'http : //whatismyip com ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
os path sep
csv_writer writerows ( cursor )
app run ( )                    
genfromtxt ( 'missing1 dat ' , delimiter= ' , ' )
df groupby ( [ 'score ' , 'type ' ] )  sum ( )
df2 reset_index ( drop=true )
`` `` '' '' '' ''  join ( random choices ( string ascii_uppercase + string digits , k=n ) )
print ( lxml etree tostring ( order , pretty_print=true ) )
globals ( )
re sub ( ' [ a-za-z ] \\d , ' , lambda x : x group ( 0 ) [ 0 ] + '0 ' + x group ( 0 ) [ 1 : ] , s )
process = popen ( [ 'mycmd ' , 'myarg ' ] , stdout=devnull , stderr=devnull )
print ( max ( result , key=lambda a : a [ 1 ] ) )
var1 , var2 = input ( 'enter two numbers : ' )  split ( ' ' )
re sub ( ' (   { 6 } ) ' , '\\1 # ' , str )
eb = plt errorbar ( x , y , yerr=0 1 , fmt= '' , color='b ' )
regex2 = re compile ( ' * ( { } )   *' format ( what2look4 ) )
data [ : , -3 : ]
df [ 'last_updated_time ' ] = d dt strftime ( ' % h : % m : % s ' )
urlpatterns = patterns ( 'kiosks views ' , url ( '^ ( [ \\w ] + ) / $ ' , 'dashboard ' ) )
df plot ( kind='bar ' , stacked=true , color=my_colors )
all_data append ( data )
re sub ( '\\s+ ' , '' , 'strip my spaces ' )
numpy array ( [ 'hello ' , 'world ! ' ] , dtype=object )
[ 0 , 3 , 1 , 2 ]
matplotlib pylab show ( )
print ( '\n' join ( '' join ( s ) for s in something ) )
[ k for j in re findall ( `` ( \\d ) | ' ( [ ^ ' ] * ) ' '' , i ) for k in j if k ]
input_file close ( )
numpy outer ( numpy array ( [ 1 , 2 ] ) , numpy array ( [ 3 , 4 ] ) )
self setwindowflags ( pyqt4 qtcore qt windowstaysontophint )
del l [ index ]
print ( f read ( ) ) 
re sub ( ' ( % ) ' , '\\g < 1 > \\g < 1 > ' , original )
super ( racemodel , self )  save ( *args , **kwargs )
d = dict ( ( v [ 0 ] , v [ 1 : ] ) for v in arr )
server = smtplib smtp ( 'smtp gmail com ' , 587 ) 
allowed_hosts = [ '127 0 0 1 ' , '192 1 12 23 ' ]
urlparse unquote ( 'it % 27s % 20me % 21 ' )
size = re findall ( '\\d+ ( ? : ,\\d { 3 } ) * ( ? : \\ \\d+ ) ? ' , my_string )
f = gzip open ( filename , mode='rt ' )
return '' join ( word )
print ( lxml etree tostring ( tree ) )
[ [ 1 , 2 ] , [ 2 ] , [ 2 , 2 , 3 ] , [ 1 , 2 , 3 ] ]
[ 1 , 3 , 5 , 11 , 15 , 22 ]
driver send_keys ( keys control + 'escape ' )
pygame init ( ) 
list ( d values ( ) ) 
[ item for item in lis if item [ 1 ] not in seen and not seen add ( item [ 1 ] ) ]
any ( ( [ 1 , 2 ] == x )  all ( ) for x in a )
df1 iloc [ : , ( df1 columns get_level_values ( 'a ' ) == 1 ) ]
[ ( x + b [ i ] ) for i , x in enumerate ( a ) ]
[ ( tuple [ a ] , tuple [ a + 1 ] ) for a in range ( 0 , len ( tuple ) , 2 ) ]
np array ( a )  reshape ( -1 , 100 ) [ : :2 ]  ravel ( )
df index values
x = ' { } { } ' format ( *s )
df select ( '* ' , ( df age + 10 )  alias ( 'ageplusten ' ) )
s [ : :-1 ]  replace ( '2 ' , 'x ' , 1 ) [ : :-1 ]
fig canvas mpl_connect ( 'pick_event ' , self )
[ ( ( i // 2 ) ** 2 if i % 2 else i // 2 ) for i in range ( 2 , 20 ) ]
zip ( * ( [ iter ( l ) ] * 2 ) )
os kill ( os getppid ( ) , signal sighup )
mymodel all ( )  filter ( 'prop > = ' , prefix )  filter ( 'prop < ' , prefix + '\ufffd ' )
len ( sum4 ) - np count_nonzero ( sum4 )
return gtk gdk pixbuf_new_from_array ( arr , gtk gdk colorspace_rgb , 8 )
[ ( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x ! = y ] 
eval ( ' [ 1,2,3,4 ] ' )
x = sum ( data [ 'cond ' ] == 1 )
clr addreference ( 'mydll ' )
print ( etree tostring ( e , pretty_print=true ) )
print ( equations ( ( x , y ) ) )
print ( is_json ( ' { `` age '' :100 } ' ) )
ham __class__ __name__
return httpresponse ( json dumps ( locs ) , mimetype='application/json ' )
cv2 imshow ( 'image ' , im )
re findall ( ' ( \\d+| [ a-za-z ] + ) ' , '12fgsdfg234jhfq35rjg ' )
plt title ( 'sunflower plot ' )
conn execute ( 'insert into example values ( ? , ? ) ; ' , ( 2 , 202 ) )
ctypes windll winmm mcisendstringw ( 'set cdaudio door open ' , none , 0 , none )
os kill ( 12765 , 0 )
self send_blob ( blob_info , save_as='my_file txt ' )
composite_list append ( [ '200 ' , '200 ' , '200 ' , '400 ' , 'bluellow ' ] )
return calendar timegm ( dt utctimetuple ( ) )
df [ 'data ' ] = df [ 'data ' ]  apply ( clean_string_to_list )
sum ( int ( i ) for i in data )
pdb set_trace ( )        
[ [ [ flatten [ int ( i * 2 ) ] ] ] for i in range ( int ( len ( flatten ) / 2 ) ) ]
global_dict [ 'bar ' ] = 'hello '
df = df sort_values ( by= [ 'c1 ' , 'c2 ' ] , ascending= [ false , true ] )
`` `` '' '' a\ '' '' '' ''
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
print ( '\n' join ( str ( port ) for port in ports ) )
results = [ int ( i ) for i in results ]
raise notimplementederror ( 'subclasses should implement this ! ' )
return func ( *args , **kwargs ) 
return response ( json_string )
df2 [ df2 name == 'joe ' ]  t
return [ m group ( 1 ) for m in ( re search ( regex , l ) for l in lines ) if m ]
time strftime ( ' % y- % m- % d % h : % m : % s ' )
data_df [ 'grade ' ] = pd to_numeric ( data_df [ 'grade ' ] )  astype ( int )
print ( sum ( sum ( map ( int , r findall ( line ) ) ) for line in data ) )
e shape == ( 3 , 2 , 2 )
[ x [ 1 ] for x in l ] 
plt tight_layout ( ) 
df genres apply ( pd series )  stack ( )  drop_duplicates ( )  tolist ( )
nms dropna ( thresh=2 )
print ( ' % s , % s ' % ( row [ 'name ' ] , row [ 'category ' ] ) )
admin site register ( person , personadmin ) 
ax1 set_xticklabels ( [ ] ) 
result = copy deepcopy ( source_dict )
from functools import reduce reduce ( lambda x , y : x replace ( y , dict [ y ] ) , dict , s )
print ( df loc [ 'one ' ] )
soup = beautifulsoup beautifulsoup ( urllib request urlopen ( url )  read ( ) )
array ( [ [ 1 , 3 , 4 , 1 ] , [ 1 , 2 , 3 , 2 ] , [ 1 , 2 , 1 , 3 ] ] )
np all ( np unique ( a [ [ 'idx1 ' , 'idx2 ' ] ] ) == np unique ( b [ [ 'idx1 ' , 'idx2 ' ] ] ) )
count = sum ( 1 for line in myfile if line rstrip ( '\n ' ) )
[ ( [ 0 0 ] * 10 ) for _ in range ( 10 ) ]
a [ 1 , 1 ]
a [ np arange ( 2 ) [ : , ( none ) ] , b ]
mydriver find_element_by_xpath ( xpaths [ 'submitbutton ' ] )  click ( )
eliminated append ( x )
print ( etree tostring ( x , pretty_print=true ) )
emp delete ( )
[ mydictionary get ( key ) for key in keys ]
os system ( 'gpio write 6 0 & & gpio write 5 1 ' )
os system ( 'gpio mode 6 out & & gpio mode 5 out ' )
myinst __dict__ [ 'attr ' ]
sys stdout write ( 'text ' )
urllib parse unquote ( url )
max ( ( t for t in yourlist if t [ 2 ] > = 100 ) , key=itemgetter ( 1 ) )
mystring find ( 'subject ' )
super ( basemodel , self )  save ( *args , **kwargs )
urllib parse unquote ( urllib parse unquote ( s ) )
data = json dumps ( { 'a ' : 1 } )
( df [ 0 ] - df [ 1 ] )  apply ( lambda x : x astype ( 'timedelta64 [ us ] ' ) )
{ 'dict2 ' : { } }
app exec_ ( )    
list ( sys modules keys ( ) )
code interact ( )
range ( n , -1 , -1 )
`` `` '' `` '' ''  join ( re findall ( ' [ a-z ] ? [ ^a-z\\s ] +| [ a-z ] + ' , vendor ) )
ws cell ( row=i + 2 , column=1 )  value = statn
a sort ( key=lambda x : x split ( '- ' , 2 ) [ -1 ] )
w = label ( root , text='hello , world ! ' )
[ 'sheet1 ' , 'sheet2 ' , 'sheet3 ' ]
[ '231512-n ' , '1209123100000-n ' , 'alphanumeric ' , 'alphanumeric ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
return '' join ( parts )
isinstance ( variable , states )
a = a reshape ( ( a shape [ 0 ] , -1 , n ) )
driver execute_script ( ' % s ' % js )
procs append ( multiprocessing process ( target=worker ) )
setattr ( current_module , new_name , func )
print ( f read ( ) )  
print ( df to_latex ( index=none )  replace ( 'lll ' , 'rrr ' ) )
groupby ( a , [ 0 , 1 ] )
list ( metadata tables keys ( ) )
webbrowser open_new_tab ( url )
re split ( ' ( ? m ) ^\\s* $ \\s* ' , text )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
cp runctx ( 'a=foo ( ) ' , globals ( ) , locales ( ) )
idx = ( df [ 'c ' ] ! = 0 ) & ( df [ 'a ' ] == 10 ) & ( df [ 'b ' ] < 30 )
a = [ 'cat ' , 'dog ' , 'mouse ' ]
[ line for line in file if not line startswith ( ' # ' ) ]
s reset_index ( drop=true , inplace=true )
df [ 'in ' ]  groupby ( ( df [ 'in ' ] ! = df [ 'in ' ]  shift ( ) )  cumsum ( ) )  cumsum ( )
xpath ( '//body//text ( ) ' )  re ( ' ( \\w+ ) ' )
output write ( ' % s\t % s ' % ( ' ' join ( words [ : -1 ] ) , words [ -1 ] ) )
relations = request post getlist ( 'relations ' )
reactor run ( )         
dummy_df loc [ : , ( ~ ( dummy_df == '0 % ' )  all ( ) ) ]
logging info ( __ ( 'date= { } ' , date ) )
dict ( ( item [ 0 ] , ( item [ 1 ] , z [ item [ 0 ] ] ) ) for item in l )
df [ 'c ' ] = df [ 'b ' ]  combine_first ( df [ 'a ' ] )
df iloc [ [ 0 , 2 , 3 ] , [ 0 , 1 , 3 ] ]  mean ( axis=0 )
csv reader ( upload_file , delimiter= ' , ' , quotechar= ' '' ' )
`` `` '' ^\\s* [ \\w_ ] [ \\w\\d_ ] *\\s* *\\s* [ \\w_ ] [ \\w\\d_ ] *\\s*\\ (   *\\ ) \\s* $ '' '' ''
cur callproc ( 'my_stored_proc ' , ( first_param , second_param , an_out_param ) )
pd crosstab ( df a , df b )  apply ( lambda r : r / r sum ( ) , axis=1 )
process terminate ( ) 
soup body insert ( len ( soup body contents ) , yourelement )
savefig ( 'sample pdf ' )
qtcore signal ( 'finished ( int ) ' )
qtcore signal ( 'finished ( pyqt_pyobject ) ' )
json loads ( _ )
sum ( os path getsize ( f ) for f in os listdir ( '   ' ) if os path isfile ( f ) )
db session commit ( )     
webbrowser open_new ( 'file : //c : \\test\\test csv ' )
x do_something ( )
total = sum ( [ int ( i ) for i in cost ] )
print ( map ( lambda key_value : int ( key_value [ 1 ] ) , list ( ss items ( ) ) ) )
df drop ( [ 'tmp ' ] , axis=1 , inplace=true )
round ( 3 1415 - int ( 3 1415 ) , 3 )
writer writerows ( all )
random shuffle ( lst ) 
titlecase ( 'i am a foobar bazbar ' )
n ^= ( 1 < < upper ) - 1 & ~ ( ( 1 < < lower ) - 1 )
my_series sort ( )
time sleep ( 1 )                     
print ( pd merge ( df1 , df2 , on='b ' ) [ 'b ' ] )
del mylist [ i ]
session commit ( )      
d = dict ( itertools zip_longest ( fillvalue= '' , * ( [ iter ( l ) ] * 2 ) ) )
max ( x , key=sum )
a [ 'z ' ] [ 0 ] [ 'a ' ]
[ ( x ** 2 ) for x in range ( 10 ) ]
stat s_imode ( os lstat ( 'file ' )  st_mode )
dict ( [ x split ( ' : ' ) for x in a ] )
[ ast literal_eval ( re sub ( '\\b0+\\b ' , '' , pixel ) ) for pixel in pixels ]
sum ( a * b for a , b in zip ( it , it ) )
[ ( float ( i ) if '   ' in i else int ( i ) ) for i in s ]
list = open ( 'filename txt ' )  readlines ( )
df a = df a / 2
p add_argument ( ' -- sizes ' , type=pair , nargs='+ ' )
parser parse_args ( )
all ( dict values ( ) ) 
example2 ( )
l = [ c for c in l if c not in [ 'a ' , 'c ' ] ]
time sleep ( 1 )                      
x = [ v for i , v in enumerate ( x ) if i not in frozenset ( ( 2 , 3 , 4 , 5 ) ) ]
[ ( float ( c ) / t ) for c , t in zip ( conversions , trials ) ]
self assertequal ( 4 , 2 + 2 )
antisort ( [ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) , ( 3 , 4 ) ] )
user save ( )
window after ( 1 , lambda : window focus_force ( ) )
time sleep ( 1 )                       
[ i for i in my_list if all ( x not in i for x in [ '91 ' , '18 ' ] ) ]
struct unpack ( ' > q ' , str )
[ list ( t ) for t in set ( tuple ( element ) for element in xx ) ]
socket send ( '     nah ' )
rc ( 'text ' , usetex=true ) 
print ( et tostring ( tree , pretty_print=true , xml_declaration=true ) )
root mainloop ( )                                                          
log = logging getlogger ( __name__ )
x = eval ( input ( 'my score is \x1b [ s of 10\x1b [ u ' ) )
`` `` '' `` '' ''  join ( item [ 0 ] for item in groupby ( s split ( ) ) )
re findall ( '\\d ( \\d { 5 } ) \\d ' , s )
sys stdout flush ( )                      
df index = pd multiindex from_tuples ( df index str split ( '| ' )  tolist ( ) )
help ( 'modules collections ' )
help ( 'collections ' )
np cos ( -1 5 )
response = opener open ( 'http : //www google com/ ' )
tom_index = next ( index for index , d in enumerate ( lst ) if d [ 'name ' ] == 'tom ' )
time time ( ) * 1000
re sub ( ' [ aeiou ] + ' , lambda m : m group ( 0 )  lower ( ) , 'some text here ' )
ax2 yaxis tick_right ( )
htmlparser htmlparser ( )  unescape ( 'suzy & john ' )
ctypes cast ( s , ctypes c_void_p )  value
df ix [ pd to_datetime ( df date )  order ( )  index ]
s sendline ( 'ls -l ' )
sorted ( l , key=lambda x : ( x [ : -1 ] , x [ -1 ]  isdigit ( ) ) )
print ( df to_html ( float_format=lambda x : ' % 10 2f ' % x ) )
result = array [ : , ( idx ) ]
print ( os path join ( root , name ) )
print ( re findall ( ' [ \u4e00-\u9fff ] + ' , ipath ) )
ax plot ( x , y , label='a ' )
sys exit ( 0 )      
f write ( 'foo ' ) 
plot savefig ( 'hanning ' + str ( num ) + ' pdf ' )
return sum ( map ( int , str ( n ) ) )
q t reshape ( -1 , k , n )  swapaxes ( 1 , 2 )  reshape ( -1 , k )
sys exit ( 0 )       
result = [ float ( x strip ( ' `` ' ) ) for x in a1 ]
print ( wjdata [ 'data ' ] [ 'current_condition ' ] [ 0 ] [ 'temp_c ' ] )
df filter ( regex='^foo\\   ' , axis=1 )
print ( 'hello ' )  
super ( concurrentmodel , self )  save ( *args , **kwargs )
`` `` '' '' '' ''  join ( [ c for c in s if c isupper ( ) ] )
foo ( *i ) 
cols_to_use = df2 columns difference ( df columns )
round ( math degrees ( math asin ( 0 5 ) ) , 2 )
urlparse urljoin ( '/media/ ' , 'js/foo js ' )
min ( enumerate ( a ) , key=itemgetter ( 1 ) ) [ 0 ]
print ( list ( sampledict values ( ) ) [ 0 ]  keys ( ) [ 0 ] )
df [ 'date ' ] = pd to_datetime ( df [ 'date ' ] )   
len ( [ 'date ' , 'time ' , 'dlat ' , 'dlon ' , 'slat ' , 'slon ' , 'shgt ' , 'hgt ' , 'n ' , 'e ' ] )
initgstreamer ( )
time sleep ( 4 )
print ( '' join ( l ) )
tmp [ 'alpha ' ] = 'bbb '
test_df where ( ~ ( test_df < 4 ) )
l = list ( map ( lambda x : 2 * x , l ) )
df groupby [ 'month ' ]  category apply ( pd value_counts )
ax plot_surface ( x , y , z , rstride=10 , cstride=10 , alpha=0 3 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
im show ( )
app run ( )                     
driver execute_script ( `` tinymce activeeditor setcontent ( ' % s ' ) '' % payload )
myshelveddict update ( mydict )
{ v : ( v ** 2 ) for v in l }
file write ( 'first line\n ' )
im = image open ( tempimg )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
bp = df boxplot ( by='group ' )
app run ( )                      
driver get ( 'http : //www google com/ ' )
lmerge = [ ( i1 + i2 ) for i1 , i2 in zip ( l1 , l2 ) ]
[ [ try_int ( x ) for x in lst ] for lst in list_of_lists ]
print ( 'executing task { 0 }   ' format ( sys argv [ 1 ] ) )
subprocess popen ( executable , creationflags=detached_process , close_fds=true )
urllib parse urlencode ( { 'data ' : { 'wifi ' : { 'ssid ' : 'guest ' , 'rssi ' : '80 ' } } } )
output = '' join ( item [ 0 ]  upper ( ) for item in re findall ( '\\w+ ' , input ) )
grouped = df groupby ( level='date ' )
l = [ 'foo ' , 'bar ' , 'buz ' ]
app run ( )                       
np array ( my_list , dtype=np float )
fig savefig ( 'asdf png ' )
{ { request session foo } }
driver quit ( )     
result [ 'streams ' ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
n index ( min ( n ) )
numpy genfromtxt ( 'test txt ' , skip_footer=2 )
t start ( )  
a = open ( 'output txt ' , 'a ' )
ind = [ i for i in range ( len ( yvar ) ) if yvar [ i ] < 100 ]
x = [ ( 0 ) for i in range ( 10 ) ]
file_handle close ( )
str = re sub ( ' , ( ? = [ ^ '' ] * '' [ ^ '' ] * $ ) ' , ' @ ' , str )
word = '* ' * len ( name )
a __setitem__ ( slice ( 0 , 1 ) , [ 1 ] )
[ data [ i : i + n ] for i in range ( 0 , len ( data ) , n ) ]
np array ( [ ( labels == i )  astype ( np float32 ) for i in np arange ( 3 ) ] )
server serve_forever ( )       
{ { value | markdown | linebreaksbr } }
proc stdin write ( 'message2 ' )
os chdir ( '   ' ) 
matchobj = re search ( '^ ( ? ! ok|\\  )   * ' , item )
urllib parse urlencode ( { 'vote ' : [ 'better ' , 'faster ' , 'stronger ' ] } , true )
[ elem encode ( 'hex ' ) for elem in str ]
print ( ' % +d ' % score )
return render_to_response ( 'your_template html ' , { 'h ' : h } )
return bool ( coll )
f seek ( 0 ) 
a take ( np arange ( start , end ) , axis=axis )
vet = [ random randint ( 1 , 10 ) for _ in range ( 100000 ) ]
plt xticks ( ticks , labels )
return render ( request , 'template html ' , status=204 )
return sum ( map ( float , s split ( ) ) )
from module import *
print ( ( '+' join ( str ( i ) for i in n_nx1lst ) + ' = ' , sum ( n_nx1lst ) ) )
frame grid ( row=0 , column=0 , sticky='nsew ' )
s = ' { 0 : , } ' format ( n )
print ( et tostring ( newdom , pretty_print=true ) )
array ( [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 ] )
'this is a string : % s ' % 'abc '
f set_size_inches ( 11 69 , 8 27 )
print ( re sub ( ' ( < / ? \\w+ > ) ' , lambda up : up group ( 1 )  upper ( ) , ' < tag > input < /tag > ' ) )
x1 , y1 , a1 , b1 , x2 , y2 = ( int ( eval ( input ( ) ) ) for _ in range ( 6 ) )
decimal ( '33 505 ' )  quantize ( decimal ( '0 01 ' ) )
df _get_numeric_data ( )
circle1 set_visible ( false )
requests get ( url , headers=headers )
plt imsave ( 'girl_2 png ' , img_a )
aapl = aapl asfreq ( 'b ' , method='ffill ' )
ast literal_eval ( a )
logging getlogger ( )  handlers [ 0 ]  setlevel ( logging debug )
struct pack ( ' > i ' , 1 )
pyplot draw ( )
[ [ 'scorch ' , 'scorching ' ] , [ 'dump ' , 'dumpster ' , 'dumpsters ' ] ]
df iloc [ : , ( your_col_index ) ]
coautorshipdictionary = { int ( k ) : int ( v ) for k , v in json load ( json_data ) }
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
`` `` '' https : //gdata youtube com/feeds/api/videos/ { video_id } /comments ? start-index= { sta‌​rt_index } & max-results= { max_results } '' '' ''
myentry config ( show='* ' )
`` `` '' { :  20f } '' '' ''  format ( a )
items = [ some ( a split ( ) , d , n ) for a , d , n in ( list ( m values ( ) ) for m in dl ) ]
urljoin ( 'some ' , 'thing ' )
urljoin ( 'http : //some ' , 'thing ' )
self text pack ( side='right ' , fill='both ' , expand=true )
print ( re findall ( ' [ \u4e00-\u9fff ] + ' , ipath decode ( 'utf-8 ' ) ) )
isinstance ( now , datetime datetime )
cursor execute ( 'select qsql from tbltest where id = 4 ' )
ax set_xticklabels ( [ ] ) 
person objects filter ( id__in=ids )  values ( 'name ' , 'age ' )
server serve_forever ( )        
time_zone = 'asia/kolkata '
dict_symmetric_difference ( { 'a ' : 1 , 'b ' : 2 } , { 'b ' : 2 , 'c ' : 3 } )
np repeat ( np arange ( x ) , y )
df1 ix [ 0 , 1 ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
x = { '0 ' : [ ] , '2 ' : [ ] , '16 ' : [ ] }
print ( [ 1 , 2 , 3 ] )
a_lower = { k lower ( ) : v for k , v in list ( a items ( ) ) }
your_list = map ( int , your_string )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
{ 'arg1 ' : [ '1 ' , '4 ' ] , 'arg2 ' : [ 'foobar ' ] }
print ( [ var for var in list ( globals ( )  keys ( ) ) if '__ ' not in var ] )
[ list ( g ) for k , g in itertools groupby ( sorted ( iterable ) ) ]
sys stdout flush ( )                       
nx dijkstra_path ( g , 'b ' , 'b ' , 'distance ' )
return cv2 findcontours ( img , cv2 retr_external , cv2 chain_approx_simple )
salesdata loc [ ~salesdata outlet_size isnull ( ) , 'outlet_size ' ]  unique ( )
user objects filter ( active=true )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
system ( 'cmd exe /c echo hello world > test txt ' )
s = date strftime ( ' % y % m % d ' )
[ key for key , val in list ( dct items ( ) ) if val == true ]
time sleep ( 1 )                        
data = np concatenate ( ( im , indices ) , axis=-1 )
mimetypes init ( )
cv2 destroyallwindows ( )      
random randrange ( 1 , 10 )
btn5 grid ( row=1 , column=2 , columnspan=1 , sticky='ewns ' )
keyring set_password ( 'system ' , 'username ' , 'password ' )
print ( myunicode encode ( 'utf-8 ' ) )
numpy histogram ( a , bins= ( 25 , 100 ) )
my_list = my_list [ :8 ] + new_array
dictionary [ key ] = value
reg = re compile ( ' * ? ( \\ ( ? \\d { 3 } \\d { 0,3 } \\d { 3 } \\d { 0,3 } \\d { 4 } )  * ? ' , re s )
time sleep ( interval )
app run ( )                        
print ( ' ' join ( [ s split ( ) [ -1 ] ] + s split ( ) [ : -1 ] ) )
df resample ( '30min ' )  dropna ( )
print ( list ( range ( 0 , ( m + 1 ) * n , n ) ) [ 1 : ] )
a view ( 'u1 ' )  reshape ( 4 , -1 ) [ : , 1:3 ]  copy ( )  view ( 'u2 ' )
print ( list ( itertools product ( *itertools repeat ( ( false , true ) , 3 ) ) ) )
pd to_numeric ( s , errors='ignore ' )
df columns = [ strip_non_ascii ( x ) for x in df columns ]
a_order , a_sorted = zip ( *sorted ( enumerate ( a ) , key=lambda item : item [ 1 ] ) )
l grid ( row=6 , column=0 )
zipfile writestr ( zipinfo , '' )
all_descendants = list ( elem iter ( ) )
print ( '\x1b [ 31m '' red '' \x1b [ 0m ' )
[ '1 0 0 ' , '1 0 2 ' , '1 0 12 ' , '1 1 2 ' , '1 3 3 ' ]
cv2 waitkey ( 0 )     
print ( 'marked - % s\r\nunmarked - % s ' % ( ' ' join ( marked ) , ' ' join ( unmarked ) ) )
cursor execute ( 'insert into mytable set name = % s ' , ( name , ) )
mc = myclass ( )
sorted ( a , key=operator itemgetter ( 2 , 0 , 1 ) )
line strip ( ) == ''
df = pd concat ( [ df , s1 , s2 ] , axis=1 )  reset_index ( drop=true )
wildcards = ' , ' join ( [ ' % s ' ] * len ( frame columns ) )
session query ( func mythingfunction ( 'bar ' ) )  all ( )
db_table = 'schema ''   `` tablename '
[ [ int ( j ) for j in i ] for i in a ]
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ,
myroundedlist = [ round ( elem , 2 ) for elem in mylist ]
db commit ( )     
gb = df2 groupby ( 'name ' )
`` `` '' { :  2e } '' '' ''  format ( decimal ( '40800000000 00000000000000 ' ) )
madata mean ( axis=1 )
mc set_multi ( { 'key ' : 'hello ' , 'another ' : true } )
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] , [ 13 , 14 ] ]
a = np array ( [ [ 1 , 2 ] , [ 10 , 20 ] , [ 100 , 200 ] ] )
print ( list ( itertools combinations ( '123 ' , 2 ) ) )
return set ( list1 )  intersection ( list2 )
olib oshape ( 'b ' )
[ x for x in itertools product ( lst , repeat=3 ) if sum ( x ) == 0 ]
np bincount ( accmap , weights=a )
[ ( x , y ) for x in range ( 3 ) for y in range ( 2 ) ]
print ( ' $ % 0 02f ' % amount )
isinstance ( d [ obj ] , list )
time sleep ( 1 )                         
self canvas pack ( fill=both , expand=yes )
[ i partition ( '\t ' ) [ -1 ] for i in l ]
[ [ '1 ' , 'a ' , '50 ' ] , [ '2 ' , 'b ' , '70 ' ] , [ '3 ' , 'c ' , '90 ' ] ]
ax set_yticklabels ( labels , rotation=-15 , va='center ' , ha='left ' )
requests post ( 'http : //httpbin org/post ' , files=files )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
line in ( '\n ' , '\r\n ' )
plt scatter ( x , y )
verts = [ ( 0 ) for x in range ( 1000 ) ]
[ ( 1 ) for _ in range ( 6 ) ]
np linalg norm ( x )
connection connect ( )
time sleep ( 100 )
changedtypedf = joindf withcolumn ( 'label ' , joindf [ 'show ' ]  cast ( 'double ' ) )
[ ( 1 , 2 , 2 ) , ( 5 , ) , ( 1 , 1 , 1 , 1 , 1 ) , ( 1 , 1 , 1 , 2 ) ]
print ( 'yes ' if 0 < x < 0 5 else 'no ' )
sorted ( author objects all ( ) , key=lambda a : a full_name )
jsonify ( eqtls= [ e serialize ( ) for e in my_list_of_eqtls ] )
sum ( len ( i ) for i in x if len ( i ) > 1 )
[ [ k for k in x if x [ k ] ! = y [ k ] ] for x , y in pairs if x ! = y ]
print ( '\n' join ( lst ) )
admin site register ( product , productadmin )
norm = [ ( float ( i ) / max ( raw ) ) for i in raw ]
df iloc [ [ 2 , 4 ] ]
plt savefig ( 'filename png ' , bbox_inches='tight ' )
next ( s for s in list_of_string if s )
imap4 search ( none , 'flagged ' )
re sub ( '\\\\ { ( \\d+ ) \\\\ } ' , ' ( ? p < _\\1 >  + ) ' , re escape ( 'version { 0 }   { 1 }   { 2 } ' ) )
print ( ' % 02d ' % ( 1 , ) )
gtk main ( )             
mylist = [ x for x in mylist if mydict get ( x [ 1 ] , none ) ! = x [ 0 ] ]
return [ x for x in mylist if x in pattern ]
fcntl flock ( fd , fcntl lock_ex )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
[ x [ : ] for x in [ [ foo ] * 10 ] * 10 ]
np insert ( b , list ( range ( n , len ( b ) , n ) ) , '\n ' )
os getcwd ( )
root = tk tk ( ) 
arr = arr [ : , : , 0 : :2 ]
pylab show ( block=true )
df [ ( df a == 0 ) & ( df b == 2 ) & ( df c == 6 ) & ( df d == 0 ) ]
[ set ( i ) for i in ordereddict fromkeys ( frozenset ( item ) for item in l ) ]
re sub ( '\nthis   * ? ok ' , '' , a , flags=re dotall )
filename = ' % d7 % 91 % d7 % 93 % d7 % 99 % d7 % a7 % d7 % 94 doc '
len ( re findall ( ' ( a ) ( ? =\\1 ) ' , 'aaa ' ) )
d = { 'a ' : 'none ' }
mymodel2 mymodel1 through objects all ( )
os chdir ( os path dirname ( os getcwd ( ) ) )
stockrequest objects filter ( amount_requested__gt=f ( 'amount_approved ' ) )
_ sum ( )
df groupby ( df index year )
[ i for i in range ( 4 ) if i < = 1 or i > = 4 ]
a = [ [ ] ] * 3 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
[ l [ i : i + 2 ] for i in range ( 0 , len ( l ) , 2 ) ]
super ( teststatus , self )  __init__ ( )
return ' < html > < body > ' + '\n ' + ' < form enctype= '' multipart/form-data '' action= '' ' + graph_url + ' `` method= '' post '' > ' + '\n ' + 'say something : ' + '\n ' + ' < input name= '' message '' type= '' text '' value= '' '' > < br/ > < br/ > ' + '\n ' + ' < input type= '' submit '' value= '' send '' / > < br/ > ' + '\n ' + ' < /form > ' + '\n ' + ' < /body > < /html > '
time sleep ( 10 )  
new_foo = [ item for item in foo if item % 3 ! = 0 ]
app run ( host='127 0 0 1 ' , debug=false )
`` `` '' asd0asd0 '' '' ''  replace ( '0 ' , '' , 1 )
df mean ( axis=1 ) 
sorted ( a , key=lambda x : aux index ( x [ 0 ] ) )
np where ( a == a max ( ) )
hasattr ( dynamo , key ) and callable ( getattr ( dynamo , key ) )
[ 'the ' , 'dogs ' , 'barked ' ]
plt savefig ( 'result png ' , dpi=300 )
[ math log10 ( i ) for i in x ]
decimal ( '100 ' ) * decimal ( ' 56 ' )
[ 7 , 1 , 2 , 3 , 4 , 5 , 6 ]
do_something ( )   
raw_file = self request get ( 'field_name ' )
np where ( condition ( zeta ) , func1 ( zeta ) , func2 ( zeta ) )
numpy array ( list ( result items ( ) ) , dtype )
background paste ( fire , ( x , y ) , fire convert ( 'rgba ' ) )
a mean ( axis=-1 )  mean ( axis=-1 )
number = request post get ( 'number ' , 0 )
help ( 'basicmethods ' )
help ( 'numbermethods ' )
pdb set_trace ( )         
print ( groups apply ( lambda g : g [ g [ 'b ' ] == g [ 'b ' ]  max ( ) ] ) )
my_dict [ 'a ' ] [ 'b ' ] = 'c '
driver find_element_by_css_selector ( 'span hover ' )  click ( )
sys modules
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
parent_id = column ( integer , foreignkey ( 'parent id ' ) )
np argwhere ( arr )
im = image open ( bytesio ( base64 b64decode ( data ) ) )
print ( json dumps ( json_output , indent=4 ) )
print ( a pop ( 0 ) )
super ( child , self )  my_method ( )
super ( child , self )  __init__ ( **kwargs )
data = np atleast_2d ( np loadtxt ( filename ) )
[ [ 'a ' , 'b ' , 'c ' , 'd ' ] , [ 'e ' , 'f ' , 'g ' , 'h ' ] , [ ] , [ ] ]
p = subprocess popen ( 'exec ' + cmd , stdout=subprocess pipe , shell=true )
employee objects active ( )
ax set_xlim ( 0 , 1 ) 
my_dict setdefault ( 1 , { } ) [ 2 ] = 3
print ( ' ' join ( [ string [ :5 ] ] * 2 ) )
os system ( 'gpio write 6 1 & & gpio write 5 0 ' )
plt savefig ( 'figure pdf ' )
[ ( not x ) for x in some_list ]
print ( hex ( int ( string , base=16 ) ) )
df dropna ( thresh=len ( df ) - 7 )
from module import * 
df replace ( '\\s+ ' , '_ ' , regex=true , inplace=true )
len ( [ phrase for phrase in nltk chunker ( sentence ) if phrase [ 1 ] == 'vp ' ] )
session query ( location , func count ( work id ) )  outerjoin ( work )  group_by ( location )
indices = [ i for i , x in enumerate ( mylist ) if re search ( pattern , x ) ]
cursor execute ( sql , args )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
numpy float ( '1 5698d+03 ' )
[ 'spring 2015 ' , 'fall 2014 ' , 'spring 2008 ' , 'fall 2008 ' ]
[ 'a ' , 'b ' , 'c ' , 'b ' , 'b ' ] + [ 'd ' , 'e ' ]
sys exit ( 0 )        
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
root geometry ( '600x450+300+300 ' )
{ ( 2 ) : 3 , ( 3 ) : 1 , ( 4 ) : 1 }
subprocess call ( [ '/bin/echo $ home ' ] , shell=true )
plt hist ( x , bins=n , range= ( a , b ) )
fig savefig ( 'aaa png ' )
datetime datetime strptime ( '24052010 ' , ' % d % m % y ' )  date ( ) 
print ( re sub ( '\\s+ ( street|st|trail|trl|tr ) \\s* $ ' , '' , target , flags=re m ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
[ ( x + 1 if x > = 45 else x + 5 ) for x in l ]
reactor run ( )          
sub_df iloc [ 0 ] [ 'a ' ]
print ( list ( comb ( [ [ 1 , 2 , 3 ] , [ 3 , 6 , 8 ] , [ 4 , 9 ] , [ 6 , 11 ] ] ) ) )
ret = pycb ( )
list ( chain ( * ( i if isinstance ( i , tuple ) else ( i , ) for i in l ) ) )
struct unpack ( ' > i ' , '' join ( [ chr ( x ) for x in response [ : -1 ] ] ) )
print ( chr ( 1081 ) )
{ '11 ' : 1 , '12 ' : 2 , '21 ' : 1 , '22 ' : 2 , '31 ' : 1 , '32 ' : 2 }
print ( cursor fetchall ( ) )
crypthash hexdigest ( )
lst = [ 'he ' , 'is ' , 'so ' , '' , 'cool ' ] [ _f for _f in lst if _f ]
[ func ( x , y ) for x , y in zip ( xs , ys ) ]
dateutil parser parse ( '2013-02-26 21:28:37 261134+01:00 ' )
pygame mixer music play ( )
[ filterlist ( numbers , ranges [ i ] , ranges [ i + 1 ] ) for i in range ( len ( ranges ) - 1 ) ]
meds [ i ] = meds [ i ]  replace ( ' cap ( s ) ' , ' 1 cap ( s ) ' )
new_list = list ( '' join ( my_list ) )
index , value = max ( enumerate ( my_list ) , key=operator itemgetter ( 1 ) )
`` `` '' , `` '' ''  join ( [ '1 ' , '2 ' , '3 ' ] )
f close ( )                    
int ( value or 0 )
sns barplot ( x='timestamp ' , y='result ' , hue='objectid ' , data=df )
mymodel objects filter ( name__exact=models f ( title ) )  exists ( )
{ { my_num | intcomma } }
infile = open ( '110331_hs1a_1_rtta result ' , 'r ' )
my_variable , = my_function ( )
map ( set , list ( d values ( ) ) )
list ( df index values )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
df pivot_table ( 'sales ' , index='fruit ' , columns= [ 'month ' ] , aggfunc='sum ' )
file write ( 'spam and eggs ! ' )
author objects order_by ( 'first_name ' , 'last_name ' )
pygame display set_caption ( 'jumper ' )
plt draw ( )       
`` `` '' martineau '' '' ''
[ k for k , v in numbers items ( ) if v == max ( numbers values ( ) ) ]
f write ( os linesep join ( data ) )
df groupby ( 'id ' )  agg ( [ 'std ' , 'mean ' ] )
dt = datetime datetime strptime ( new_dt , ' % y- % m- % d % h : % m : % s ' )
int ( '0x123 ' , 0 )
dictionary [ new_key ] = dictionary pop ( old_key )
[ [ 1 , 2 , 6 ] , [ 1 , 3 , 10 ] , [ 1 , 4 , 7 ] , [ 1 , 4 , 8 ] , [ 1 , 2 , 5 , 9 ] , [ 1 , 2 , 5 , 10 ] ]
sys path insert ( 0 , '  / ' )
regex search ( ' ( ? < letter >   ) ( ? !  * ? \\g < letter > ) ( ? < ! \\g < letter >  + ? ) ' , 'tooth ' )
root mainloop ( )                                                           
results = soup findall ( 'td ' , { 'valign ' : 'top ' } )
[ i for i , ( m , n ) in enumerate ( zip ( bool_array [ : -1 ] , bool_array [ 1 : ] ) ) if m ! = n ]
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
lst = [ 'he ' , 'is ' , 'so ' , '' , 'cool ' ]
time sleep ( 5 )      
fh close ( ) 
sys stdout flush ( )                        
plt figure ( )   
int ( re sub ( ' [ ^\\d- ] + ' , '' , your_string ) )
msg = mimetext ( '\xe2\x82\xac10' encode ( 'utf-8 ' ) , _charset='utf-8 ' )
print ( ( key , value ) ) 
return struct unpack ( ' ! l ' , packedip ) [ 0 ]
re compile ( '\\a\\z|\\a\\z*|\\a\\z+ ' )
sys modules 
root_app mount ( '/admin/ ' , admin_app )
lst [ 0 ] in lst [ 1 : ]
the_list sort ( key=len , reverse=true )
filtered_dict = { k : v for k , v in d items ( ) if filter_string in k }
`` `` '' '' '' ''  join ( ' { :02x } ' format ( a ) for a in numbers )
`` `` '' '' '' ''  join ( new )
print ( 'true ' if mydict [ 'key ' ] else 'false ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
str ( chr ( 97 ) )
getattr ( somemodule , 'someclass ' )
os environ [ 'glog_minloglevel ' ] = '2 '
mylist append ( i )
globals ( ) [ name ] = 10
[ 'a ' , 'b ' , 'c ' , 'x ' , 'd ' , 'e ' , 'f ' , 'x ' , 'g ' , 'h ' , 'i ' , 'x ' , 'j ' ] 
model __table__ create ( session bind )
time sleep ( 1 )                          
not any ( not isinstance ( y , int ) for y in [ 1 , 'a ' , 2 , 3 ] )
df index = list ( range ( len ( df ) ) )
giant = max ( nx connected_component_subgraphs ( g ) , key=len )
conn commit ( )         
print ( np sort ( np partition ( x , -10 ) [ -10 : ] ) )
d [ d [ 'name ' ] == 'world ' ]  tolist ( ) [ 0 ]
[ list ( group ) for k , group in groupby ( l , bool ) if k ]
data to_json ( orient='records ' )
good_data = [ data [ ( n ) , : ] [ flag == 1 ] for n in range ( data shape [ 0 ] ) ]
input ( ) 
np cumsum ( a )
logging getlogger ( 'foo ' )  setlevel ( logging warning )
datetime datetime now ( ) + datetime timedelta ( days=1 )
[ l for l in a if l in b ]
df1 loc [ ( df1 > s )  any ( axis=1 ) == true ]  index tolist ( )
my_dictionary [ 'keys ' ] [ 'to ' ] [ 'subdict ' ] = foo
cur execute ( 'insert into public test values ( % s ) ' , ( psycopg2 binary ( data ) , ) )
list ( [ a for a in x if a ! = 2 ] )
fig savefig ( 'test jpg ' )
mylist = [ ( 100 if i in ( 0 , 1 , 3 ) else e ) for i , e in enumerate ( mylist ) ]
instance = classobject ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
myentry config ( show= '' )
`` `` '' ( ? : ^ ( [ ocat ] + ) ( ? =\\s ) | ( ? < =\\s ) ( [ ocat ] + ) ( ? =\\s ) | ( ? < =\\s ) ( [ ocat ] + ) $ |^ ( [ ocat ] + ) $ ) '' '' ''
sum ( counter ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 1 , 6 ] )  values ( ) )
[ x for x in l if '2 ' in x ]
ar reshape ( ar shape [ 0 ] , -1 )
return [ random uniform ( lbound , rbound ) for i in range ( n ) ]
db [ 'a ' ] [ 'alpha ' ] = 'bbb '
{ { ( mylist | slice ) : '3:8 ' } } 
re search ( ' [ 0-9 ] * ( ? : abc (     ) ) ' , '123 abcdef 456 ' )  group ( 1 )
t xpath ( '//a [ @ href = `` http : //exact url '' ] /ancestor : :table ' ) [ -1 ]
[ ( 'f ' , 'option3 ' ) , ( 'f ' , 'option1 ' ) , ( 'f ' , 'option2 ' ) ]
sys path append ( root )
list ( double ( [ 1 , 2 ] ) )
pnl [ 'company ' ] [ 'active ' ] = pnl [ 'company ' ] [ 'active ' ]  astype ( int )
any ( key startswith ( mystr ) for key in mydict )
list ( filter ( str isdigit , 'lol123 ' ) )
py_finalize ( ) 
{ { form as_table } }
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
os startfile ( 'pok\xe9mon mp3 ' )
json dumps ( { 'a ' : 'b ' } )
print ( 'no ! ' )
print ( struct unpack ( ' < l ' , d ) [ 0 ] )
return webdriver firefox ( firefox_profile=fp )
[ 1 , 0 , 1 , 1 ]
server serve_forever ( )         
widget = entry ( parent , show='* ' , width=15 )
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , 'a_b ' )
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , '0a ' )
reg = re compile ( ' ( \\d { 3 } \\d { 3 } \\d { 4 } ) ' )
reg = re compile ( ' ( \\d { 3 } \\d { 0,3 } \\d { 3 } \\d { 0,3 } \\d { 4 } ) ' )
reg = re compile ( ' ( \\ ( ? \\d { 3 } \\d { 0,3 } \\d { 3 } \\d { 0,3 } \\d { 4 } )  * ? ' )
reg = re compile ( ' * ? ( \\ ( ? \\d { 3 } \\d { 0,3 } \\d { 3 } \\d { 0,3 } \\d { 4 } )  * ? ' )
return [ int ( digit ) for digit in bin ( n ) [ 2 : ] ]
np where ( np logical_or reduce ( [ ( x == y ) for y in [ 0 , 180 , 360 ] ] ) )
d = np vstack ( ( np hstack ( ( a , b ) ) , np hstack ( ( b t , c ) ) ) )
a = a + [ 0 ] * ( maxlen - len ( a ) )
list ( d keys ( ) ) 
[ [ 2 , 3 , 4 , 5 ] , [ 6 , 7 , 8 ] , [ 9 , 10 ] ]
signal signal ( signal sigchld , signal sig_ign ) 
datetime strptime ( '2015/01/01 0:12am ' , ' % y/ % m/ % d % i : % m % p ' )
os system ( 'php -f file php ' )
pytz timezone ( 'us/eastern ' )  localize ( datetime datetime ( 2012 , 1 , 1 ) )
plt show
return re search ( '\\d+ ' , filename )  group ( 0 )
[ true ] * 5000
d sort ( key=itemgetter ( 1 ) , reverse=true )
return sorted ( items , key=cmp_to_key ( comparer ) )
bytetable = [ ( '00000000 ' + bin ( x ) [ 2 : ] ) [ -1 : -9 : -1 ] for x in range ( 256 ) ]
slots = [ none ] * ( len ( a ) + len ( b ) )
self setupui ( self )
br select_form ( nr=0 ) 
np asarray ( map ( func , arr ) )
empty_dict = dict fromkeys ( [ 'apple ' , 'ball ' ] )
return render ( request , 'transactions/transactions_for_account html ' , context )
x , y = -y , x
sys stdout write ( 'some output ' )
print ( path abspath ( sys modules [ '__main__ ' ]  __file__ ) )
print ( ( cities [ 0 ] [ 1 ] , cities [ 1 ] [ 1 ] ) )
plt show
app logger addhandler ( file_handler )
set ( [ 'e : \\ ' , 'd : \\ ' , 'c : \\ ' ] )
conset = set ( map ( lambda x : tuple ( sorted ( x ) ) , consarray ) )
coords = np c_ [ xx ravel ( ) , yy ravel ( ) ]
re escape ( 'www stackoverflow com ' )
parser add_argument ( '-b ' , action='store_true ' )
return a , b , c
result = re sub ( ' ( \\d * ? ) \\s ( \\d * ? ) ' , '\\1 \\2 ' , string1 )
f ( * ( ( 1 , 4 ) , ) )
result = namedtuple ( 'result ' , result _fields + ( 'point ' , ) )
sys stdout write ( '29 seconds remaining ' )
__init__ py          
sys path append ( '/path/to/app ' )
[ x strip ( ) for x in my_string split ( ' , ' ) ]
achievement objects get ( name=str ( b ) )
os getenv ( 'pwd ' )
np ma array ( np tile ( arr , ( cond shape [ 0 ] , 1 ) ) , mask=~cond )  argmax ( axis=1 )
plt imshow ( lena , cmap=plt cm gray )
x [ [ [ 1 ] , [ 2 ] ] , [ [ 3 , 4 , 5 ] ] ]
server serve_forever ( )          
df astype ( object )  fillna ( 'unknown ' )
cv2 imread ( 'abalone jpg ' , cv2 imread_grayscale )  dtype
iqr = q75 - q25
array2 [ : , : , : , : ] = array1 copy ( )
gtk main ( )              
new_a = a + [ '' ] * ( n - len ( a ) )
clr addreference ( 'mydll dll ' )
'\n ' in 'hello\ngoodbye '
df t
my_num = int ( my_str replace ( ' , ' , '' ) )
file write ( s encode ( 'utf8 ' ) )
np insert ( a , 0 , 0 )
[ item for item in my_list if item not in to_be_removed ]
os path dirname ( 't : \\data\\dbdesign\\dbdesign_93_v141b mdb ' )
df loc [ ( df ! = 0 )  any ( axis=1 ) ]
f close ( )                     
requests get ( url , auth=auth )
numpy fromstring ( v1fcolor , dtype='uint8 ' , sep= ' , ' )
array ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 2 ] )
list ( ordereddict fromkeys ( [ 2 , 1 , 1 , 3 ] ) )
package_data = { 'foo ' : [ 'bar txt ' ] }
plt xlabel ( 'nombre tables ' )
d = dict ( s split ( '= ' , 1 ) for s in a )
browser quit ( ) 
`` `` '' { :0 { } b } '' '' ''  format ( 9 , 8 )
pdfkit from_url ( 'http : //google com ' , 'out pdf ' )
globals ( )  update ( ( k , v ) for k , v in d items ( ) if k in [ 'foo ' , 'bar ' ] )
cherrypy request params get ( key_name )
( ( a == b ) | numpy isnan ( a ) & numpy isnan ( b ) )  all ( )
plt show
tag nextsibling nextsibling
np random permutation ( arr )
conpg commit ( )
[ item for item in my_list if 1 < = item < = 5 ] 
run_wsgi_app ( webapp wsgiapplication ( [ ( '/ ' , example ) ] , debug=true ) )
m = basemap ( projection='spstere ' , boundinglat=-10 , lon_0=180 , resolution='c ' )
print ( [ next ( c ) for _ in range ( 10 ) ] )
t [ -1 ] = t [ -1 ]  strip ( )
ax set_xlim ( [ 0 , len ( df ) ] )
kout = np zeros ( ( n + 1 , n + 1 ) )
app mainloop ( )     
plt show
mu = normal ( 'mu ' , 0 , 1e-06 , size=2 )
ax yaxis set_visible ( false ) 
not set ( list1 )  isdisjoint ( list2 )
create_engine ( 'sqlite : ///some db ' , connect_args= { 'timeout ' : 15 } )
z write ( 'hello txt ' )
time sleep ( 60 ) 
shutil copy ( filename , dest_dir )
_ ( a + b * c )
return '' join ( sorted ( comb_ ) )
f close ( )                      
arr3d = np tile ( arr [     , ( none ) ] , 3 )
string replace ( ' and ' , ' , ' , string count ( ' and ' ) - 1 )
csv_output writerows ( zip ( *rows ) )
[ k for k , v in g degree ( )  items ( ) if v == 0 ]
fig savefig ( 'example png ' )
cv2 imshow ( 'border ' , border )
p append ( tuple ( ' { 0 :  2f } ' format ( c ) for c in b ) )
my_list sort ( key=lambda x : order index ( x [ 0 ] ) )
tree find ( '//body ' )
df set_index ( 'id ' )  idxmax ( axis=1 )  reset_index ( name='status ' )
np sin ( -1 5 )
__init__ py           
print ( bool ( re match ( patter , ' ' ) ) )
list ( string ascii_lowercase )
simulation someloop ( )
setup2 = copy_dict ( setup1 , { 'param1 ' : val10 , 'param2 ' : val20 } )
driver get ( 'http : //matrix itasoftware com/ ' )
super ( mainwindow , self )  __init__ ( parent )
os system ( 'runme sh ' )
conn close ( ) 
image ( filename='test png ' )
`` `` '' { 0 : b } '' '' ''  format ( int )
num = struct unpack ( ' > l ' , s ) [ 0 ]
root bind ( ' < motion > ' , motion )
regex = re compile ( ' [ , \\  ! ? ] ' )
go ( { 'age ' : 6 , 'sex ' : 'm ' , 'location ' : 'somewhere ' , 'marital_status ' : 'single ' } )
arr [ arr < 0 ] = 0
plt show
config = { 'color ' : 'red ' , 'numbers ' : [ 5 , 8 ] , re compile ( '^spam ' ) : 'eggs ' }
a [ np arange ( 3 ) , idx ]
print ( _string encode ( 'utf-8 ' ) )
np ix_ ( [ 0 , 1 , 3 ] , [ 0 , 2 ] )
sys stderr write ( str ( e ) )
session query ( rssfeed )  all ( )
server serve_forever ( )           
buffer1 [ : ] = buffer2
print ( element get_attribute ( 'data-value ' ) )
a = np array ( [ c [ : , ( b == i ) ]  sum ( axis=1 ) for i in range ( m ) ] )
print ( urllib request urlopen ( 'http : //python org/ ' )  read ( 100 ) )
plt show
math hypot ( p2 [ 0 ] - p1 [ 0 ] , p2 [ 1 ] - p1 [ 1 ] )
plt show
pd tslib repr_timedelta64 ( np timedelta64 ( 180487000000000 , 'ns ' ) )
dic = { x : i for i , x in enumerate ( al , 1 ) }
f = codecs open ( 'bar txt ' , 'wt ' , encoding='utf8 ' )
m = { k : ( float ( d ) / len ( cs ) ) for k , d in sum ( cs )  items ( ) }
return var [ : -1 ]
sum ( [ _f for _f in [ 1 , 2 , 3 , none ] if _f ] )
f close ( )                       
writer writerow ( [ 'date ' , 'highbgl ' , 'lowbgl ' , 'weight ' , 'height ' ] )
df drop ( 'level_1 ' , axis=1 , inplace=true )
redis_pool = redis connectionpool ( host='10 0 0 1 ' , port=6379 , db=0 )
yourlistofdicts sort ( key=operator itemgetter ( 'date ' ) )
sum ( 1 for d in my_list if d get ( 'id ' ) == 2 )
{ '67790 ' : { '1 ' : { 'kwh ' : 319 4 } } }
df [ df groupby ( 'cusip ' )  cumcount ( ascending=false ) == 0 ]
np where ( a == a max ( axis=1 , keepdims=true ) , a , 0 )
a = '1 ' + '2 ' + '3 ' - '4 '
print ( 'name : % -20s price : % 10d ' % ( i name , i price ) )
x = [ 1 , 3 , 5 ] sum ( d * 10 ** i for i , d in enumerate ( x [ : :-1 ] ) )
colnames = [ 'header1 ' , 'header2 ' , 'header3 ' ]
mlab show ( ) 
`` `` '' , `` '' ''  join ( ' '' ' + item + ' '' ' for item in parameters )
return len ( word ) - word count ( ' ' )
re sub ( ' ( foo ) ' , '\\g < 1 > 123 ' , 'foobar ' )
self est fit ( x , y ) 
os makedirs ( dirname )
print ( ' ' + str ( i [ 0 ] ) + ' : ' + i [ 1 ] )
self bind ( wx evt_left_down , self _onmousedown )
tar close ( )
re sub ( ' ( ? i ) abc ' , 'python ' , a )
print ( '\\ ' ) 
plt show
{ ' $ or ' : [ { ' $ and ' : [ { 'xxx ' : 'm ' } , { 'yyy ' : 'n ' } ] } , { 'yyy ' : { ' $ gte ' : 3 0 } } ] }
pygame display update ( )   
return socket inet_ntoa ( struct pack ( ' ! i ' , addr ) )
sync ( '/path/big txt ' , 'myserver : /path/ ' , 'mypassword ' )
__init__ py            
check_output ( 'dir c : ' , shell=true )
tuple ( l ) 
matplotlib rcparams [ 'figure figsize ' ]
ax scatter ( x , y , z , depthshade=0 )
plt show
`` `` '' '' '' ''  join ( sorted ( s ) )
[ ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 3 , 5 ) ]
`` `` '' gg_kkkppp '' '' ''
np where ( ( x == searched_values [ : , ( none ) ] )  all ( -1 ) ) [ 1 ]
re sub ( ' ( [ a-za-z ] ) ( \\d+ ) ' , '\\1 [ \\2 ] ' , s )
sum ( 1 for row in open ( 'data txt ' , 'r ' ) )
sys path append ( '/home/user/python-libs ' )
mystr replace ( '- ' , ' ' )  split ( ' ' )
unittest main ( )        
numpy mean ( x reshape ( -1 , 2 ) , 1 )
timediff total_seconds ( )
np einsum ( 'ij , jk- > jik ' , a , b )  reshape ( 3 , 8 )
db session commit ( )      
mydict = { '\xf6\xf6 ' : 1 , '\xe4\xe4 ' : 2 }
[ abs ( a - b ) for a , b in zip ( l , l [ 1 : ] + l [ : -1 ] ) ]
self d setdefault ( index , [ ] )  append ( value )
os fsync ( f fileno ( ) )
re findall ( '\\d+ ' , target_string )
plt show
df mean ( )  sort_values ( )
( 2 , 4 , 8 ) in ( ( 1 , 2 , 3 ) , ( 2 , 4 , 8 ) )
pygame display update ( )    
[ -2 , -1 , 0 , 1 , 2 ]
d = { 'func ' : lambda x : x + 1 }
s = re split ( ' , \\s* ( ? = [ ^ ) ] * ( ? : \\ ( | $ ) ) ' , x )
super ( purchase , self )  save ( *args , **kwargs )
[ i for i in my_list if '91 ' not in i and '18 ' not in i ]
sorted ( li , key=operator itemgetter ( 1 ) )
self mylist = ( self mylist + [ 0 ] * 4 ) [ :4 ]
array ( [ [ 0 , 1 , 2 ] , [ 2 , 3 , 4 ] , [ 4 , 5 , 6 ] , [ 6 , 7 , 8 ] , [ 8 , 9 , 10 ] ] )
df index = df index map ( lambda t : t replace ( year=2013 , month=2 , day=1 ) )
random choice ( string ascii_lowercase )
window mainloop ( )
df sort_values ( 'c1 ' )  sort_index ( level=0 , sort_remaining=false )
plt close ( )
`` `` '' ^/item/value/ ( \\d\\ \\d { 2 } ) $ '' '' ''
[ ( k , list ( g ) ) for k , g in groups ]
reactor run ( )           
app exec_ ( )     
subprocess call ( [ 'ls ' , '-l ' ] ) 
sum ( my_list )
{ { model datetime | time } }
tuple ( map ( tuple , arr ) )
tuples_filtered = [ tup for tup in tuples if tup [ 0 ] in filter_set ]
print ( 'hi ' ) 
{ 'milter ' : { 'malter ' : 2 , 'miler ' : 4 , 'miller ' : 4 } }
plt show
`` `` '' foo '' '' ''  lower ( ) 
return httpresponse ( simplejson dumps ( to_json ) , mimetype='application/json ' )
list ( itertools combinations ( list ( range ( 6 ) ) , 2 ) )
np searchsorted ( b , a , side='right ' ) ! = np searchsorted ( b , a , side='left ' )
plt show
row = [ ( v decode ( 'utf8 ' ) if isinstance ( v , str ) else v ) for v in row ]
s sort ( key=operator itemgetter ( 1 , 2 ) ) 
x = [ 0 , 1 , 2 , 3 , 4 , 5 ]
os environ [ 'current_version_id ' ]
roundrobin ( my_list , my_list )
df drop ( 'name ' , axis=1 , inplace=true )
re sub ( ' [ \\w_ ] + ' , '' , s , flags=re locale )
root mainloop ( )                                                            
sys exit ( )         
return response ( status=204 )
ax set_xlabel ( 'xlabel ' )
today = date today ( )
json dumps ( result )
print ( ' ' join ( item ) )
' : :2012-05-14 18:10:20 856000 : :' translate ( { ord ( k ) : none for k in ' -   : ' } )
url ( '^ tasks/ ( ? p < task_id > \\w+ ) $ ' , yourtaskview , name='task ' ) ,
pyplot close ( )
win32clipboard openclipboard ( )
`` `` '' { num : { fill } { width } } '' '' ''  format ( num=123 , fill='0 ' , width=6 )
plt show
br submit ( )
plt savefig ( 'destination_path eps ' , format='eps ' , dpi=1000 )
log start ( ) 
s [ : :-1 ]  replace ( 'bbb ' , 'xxx ' , 1 ) [ : :-1 ]
user objects get ( name='tom ' )  friends order_by ( '-pet__age ' ) [ :10 ]
list_words = [ ' < a href= '' http : //url com/ { } '' > { } < /a > ' format ( a , a ) for a in l ]
list ( map ( len , s split ( ) ) )
sum ( 1 for a , b , c in combinations ( l , r=3 ) if a < b < a + d < c < b + d )
print ( ' , ' join ( map ( quote , x ) ) )
process stdin close ( ) 
print ( my_date strftime ( ' % y , % d % b ' ) )
dom = minidom parsestring ( ' < eg > example text < /eg > ' )
print ( item strip ( ) )
c close ( )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
print ( 'yes ! ' )
enc fit ( [ [ 0 , 0 , 3 ] , [ 1 , 1 , 0 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] ] )
super ( foo , self )  __init__ ( *args , **kwargs )
a = wd execute_script ( `` return checkdata ( ' '' + code + `` ' ) ; '' )
sys stdout = sys stdout detach ( )
[ ( items [ : i ] + items [ i + 1 : ] ) for i in range ( len ( items ) ) ]
np arange ( a shape [ 0 ] ) [ ~np in1d ( a , b ) ]  tolist ( )
m = [ row for row in l if 'a ' in row [ 0 ] ]
cursor execute ( 'select count ( * ) from components where name = ? ' , ( name , ) )
version , sdk = re findall ( ' ( ? : version : |sdk ) ( [ \\w - ] + ) ' , s )
poll objects filter ( category='foo ' )  fetch_reverse_relations ( 'choices_set ' )
df apply ( lambda x : x value_counts ( ) )  t stack ( )
app run ( )                         
np argwhere ( m == 0 )
np savetxt ( 'myfile txt ' , np transpose ( [ x , y , z ] ) )
out_file close ( )
self vsb pack ( side='right ' , fill='y ' )
{ '1 ' : [ { '2 ' : [ [ 2 , 3 ] , [ 1 , 7 ] ] } ] }
self set_header ( 'content-type ' , 'application/javascript ' )
x = dict ( ( i , set ( ) ) for i in range ( 10 ) )
[ y for x in text split ( ) for y in x split ( '- ' ) ]
sys stdout write ( '\r2 ' )
reactor run ( )            
[ 0 , 1 , 2 , 3 , 4 ]
output = subprocess check_output ( 'ls ' , stderr=subprocess stdout )
'ttaassdd\n\rssleeroo '
parent_dict = [ { 'a ' : 'val1 ' , 'b ' : 'val2 ' } , { 'c ' : 'val3 ' , 'd ' : 'val4 ' } ]
`` `` '' foo : bar : baz '' '' ''  rpartition ( ' : ' ) [ -1 ]
soup find ( 'meta ' ) [ 'content ' ]
'abc ' + str ( 9 )
s = s [ 0 ]  lower ( ) + s [ 1 : ]
picturetags py
map ( list , df values )
print ( [ i split ( '/ ' ) [ 1 ] for i in input if i find ( '/ ' ) == 1 ] )
a __rmul__ ( b )
my_list = [ s for s in my_list if not re search ( '\\d ' , s ) ]
return render_to_response ( 'mytemplate html ' , { 'rows ' : rows } )
subprocess check_output ( 'python output py ' , shell=true )
jsondata = json dumps ( data )
dframe = pd concat ( [ dframe , to_be_appended ] , axis=1 )
list ( set ( list1 + list2 ) )
default_app_config = 'projectname apps articles apps articlesconfig '
yourlist = [ ( s rsplit ( '_ ' , 2 ) [ 0 ] + '_ ' + x + '_ ' + y ) for s in yourlist ]
plt step ( x , y )
s find ( zzz decode ( 'utf-8 ' ) )
`` `` '' `` '' ''  join ( map ( bin , bytearray ( st , 'utf8 ' ) ) )
fruits sort ( key=lambda x : x quantity )
c = np dot ( a , b ) [ : , : , ( 0 ) , : ]
sorted ( iter ( adict items ( ) ) , key=itemgetter ( 1 ) , reverse=true )
numbers = int ( re search ( '\\d+ ' , filename )  group ( ) )
return func ( *args , **kwargs )  
driver close ( ) 
file writelines ( ' % s\n ' % item for item in my_list )
np searchsorted ( a , [ 1 5 ] , side='right ' ) [ 0 ]
( df == 0 )  sum ( axis=1 )
bucket = s3 create_bucket ( bucket='my-bucket-name ' )
s isnull ( )  sum ( )
[ item for item in my_list if any ( x in item for x in bad ) ] 
rects = plt bar ( list ( range ( n ) ) , x , align='center ' )
f = open ( filename , '' )
output append ( [ items [ 0 ] , int ( items [ 1 ] ) , int ( items [ 2 ] ) ] )
ax annotate ( str ( j ) , xy= ( i , j + 0 5 ) )
d [ 'js ' ] [ 'title ' ] = 'script1 '
word in wordlist [ :4 ]
app = cherrypy tree mount ( myapp ( ) , '' , 'settings config ' )
pprint pprint ( filtered )
lambda x : [ f1 ( x ) , f2 ( x ) , f3 ( x ) , x + 1 ]
ssh set_missing_host_key_policy ( paramiko autoaddpolicy ( ) ) 
forms modelform __init__ ( self , *args , **kwargs ) 
es refresh ( )
conn rollback ( ) 
np insert ( a , 1 , np array ( ( 1 , 1 ) ) , 1 )
re match ( ' [ a-za-z ] [ \\w- ] * $ ' , 'a ' ) 
[ line for line in mystr split ( '\n ' ) if line strip ( ) ! = '' ]
pd to_datetime ( df [ 'date ' ] + ' ' + df [ 'time ' ] )
conn close ( )  
wx frame __init__ ( self , none , -1 , 'test stretching ! ! ' )
shutil rmtree ( 'dir-you-want-to-remove ' )
cet = pytz timezone ( 'cet ' )
df apply ( np prod , axis=1 )
re findall ( ' < object * ? < /object > ( ? : < br / > < a * ? < /a > ) ? ' , a )
my_dict update ( dict fromkeys ( [ 'b ' , 'e ' ] , 20 ) )
p pattern
df t drop_duplicates ( )  t
proc = sp popen ( 'ls -l * csv ' , shell=true , stdout=sp pipe )
self thread start ( )
p stdout close ( )
asciidata = udata encode ( 'ascii ' , 'ignore ' )
self figure canvas draw ( )
cursor execute ( 'insert into sometable values (     ) ' )
[ key for key , group in groupby ( li ) if all ( i == 0 for i , j in enumerate ( group ) ) ]
len ( set ( l [ :4 ] ) ) == 1 and len ( set ( l [ -3 : ] ) ) == 1
{ ' q ' : 'do you like pizza ? ' , 'yes ' : 12 , 'no ' : 16 }
matrix append ( [ 0 ] * columns )
np modf ( [ 1 565888 , 2 073744 , 2 962492 , 4 52838 , 5 417127 , 7 025337 ] )
df set_index ( 'date ' , inplace=true )
a [ : ] = [ ]
mydivs = soup findall ( 'div ' , { 'class ' : 'stylelistrow ' } )
os path dirname ( sys argv [ 0 ] ) 
yourstring = 'l ' + yourstring + 'll '
ax set_ylim ( [ -0 5 , 0 5 ] )
counter ( re findall ( `` [ \\w ' ] + '' , text lower ( ) ) )
print ( os getcwd ( ) )
transaction commit ( ) 
[ ( 'a ' , 4 ) , ( 'yellow ' , 2 ) , ( 'quick ' , 2 ) ]
str split ( '\\s+ ' )
[ [ 4 , 3 , 1 , 2 ] , [ 15 , 8 , 9 , 6 ] , [ 12 , 18 , 6 , 3 ] ]
lst append ( z )
print ( 'only numbers and spaces ' )
a [ 0:1 ] = [ [ 5 ] ]
datetime datetime now ( pytz timezone ( 'asia/jerusalem ' ) )  strftime ( ' % z ' )
sorted ( counter items ( ) )
a = np load ( 'test ' )
df [ df phrase ! = ' [ ] ' ]
df groupby ( 'a ' )  c_sign value_counts ( )  unstack ( )
df groupby ( [ 'candidate_id ' , 'enddate ' ] )  max ( )  reset_index ( )
random sample ( set ( 'abcdefghijklmnopqrstuvwxyz ' ) , 1 )
sys stdout write ( ' % 12 8e\n ' % is_float ( n ) )
words = content lower ( )  replace ( '- ' , ' ' )  split ( )
[ ( '1 ' , '2 ' ) , ( '1 ' , '3 ' ) , ( '2 ' , '3 ' ) ]
yield json loads ( jsonline )
[ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ] ,
df_with_x7 show ( )
df index get_level_values ( 'name_sub_index ' )
datetime timestamp ( )
return httpresponse ( 'hello world ' )
a [ 2:10 ] = [ ]
driver quit ( )      
map ( str upper , letters )
content = urllib request urlopen ( url encode ( 'utf-8 ' ) )  read ( )
matplotlib use ( 'tkagg ' )
np array ( [ '' ] ) == np array ( [ '\x00 ' ] )
list1 sort ( key=lambda x : int ( x split ( ' ' ) [ 0 ] ) )
plt show
pkg_resources get_distribution ( name )  activate ( )
sum ( map ( lambda x , y : bool ( x - y ) , [ 1 , 2 ] , [ 1 ] ) )
zip ( t [ : :2 ] , t [ 1 : :2 ] )
'hiya\x00\x00\x00' rstrip ( '\x00 ' )
time sleep ( 1 )                           
parts = [ s [ indices [ i ] : indices [ i + 1 ] ] for i in range ( len ( indices ) - 1 ) ]
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0
a = eval ( input ( 'enter number of players : ' ) )
[ 4 , 5 , 5 , 6 , 6 , 6 ] 
list ( chain from_iterable ( ( i , i ** 2 ) for i in range ( 1 , 6 ) ) )
`` `` '' 16 '' '' ''  isdigit ( )
del df [ 'recordid ' ]
hash_dict = dict ( itertools groupby ( list ( dic values ( ) ) , key=hash ) )
{ { add ( a , b ) } }
df2 swaplevel ( 0 , 1 , 1 )  sort_index ( 1 )
{ 'category1 ' : 4500 0 , 'category3 ' : 4833 3333 , 'category2 ' : 8000 0 }
time sleep ( 1 )                            
my_string = my_string rstrip ( '\\ ' )
exec ( 'print a ' , globals ( ) , { 'a ' : 42 } )
return os path realpath ( os path dirname ( self_file ) )
np mean ( [ 1 , 2 , 3 ] )
a sort ( axis=1 )
plt show
super ( )  __init__ ( )
{ ( 0 ) : [ 2 ] , ( 1 ) : [ 5 , 6 ] , ( 3 ) : [ 9 , 10 , 11 , 12 ] }
newd = { k : round ( v ) for k , v in list ( d items ( ) ) }
f close ( )                        
masked_a = numpy ma array ( a , mask=numpy repeat ( a [ : , ( 0 ) ] == 1 , a shape [ 1 ] ) )
f close ( )                         
return hash ( frozenset ( iter ( self __dict__ items ( ) ) ) )
vect fit ( corpus )
len ( a [ 0 ] )
data2 = np asarray ( data2 , dtype=np int16 )
datetime date fromordinal ( datetime date today ( )  toordinal ( ) - 1 )
[ 'ip2 : port1 ' , 'ip1 : port1 ' ]
a = a reshape ( ( n , m ) , order='fortran ' )
plt show
print ( list ( map ( lambda args : int ( args [ 1 ] ) , list ( ss items ( ) ) ) ) )
return cv2 bitwise_and ( gray , gray , mask=mask )
[ sub for sub in totalist if sub [ :2 ] == [ 'a ' , 'b ' ] ]
response headers [ 'location ' ]
plt savefig ( 'test pdf ' ) 
os environ [ 'django_settings_module ' ] = 'rhombus settings '
fig , ax = plt subplots ( )
plt show
np hstack ( ( a , b , c ) )  ravel ( )
function ( *array )
x_ = tf reshape ( x , [ -1 , 1 , 10 , 1 ] )
sum ( 'banana ' [ x : x + 3 ] == 'ana ' for x in range ( len ( 'banana ' ) ) )
plt show
lowest_dirs append ( os path split ( root ) [ -1 ] )
print ( re sub ( ' ( ? = [ _ % ^ $ ] ) ' , '\\\\ ' , line ) )
print ( soup get_text ( )  strip ( ) )
ax set_xlim ( -5 , 5 )
df read_csv ( 'foo tsv ' , sep='\t ' , thousands= ' , ' )
g wa sum ( )
df drop ( df query ( 'amount == 0 ' )  sample ( frac=0 5 )  index )
time sleep ( 1 )                             
data = ordereddict ( sorted ( list ( data items ( ) ) , key=lambda x : x [ 1 ] [ 0 ] ) )
tf initialize_all_variables ( )  run ( )
url ( '^delete $ / ( ? p < pk > \\d+ ) ' , views eventdetail as_view ( ) , name='delete_event ' ) ,
eval ( input ( 'press enter to continue     ' ) )
foo = foo upper ( )
time sleep ( 1 )                              
db close ( )  
return min ( max_val , max ( min_val , val ) )
return len ( [ line for line in lines if line startswith ( ' # ' ) ] )
item = gtk menuitem ( )
[ { 'a ' : 1 , 'c ' : 4 , 'b ' : 2 , 'd ' : 4 } , { 'a ' : 1 , 'c ' : 4 , 'b ' : 1 , 'd ' : 5 } , { 'a ' : 1 , 'c ' : 3 , 'b ' : 2 , 'd ' : 6 } ]
{ key_for_value ( value ) : value for value in values }
f ( 3 , 5 , * ( 1 , 2 , 3 ) )
cv2 imshow ( 'preview ' , frame )
tuple ( list ( x [ 0 ] ) + [ x [ 1 ] ] )
np take ( a , np arange ( ncols ) % a shape [ 1 ] , axis=1 )
plt plot ( x , y , drawstyle='steps ' )
my_list2 , my_list1 = zip ( *my_list )
dict ( e split ( ' - ' ) for e in s split ( ' , ' ) )
gtk main ( )               
login_url = 'django contrib auth views login '
entry objects get ( headline__exact='man bites dog ' )
print ( '\x819 ' )
plt savefig ( 'plot png ' )
all ( key in dict_obj for key in properties_to_check_for )
( 1 / np sqrt ( ( a [ : , ( none ) ] - b ) ** 2 + d ** 2 ) )  sum ( 1 )
[ 'abcd ' , 'acbd ' , 'acdb ' , 'cabd ' , 'cadb ' , 'cdab ' ]
clock schedule_once ( partial ( self update , message ) , 0 )
cur execute ( 'select * from users ' )
random uniform ( 1 5 , 1 9 )
do_something ( )    
datetime timedelta ( seconds=10 ) + datetime timedelta ( hours=5 )
[ ( 57 , 'a ' ) , ( 62 , 'a ' ) ]
np equal reduce ( [ true , 1 ] )
[ [ x , y ] for x in list1 for y in list2 ]
df [ 'new ' ] = df index
[ x for x in lelist if lestring count ( x ) ]
termios tcsetattr ( fd , termios tcsaflush , old_settings )
5 * ( 4 * ( 3 * ( 2 * ( 1 * f ( f , 0 ) ) ) ) )
super ( subject , self )  save ( *args , **kwargs )
df drop_duplicates ( cols='a ' , take_last=true )
f = open ( 'c : \\folder1\\test1 txt ' , 'r ' )
{ ( 0 , 'led_numl ' ) : true , ( 1 , 'led_capsl ' ) : true , ( 2 , 'led_scrolll ' ) : false }
l = [ bytes_obj [ i : i + 1 ] for i in range ( len ( bytes_obj ) ) ]
a transpose ( 0 , 2 , 1 )  ravel ( )
pickle loads ( pickle dumps ( pickalablec ( ) ) )
matplotlib rcparams update ( { 'font size ' : 12 } )
random shuffle ( thelist )
print ( a if b else 0 )
li append ( ( 3 , 'three ' ) )
df [ 'value_grp ' ] = ( df values diff ( 1 ) ! = 0 )  astype ( 'int ' )  cumsum ( )
driver execute_script ( 'window onbeforeunload = function ( ) { } ' )
[ [ [ '12 ' , '+ ' , '2 ' ] , '+ ' , '3 ' ] ]
[ i strip ( ) for i in link text strip ( ) [ 5 : ]  split ( '- ' ) ]
self appexecb additems ( list ( self items keys ( ) ) )
plt xticks ( xvalues , xlabels )
[ i for i , x in enumerate ( l ) if x == '\n ' ]
[ ( x * 0 1 ) for x in range ( 0 , 10 ) ]
cur execute ( 'select fname from tblsample1 order by fname ' )
np argwhere ( np all ( e - array ( [ 1 , 2 ] ) == 0 , axis=2 ) )
pat = re compile ( '\\d+ ; [ ^ ; ] * ' )
np dot ( a , a )
self response out write ( ' < html > < body > ' )
help ( my_list )
strip_list = [ item strip ( ) for item in lines ]
myiter [ '* ' ] [ '* txt ' ] [ 'name ' ] = 'woot '
print ( ' % s % s ' % ( str ( count )  rjust ( 10 ) , conv ) )
map ( lambda x , y : x ( y ) , functions , values )
[ int_or_float ( el ) for el in lst ]
local ( 'echo foo1 is $ foo1 ' )
shutil copy2 ( file , dest_dir )
filtered_list = [ i for i , v in zip ( list_a , filter ) if v ]
self center ( )
print ( sorted ( l , key=lambda x : [ int ( i ) for i in x rstrip ( '  ' )  split ( '   ' ) ] ) )
moneyx = float ( money read ( ) )
print ( sys argv )
l = [ [ 'x ' , 'y ' ] for i in range ( 10 ) ]
plt show
filename = input ( 'please input a valid file name : ' )
super ( course , self )  save ( *args , **kwargs )
cv2 imwrite ( name , imagem )
createkey = '_' join ( sorted ( str ( wi ) for wi in wordids ) )
toolz unique ( obj_list , key=lambda x : x my_attr )
operator itemgetter ( 1 ) ( row )
return functools partial ( self function , instance )
urllib parse urlencode ( [ ( 'criterias [ ] ' , 'member ' ) , ( 'criterias [ ] ' , 'issue ' ) ] )
a [ np argsort ( ma [ : , ( 1 ) ] ) ]
my_array = numpy array ( my_list , dtype=numpy float64 )
app run ( port=port , debug=false )
x [ : ] = [ value for value in x if len ( value ) == 2 ]
os startfile ( filename )
re compile ( ' [ a-za-z\xd1\xf1 ] + ' , re debug )
[ chr ( i ) for i in range ( ord ( 'a ' ) , ord ( 'z ' ) + 1 ) ]
plt show
sys argv [ 2 ]
sorted ( zip ( keys , values ) , key=lambda x : ( x [ 0 ] is none , x [ 0 ] ) )
not any ( dict values ( ) )
return [ ( item , value ) for item , value in config items ( section ) ]
plt gca ( )  xaxis set_major_locator ( mdates daylocator ( ) )
{ 'a ' : 42 , 'b ' : 'my_string ' , 'c ' : { 'e ' : { 'f ' : 64 } , 'd ' : 33 } }
np hstack ( a flat )
my_list sort ( key=operator itemgetter ( 1 ) )
array = [ [ int ( x ) for x in line split ( ) ] for line in f ]
logging getlogger ( 'other ' )  error ( 'other ' )
max ( len ( s ) for s in re findall ( 'a+ ' , input ) )
globals ( ) 
new_dict [ 'a ' ] [ 'b ' ] [ 'c ' ]  append ( 5 )
ssl get_server_certificate ( ( 'www sefaz ce gov br ' , 443 ) )
print ( ' { } = > { } ' format ( a , b ) )
{ 'a ' : 1 , 'c ' : { 'x ' : [ 1 , 2 , 3 ] } , 'b ' : 'abc ' }
df1 join ( [ df2 , df3 ] , how='outer ' )
'in ' in [ 'indigo ' , 'violet ' ]
sock = socket socket ( socket af_inet , socket sock_dgram )
self thread start ( ) 
sorted ( l , key=lambda x : float ( 'inf ' ) if x is none else x )
create_dict_from_variables ( first_name [ : -3 ] + 'moo ' , last_name [ : :2 ] )
json dumps ( { 'foo ' : 'bar ' } )
parse add_argument ( 'filenames ' , nargs='+ ' )
print ( '\n' join ( bids ) )
app run ( )                          
[ '1 ' , '2 3 ' , 'name ' , '229 ' , '' , '228 ' , '12 ' ]
print ( len ( [ name for name in os listdir ( '   ' ) if os path isfile ( name ) ] ) )
f = open ( 'test txt ' , 'r ' )
plt imshow ( a , cmap='hot ' , interpolation='nearest ' )
json load ( request body )
np array ( [ str ( x ) for x in [ 0 , 33 , 4444522 ] ] )
foo ( [ x [ 'uid ' ] for x in users ] )
return { c : s count ( c ) for c in chars }
tk mainloop ( )
pdb set_trace ( )          
rc2 = np array ( [ [ 3 , 3 , 2 ] , [ 3 , 0 , 2 ] ] )
b_p to_csv ( sys stdout , index=false )
return { str ( k ) : convert_value ( v ) for k , v in list ( d items ( ) ) }
return qtcore qt itemisenabled 
data = [ map ( int , line split ( ) ) for line in f ]
os system ( 'mp3splt inputfile mp3 ' )
'produkcja                                                       ' rstrip ( '   ' )
urllib parse urlencode ( f )
d = dict ( zip ( [ o name for o in object_list ] , object_list ) )
writer writerows ( lines )
list ( x keys ( ) )  index ( 'c ' )  
r = requests get ( 'http : //www google com ' )
[ ( 'cat ' , 16 , 1 ) , ( 'dog ' , 12 , 1 ) ]
keys = [ i for i , v in scores items ( ) if v == max_value ]
[ i [ 0 ] for i in x ]
plt show
print ( int ( '119 ' ) )
session commit ( )       
map ( lambda frame : frame query ( expr ) , [ df , df2 ] )
os write ( tup [ 0 ] , 'foo\n ' )
nums2 search ( '1e99 ' )  group ( 0 )
berlin_now = datetime now ( tz )
pd dataframe ( { 'genre count ' : genre_count } )
total = sum ( x + y for x in ( 0 , 1 , 2 , 3 ) for y in ( 0 , 1 , 2 , 3 ) if x < y )
urllib parse unquote ( 'it % 27s % 20me % 21 ' )
prod ( list ( range ( 1 , 5 ) ) )
keys update ( list ( d keys ( ) ) )
df groupby ( 'type ' )  killed transform ( lambda x : x fillna ( x mean ( ) ) )
list ( key for key , val in itertools groupby ( 'aaabbccddeefaa ' ) )
t start ( )   
( df ! = 0 )  dot ( df columns )
'unique12345678901234567890 mkv ' [ : -24 ] + ' mkv '
np average ( list ( map ( float , meannumbers split ( ' , ' ) ) ) )
[ 'aaaa-aa ' , 'bbbb-bb ' , 'c-ccccc ' , 'd-ddddd ' ]
df [ 'last_name ' ] = df [ 'id ' ]  map ( lnames )
tv modify_text ( gtk state_normal , gtk gdk color_parse ( 'white ' ) )
some_tag find ( 'strong ' )  tail
{ 'a ' : 'b ' , 'c ' : 'd ' }
request environ [ 'request_method ' ] = 'something '
a , b , c = struct unpack ( ' > hhi ' , some_string )
np savetxt ( f , line , fmt= ' %  2f ' )
df [ 'text ' ]  apply ( word_tokenize )  tolist ( )
ax plot ( z , y , x , label='parametric curve ' )
xattr getxattr ( '/bin/ping ' , 'security capability ' )
pd read_csv ( stringio ( s2 ) , comment= ' # ' , sep= ' , ' )  dropna ( how='all ' )
a , b , c = loadtxt ( 'text txt ' )  reshape ( ( -1 , 1 ) )
browser get ( 'http : //webpage com ' )
datetime strptime ( '1998-4-52 ' , ' % y- % w- % u ' )
print ( object __repr__ ( ) )
return httpresponse ( 'rendered view : % s ' % response content )
thread start ( )
( 1 < < 7 ) + ( 0 < < 6 ) + ( 1 < < 5 ) + ( 0 < < 4 ) + ( 0 < < 3 ) + ( 1 < < 2 ) + ( 0 < < 1 ) + 1
self x += step
plt show
plt show
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
df [ 'test1 ' ]
{ 'street ' : 'sesame street ' , 'zip ' : '13000 ' }
`` `` '' + `` '' ''  join ( [ '1 ' , '2 ' , '3 ' , '4 ' , '5 ' , '6 ' , '7 ' , '8 ' , '9 ' , '10 ' ] )
x_train , x_test , y_train , y_test = train_test_split ( x , y , stratify=y )
{ 'func1 ' : func1 , 'func2 ' : func2 , 'func3 ' : func3 }  get ( choice , notafun ) ( )
all_the_ways = [ ( 2 , 1 , 2 ) , ( 2 , 2 , 1 ) ]
int ( b , 2 )
f = figure ( figsize= ( 5 , 1 ) )
len ( [ y for y in x if y > 2 ] )
`` `` '' `` '' ''  join ( soup findall ( text=true ) )
ssh close ( )   
{ 'b ' : [ '1 ' , '2 ' ] , 'd ' : [ '3 ' ] , 'c ' : [ '2 ' , '3 ' ] , 'a ' : [ '1 ' , '2 ' ] }
fp close ( )
list ( { x tag : x for x in mylist }  values ( ) )
print ( response read ( ) ) 
p delete ( )
`` `` '' documentation for myscript '' '' ''
db [ 'a ' ] = { 'alpha ' : 'aaa ' }
l [ 2:6 ] = [ '' join ( l [ 2:6 ] ) ]
mymodel objects filter ( pk=obj pk )  update ( val=f ( 'val ' ) + 1 )
plt show
list ( '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9 ' )
all ( i count ( 1 ) == n for i in l )
df [ 'col1 ' ]  map ( di )
gtk main ( )                
df reset_index ( )
urllib request urlopen ( 'file : ///etc/debian_version ' )  read ( )
print ( strtod ( ' ( a+2 0 ) /1e-1 ' , 8 ) )
result = np arange ( 20 , dtype=np float )  reshape ( ( 2 , 10 ) )
datetime datetime fromtimestamp ( 0 ) + datetime timedelta ( seconds=2147570047 )
pd crosstab ( df a > 0 , df b > 0 )
return self get ( )
return [ int ( x ) for x in '8743-12083-15' split ( '- ' ) ]
requests get ( 'http : //example org ' , proxies=proxies )
[ [ 1 , 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 , 8 , 9 ] ]
plt show
np einsum ( 'iik- > ik ' , np dot ( b , a ) )
m uid ( 'search ' , none , 'subject `` new order '' ' )
m uid ( 'search ' , none , 'x-gm-raw `` subject : \\ '' new order\\ '' '' ' )
re split ( ' [ ?   , ] ' , test )
app exec_ ( )      
f15 = open ( 'exemplo_15 txt ' , 'ru ' )
contactform get_reason_display ( )
len ( x ) > = 4
urllib parse urlencode ( { 'a ' : 1 , 'b ' : 2 } )
my_list = [ json loads ( line ) for line in f ]
( c for c in s if c in '+-/* ( ) _ ' )
session query ( func count ( user id ) )  scalar ( )
os popen ( 'cat /etc/services ' )  read ( )
l append ( elt2 )
df plot ( kind='line ' )
all ( v == 0 for v in values )
plt show
result wait ( )
clean = re sub ( ' [ ^ -~ ] ' , '' , dirty )
print ( f ( 1 , 2 , 3 , 4 , 5 ) )
df replace ( { 'n/a ' : np nan } , inplace=true )
ssh close ( )    
zip ( * ( [ iter ( l ) ] * 2 ) ) 
isnat ( np timedelta64 ( 'nat ' )  view ( 'i8 ' ) )
plt show
img = image open ( file ) 
data [ 'sex ' ]  replace ( 1 , 'male ' , inplace=true )
df2 show ( )
print ( ' ; ' join ( err messages ) )
return ( dict ( zip ( dicts , x ) ) for x in itertools product ( *list ( dicts values ( ) ) ) )
[ x for x in strings if x ]
sum ( v ) == sum ( v + [ n ] )
df eq ( df iloc [ : , ( 0 ) ] , axis=0 )  all ( 1 )
list ( d values ( ) )  
print ( ' { } , { } ' format ( row [ 0 ] , 1 if row [ 0 ] in list else 0 ) )
matplotlib use ( 'cairo png ' )
module1 relay ( )
print ( arg , getattr ( args , arg ) )
[ word for word in words if not word isdigit ( ) ]
fig savefig ( 'auto png ' )
re findall ( '\\d+ ' , 'goto : 7018 6453 12654\n ' )
`` `` '' , '' '' ''  join ( map ( str , record_ids ) )
table ( ax , df , rowlabels= [ '' ] * df shape [ 0 ] , loc='center ' )
pd to_timedelta ( 16 , unit='h ' )
self d append ( '1 ' )
a , b , c = ( int ( i ) for i in mystr split ( ) [ 1 ]  split ( '   ' ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
data2 = sorted ( data , key=operator itemgetter ( 1 ) )
plt show
plt show
w connect ( 'destroy ' , gtk main_quit )
ax set_xticklabels ( labels )
`` `` '' ^ [ a-za-z ] + $ '' '' ''
print ( etree tostring ( root ) )
[ 'and ' , 'the ' , 'on , ' , 'bla ' , 'tw ; ' , 'th : ' , 'fo   ' , 'tes ' ]
system ( 'c : \\documents and settings/program exe ' , 'arg1 ' , 'arg2 ' )
parser add_option ( '-c ' , ' -- categories ' , dest='categories ' , nargs=4 )
df = df sort ( 'date ' )
list ( map ( lambda cell : cell split ( '\t ' ) , s splitlines ( ) ) )
[ 'foo ' , '__init__ ' , 'meth1 ' , 'meth2 ' , 'bar ' , '__init__ ' , 'meth1 ' , 'meth2 ' ]
f = opener open ( 'https : //www google com/ ' )
df = pd dataframe ( data [ 1 : ] , columns=data [ 0 ] )
shutil rmtree ( '/path/to/your/dir/ ' )
print ( ' blastoff ! ' )
np einsum ( 'ac , bd- > abcd ' , a , b )
df apply ( lambda r : df sum ( ) [ r name ] * df sum ( 1 ) [ r index ] / df sum ( )  sum ( ) )
d [ 'js ' ] = [ { 'foo ' : 'bar ' } , { 'other ' : 'thing ' } ]
mod = sys modules [ __module__ ]
im2 putdata ( list_of_pixels )
ares = ( a transpose ( 0 , 1 , 3 , 2 ) * v )  transpose ( 0 , 1 , 3 , 2 )
np sqrt ( s multiply ( s )  sum ( 1 ) )
np tile ( data , 5 )
[ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 ] ,
super ( myform , self )  __init__ ( *args , **kwargs )
class person ( object , metaclass=validatetype ) : pass
bool ( re search ( ' ( ( \\w ) \\2 ) { 2 } ' , 'bookkeeper ' ) )
( ( 1 , 2 ) , ( 3 , 4 ) ) + ( 5 , 6 ) ,
[ re findall ( '\\d+\\ \\d+ ' , line ) for line in f if line startswith ( 'foo ' ) ]
plt show
pd pivot_table ( df , index='gender ' , columns='doctor ' , aggfunc=len , fill_value=0 )
mask = ( df [ 'date ' ] > start_date ) & ( df [ 'date ' ] < = end_date )
w writerow ( my_dict )
print ( '\n' join ( map ( str , ports ) ) ) 
response = requests get ( url , headers=headers ) 
sorted ( [ 'some ' , 'words ' , 'sort ' , 'differently ' ] )
sys stdout write ( 'some stuff ' )
hex ( int ( '119 ' ) )
print ( str ( 'abc\x97abc ' , encoding='utf-8 ' , errors='replace_with_space ' ) )
[ 'f1 ' , 'f2 ' , 'f3 ' , 'f4 ' ]
html = ' < img src= '' ' + static_url + '/icons/flags/tn gif '' > '
[ '0 ' , '1 ' , '2 ' , '3 ' , 'mean ' ]
parser parse_args ( [ 'fileone ' , '-a ' , 'filetwo ' , '-b ' , 'filethree ' ] )
newdf groupby ( [ 'level_0 ' ] ) [ 'level_1 ' ]  apply ( list )
popen ( [ 'firefox ' , 'http : //www google com/ # q=this+is+my+query ' ] )
plt savefig ( 'demo png ' )
pdb set_trace ( )           
qtgui qmainwindow __init__ ( self , parent ) 
ax set_color_cycle ( [ 'red ' , 'black ' , 'yellow ' ] )
print ( output stdout read ( ) )
show ( )
all ( x in dct for x in ( 'foo ' , 'bar ' , 'baz ' ) )
print ( tuple ( itertools chain from_iterable ( product ) ) )
l sort ( key=key )
np repeat ( x , 3 , axis=1 )
arr [ bisect bisect ( arr , 320 ) ]
self tablewidget item ( 3 , 5 )  setbackground ( qtgui qcolor ( 100 , 100 , 150 ) )
df groupby ( [ df a apply ( tuple ) ] )
s find ( 'r ' )
c save ( )
count = len ( set ( d [ 'code ' ] for d in li ) )
' % d  % 06d ' % ( delta seconds , delta microseconds )
plt show
var = ' { 0 } { 0 } { 0 } ' format ( 'look_at_meeee ' )
ax set_xticks ( xticks )
ax spines [ 'bottom ' ]  set_position ( ( 'outward ' , 40 ) )
df1 iloc [ [ 1 , 3 ] ]
root attrib [ 'mynewattribute ' ] = 'hello world '
`` `` '' ^list_cv/ ( ? : ( ? p < category > [ \\w+ ] ) / ) ? $ '' '' ''
d = dict ( zip ( ( o name for o in object_list ) , object_list ) )
plt show
test ( x , 'one ' , 'two ' )
print ( sum ( os path isfile ( f ) for f in glob glob ( '/tmp/* ' ) ) )
[ 'py : attribute ' , 'std : label ' , 'py : method ' , 'py : function ' , 'py : class ' ]
df [ '2017-01-02 ' : '2017-01-02 ' ]
re compile ( ' ( \\s* ) + ' )
np repeat ( data , 5 )
pd concat ( [ df [ col ]  apply ( pd series ) for col in cols ] , axis=1 , keys=cols )
a = [ 1 , 2 , 3 ]
format ( num if num > = 0 else ( 1 < < 16 ) + num , '016b ' )
source = 'c : \\documents and settings\\some directory\\my file txt '
pprint pprint ( a , width=1 )
status objects latest ( 'date_added ' )
zip ( [ 7 , 8 , 9 ] , [ 4 , 5 , 6 ] , [ 1 , 2 , 3 ] )
sum ( ( counter ( d ) for d in list ( data values ( ) ) ) , counter ( ) )
`` `` '' & '' '' ''  join ( [ ' , ' join ( my_list [ : -1 ] ) , my_list [ -1 ] ] )
test __kwdefaults__
print ( sum ( 1 for x in arr if x is false ) )
root geometry ( '400x250+450+200 ' )
cherrypy engine start ( ) 
plt show
circle = np zeros ( ( height , width ) , dtype=im dtype )
pd merge_asof ( trades , quotes , on='time ' )
super ( material , self )  save ( *args , **kwargs )
db session add ( product_obj )
df iloc [ -6 : -1 , ( 2 ) ]
os system ( 'listdlls pid_or_process_name_here ' )
subprocess call ( [ 'pmset ' , '-g ' , 'assertions ' ] )
parse_aybm ( '0yfoo ' )
template_context_processors = 'myapp processor foos ' ,
extmodule dontoverride ( )
hello ( )
sum ( [ [ false , false , true ] , [ true , false , true ] ] )
np linalg lstsq ( a t , y )
fruit = re compile ( '\\b ( ? : % s ) \\b ' % '|' join ( fruit_list ) )
writer sheets [ 'summary ' ]  column_dimensions [ 'a ' ]  width = 15
sys stdout write ( 'some data ' )
sys stdout write ( 'other different data ' )
plt show
' [ \xd8-\xf6 ] '
value_at_index = list ( dic values ( ) ) [ index ]
[ 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ,
print ( is_json ( ' { `` foo '' : [ 5,6 8 ] , '' foo '' : '' bar '' } ' ) )
ax spines [ 'top ' ]  set_color ( 'none ' )
ax spines [ 'right ' ]  set_color ( 'none ' )
b = str ( a encode ( 'utf-8 ' )  decode ( 'ascii ' , 'ignore ' ) )
s to_frame ( 'new_name ' ) [ 'new_name ' ]
plt show
pdb gimp_message ( 'this is displayed as a message ' )
headerrows [ 0 ] [ 10 ]  contents [ 0 ]  find ( 'b ' )  string
s replace ( 'l ' , 'x ' , regex=true )
random shuffle ( temp )
buckets = [ 0 ] * 100
d2 = dict ( ( k , f ( v ) ) for k , v in list ( d items ( ) ) )
np putmask ( elevation , elevation > 0 , np nan )
plt draw ( )        
re sub ( '\\s ' , '' , 'a b ' )  isalpha ( )
df rename ( index=lambda x : x split ( '_ ' ) [ 0 ] )
[ 'a ' , 'c ' , 'd ' , 'e ' ]
sorted ( vec , key=itemgetter ( 1 ) , reverse=true ) [ :5 ]
gtk main ( )                 
setup ( namespace_packages= [ 'ninja ' ] )
return func ( *args , **kwargs )   
[ name for name , age in list ( mydict items ( ) ) if age == search_age ]
[ l for l in paragraph3 if sublist_contains ( 'derived : ' , l ) ]
somelist sort ( key=predefined_list index )
df = df apply ( myfillna )
source groupby ( [ 'country ' , 'city ' ] )  agg ( lambda x : x value_counts ( )  index [ 0 ] )
signal signal ( signal sigint , signal sig_dfl )
pyplot show ( ) 
-52 1412276733 - 43 8784096809 - 62 9151309943
-20 9290995367 - 20 9227157774 - 20 9601319723
foo ( ** { 'foo ' : 123 , 'bar ' : 456 } )
datetime strptime ( '02/11/2010 ' , ' % d/ % m/ % y ' )  strftime ( ' % y- % m- % d ' )
carnamit = open ( 'car_names txt ' )
`` `` '' banana '' '' ''  count ( 'a ' )
print ( url split ( '/ ' ) [ 2 ] )
img = cv2 imread ( 'cameraman png ' , 0 )
session cookies set ( 'nid ' , 'abc ' , domain=' google co uk ' , path='/ ' )
func __code__ co_code
cursor execute ( sql )  
graph add_node ( pydot node ( 'literal_1_1 ' , label='1 ' ) )
self canvas draw ( )
`` `` '' , `` '' ''  join ( [ ( ' '' % s '' ' % w ) for w in words ] )
s replace ( 'acb ' , '' )
print ( 'request return ' + str ( response status_code ) + ' error ! ' )
re search ( '\\by\\b ' , '\xc3\xbcy\xc3\xbc ' , re unicode )
print ( list ( itertools chain from_iterable ( l ) ) )
del mylist [ -2 : ] , mylist [ :2 ]
plot savefig ( 'hanning { 0 }  pdf' format ( num ) )
ax2 set_xlim ( 9 , 10 )
raise valueerror ( 'not enough arguments ' )
print ( np allclose ( sola , solb ) )
zip ( *l )  
df iloc [ :5 , :5 ]
set ( a ) & set ( b ) & set ( c )
a = [ [ 1 , 2 , 3 , 4 , 5 ] ] * 4
datetime datetime ( 2010 , 9 , 29 , 11 , 15 )
gevent monkey patch_all ( httplib=true )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
cursor execute ( query , l )
self actionthread start ( )
instance instance_method ( )
grouped = df groupby ( df [ 'datetime ' ]  apply ( my_grouper ) )
struct unpack ( ' < h ' , '\x01\x06 ' )
dict ( ( x , i ) for i , x in enumerate ( t ) )
pygame init ( )  
legend figure canvas mpl_connect ( 'pick_event ' , self on_pick )
sorted ( my_list , key=operator itemgetter ( 'name ' ) )
app run ( )                           
r = re compile ( ' < tr > < td > (  * ) < /td > < td > (  * ) < /td > < td > (   * ) s < /td > < /tr > ' )
ranges = [ ( n , min ( n + step , stop ) ) for n in range ( start , stop , step ) ]
label = re sub ( ' ( [ a-z ] ) ( [ a-z ] ) ' , '\\g < 1 > \\g < 2 > ' , label )
app register_blueprint ( someappmod )
list ( chunkstring ( 'abcdefghijklmnopqrstuvwxyz ' , 5 ) )
  
sum ( int ( x ) for x in s if x isdigit ( ) )
sys stdout flush ( )                         
plt subplot ( 111 , projection='polar ' )
g = df_agg [ 'count ' ]  groupby ( level=0 , group_keys=false )
[ x for y in collection for x in y ]
`` `` '' - '' '' ''  join ( [ d [ :4 ] , d [ 4:6 ] , d [ 6 : ] ] )
frame grid ( row=0 , column=0 )
print ( mydict [ 'person ' ] [ 'male ' ] [ 'boy ' ] [ 'student ' ] [ 'id_123 ' ] [ 'name ' ] )
g vertices index lookup ( ** { 'bad : identifier ' : 'value ' } )
print ( sys modules [ '__main__ ' ]  __file__ )
return the_dict get ( key , '' )
df1 = df set_index ( 'date/time ' )
os path dirname ( sys argv [ 0 ] )  
app config from_object ( 'settings ' )
outfile close ( )
input = open ( 'input txt ' , 'r ' )  read ( )  split ( '\n ' )
[ ( i , [ j for j in l if j ! = i ] ) for i in l ]
df groupby ( 'b ' )  aggregate ( { 'd ' : np sum , 'e ' : np mean } )
`` `` '' { 0:02d } '' '' ''  format ( 3 )
remote_file close ( )
[ '1 ' , ' ( 2/ ( 3 ) 2/4 ) s ' , '5 ' ]
np sum ( my_list )
[ int ( i ) for i in str ( bin ( x ) ) [ 2 : ] ]
a [ : , ( none ) ] * b
dt = datetime strptime ( start , ' % h : % m : % s ' )  time ( )
[ ( 'a ' , [ 1 , 2 , 3 ] ) , ( 'b ' , [ 1 , 2 ] ) , ( 'c ' , [ 1 ] ) ]
data_url = 'data : image/jpg ; base64 , ' + base64 b64encode ( im_data )
list ( itertools chain ( *list ( d values ( ) ) ) )
moo py
d = dict ( ( x key , x ) for x in object_list )
raise exception ( '\u0449 ' )
( ( x , y ) for x in a for y in b )
data = [ df , df , df , df ]
{ ' failures ' : 0 , 'tests run ' : 1 , ' errors ' : 0 } 
select ( l , [ 2 , 5 ] )
startsandendswith ( 'earth ' , 'earth ' )
transposed_l sort ( key=lambda x : x [ 1 ] , reverse=true )
( df [ 0 ] - df [ 1 ] )  astype ( 'timedelta64 [ us ] ' )  astype ( 'int ' )
df [ ~df2 index isin ( other2 index ) ]
mystr = mystr [ : mystr find ( ' '' ' ) + 1 ]
strip_accents ( '\xd6stblocket ' )
return [ word for line in open ( words_file , 'r ' ) for word in line split ( ) ]
date_paris astimezone ( pytz utc )  astimezone ( pytz timezone ( 'europe/paris ' ) )
task apply_async ( args , kwargs , queue='worker1 example com ' )
nonvarargmethod ( args [ 0 ] , args [ 1 ] , args [ 2 ] )
f ( *list ( range ( 5000 ) ) )
print ( line )
return ( dict ( zip ( dicts , x ) ) for x in product ( *iter ( dicts values ( ) ) ) )
plt plot ( x , y , linestyle='- ' )
plt show
shutil copy ( full_file_name , dest )
os getenv ( 'path ' )
mean_values = data mean ( axis= ( 2 , 3 ) )
random seed ( [ x ] )
array ( [ 1 05206154 , 1 96929465 , 0 94590444 ] ) , 1
plt show
plt show
l append ( '2 ' )
server stop ( )
br open ( 'https : //mog com/hp/sign_in ' )
ax yaxis set_visible ( false )  
numpy histogram ( a , bins=10 , range=none , normed=false , weights=none , new=none )
plt savefig ( 'image png ' )
[ 'hello ' , 'world ' , 'to ' , 'you ' ]
from functools import reduce [ r [ 1 ] for r in reduce ( set intersection , ( set ( x items ( ) ) for x in mylist ) ) ]
print ( 'sorry , that was an invalid command ! ' )
{ f ( k ) : v for k , v in d items ( ) }
a = [ t [ 1 ] for t in enumerate ( a [ 1 : ] ) if t [ 1 ] [ 1 ] > a [ t [ 0 ] - 1 ] [ 1 ] ]
index ( [ 'user_id ' , 'item_id ' , 'channel ' , 'time ' , 'test ' ] , dtype='object ' )
doctest testmod ( )  
[ [ 2 , 4 , 6 ] , [ 8 , 10 , 12 ] , [ 6 , 8 , 12 ] ]
df sort_values ( [ 'tm ' ] )
re sub ( ' ( [ a-z ] ) \\- ( [ a-z ] ) ' , '\\1 \\2 ' , original_term )
session rollback ( )
dict1 = dict ( item split ( '\t ' ) for item in list1 )
[ i for i , d in enumerate ( lod ) if 2 in d ]
print ( sorted ( list_of_stuff , key=extract_elem_v2 ( 'name ' ) ) )
ordereddict ( sorted ( list ( d items ( ) ) , key=lambda t : t [ 0 ] ) )
file write ( str ( formatted ) )
s index isin ( list ( 'bde ' ) )
plt show
dataframe ( values , columns=columns )
language = request form [ 'language ' ]
-- system - site - packages
file = service files ( )  insert ( body=body , media_body=media_body )  execute ( )
a_file = open ( 'e : \\python win7-64-amd 3 3\\test\x07 txt ' , encoding='utf-8 ' )
a_file = open ( 'e : \\python win7-64-amd 3 3\\test\\a txt ' , encoding='utf-8 ' )
soup select ( 'div # quote-header-info section span ' ) [ 0 ]
os chdir ( path ) 
ax plot_surface ( x , y , z , facecolors=cm oranges ( v ) )
`` `` '' xxx '' '' ''  join ( 'mississippi' rsplit ( 'iss ' , 1 ) )
ax spines [ 'polar ' ]  set_visible ( false )
goal = [ ' < li > { 0 } < /li > ' format ( x ) for x in l ]
sorted ( qs , key=lambda x : x id == id )
self assertequal ( 5 , self testme )
float ( math factorial ( 170 ) )
return super ( deprecated_base_class , meta )  __new__ ( meta , name , bases , attrs )
bytes ( [ 3 ] )
the_list sort ( key=lambda x : ( 3 , 1 , 2 , 4 ) [ int ( x [ 'id ' ] ) - 1 ] )
foo ( *i )  
hand = dict ( ( k , v ) for k , v in hand items ( ) if v ! = 0 )
pdb set_trace ( )            
[ item for sub_list in a [ 1 : ] for item in sub_list ]  count ( 1 )
kethread start ( )
print ( os environ get ( 'username ' ) )
datetime now ( )  strftime ( ' % b % d % y ' )
json loads ( s )  
df1 reset_index ( ) 
b = a [ [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ]
os system ( 'python yourfile py ' )
writer writerow ( row ) 
edges append ( ( m group ( 1 ) , m group ( 2 ) ) )
set intersection ( *map ( set , p ) )
print ( repr ( line ) )
with open ( 'test txt ' ) as f : f write ( 'foo ' )
re sub ( '^\\s+ ' , '' , 'a\n b\n c ' , flags=re multiline )
sys exit ( )          
print ( '' join ( lines ) )
tuple ( [ 'hello ' ] )
[ main_list [ x ] for x in indexes ]
df apply ( func , axis=1 )
[ '12 ' , '12 3 ' , '0 ' , '0 8 ' ]
parentid = models foreignkey ( 'categorymodel ' )
sys exit ( )           
print ( ' % d ' % 2 * 4 )
f newmethod ( )
os remove ( filename ) 
event categories values ( 'pk ' )  annotate ( count=count ( 'pk ' ) )
print ( ' { 0 : d } , { 0:02x } ' format ( int ( ten ) ) )
df sort ( columns= [ 'name ' , 'rank ' ] , inplace=true )
print ( top [ 0 ] [ 1 ] )
plt contour ( x , y , z )
bin ( int ( 'ff ' , base=16 ) ) [ 2 : ]
return { k : v for k , v in list ( d items ( ) ) if k startswith ( s ) }
root mainloop ( )                                                             
conn commit ( )          
df approxquantile ( 'x ' , [ 0 5 ] , 0 25 )
print ( ' { : \u3000 > 8s } ' format ( '\u3042\u308a\u304c\u3068\u3046 ' ) )
'\xbb' encode ( 'iso8859-2 ' )
s = sum ( a * b for a , b in zip ( list_1 , list_2 ) )
list ( range ( 10 , 0 , -1 ) ) 
l1 sort ( )
plt show
stats sort ( key=lambda x : ( -x [ 'k ' ] , -x [ 'b ' ] , x [ 'a ' ] , x [ 'z ' ] ) )
print ( '\n' join ( [ 'i ' , 'would ' , 'expect ' , 'multiple ' , 'lines ' ] ) )
print ( df groupby ( [ 'company ' , 'end_date ' ] )  sum ( ) )
return func ( *args [ : :-1 ] )
cv2 imread ( 'abalone jpg ' , cv2 imread_color )  shape
clean = re sub ( ' [ \x00\x80-\xff ] ' , '' , dirty )
nans , x = np isnan ( y ) , lambda z : z nonzero ( ) [ 0 ]
df drop_duplicates ( ) 
print ( unicodedata normalize ( 'nfkd ' , unicode_string )  encode ( 'ascii ' , 'ignore ' ) )
db session commit ( )       
print ( 'a= { 0 } , b= { 1 } ' format ( a , b ) )
' % s % f % s ' % ( ' % d ' , 0 1 , ' % d % d ' ) % ( 1 , 2 , 3 )
main ( )      
list ( my_dataframe columns values )
s = ' , ' join ( [ ( str ( x ) + ' ' + str ( a [ x ] ) ) for x in a ] )
a [ : , : , : :-1 , : :-1 ]
c = np sum ( a [ : , : , : , ( np newaxis ) ] * b [ : , ( np newaxis ) , : , : ] , axis=2 )
df groupby ( pd grouper ( freq='2d ' , level=-1 ) )
self assertequal ( response get ( 'location ' ) , '/url/we/expect ' )
ax1 set_xticklabels ( [ ] )  
termios tcsetattr ( fd , termios tcsadrain , old )
array ( [ 21 53 , 8 13 , 3 97 , 10 08 ] )
writer writerow ( [ 'a ' , 'b ' ] )
yes_records_sample [ 'name ' ]  isnull ( )
b = [ x [ : ] for x in a ]
datetime utcfromtimestamp ( timestamp1 )
ds = xr open_dataset ( path_file , chunks= { 'year ' : 10 } )
matches ( 'bears ' , [ 'bea ' , 'be ' , 'ars ' ] )
plt show
sorted ( l , key=lambda x : x [ : -1 ] + ' { ' if x [ -1 ]  isdigit ( ) else x )
urllib request urlopen ( 'http : //google com ' )  info ( )  headers
self button clicked connect ( self handlebutton )
requests get ( url , headers=headers ) 
np repeat ( np repeat ( a , 2 , axis=0 ) , 2 , axis=1 )
from module import *  
fig subplots_adjust ( bottom=0 3 )
a_b = list ( set ( a ) - set ( b ) )
dparser parse ( 'monkey 2010-07-10 love banana ' , fuzzy=true )
new_list append ( f ( x ) )
url ( '^ ' , include ( 'django contrib auth urls ' ) ) ,
plt show
counter ( ngrams ( 'aaaaaaa ' , 5 ) )
plt show
dfgb [ 'bar ' ]  value_counts ( )  unstack ( )  fillna ( 0 0 )
logging debug ( 'this should go to the log file ' )
[ ( 2 , 'b ' , 'and ' ) , ( 3 , 'c ' , 'me ' ) ]
qtgui qframe __init__ ( self )
pycurl_connect perform ( )
counter ( { 'a ' : 5 , 'c ' : 5 , 'b ' : 5 } )
df interpolate ( 'index ' )  plot ( marker='o ' )
df groupby ( pd timegrouper ( 'm ' ) )  first ( )  rolling ( 2 )  mean ( )
sys stdout write ( '\rdoing thing % i ' % i ) sys stdout flush ( )
struct unpack ( ' > h ' , s )
pd to_datetime ( df [ 'time ' ] )
( ( s iloc [ : :2 ]  values + s iloc [ 1 : :2 ] ) / 2 )  reset_index ( drop=true )
df ix [ 'x ' , 'c ' ] = 10
list ( g )
plt show
any ( x > 10 for x in l )
obj __dict__ [ 'name ' ]
powerset ( [ 4 , 5 , 6 ] )
print ( repr ( a )  decode ( 'unicode-escape ' ) )
print ( ( 'this ' , 'is ' , 'a ' , 'test ' ) )
df groupby [ 'year ' , 'month ' ]  category apply ( pd value_counts )
( vals == ( 0 , 1 ) )  all ( axis=1 )
np unravel_index ( np argmax ( corr_img ) , corr_img shape )
text grid ( row=0 , column=0 , sticky='nsew ' )
element click ( )  
s strip ( )  count ( ' ' ) + 1 == len ( s split ( ) )
plt show
df [ 'id ' ] = df [ 'id ' ]  apply ( lambda x : x zfill ( 15 ) )
writer writerow ( map ( quote , row ) )
pd series ( np bincount ( np arange ( s1 size ) // 3 , s1 ) )
requests get ( 'https : //api github com/user ' , auth= ( 'user ' , 'pass ' ) )
time sleep ( 0 25 )
del my_dict [ x ]
[ i for i in range ( len ( string ) ) if string startswith ( 'test ' , i ) ]
re match ( ' ( ? : ( \\d+ ) y ) ? ( ? : ( \\d+ ) m ) ? ' , text )  groups ( )
os path splitext ( 'name fasta ' )
image = pil image open ( '14767594_in png ' )
entry objects filter ( weekdays=hasbit ( weekdays fri ) )
clr addreference ( 'myassembly ' )
any ( a_list )
ftp set_pasv ( false )
d = dict ( zip ( l , t ) )
os listdir ( '/sys/class/net/ ' )
lines = text_file read ( )  split ( ' , ' )
locale setlocale ( locale lc_time , 'sv_se ' )
__init__ py             
[ 1 , 'a ' , none , 'b ' , 2 , 'c ' , 3 , 'd ' , 'e ' , 'f ' , 'g ' ]
list ( eval ( '0 , 0 , 0 , 11 , 0 , 0 , 0 , 11 ' ) )
return 'a ' * ( len ( s ) + 1 )
appname = os environ [ 'application_id ' ]
{ i [ 0 ] : i [ 1 : ] for i in list1 }
df [ [ 'col2 ' , 'col3 ' ] ] = df [ [ 'col2 ' , 'col3 ' ] ]  apply ( pd to_numeric )
workbook = xlrd open_workbook ( 'export_data xls ' , encoding_override='utf_16_le ' )
foo ( *t )
subprocess check_call ( [ 'python ' , 'file py ' ] , stdout=f )
os system ( 'anything what you would like to do in the shell ' )
from functools import reduce reduce ( lambda x , y : x or y , ( iam ( x ) for x in [ false , true , false ] ) )
pd merge_asof ( dfb , dfa , left_on='timestamp ' , right_on='starttime ' , by='name ' )
send_task ( 'tasks test_task ' , task_id=task_id , queue=queue )
array = np fromiter ( iter ( result items ( ) ) , dtype=dtype , count=len ( result ) )
re findall ( ' ( [ ^  ] * ? apple [ ^  ] *\\   ) ' , txt )
`` `` '' '' '' ''  join ( c for c in string if c ! = `` ' '' )
print ( '' join ( tree xpath ( ' //text ( ) ' ) ) )
print ( ' ' join ( output ) )
dict ( my_list )
plt plot ( [ x ] , [ y ] , 'k   ' )
super ( teenager , self )  __init__ ( *args , **kwargs )
ea reload ( )
sqlcontext sql ( 'select percentile ( x , 0 5 ) from df ' )
return sorted ( items , cmp=comparer )
plt show
return datetime ( dt year , dt month , 1 ) - timedelta ( days=1 )
bar ( )
pd value_counts ( d values ravel ( ) ) 
int ( list ( filter ( str isdigit , str1 ) ) )
config write ( open ( 'settings conf ' , 'w ' ) )
`` `` '' { } and { } '' '' ''  format ( 'string ' , 1 )
win geometry ( ' { } x { } + { } + { } ' format ( width , height , x , y ) )
[ ( x , y ) for x , y in pairs if x ! = y ]
driver get ( 'http : //html5demos com/drag ' )
x add_argument ( '-b ' , required=true )
y = [ ( ' % 02d ' % v ) for v in x ]
print ( path , f , os path getsize ( os path join ( path , f ) ) )
q = model objects filter ( q ( field1=f1 ) | q ( field2=f2 ) )
fh write ( 'hello world : \xe4' encode ( 'utf-8 ' ) )
result [ k ]  append ( v )
f write ( '\n' join ( altered_lines ) + '\n ' )
process terminate ( )  
np fromstring ( vistring , sep= ' , ' )
all ( el == 'hello ' for el in x )
print ( sys argv [ 1 ] )
print ( 'not found ' )
ax1 plot ( x , y , 'ko ' )
plt plot ( dat0 [ : , ( 0 ) ] , dat0 [ : , ( 1 ) ] )
aapl index to_series ( )  diff ( )  median ( ) / ( 60 * 60 * 10 ** 9 )
collections counter ( found ) [ 'e5 ' ]
ax imshow ( masked_array , interpolation='nearest ' , cmap=cmap ) 
print ( '\n' join ( lines ) ) 
bids = [ int ( bid ) for bid in bids ]
[ '' , 'tt ' , 'pf ' , 'test ' , 'v1 ' ]
output = [ value for value , count in list ( counts items ( ) ) if count > 1 ]
fig savefig ( 'output png ' )
`` `` '' $ solución \\ ; { } \\ ; : \\ ; { } \\\\ $ '' '' ''  format ( i , value ) 
app exec_ ( )       
plt figure ( )    
time sleep ( 1 )                               
a [ 0 ] is a [ 0 ]
singleitem = mylist pop ( )
hashlib md5 ( 'thecakeisalie ' )  digest ( )  decode ( 'iso-8859-1 ' )
ftp retrbinary ( 'retr % s ' % filename , fhandle write )
print ( str ( s get_attribute ( 'textcontent ' ) ) )
print ( re sub ( ' { [ ^ { } ] + } ' , lambda x : x group ( 0 )  replace ( ' , ' , ' ; ' ) , text ) )
df loc [ df [ 'x ' ] == 10 , 'value ' ] = 1000
data = np loadtxt ( filename , ndmin=2 )
min ( timeit repeat ( lambda : dict ( ( k , v ) for d in ( x , y ) for k , v in list ( d items ( ) ) ) ) )
unidecode ( '\u5f71\u5e2b\u55ce ' )
now_aware = unaware replace ( tzinfo=pytz utc )
writer writerows ( data )
form fields [ 'myuser ' ]  queryset = user objects filter ( groups__name__in= [ 'foo ' ] )
foo __table__ insert ( )  execute ( [ { 'bar ' : 1 } , { 'bar ' : 2 } , { 'bar ' : 3 } ] )
def rgb2hsv ( image ) : return image convert ( 'hsv ' )
element send_keys ( '123 00 ' )
print ( ' %  2f ' % 5 )
var = ' % ( foo ) s % ( foo ) s % ( foo ) s ' % { 'foo ' : 'look_at_me_three_times ' }
model add ( activation ( 'tanh ' ) )
brr [ : ] = brr [ : :-1 ]
s replace ( '\\ ' , '/ ' )
return os path dirname ( os path realpath ( __file__ ) )
ax set_xlim ( 0 , 10 )
s3 = boto3 client ( 's3 ' , region_name='eu-central-1 ' )
signal signal ( signal sigint , signal sig_ign )
list2b == sorted ( list2b , key=lambda c : list1 index ( c ) )
print ( sys argv [ 1 ]  lower ( ) )
gtk window __init__ ( self )
print ( ' { } { } { } { } ' format ( 3 5 , 2 5 , 5 , 7 ) )
a [ : , ( 2 ) ]
print ( re findall ( `` \\'\\s+ ? \\ ' : \\s*\\ ' ? (  * ? ) \\ ' ? ( ? : ,| $ ) '' , st ) )
letters = '' join ( [ choice ( ascii_lowercase ) for _ in range ( 5 ) ] )
sudo ( 'git reset -- hard head ' , user='web ' )
content = content encode ( 'latin1 ' )
plt show
bytes ( int ( x , 0 ) for x in [ '0x28 ' , '0x0 ' , '0x0 ' , '0x0 ' ] )
ctypes addressof ( bufstr ) 
sys stdout write ( reset )
q = queue ( maxsize=0 )
[ [ 'mom ' , 'dad ' ] , [ 'grand ' ] , [ 'mom ' , 'max ' , 'jules ' ] ]
sound play ( wx sound_async )
import pandas as pd import numpy as np
np concatenate ( [ a [ a == i ] [ :2 ] for i in np unique ( a ) ] )
env command ( 'document tex ' , '' , 'python table_generator py ' )
time sleep ( 5 )       
root mainloop ( )                                                              
unittest texttestrunner ( )  run ( suite )
[ 'another event ' , 'reading : 25 5 ' , 'reading : 25 1 ' ]
plot ( markx , marky , 'o ' , color='blue ' )
find_majority ( [ 'a ' , 'a ' , 'b ' ] )
nodebox __version__
[ ( x + y ) for x , y in l ]
df [ 'datetime ' ] = pd to_datetime ( df [ 'timestamp ' ] , unit='s ' )
xy = np vstack ( ( x flatten ( ) , y flatten ( ) ) )  t
urllib parse quote ( item url )
new_dict = dict ( ( k , v ) for k , v in list ( old_dict items ( ) ) if v in allowed_values )
json loads ( output decode ( 'string-escape ' )  strip ( ' '' ' ) )
df groupby ( 'id ' ) [ 'variable_1 ' ]  agg ( { 'mean ' : np mean , 'sd ' : np std } )
[ [ ch for ch in word ] for word in ( 'apple ' , 'banana ' , 'pear ' , 'the ' , 'hello ' ) ]
ax yaxis tick_left ( ) 
return func ( that , session , *args , **kwargs )
reactor run ( )             
function ( *args , **kwargs )
sum ( lettergoodness get ( c , 0 ) for c in yourstring upper ( ) )
all_ingredients = ingredient objects filter ( recipe__book=my_book )
lock = threading lock ( )
canvas_obj = self canvas create_image ( 250 , 250 , image=tkimage )
soup find ( 'meta ' , { 'name ' : 'city ' } )
list ( d [ 'answer ' ] for d in d_values ( a , 3 ) )
self button grid ( row=2 , column=2 , sticky=w )
exec ( compile ( open ( 'foo bar py ' )  read ( ) , 'foo bar py ' , 'exec ' ) )
arr argsort ( ) [ :3 ]
cs collections [ 0 ]  get_paths ( )
np any ( a == 2 , axis=0 ) & np any ( a == 5 , axis=0 )
q , bins = pd qcut ( a , 2 , retbins=true )
f pack_propagate ( 0 )
matrix = [ [ ( 0 ) for x in range ( w ) ] for y in range ( h ) ]
pprint ( sorted ( ranks , key=lambda x : int ( x [ 'rank ' ]  replace ( ' , ' , '' ) ) ) )
sudo ( 'mkdir foo ' )
return n * factorial ( n - 1 )
[ c for c in df if c [ 0 ] == 'd ' ]
{ k : v for k , v in list ( metadata items ( ) ) if v }
table setitem ( rowposition , 2 , qtgui qtablewidgetitem ( 'text3 ' ) )
self axes = self figure add_subplot ( 111 )
s groupby ( s notnull ( ) [ : :-1 ]  cumsum ( ) [ : :-1 ] )  transform ( lambda g : g [ -1 ] / g size )
k , v = list ( d items ( ) ) [ 0 ]
mod = imp load_source ( 'bar ' , ' /foo/bar py ' )
print ( 'success ' )
f write ( 'running in the background ! \n ' )
ax set_title ( 'order of steps ' )
sys path append ( 'c : \\x\\y\\z ' )
[ 'a ' , 'b ' , 'x ' , 'c ' , 'd ' , 'y ' , 'e ' , 'f ' , 'g ' , 'h ' ]
session query ( jt aid )  filter ( not_ ( jt bid in_ ( ids ) ) )  all ( )
datetime datetime today ( )  replace ( hour=0 , minute=0 , second=0 , microsecond=0 )
{ { text | linebreaks } }
df [ 'ptsperorder ' ] = df groupby ( 'ordernum ' ) [ 'ptsperlot ' ]  transform ( sum )
plt show
table save ( 'newtable tab ' )
arr sum ( axis=0 , keepdims=true )
print ( ( date_string , dt date ( ) ) )
[ sum ( l ) for l in l_o_l ]
next ( ( i for i , d in enumerate ( lod ) if 3 in d ) , none )
dict ( [ [ 'two ' , 2 ] , [ 'one ' , 1 ] ] ) 
driver find_element_by_css_selector ( 'a [ title= '' click to download '' ] ' )  click ( )
np average ( list ( map ( float , meannumbers split ( ) ) ) )
s = 'svn cp { root_dir } / { trunk } / { root_dir } / { tag } /' format ( **locals ( ) )
`` `` '' { 0 : b } '' '' ''  format ( 4660 )
fig canvas draw ( ) 
result = set ( d [ 0 ] )  intersection ( *d )
df loc [ df [ 'is_isolated ' ] , 'group ' ] = -1
[ [ 0 , 1 , 3 , 4 ] , [ 2 , 5 , 6 , 7 , 8 , 10 ] ]
[ f for f in dir ( np lib financial ) if not f [ 0 ] == '_ ' ]
parser add_argument ( '-v ' , action='version ' )
plt show
self after ( 100 , self periodiccall )
plt hist ( x , bins=50 , color='blue ' )
tree write ( 'jerry_new xml ' )
pickled_data decode ( 'utf8 ' )
df fillna ( 0 , inplace=true )
`` `` '' '' '' ''  join ( sorted ( set ( s ) ) )
`` `` '' '' '' ''  join ( chr ( c ) for c in b )  decode ( 'utf-16 ' )
[ ( sum ( x ) / len ( x ) ) for x in zip ( *a ) ]
line = re sub ( `` ( [ ^ ' ] ) 'f ' (   ) '' , '\\1this_is_false\\2 ' , line )
a = np insert ( a , 0 , 0 )
mechanize install_opener ( opener )
output = os linesep join ( line for line in f if ' ' in line )
instance __class__ __name__  
plt show
threading thread __init__ ( self ) 
os system ( '/usr/bin/php example2 php whatastorymark ' )
[ [ 'google ' , [ 'http : //google com ' ] ] ]
os startfile ( 'my_mp3 mp3 ' )
b unpack ( 'uintle:48 , < h ' )
a shape
raise validationerror ( { 'field_name ' : [ 'error message ' ] } )
d = dict ( zip ( keys , values ) )
all ( c in '10 ' for c in astring ) and len ( astring ) == 8
l = [ [ 1 , 2 , 3 , 0 ] , [ 4 , 5 , 6 , 0 ] ]
os path dirname ( '/test/one ' )
print ( urllib parse unquote ( query )  decode ( 'utf8 ' ) )
client close ( )
self canvas grid ( row=0 , column=0 , sticky='nsew ' )
np repeat ( data , data [ : , ( -1 ) ] , axis=0 )
comport = sys argv [ 2 ]
print ( now year , now month , now day , now hour , now minute , now second )
[ ( ' % s % 02d ' % t ) for t in zip ( b , a ) ]
plt show
l = [ ( 2 * x ) for x in l ]
all_data = np concatenate ( ( my_data , new_col ) , 1 )
outfile write ( line ) 
list ( range ( 101 , 6284 ) ) + [ 8001 , 8003 , 8010 ] + list ( range ( 10000 , 12322 ) )
string = '' join ( [ 'a ' , 'b ' , 'c ' ] )
connection commit ( )  
line = ser readline ( )
pd concat ( [ df ] , axis=1 , keys= [ 'c ' ] )  swaplevel ( 0 , 1 , 1 )
df ix [ 1 , 'foo ' ]
image = self request get ( 'filedata ' )
df to_sql ( 'demand_forecast_t ' , engine , if_exists='replace ' , chunksize=10000 )
subprocess call ( [ 'open ' , '-r ' , apppath ] )
cursor execute ( 'select count ( * ) from atable ' )
sock bind ( ( '' , mcast_port ) )
struct pack ( 'h ' , 824 ) 
sorted ( my_list , key=attrgetter ( 'anniversary_score ' ) )
print ( db [ 'han ' ]  __dict__ )
plt imshow ( data , interpolation='nearest ' )
full_tag = soup findall ( 'xyz ' )
needles = needle split ( '* ' )
self setlayout ( self layout )
a = [ 1 , 2 , 3 , 4 ]
plt tight_layout ( )  
ax set_xlim ( 0 , 1 )  
[ 3 , 5 , 7 ]
parser add_argument ( 'state ' , choices= [ 'on ' , 'off ' ] , nargs= ' ? ' )
len ( your_list ) ! = len ( set ( your_list ) )
`` `` '' [ `` accelerate '' , `` acute '' , `` bear '' , `` big ''     ] '' '' ''
`` `` '' http : //something com/page ? content_item_id=1234 & param3 '' '' ''  split ( ' & ' ) [ 0 ]
ax2 set_zorder ( -1 )
ax1 set_xlabel ( 'x data ' )
foo = [ { } for _ in range ( n ) ]
list ( s )
return dict ( ( k , [ v [ 1 ] for v in itr ] ) for k , itr in grob )
b = a strip ( '/ ' )
ftpobj cwd ( '   ' )
pd dataframe ( { k : dict fromkeys ( v , k ) for k , v in list ( dic items ( ) ) } )  t fillna ( '- ' )
return lambda x : np dot ( a , x ) - b
getattr ( foo , bar ) ( *params , **keyword_params )
html_file close ( )
( a > 1 ) & ( a < 5 )
return f ( *args , **kwargs )
os system ( 'xdg-open `` $ file '' ' )
ax1 set_xlim ( -4 , 4 )
urllib request urlopen ( 'http : //www google com ' )
list ( accumu ( [ 4 , 6 , 12 ] ) )
[ [ 4 , 5 , 10 , 12 ] , [ 2 , 5 , 12 , 13 ] , [ 4 , 5 , 6 , 12 ] ]
xvfb = subprocess popen ( [ 'xvfb ' , ':99 ' , '-nolisten ' , 'tcp ' , '-fbdir ' , tempdir ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
admin site register ( customuser , useradmin )
np multiply ( a , b [ : , ( np newaxis ) ] )
app run ( debug=true )          
[ 'aah ' , 'aha ' , 'aah ' , 'aha ' , 'haa ' , 'haa ' ]
super ( )  save ( )
dev leds ( )
df [ 'isin ' ] = df apply ( lambda r : int ( r number in r lists ) , axis=1 )
x = [ ( [ none ] * 5 ) for _ in range ( 6 ) ]
parser add_argument ( '-f ' , ' -- file ' , nargs=3 , action='append ' )
df = pd concat ( list_of_dataframes )
y = [ int ( val ) for val in x ]
plt plot ( x , y )   
img save ( 'filename jpg ' )
print ( 'key : % s , value : % s ' % ( key , mydictionary [ key ] ) )
re findall ( '\\s ' , s )
re sub ( ' [ ^\\w\\-_\\   ] ' , '_ ' , 'some\\*-file _n\\\\ame ' )
target close ( )
re search ( '\\d+| $ ' , '' )  group ( )
array ( [ [ 19 , 18 , 17 , 16 , 15 ] , [ 4 , 3 , 2 , 1 , 0 ] ] )
np where ( np any ( a == 2 , axis=0 ) & np any ( a == 5 , axis=0 ) ) 
my_list = list ( range ( 1 , 1001 ) )
new_list_of_lists = map ( list , map ( intify , list_of_lists ) )
app config [ 'security_registerable ' ] = true
self sendline ( pickle dumps ( { 'size ' : filesize , 'content ' : contents [ :20 ] } ) )
sorted ( l , key=operator itemgetter ( 1 ) )
threading timer ( 2 , interrupt )  start ( )
list ( itertools chain ( *lst ) )
np arange ( new [ 0 ] ) % old [ 0 ]
app run ( )                            
driver quit ( )       
print ( len ( path ) - 1 )
print ( nx shortest_path ( graph , source='robots-0 ' , target='agency-15 ' ) )
re findall ( ' ( ? < = [ a-z ] ) ( ? = [ a-z ] ) | ( ? < = [ a-z ] ) ( ? = [ a-z ] [ a-z ] ) ' , 'camelcasexyz ' )
next ( i for i , d in enumerate ( lod ) if 3 in d )
print ( b [ 0 ] )
sys stdout write ( 'hi ' )
[ ( 2 , 5 ) , ( 12 , 17 ) ]
print ( df loc [ i ]  reset_index ( ) )
c execute ( 'select * from test ' )
b = np reshape ( a , ( -1 , ncols ) )
my_fun ( a='abc ' , b=123 , c='def ' )
newimg1 save ( 'img1 png ' , 'png ' )
ip = self request remote_addr
writer writerows ( a ) 
df stack ( )  str replace ( 'type ' , '' )  unstack ( )
itemnumber = [ d [ 'itemnumber ' ] for d in list_of_dicts ]
( ( 1 , 2 ) , ( 3 , 4 ) , 5 , 6 ) ,
df reset_index ( level=1 , drop=true )  stack ( )  unstack ( )
`` `` '' { 0 : , 2f } '' '' ''  format ( 123466666 )
`` `` '' foo : bar : baz '' '' ''  rfind ( ' : ' )
{ '_id ' : 'id_1 ' , 'key_1 ' : 'value_1 ' , 'key_2 ' : 'value_2 ' }
struct pack ( 'bbb ' , *rgb )  encode ( 'hex ' )
df = df drop_duplicates ( )
__table_args__ = { 'schema ' : 'schema_name ' }
mylist insert ( 0 , mylist pop ( 5 ) )
file write ( 'input ' )
f = lambda x : x * 2
data reshape ( n , nt , n )  transpose ( 0 , 2 , 1 )
imshow ( data , interpolation='bicubic ' )
f close ( )                          
ax plot ( x , y ) 
`` `` '' client : user : username : type:1234567 '' '' ''  split ( ' : ' ) [ -1 ]
format ( x , 'x ' )
project_root = os path abspath ( os path dirname ( settings_dir ) )
ax set_title ( 'horizontal bar chart using matplotlib ' )
multi ( [ 'a ' , 'b ' ] , [ 'a ' , 'b ' ] , [ '1 ' , '2 ' ] , { } )
[ 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 ]
max ( lod , key=lambda x : x [ 'score ' ] )
df [ 'date ' ]  iget ( -1 )
plt show
answer extend ( map ( str , list ( range ( int ( start ) , int ( end ) + 1 ) ) ) )
[ ' [ { `` y '' : 0 , `` x '' : 0 } , { `` y '' : 1 , `` x '' : 0 } ] ' , [ { 'y ' : 0 , 'x ' : 0 } , { 'y ' : 1 , 'x ' : 0 } ] ]
f2 write ( 'bar ' )
make_adder ( 5 )
pyplot show ( )  
`` `` '' integer : { } float : { } string : { } '' '' ''  format ( 1 , 1 1 , 'blah ' )
list ( filter ( func , data ) )
time sleep ( 5 )        
format ( 12345 678 , ' ,  2f ' )
plt show
return httpresponse ( pdf , 'application/pdf ' )
raise exception ( 'cygwin_create_path failed ' )
[ ( a + ' , ' + b ) for a , b in zip ( a , b ) ]
df = pd dataframe ( data )
print ( date_conv strftime ( ' % d  % m  % y ' ) )
os listdir ( '/tmp/foo ' )
[ [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] ]
json loads ( ' { `` a '' : { `` a1 '' : '' { \\ '' foo\\ '' : \\ '' bar\\ '' , \\ '' foo1\\ '' : \\ '' bar1\\ '' } '' } } ' )
{ k : d1 [ k ] for k in set ( d1 )  intersection ( l1 ) }
print ( s split ( ' , ' ) ) 
text_file write ( ' { } , ' format ( snapshot_name ) )
nx topological_sort ( g )
[ s for v in ( re findall ( '\\d+|\\d+ ' , s ) for s in l ) for s in v ]
data = '' join ( code [ i ] for i in data )
return { 'color ' : 'color ' , 'message ' : 'message ' } 
x = x split ( )
c [ 0:100 , 0:100 , : , : ]  sum ( axis= ( 2 , 3 ) )
ax2 plot ( x , y , 'ko ' )
sys stdout close ( )
[ ast literal_eval ( re sub ( '\\b0+ ' , '' , pixel ) ) for pixel in pixels ]
idx = np where ( xvalues == xvalues [ -2 ] )
df loc [ ( df == 1 )  any ( axis=1 ) , df filter ( regex='^foo\\   ' , axis=1 )  columns ]
str ( '\xef\xbb\xbft_11651497 ' )
f close ( )                           
`` `` '' '' '' ''  join ( somestring split ( '\\r ' ) )
[ ( x + y ) for x in 'catty ' for y in 'pot ' ]
[ ( x , y ) for x in l for y in l ]
model transform ( df )  select ( 'rawprediction ' , 'probability ' )  show ( 5 , false )
contents = f readlines ( )
mbox ( 'your title ' , 'your text ' , 1 )
c = random choice ( a )
np loadtxt ( 'cov csv ' , delimiter= ' , ' )
super ( b , self )  __init__ ( )
d = datetime today ( ) - timedelta ( days=days_to_subtract )
function_dictionary [ 'capitalize ' ] ( 'word ' )
l sort ( )
soup find_all ( 'a ' , text=re compile ( '^ [ pp ] rice ' ) )
time sleep ( 60 )  
driver quit ( )        
cleanedhost = re sub ( ' [ ^a-za-z0-9 ] + ' , '' , host )
plt show
createkey = '_' join ( sorted ( [ str ( wi ) for wi in wordids ] ) )
print ( win32gui getwindowtext ( hwnd ) )
a = '123 ' if b else '456 '
print ( zipfile ( path )  namelist ( ) )
return '' join ( [ str ( random randint ( 0 , 9 ) ) for i in range ( x ) ] )
asserttrue ( text in self driver page_source )
[ l for l in list_dirs if l split ( '\\ ' ) [ -1 ] not in unwanted_files ]
yield os path join ( name , path )
print ( 'utf-16 w/ bom decoded with utf-16le % r ' % e16 decode ( 'utf-16le ' ) )
np in1d ( a [ : , ( 2 ) ] , list ( b ) )
pd to_datetime ( s , format= ' % d/ % m/ % y ' )
df loc [ mask ]
naive_local_dt = aware_dt astimezone ( )  replace ( tzinfo=none )
return n if n < = 1 else fibo ( n - 1 ) + fibo ( n - 2 )
{ k : v for k , v in list ( d1 items ( ) ) if k in l1 }
file1 = dict ( l strip ( )  split ( ' : ' ) for l in open ( 'file1 ' , 'r ' ) )
mysqldb connect ( '127 0 0 1 ' , 'root ' , '' , 'db ' )
mysqldb connect ( 'localhost ' , 'root ' , '' , 'db ' )
help ( bar )
writer writerow ( [ 'number ' , 'text ' , 'number ' ] )
re findall ( ' [ a-z ] ? [ a-z ] +| [ a-z ] + ( ? = [ a-z ] | $ ) ' , 'camelcasexyz ' )
re findall ( ' [ a-z ] ( ? : [ a-z ] +| [ a-z ] * ( ? = [ a-z ] | $ ) ) ' , 'camelcasexyz ' )
setattr ( self , key , kwargs [ key ] )
l [ i : i + 2 ] = reversed ( l [ i : i + 2 ] )
user save ( ) 
name = 'b ' + str ( num ) 
pylab text ( max_x , max_y , str ( ( max_x , max_y ) ) )
df = df dropna ( subset= [ 'comments ' ] )
df_with_no_strings = df [ ~rows_with_strings ]
urlpatterns += patterns ( '' , ( '^admin/ (   * ) ' , include ( admin site urls ) ) )
[ 1 , 2 , 3 , 4 , 5 , 6 , 8 , 0 , 0 ]
cursor execute ( stmt )
driver get ( 'http : //testurl ' )
df a + '~ ' + df b + '~ ' + ( df c * 1 )  astype ( str )
numpy matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
print ( dateatt get_attribute ( 'title ' ) )
del foo fields [ -1 ]
df = pd read_csv ( filename , error_bad_lines=false )
' % s % s ' % ( 'hello ' , 'world ' )
results setdefault ( i , [ ] )  append ( benchmark ( i ) )
prev = driver find_element_by_xpath ( `` //a [ text ( ) ='previous ' ] '' )
print ( '\u4f60\u597d' encode ( 'utf-8 ' )  decode ( 'mbcs ' ) )
pivoted cumsum ( )
plt show
list ( str ( n ) for n in range ( 10 ) )
plt show
[ ( 'temp1 : ' , '+ ' , '31 0 ' , '+ ' , '107 0 ' ) ]
pool = mp pool ( processes=1 )
a [ b == 1 0 ]  sum ( )
solve ( numericoperand ( 1 ) , min ( min ( a ) ) , 'a ' )
return '' join ( random choice ( allowed_chars ) for i in range ( length ) )
kwargs [ 'db_index ' ] = true
( y [ : , ( none ) ] * x [     , ( none ) ] )  reshape ( x shape [ 0 ] , -1 )
mylist = input ( )  split ( )
len ( re findall ( ' ( ? = ( % s ) ) ' % re escape ( needle ) , haystack ) )
list ( source_list ) == zip ( *zip ( *source_list ) )
file write ( 'input ' ) 
p stdin write ( `` source ( 'myrscript r ' ) \n '' )
p stdin write ( 'myfirstinput\n ' )
df filter ( regex='^ ( ( ? ! prefix )   ) * $ ' )
print ( s [ 1 : ] )
[ 'cube ' , 'is_local ' , 'square ' ]
br set_handle_referer ( true )
`` `` '' , `` '' ''  join ( [ ' { 0 } ( { 1 } ) ' format ( x [ 0 ] , x [ 1 ] ) for x in a ] )
plt rcparams [ 'keymap save ' ] = ''
sys stdout write ( '\x08 ' ) 
browser get ( 'some_url_i_need ' )
plt show
model objects using ( 'uncommitted_db ' )  all ( )
verts = [ none ] * 1000
dict ( zip ( ( 'one ' , 'two ' ) , ( 1 , 2 ) ) )
ax [ 2 ]  set_title ( 'numpy masked ' )
l = [ dict ( zip ( [ 1 ] , [ x ] ) ) for x in range ( 1 , 100 ) ]
ax zaxis set_major_locator ( linearlocator ( 10 ) )
cv2 destroyallwindows ( )       
sys exit ( app exec_ ( ) )        
pkl_file close ( )
cv2 imshow ( 'cropped ' , crop_img )
list ( gen_items ( ) )
print ( df [ [ 'a ' , 'b ' ] ]  sum ( axis=1 )  sum ( ) )
itertools permutations ( [ 2 , 3 , 4 ] )
any ( map ( lambda v : v in list2 , list1 ) )
print ( some_object __repr__ ( ) )
a = int ( '0 ' + somestring )
np where ( ( a > 2 ) & ( a < 8 ) )
print ( et tostring ( tree ) )
ax set_ylabel ( 'y axis ' )
return httpresponse ( json dumps ( data ) )
raise cherrypy httperror ( '403 forbidden ' )
mydic = { i : o [ 'name ' ] }
sns factorplot ( 'size ' , 'total_bill ' , col='smoker ' , data=tips_all , kind='point ' )
datetime strptime ( '' join ( iso_ts rsplit ( ' : ' , 1 ) ) , ' % y- % m- % dt % h : % m : % s % z ' )
sys exit ( 0 )         
print ( 'valid ' )
app debug = true  
s getvalue ( )
ax set_yticks ( ax get_yticks ( ) [ : -1 ] )
return self order_by ( 'id ' )
df_output_lines = [ s split ( ) for s in os popen ( 'df -ph ' )  read ( )  splitlines ( ) ]
pool terminate ( )
return httpresponseredirect ( reverse ( 'affiche_all ' , devise= ( 'euro ' , ) ) )
a , b , c = func ( )
[ ( 1 , 2 ) ]
df idxmax ( )  reset_index ( )  rename ( columns= { 'index ' : 'animal ' , ( 0 ) : 'idx ' } )
from functools import reduce reduce ( lambda x , y : ( x + y ) / 2 , list_of_nums )
np int32 ( 2971215073 )
raise valueerror ( 'invalid nargout ! ' )
df = pd dataframe ( { 'a ' : [ 1 , 2 , 3 ] , 'b ' : [ 4 , 5 , 6 ] } )
s index [ s rolling ( 3 )  apply ( np argmax ) [ 2 : ]  astype ( int ) + np arange ( len ( s ) - 2 ) ]
im = image fromarray ( my_array reshape ( ( 50 , 50 ) )  astype ( 'uint8 ' ) * 255 )
numpy logical_not ( array )
json dumps ( dict ( foo=42 ) )
b = np array ( [ a [ i ] for i in range ( m shape [ 0 ] ) if i not in indices ] )
ax plot ( xx , yy , zorder=100 , linewidth=3 , color='red ' )
from functools import reduce reduce ( lambda x , y : ( x [ 0 ] + y [ 0 ] , x [ 1 ] + y [ 1 ] ) , nums )
t strftime ( ' % m/ % d/ % y ' )
print ( sorted ( [ card ( c [ 0 ] , c [ 1 ] ) for e in a for c in e ] ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
b [ 2:5 ] = [ 1 ] * 3
print ( json dumps ( data , indent=4 ) )
df [ [ 'id_1 ' , 'id_2 ' , 'id_3 ' ] ]  apply ( lambda_function )
myf close ( )
print ( 'self class : ' + self __class__ __name__ )
plt scatter ( x , y , color=next ( colors ) )
webapp2 request get ( ' [ parameter ] ' , ' [ optionaldefaultvalue ] ' )
locale setlocale ( locale lc_all , 'no_no ' )
mydict = { 'john ' : 'johns value ' , 'jeff ' : 'jeffs value ' }
root mainloop ( )                                                               
return function ( *args , **kwargs )
len ( s ) - len ( s lstrip ( ) )
df index = pd series ( df index )  fillna ( method='ffill ' )
map ( s __setitem__ , a , m )
plt show
`` `` '' '' '' ''  join ( map ( chr , [ 65 , 66 , 67 ] ) )
br find_control ( 'live ' )  items [ 0 ]  selected = true
f ( [ 1 , 1 , 2 ] , [ 1 , 1 ] )
cls dosomethingelse ( )
'dear student , \r\n please send your report\r\n thank you for your attention '
image composite ( image , image new ( 'rgb ' , image size , 'white ' ) , image )  show ( )
mpl rcparams [ 'savefig directory ' ] = os chdir ( os path dirname ( __file__ ) )
ax set_ylim ( ylim )
celery_imports = os getenv ( 'celery_imports ' , 'default package ' )
wsgiapplicationgroup % { global }
yourmodule py
info = json loads ( json loads ( get_info ( ) ) )
plt show
unittest main ( )         
fig subplots_adjust ( hspace=0 5 )
output write ( new_line )
a = numpy array ( b )
painter restore ( ) 
br form [ 'type ' ] = [ '22 ' ]
`` `` '' '' '' ''  join ( [ ( next ( replacer ) if c == ' @ ' else c ) for c in s ] )
globals ( )  
driver switch_to_window ( window_after )
df drop ( 'amount_abs ' , axis=1 , inplace=true )
search_img ( 'book ' , 'imgxs jpg ' )
logging info ( 'log entry here   ' )
type ( boardsize )
eval ( '9**9**9**9**9**9**9**9 ' , { '__builtins__ ' : none } )
f close ( )                            
ax2 set_rlim ( [ 0 , 1 ] )
ax xaxis set_major_formatter ( formatter )
st = st [ : -1 ]
sys path append ( os path realpath ( '   ' ) )
'\x00\x83\x00\xe9\x06version=baystation+12 & mode=traitor & respawn=0 & enter=1 & vote=1 & ai=1 & host & players=7 & player0=kosherman & player1=ghazkull & player2=doug+h +nuts & player3=lord+braindead & player4=kirbyelder & player5=master+of+apples & player6=cacophony & end= % 23end\x00 '
souphandler findall ( 'div ' , id=re compile ( '^post- $ ' ) )
total = sum ( int ( v ) for name , v in table )
plt show
print ( 'last : ' , list [ -1 ] )
print ( '' join ( ' % 02x ' % ord ( c ) for c in text ) )
sys exit ( 0 )          
return np hstack ( np meshgrid ( *l ) )  swapaxes ( 0 , 1 )  reshape ( ndims , -1 )  t
[ ( sum ( group ) / size ) for group in zip ( * ( data [ x : :size ] for x in range ( size ) ) ) ]
count = doc xpath ( 'count ( //author ) ' )
plt plot ( x , y , label='data \\cite { < key > } ' )
print ( os lseek ( fd , 0 , os seek_cur ) )
[ x for x in string letters if x in ( y for y in 'bigman on campus ' ) ]
plt show
h sub ( 'h ' , 'f ' )  sub ( 'f ' , 'h ' )
list ( product ( [ a , b , c , d ] , [ x ] ) )
re compile ( ' (   * ) ( ? < ! \\1 ) ' )
a sum ( 1 ) / ( a ! = 0 )  sum ( 1 )
strintersection ( 'asdfasdfasfd ' , 'qazwsxedc ' )
my_string format ( name='minerz029 ' )
os system ( 'powershell mount-diskimage c : \\path\\consumerpreview-32bit iso ' )
var = none
[ 1 , 2 , 3 ]      
return webdriver firefox ( firefox_profile=fp ) 
sum ( 1 for x in l if x )
d [ 'new column ' ] = d apply ( lambda row : func ( row ) , axis=1 )
plt show
print ( chr ( 4 ) )
[ [ 1 , 4 , 7 ] , [ 2 , 5 , 8 ] , [ 3 , 6 , 9 ] ]
print ( 'the total defects for date { } is { } ' format ( d , count ) )
sys stdout flush ( )                          
pd concat ( [ data , ts ] )  sort_index ( )  interpolate ( ) [ ts index ]
math sqrt ( x )
[ ( d [ 'id ' ] , d [ 'name ' ] ) for d in l ]
a xaxis set_minor_formatter ( ticker fixedformatter ( [ '1 ' , '2 ' , '3 ' , '4 ' , '5 ' ] ) )
np set_printoptions ( formatter= { 'float_kind ' : float_formatter } )
lambda x , y : ( x + y , x - y )
[ 1 , 2 , 3 , 4 , 5 , 6 ] [ : :-1 ]
json dump ( data , fp , sort_keys=true , indent=4 )
ax xaxis set_minor_locator ( mdates monthlocator ( ) )
exec ( ' % s = % d ' % ( x , 2 ) )
print ( 'the average is : { :  1 % } ' format ( average ) )
print ( ( lbl winfo_width ( ) , lbl winfo_height ( ) ) )
pos = nx graphviz_layout ( g , prog='dot ' )
parser add_argument ( 'files ' , nargs='* ' )
a [ np mod ( np arange ( a size ) , 4 ) ! = 0 ]
pass
np where ( np isclose ( a , val , tol ) )
`` `` '' c : \\mydir '' '' ''
logger info ( 'test2 ' )
sorted ( list_of_ips , key=lambda ip : struct unpack ( ' ! l ' , inet_aton ( ip ) ) [ 0 ] )
map ( '' join , itertools product ( string ascii_letters + string digits , repeat=3 ) )
return function ( *args , **kwargs ) 
c = np multiply ( a , b [ : , ( none ) ] )
ax plot ( x , y )  
do_stuff ( ) 
root mainloop ( )                                                                
print ( p communicate ( answer ) [ 0 ] )
session commit ( )        
print ( 'hello world ! ' )
df = pd read_csv ( data , delimiter='\\|\\|| ! ! ' , skiprows=1 )
widget show ( )
plt show
print ( unicodedata normalize ( 'nfkd ' , s )  encode ( 'ascii ' , 'ignore ' ) )
np partition ( data , -5 , order='f1 ' ) [ -5 : ] [ : :-1 ]
[ p for p in process_list if all ( e not in p for e in exclude_list ) ]
logging debug ( 'test ' )
np random multinomial ( 1e+18 , [ 1e-17 , 1 ] )
results = pool map_async ( slowly_square , list ( range ( 40 ) ) )  get ( 9999999 )
bad = [ x for x in mylist if x not in goodvals ]
dict [ 'apple ' ]
plt show
num_list [ -9 : ]
decimal decimal ( '1 1 ' )
parser parse_args ( [ ( ' -- ' + p if '= ' in p else p ) for p in sys argv [ 1 : ] ] )
map ( f , my_list )
attacks = [ 'punch ' , 'kick ' , 'stab ' , 'throw ' , 'fling ' , 'uppercut ' ]
matplotlib use ( 'agg ' )
plt tight_layout ( )   
`` `` '' '' '' ''  join ( ( '\n ' + mystr lstrip ( ) )  splitlines ( true ) )
self redirect ( newurl )
return np vstack ( [ np array ( u ) for u in set ( [ tuple ( p ) for p in points ] ) ] )
d = dict ( ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) ) 
dict ( i split ( ' @ ' ) for i in my_list )
[ rex split ( i ) for i in sequence_list ]
struct pack_into ( '=iii ' , buf , 0 , 1 , 2 , 3 )
d [ ( idx ) , : ]
escaped_winpath = ' % r ' % winpath
db session commit ( )        
foo [ arange ( 3 ) ]
im write ( 'file_out- ' + str ( p ) + ' png ' )
print ( ' { } , { } , { } ' format ( foo , bar , baz ) )
ax set_yscale ( 'log ' ) 
`` `` '' hello world with 2 spaces and a tab ! `` `` ''  lstrip ( ' ' )
nf write ( '' join ( str ( random randint ( 0 , 1000 ) ) for _ in range ( 1000 ) ) )
print ( ' , ' join ( lst [ : -1 ] ) + ' & ' + lst [ -1 ] )
hash ( repr ( d ) )
unittest main ( )          
{ d [ 0 ] : d [ 1 : ] for d in data }
os makedirs ( 'folder/subfolder/ ' )
print ( 'key pressed : % s ' % msvcrt getch ( ) )
np delete ( a , list ( range ( 0 , a shape [ 0 ] , 8 ) ) , axis=0 )
pdf = pisa pisadocument ( stringio stringio ( html encode ( 'utf-8 ' ) ) , result )
list ( reversed ( sorted ( a keys ( ) ) ) )
dict ( ( v , v ** 2 ) for v in l )
cv2 namedwindow ( 'preview ' )
print ( ' -- - % s seconds -- - ' % ( time time ( ) - start_time ) )
age_list = [ int ( a [ 0 ] ) for a in ages_iterator ]
fig suptitle ( 'title for whole figure ' , fontsize=16 )
potion_names = [ p name for p in list_of_potions ]
ax xaxis set_minor_locator ( minor_locator )
df = df apply ( lambda x : x str strip ( ) )  replace ( '' , np nan )
print ( json_dumps ( d , ensure_ascii=false )  encode ( 'utf-8 ' ) )
np array ( zip ( list1 , list2 , list3 ) )
print ( today replace ( year=today year + 1 ) )
pd concat ( [ s , pd rolling_mean ( s , window=4 , min_periods=1 ) ] , axis=1 )
bin ( int ( 'ff ' , base=16 ) )  lstrip ( '0b ' )
print ( ' `` a word that needs quotation marks '' ' )
c = np einsum ( 'ia , jb- > abij ' , m conj ( ) , m )
self button [ i ]  grid ( sticky=w + e + n + s , row=row , column=col , padx=1 , pady=1 )
df = sids get_historical ( 'px_last ' , '1/1/2014 ' , '11/12/2014 ' )
time sleep ( 5 )         
print ( dt strftime ( ' % d/ % m/ % y ' ) )
np tensordot ( a , b , axes=1 )
p write ( str ( int ( enable ) ) + '\n ' )
[ list ( t ) for t in zip ( * ( [ iter ( list ( range ( 1 , 10 ) ) ) ] * 3 ) ) ]
( df - 0 2 )  round ( )
'abc ' + str ( 9 ) 
writer writerow ( [ 'foo ' , 'foo , bar ' , 'bar ' ] )
function_that_needs_strings ( *my_list ) 
print ( etree tostring ( root ) ) 
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
matched_lines = [ line for line in my_string split ( '\n ' ) if 'substring ' in line ]
len ( re findall ( ' [ a-z ] ' , string ) )
run ( 'localhost ' , 8080 )
print ( os environ [ 'user ' ] )
t split ( 'total value : ' ) [ 0 ]
datetime datetime fromtimestamp ( 1258378322 0 )
shutil copy2 ( file , '\u05d0 ' )
shutil copy2 ( file , '   ' )
im = image open ( f )
{ 'list key ' : [ 1 , 2 , 3 ] }
pylab fill_between ( x , y2 , color='red ' )
json_data = json loads ( request post get ( 'mydata ' , ' { } ' ) )
df mask ( np random choice ( [ true , false ] , size=df shape , p= [ 0 2 , 0 8 ] ) )
[ x for x in l1 if tuple ( x ) in intersection ]
sorted ( l , key=lambda x : x rsplit ( none , 1 ) [ -1 ] )
root title ( 'your title here ' )
a , b = 5 , 8
print ( pd concat ( [ df1 , df2 , df3 ] , keys= [ 'a ' , 'b ' , 'c ' ] ) )
re sub ( pattern , '' , s )
subprocess popen ( cmd , shell=true , stdout=f , stderr=f )
ct reindex_axis ( a_x_b , axis=1 )  fillna ( 0 )
print ( a [ 1 ] [ 1 ] )
return sum ( 1 + count ( i ) for i in l if isinstance ( i , list ) )
[ ( n [ 'name ' ] , n [ 'value ' ] ) for n in soup findall ( 'input ' ) ]
print ( func ( *args ) )
print ( doc findall ( 'a ' , { 'class ' : 'gp-share ' } ) )
numpy savetxt ( filename , a , newline= ' ' )
weird encode ( 'latin1 ' )  decode ( 'utf8 ' )
np random shuffle ( dataset )
map ( dict , list ( dict ( sorted ( map ( sorted , map ( dict items , s ) ) ) )  items ( ) ) )
plt show
float ( '1 03 ' ) 
print ( 'prob for { } is { } ' format ( k , sum ( i * j for i , j in zip ( v , values ) ) ) )
logging getlogger ( )  info ( 'bb ' )
x t [ : , : , ( none ) ] * x t [ : , ( none ) ]
df fillna ( df mean ( ) )
print ( 'decoded string : ' + decoded decode ( 'base64 ' , 'strict ' ) )
[ ( x and int ( x ) or 0 ) for x in s split ( ' , ' ) ]
app run ( threaded=true )  
file = open ( 'd : \\zzzz\\names2 txt ' , 'r ' , encoding='utf-8-sig ' )
from globals import *
id sendcontrol ( 'm ' )
return jsonresponse ( { 'key ' : 'value ' } )
a split ( )
_create_index_name ( 'people ' , [ 'c1 ' , 'c2 ' , 'c3 ' ] , '_uniq ' )
print ( ' [ { one } , { two } , { three } ] ' format ( three=3 , two=2 , one=1 ) )
s to_frame ( 'count ' )  to_csv ( 'output csv ' , header=true , index_label='gene_name ' )
plt show
turtle pendown ( )
sys exit ( 1 )     
print ( m group ( ) )
max ( index for index , value in data if value == max_value )
print ( chr ( 1 + ord ( '\u0b85 ' ) ) )
mylist sort ( key=lambda val : sort_order [ val [ 1 ] ] )
row append ( row [ 0 ] )
[ name for name in names if any ( [ ( p in name ) for p in pattern ] ) ]
count = np all ( listscore == np array ( [ 2 , 0 ] ) , axis=1 )  sum ( )
plt show
check_call ( [ 'useradd ' , 'test ' ] )
plt plot ( xs , ys , 'r- ' )
np cross ( a [ none ] , b [ : , ( none ) ] )
list ( filter ( func , data ) ) 
os chdir ( os path dirname ( setup_file ) )
print ( customer attrib [ 'name ' ] )
f1 ( 'a ' , 'b ' , 'c ' , 'd ' , kw1='keyw1 ' , kw2='keyw2 ' )
arr = np arange ( 10 )  reshape ( 5 , 2 )
plt scatter ( x , y , c=t , cmap='cmap_name_r ' )
random shuffle ( data )
s rstrip ( ' ; ' )  split ( ' ; ' )
plt show
os system ( 'start ' + filename ) 
b = re sub ( ' ( 0x [ a-fa-f0-9 ] +|\\d+ ) ' , ' [ 0-9 ] ' , a )
print ( unicodedata normalize ( 'nfd ' , text )  encode ( 'ascii ' , 'ignore ' ) )
f seek ( 0 )  
( '^password-changed/ $ ' , 'django contrib auth views password_change_done ' ) ,
max ( s , key=lambda x : x arity ( ) )
[ '1 7 0rc1 ' , '1 7 0rc2 ' , '1 7 0 ' , '1 7 1 ' , '1 11 0 ' ]
writer writerow ( row + [ row [ 0 ] ] )
achievement objects get ( name= '' mirror 's edge\u2122 '' )
f __code__ co_freevars [ 0 ] in creator __code__ co_cellvars
x = np fromfile ( f , dtype=np int )
defaults = { 'move ' : 'no ' , 'perimeter ' : 0 0 , 'gap ' : 'yes ' }
sys stdout = old_stdout
return re search ( '\\d { 2 } : \\d { 2 } ( ? : am|pm ) ' , text , re i )  group ( )
pd to_timedelta ( df )
a = [ none ] * 10
renamer ( '* doc ' , '^new\\ ( (   * ) \\ ) \\ doc ' , '\\1 doc ' )
re findall ( '\\ '' (  + ? ) \\ '' ' , obj )
stream write ( p + '\n ' )
some_func ( )
sys exit ( 1 )      
{ { ( blogpost content | slice ) : ':10 ' } }
np all ( a == b )
a take ( np arange ( 1 , 2 ) , axis=1 )
f close ( )                             
do_something ( ' { } { } { } ' format ( 1 , 2 , 3 ) )
dict ( ( x , a get ( x , 0 ) + b get ( x , 0 ) ) for x in set ( a ) | set ( b ) )
[ ( 'new york jets ' , 100 ) , ( 'new york giants ' , 78 ) ]
versions_list sort ( key=lambda s : list ( map ( int , s split ( '   ' ) ) ) )
base64 urlsafe_b64decode ( uenc )
my_func __doc__
plt xlabel ( 'x-axis ' )
wd = os path dirname ( os path realpath ( sys argv [ 0 ] ) )
locale currency ( 100028282 23 )
deltafetch_enabled = true
b widget ( )  deletelater ( )
dis dis ( withlocals )
pd dataframe ( np column_stack ( sometuple ) , columns= [ 'birdtype ' , 'birdcount ' ] )
np isclose ( a , b )
a [ np triu_indices ( 3 ) ]
cleaned_list = [ _f for _f in some_list if _f ]
pat = re compile ( ' ( ( 1 ( 2 [ 3456 ] +2 ) +1 ) * ) ' )
ymin , ymax = axes get_ylim ( )
self matches = [ s for s in self options if text in s ]
pylab show ( )  
df [ 'prev_temp ' ] = df groupby ( 'location ' ) [ 'temp ' ]  shift ( 1 )
lst = [ float ( x ) for x in lst ]
x resample ( 'd ' , how=lambda x : x mean ( ) if len ( x ) > 0 else 0 )
return re sub ( ' [ ^a-z ] ' , '' , s lower ( ) )
[ tuple ( g [ 1 ] ) for g in itertools groupby ( enumerate ( l ) , lambda i_x : i_x [ 0 ] - i_x [ 1 ] ) ]
wr writerows ( results )
ax set_ylim ( [ -10 , 10 ] )
self txt grid ( row=0 , column=0 , sticky='nsew ' , padx=2 , pady=2 )
np hstack ( ( test , test [ : , ( [ 0 ] ) ] ) )
return '' join ( chr ( ord ( a ) ^ ord ( b ) ) for a , b in zip ( s1 , s2 ) )
lm = sns lmplot ( 'x ' , 'y ' , df , col='z ' , sharex=false , sharey=false )
df [ 'text ' ]  apply ( word_tokenize )
sps_data = sps_data [ np argsort ( label_idx ) ]
cursor execute ( sql , args ) 
ax plot ( list ( range ( 10 ) ) , color='lightblue ' , lw=4 )
result = list ( [ _f for _f in orig if _f ] )
print ( sorted ( x split ( ' , ' ) , key=lambda k : int ( re findall ( ' ( ? < =_g ) \\d+ $ ' , k ) [ 0 ] ) ) )
self root after ( 1 , self openfile )
time strftime ( ' % l : % m % p % z on % b % d , % y ' ) 
return functools partial ( self , obj )
matrix [ 0 ]  pop ( )
[ 'scorch ' , 'scorching ' , 'dump ' , 'dumpster ' , 'dumpsters ' ]
foo ( )      
sorted_docs_info = collections ordereddict ( sorted ( docs_info items ( ) ) )
plt show
{ 'foo ' : 'content for foo ' , 'bar ' : 'content for bar ' }
file close ( )    
collections counter ( 'xyzabcxyz ' )
os remove ( '/var/run/foo lock ' )
fig savefig ( 'thumb png ' )
dest = '\n' join ( line for line in src split ( '\n ' ) if line [ :1 ] ! = ' # ' )
del l [ : ]
next ( g ) 
a = np array ( [ 1 , 2 , 3 , 4 , 5 ] )
[ ( a + b ) for a , b in zip ( a , b ) ]
matplotlib pyplot scatter ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , color= [ 'red ' , 'green ' , 'blue ' ] )
open ( myfile , 'w ' )  writelines ( lines )
time sleep ( 0 1 )     
time sleep ( interval ) 
[ ( x + y ) for x , y in product ( '12345 ' , 'ab ' ) ]
ylim ( -5 , 5 )
[ tag decompose ( ) for tag in soup ( 'script ' ) ]
time sleep ( 1 )                                
file_dialog_filetypes = ( 'word list ' , '* tldr ' ) , ( 'all files ' , '*   * ' )
[ [ ' gim me ' , [ 'some ' , [ 'nested ' , ' , ' , 'nested ' , [ 'lists ' ] ] ] ] ]
buckets = [ [ ( 0 ) for col in range ( 5 ) ] for row in range ( 10 ) ]
from functools import reduce reduce ( lambda x , y : x / y , l )
load_source ( module_name , path_to_file )
s1 = pd merge ( dfa , dfb , how='inner ' , on= [ 's ' , 't ' ] )
sys path insert ( 0 , 'lib ' )
templates_path = [ '_templates ' ]
pd merge ( pd merge ( df1 , df2 , on='name ' ) , df3 , on='name ' )
`` `` '' 1989 , 1990,1991 '' '' ''  replace ( ' ' , '' )  split ( ' , ' )
1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0
set ( map ( frozenset , lst ) )
print ( list ( csv reader ( f ) ) )
lastprice = stock iloc [ -1 ] [ 'close ' ]
dx , dy = -dy , dx
req add_header ( 'referer ' , 'https : //www site com/path ' )
bin ( 8 )
plt show
g0 plot ( )
a [ :1000 ] = [ 0 ] * 1000
print ( df [ 'a ' ]  tolist ( ) )
items sort ( )
br retrieve ( 'http : //mog com/my_mog/playlists ' , 'playlist html ' )
s1 combine_first ( s2 )
int ( hashlib md5 ( 'hello , world ! ' )  hexdigest ( ) , 16 )
a [ tuple ( rc1 ) ] , a [ tuple ( rc2 ) ] = a [ tuple ( rc2 ) ] , a [ tuple ( rc1 ) ]
plt legend ( )  
a , b , c , d = node split ( '/ ' ) [ 1 : ]
p stdin write ( 'q\n ' )
[ list ( g ) for _ , g in groupby ( bool_array ) ]
df = df divide ( df sum ( axis=1 ) , axis=0 )
sys stdout flush ( )                           
[ word for word in l if word isalpha ( ) ]
return np array ( [ np where ( np in1d ( array , matched ) ) [ 0 ] for array in arrays ] )
print ( len ( set ( map ( len , my_lists ) ) ) < = 1 )
sys stdout flush ( )                            
dict ( d ) 
data ix [ : , ( [ 'ralph ' , 'john ' ] ) ]
struct unpack ( ' < f ' , decode [ 0:4 ] )
ax plot ( x , y , 'bo- ' )
array ( [ [ 5 , 12 ] , [ 21 , 32 ] ] )
dict ( item split ( ' ' ) for item in s split ( '\n ' ) )
return urllib request urlopen ( url )
process close ( )
simplejson dumps ( { 'foo ' : 'bar ' } )
datetime strptime ( '2014-12-04 ' , ' % y- % m- % d ' )  date ( ) 
list = [ ( str ( a [ i ] ) + str ( b [ i ] ) ) for i in range ( len ( a ) ) ]
pd read_csv ( stringio ( s ) , quotechar= ' '' ' , skipinitialspace=true )
' % 6   *f ' % ( 2 , 1 234 )
s = ' ' join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) )
longest = s1 if len ( s1 ) > len ( s2 ) else s2
self gsheet1 plot ( [ 1 , 2 , 3 , 4 , 5 ] , [ 2 , 1 , 4 , 2 , 3 ] )
del d [ max ( d , key=d get ) ]
nextthing = random choice ( list ( scoreboard elements ( ) ) )
ax margins ( 0 1 , 0 1 )
[ i for i , ( l1 , l2 ) in enumerate ( zip ( list1 , list2 ) ) if l1 > = 1 and l2 == 0 ]
print ( any ( checklower == val lower ( ) for val in [ 'qwert ' , 'asdf ' ] ) )
db session commit ( )         
   
print ( ' %  2f ' % 315 15321531321 )
'\n' join ( [ ' , ' join ( h ) for h in zip ( *df columns ) ] ) + '\n '
[ a __setitem__ ( 'price ' , 0 if a [ 'price ' ] == '' else a [ 'price ' ] ) for a in data ]
urlpatterns += patterns ( '' , url ( '^profile/ ( ? p\\d+ ) / $ ' , '     ' , name='profile ' ) )
np einsum ( 'ij , jk- > ikj ' , a , b )  reshape ( 8 , 3 )  t
`` `` '' '' '' ''  join ( l ) 
int ( re search ( '\\d+ ' , string1 )  group ( ) )
url ( '^register-by-token/ ( ? p < backend > [ ^/ ] + ) / $ ' , views register_by_access_token ) ,
h = sp csr_matrix ( h )
ax set_zlabel ( 'label text ' , rotation=90 )
plt show
{ k : list ( g ) for k , g in groupby ( sorted ( l , key=len ) , len ) }
x [ np isnan ( x ) ] = 0
fig subplots_adjust ( wspace=0 )
plt ylabel ( 'y ' , rotation=0 )
ax2 set_xticklabels ( [ ] )
ctypes windll winmm mcisendstringw ( 'set d_drive door open ' , none , 0 , none )
s encode ( 'unicode-escape ' )
print ( square ( [ 1 , 2 , 3 ] ) ) 
df [ 'osiguranika ' ]  plot ( ax=axs [ 1 ] )
print ( link get ( 'href ' ) )  
return render_template ( 'p html ' , posts=posts )
sns_plot savefig ( 'output png ' )
df drop_duplicates ( )  
a [ [ [ 0 ] * 5 , [ 1 ] * 5 ] , index ]
button click ( )
smile = [ [ 255 ] , [ 129 ] , [ 165 ] , [ 129 ] , [ 165 ] , [ 189 ] , [ 129 ] , [ 255 ] ]
cmap = plt get_cmap ( 'cool ' , 5 )
ctypes c_long ( 1 )  value
numpy array ( point_buffer , dtype=numpy float32 )
print ( 'my program took ' , time time ( ) - start_time , 'to run ' )
first_name_dict = { 'david ' : [ 'dave ' , 'davy ' ] , 'lucas ' : [ 'luke ' ] }
line = re sub ( ' < / ? \\ [ \\d+ > ' , '' , line )
df = df set_index ( [ 'a ' , 'b ' , 'c ' ] )  unstack ( 'c ' )
ax set_ylim ( ( valmin , valmax ) )
np delete ( a , [ 2 , 4 , 5 ] )
entity = mymodel all ( )  order ( 'rand_num ' )  get ( )
document = models filefield ( upload_to=upload_to ( 'my/path ' ) )
im show ( ) 
cv cvtcolor ( img , gray , cv cv_bgr2gray )
x [ 2:6 ] = [ ]
driver = webdriver chrome ( chrome_options=chromeoptions )
sys exit ( main ( sys argv ) )
url ( '^no_monkeys/ $ ' , 'views nomonkeys ' , { } , 'no-monkeys ' ) ,
x = array ( [ [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 1 , 2 ] , [ 3 , 2 , 0 ] ] )
[ '' join ( x ) for x in zip ( l1 , l2 , l3 , l4 ) ]
df [ 'brandname ' ]  replace ( to_replace [ 'abc ' , 'ab ' ] , value='a ' , inplace=true )
[ '000 ' , '001 ' , '010 ' , '011 ' , '100 ' , '101 ' , '110 ' , '111 ' ]
df loc [ df groupby ( 'type ' )  votes agg ( 'idxmax ' ) ]
logger debug ( 'main message ' )
self assertequal ( json loads ( call_args [ 0 ] ) , expected )
parser add_option ( '-f ' , ' -- foo ' , dest='foo ' , help='enable foo ' )
user objects create_user ( username='uname ' , password='mypass ' )
plt show
cv2 namedwindow ( 'preview ' ) 
root xpath ( '//tr/td//text ( ) ' )
a [ numpy nonzero ( numpy in1d ( a , b ) ) ]
app = webapp2 wsgiapplication ( [ ( '/ ' , mainhandler ) ] , debug=true )
np genfromtxt ( txt , delimiter='\t ' )
int_list = [ int ( i ) for i in line ]
the_sum = sum ( a [ k ] * b [ k ] for k in keys )
print ( root findall ( ' //a [ @ y ] ' ) )
cursor execute ( 'select * from table where example= % s ' , t )
plot_clustered_stacked ( [ df1 , df2 , df3 ] , [ 'df1 ' , 'df2 ' , 'df3 ' ] )
dict ( ordereddict ( [ ( 'method ' , 'constant ' ) , ( 'data ' , '1 225 ' ) ] ) ) 
pickle dumps ( data , 0 )
print ( re sub ( '' , 'blah ' )  encode ( 'utf-8 ' ) )
ax plot ( ts [ 0 ] , ys t , color='r ' , lw=0 5 , alpha=0 5 )
df set_index ( 'dt ' , inplace=true )
newmenu add_command ( label= ' { 0 } ' format ( i ) , command=lambda x=i : function1 ( x ) )
self bind ( wx evt_left_down , self onleftdown )
dates append ( datetime strptime ( row [ 5 ] , ' % a , % d % b % y % h : % m : % s % z ' ) )
df [ 'a ' ] [ df [ 'a ' ] > = maxval ] = maxval
exit ( 0 )
any ( c isalpha ( ) for c in string_2 )
sum ( map ( int , zip ( *table ) [ -1 ] ) )
float ( 2 * 10 ** 308 )
self legend figure canvas draw ( )
matplotlib use ( 'wxagg ' )
logging error ( 'error message ' )
[ [ ] for _ in range ( 2 ) ]
{ k : mylist count ( k ) for k in set ( mylist ) }
sum ( val for val in l1 if isinstance ( val , numbers number ) )
ax set_ylabel ( 'v ' )
subprocess popen ( [ 'virtualenv2/bin/python ' , 'my_other_script py ' ] )
myclass = type ( 'myclass ' , ( ) , { } )
subprocess call ( 'mybat bat ' , stdin=subprocess devnull )
sum ( counter_list , counter ( ) )
print ( str ( item [ 0 ] ) + ' , ' )
plt show
dflist = [ df1 , df2 , df3 , df4 , df5 , df6 , df7 , df8 ]
x astype ( int )
sys executable
logger debug ( 'test ' )
my_out_file = open ( '/home/mytrace txt ' , 'w ' )
sys stdout flush ( )                             
con commit ( ) 
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] print ( [ [ l [ : i ] , l [ i : ] ] for i in range ( 1 , len ( l ) ) ] )
logging handler __init__ ( self )
tom = [ a , b , c ]
print ( 'using epr c api sources at `` { 0 } '' ' format ( eprsrcdir ) )
pdb set_trace ( )             
ax xaxis set_major_locator ( scaledlocator ( dx=6 ) )
result = sum ( timedeltas , datetime timedelta ( ) )
ts [ datetime ( 2011 , 1 , 8 ) : ] [ 0 ]
print ( g ( 1 , 2 , 3 , 4 , 5 ) )
a1 = np genfromtxt ( 'urls txt ' , dtype='u ' )
( centroids - x mean ( ) ) / x std ( )
driver get ( 'http : //www google com ' ) 
cv cvtcolor ( cv_img , cv_img , cv cv_rgb2bgr )
int from_bytes ( '\x00\x00\x01 ' , 'big ' )
sys stdout flush ( )                              
print ( [ ( ( a + b ) / 2 ) for a , b in zip ( data [ : :2 ] , data [ 1 : :2 ] ) ] )
secnd_set = set ( map ( tuple , secnd_list ) )
session commit ( )         
pyplot axis ( 'scaled ' )
request = self factory get ( reverse ( 'home ' ) , http_user_agent='mozilla/5 0 ' )
list ( something_convertible_to_list )  remove ( 'item ' )
cv2 destroyallwindows ( )        
return [ a for a , b in zip ( nums , nums [ 1 : ] + [ not nums [ -1 ] ] ) if a ! = b ]
django setup ( )
' { 0 } { 1 } { 1 } ' % ( 'foo ' , 'bar ' )
ax bar ( list ( range ( len ( dates ) ) ) , values )
plt show
sys exit ( 0 )           
ax2 = ax twinx ( )
bool ( list ( somedict keys ( ) ) & set ( someset ) )
[ { 'age ' : 7 , 'name ' : 'pam ' } ]
print ( weekdays ( 'mercredi ' ) )
`` `` '' '' '' ''  join ( mystr splitlines ( true ) )
print ( 'content-type : text/html ' )
dist = math hypot ( x2 - x1 , y2 - y1 ) 
rdd1 cartesian ( rdd2 )
self bind ( ' < motion > ' , self onmotion )
columns = { ( 0 ) : [ 0 ] , ( 1 ) : [ 1 ] , ( 2 ) : [ 0 , 6 ] , ( 4 ) : [ 3 ] , ( 5 ) : [ 0 , 6 ] , ( 7 ) : [ 2 ] }
someclassname ask ( )
[ { 'id ' : 2 , 'name ' : 'squats ' , 'wrs ' : [ [ '55 ' , 9 ] ] } ]
rbs = np array ( [ ish [ 4 ] for ish in realbooks ] )
plt show
a sort ( key=lambda x : x [ 0 ] )
`` `` '' { } { } '' '' ''  format ( foo , baz )
[ e for e in lelist if e in lestring ]
pygame draw circle ( screen , ( 0 , 0 , 0 ) , ( 100 , 100 ) , 15 , 1 )
content_sizer add ( grid_1 , 1 , wx expand | wx all , 3 )
np where ( np all ( np all ( win_img == pattern , axis=-1 ) , axis=-1 ) )
str2bool ( 'yes ' )
print ( a encode ( 'cp1252 ' )  decode ( 'utf-8 ' )  encode ( 'cp1252 ' )  decode ( 'utf-8 ' ) )
plt plot ( [ 1 , 2 , 3 ] , 'r ' )
__import__ ( 'temp/a40bd22344 ' )
sc addpyfile ( '/path/to/botree py ' )
return render_to_response ( 'group_details html ' , { 'group ' : group } )
mymodel objects filter ( pk=instance id )  update ( **data )
sys stderr write ( 'redirected ! \n ' )
mydic = { ( i + 1 ) : o [ 'name ' ] for i , o in enumerate ( iterload ( f ) ) }
`` `` '' , `` '' ''  join ( set_3 )
`` `` '' `` '' ''  join ( hxs select ( '//body//p//text ( ) ' )  extract ( ) )
self cursor execute ( 'select weight from equipment where name = ? ' , [ item ] )
plt ylabel ( 'some numbers ' )
{ { ' $ { : , 2f } ' format ( 543921 9354 ) } }
log setlevel ( logging debug )
d = dict ( zip ( [ o name for o in object_list ] , object_list ) ) 
url = 'https : //api imgur com/3/upload json '
np einsum ( 'ijkl , jl ' , h , x )
struct unpack ( 'f ' , file read ( 4 ) )
tags = soup find_all ( lambda tag : 'src ' in tag attrs )
with open ( 'failed py ' , 'w ' ) as file : file write ( 'whatever ' )
f read ( ) 
time sleep ( 10 )   
subprocess call ( args , stdout=fnull , stderr=fnull , shell=false )
sys path append ( os path abspath ( '/home/el/foo4/stuff ' ) )
[ t for t in enumerate ( l ) ]
plt xlim ( -2 * np pi , 2 * np pi )
print ( ( ' %  4f ' % n ) [ :6 ] )
[ np ma array ( arr , mask=~c )  argmax ( ) for c in cond ]
a = [ 1 , 2 ]
cv2 destroywindow ( 'preview ' )
df loc [ mask , col ] = df loc [ mask , 'boost4 ' ]
print ( cls __name__ )
print ( len ( item_dict [ 'result ' ] [ 0 ] [ 'run ' ] ) )
lst sort ( )  
return dict ( ( k , v ) for k , v in dictionary items ( ) if begin < = k < = end )
df columns = [ 'fabl ' , 'hinoon ' ]
fo close ( )
df fillna ( method='ffill ' )
{ 'company ' : 'sctl ' , 'address ' : 'mumbai ' , 'location ' : 'rcp ' , 'name ' : 'pradeep ' }
print ( 'child { } ' format ( os getpid ( ) ) )
print ( args )
from functools import reduce reduce ( tuple __add__ , [ ( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) ] )
df ix [ 0 , 'col_name ' ] = x
[ y for y in x for x in data ] 
return super ( protectedview , self )  dispatch ( *args , **kwargs )
sel click ( `` //* [ @ id='linkout-icon-unknown-vir_full ' ] '' )
[ [ 1 ] , [ 3 ] , [ 7 ] , [ 8 ] , [ 9 ] ]
y = [ x for x in list ( dict keys ( ) ) if dict [ x ] > 0 0 ]
print ( a [ key ] )
return qs distinct ( )
self kwargs [ 'id ' ]
b = [ a ix [ i ] for i in a index if sorted1 [ i ] > = sorted2 [ i ] ]
bids sort ( key=int , reverse=true )
{ { ( sale validity | date ) : 'd-m-y ' } }
msgurl = record [ 'entities ' ]  get ( 'urls ' )
[ v for k , v in enumerate ( mylist ) if k % 2 == 0 ]
df [ 'month_15 ' ]  astype ( 'datetime64 [ d ] ' )  values dtype
unp = msgpack unpackb ( f read ( ) )
`` `` '' convert a windows path to a cygwin path '' '' ''
mydict [ new_key ] = mydict pop ( old_key )
setattr ( self , key , value ) 
re split ( 'num\\d { 2 } ' , text ) [ 0 ]
next ( i for i , j in enumerate ( ' xyz ' ) if j strip ( ) )
df set_index ( 'dt ' , inplace=true ) 
a = dict fromkeys ( list ( range ( n ) ) )
logging info ( 'hello ' ) 
plt show
struct unpack ( ' < i ' , chunk + ( '\x00 ' if chunk [ 2 ] < 128 else '\xff ' ) )
np in1d ( data , np hstack ( test ) )  reshape ( data shape )
( len ( word ) for word in wordslist )
self data += self ser read ( )
main ( )       
ws add_image ( img )
f = open ( os path join ( sub_dir , filename ) , 'r ' )
a __dict__ [ 'b ' ]
df reset_index ( level=1 , drop=true , inplace=true )
df stack ( ) [ df stack ( )  values == 1 ]  reset_index ( )
match2 group ( )
self foo ( )
urllib parse quote_plus ( a )
the_doc append ( field2 ( 'another value again ' , name='hithere ' ) )
`` `` '' ( ? p < name > [ a-za-z\\t   ] + ) '' '' ''
return any ( char isdigit ( ) for char in s )
ax yaxis set_ticks ( [ 0 , 2 , 4 , 8 ] )
bttn_0 grid ( row=5 , column=0 , pady=5 , columnspan=2 )
driver = webdriver firefox ( firefox_profile=profile )
re findall ( ' [ a-z ] [ ^a-z ] * ' , 'abc ' )
hashlib md5 ( 'fred ' )
d = dict ( ( str ( n ) , list ( range ( 20 ) ) ) for n in range ( 1000000 ) )
[ s [ a : b ] for a , b in zip ( accumulate ( [ 0 ] + keys ) , accumulate ( keys ) ) ]
df t drop_duplicates ( )  t 
os rename ( fn , fn + ' pdf ' )
signal signal ( signal sigint , signal sig_ign ) 
webbrowser get ( 'firefox ' )  open_new_tab ( 'http : //www google com ' )
pylab show ( )   
lines sort ( key=lambda x : int ( x split ( ) [ 0 ] ) )
[ 0 ] + [ ( i + 1 ) for i in [ 4 , 9 , 12 , 14 , 18 ] ] + [ len ( bool_array ) ]
print ( ' { 0 } ' format ( s ) )
a = np array ( [ [ np array ( [ [ 2 , 2 ] ] ) , np array ( [ [ 3 , 3 ] ] ) ] ] )
s = s replace ( ' % ' , ' % % ' )
warnings simplefilter ( 'always ' , userwarning )
[ 3 , 4 , 5 , 6 , 7 ]
datetime datetime combine ( tdate , datetime time ( ) )
subprocess call ( my_cmd , stdout=outfile )
x = np random randint ( 0 , 20 , 1000000 )
pd isnull ( df )  any ( 1 )  nonzero ( ) [ 0 ]
s = s replace ( 'z ' , 's ' ) s split ( 's ' )
plt plot ( x , y )    
super ( dynamicform , self )  __init__ ( *args , **kwargs )
`` `` '' ( ? = ( { } ) ) '' '' ''  format ( 's\\+' join ( '\\w+ ' for i in range ( n ) ) )
os startfile ( 'c : / ' )
str ( float ( '123 4506780 ' ) )
out append ( dict ( zip ( labels , line split ( ' # ' ) ) ) )
print ( '\\u0631\\u064e\\u062c\\u0627 ' )
ax xaxis set_major_formatter ( mdates dateformatter ( ' % y ' ) )
print ( int ( '0x10 ' , 16 ) )
[ 1 , 2 , 3 , 4 , 3 , 4 , 5 , 6 , 5 , 6 , 7 , 8 , 7 , 8 , 9 , 10 , 9 , 10 , 1 , 2 ]
print ( pix [ x , y ] )
group_sum = df groupby ( [ 'name ' , ' > 0 ' ] ) [ 'tickets ' ]  sum ( )
app debug = true   
os path abspath ( checkip __file__ )
pprint pprint ( obj )
client set_option ( new_url )
kdll = ctypes windll loadlibrary ( 'kernel32 dll ' )
set ( [ 1 , 2 , 6 , 8 ] ) - set ( [ 2 , 3 , 5 , 8 ] )
df resample ( 'd ' )  sum ( )  fillna ( 0 )
a [ 0:4 ] [ 1 ]
annotate ( num_products=count ( 'product ' ) )
re sub ( pattern , replacement , text )
os system ( 'echo this is also redirected ' )
print ( pivot_table ( df , rows= [ 'x2 ' ] , cols= [ 'x ' ] , aggfunc=np sum ) )
output += os read ( fd , 4096 )  decode ( 'utf-8 ' )
master grid_columnconfigure ( 0 , weight=1 )
root mainloop ( )                                                                 
[ [ 4 , 3 , 2 , 1 ] , [ 4 , 3 , 2 , 1 ] ]
fig savefig ( 'test png ' , dpi=300 )
return str ( request args getlist ( 'param ' ) )
plt show
print ( re findall ( '\\ ( [ ^ ( ) ] *\\ ) ' , string ) )
ast literal_eval ( some_string )
a __getitem__ ( slice ( 0 , 1 ) )  __setitem__ ( 0 , 5 )
strings = 'foo bar apple' split ( )
time sleep ( 0 )
bids append ( bid )
s sendmail ( me , you split ( ' , ' ) , msg as_string ( ) )
os path dirname ( os path dirname ( file ) )
thread ( target=p start )  start ( )
plt savefig ( '/tmp/test png ' , dpi=80 )
map ( itemgetter ( 'name ' ) , li )  index ( 'pam ' )
sys modules [ 'google ' ]
convert_lists donothing ( [ 1 , 2 , 3 , 0 , 4 , 5 , 6 ] )
list ( foo )
os remove ( f )
driver implicitly_wait ( 30 )
print ( counter most_common ( 3 ) )
[ [ ( k , v ) for k , v in sub_list if v is not none ] for sub_list in oldlist ]
( ( m get ( k , k ) , v ) for k , v in list ( d items ( ) ) )
ax xaxis set_major_formatter ( tkr funcformatter ( formatter ) )
logging info ( 'hello ' )  
root columnconfigure ( 0 , weight=1 )
sum ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ ] ) == [ 1 , 2 , 3 , 4 ]
[ [ 2 , 4 ] , [ 5 , 7 ] , [ 7 , 8 ] , [ 9 , 43 ] , [ 4 , 6 ] ]
return datetime now ( )  strftime ( ' % a ' )
timeit timeit ( partial ( function , x ) )
plt plot ( [ 1 , 2 ] , lw=4 , c=seaborn xkcd_rgb [ 'baby poop green ' ] )
`` `` '' '' '' ''  join ( '' join ( item ) for item in zip ( u , l ) )
pylab fill_between ( x , y1 , color='red ' )
y = x subs ( { a : b , b : a } , simultaneous=true )
submit_something = submitfield ( 'add something ' )
writer writerow ( row )  
print ( ' { 0 } = { 1 } ' format ( key , value ) )
round ( decimal ( '33 505 ' ) , 2 )
f close ( )                              
ordereddict ( ( k , queue [ key ] ) for k in key_order )
my_model save ( ) 
return send_file ( img_io , mimetype='image/jpeg ' )
[ { y : x [ y ]  lower ( ) } for x in messages for y in x ]
integer setparseaction ( lambda t : int ( t [ 0 ] ) )
return [ list ( x ) for x in a_strpadded ]
contents = open ( filename )  read ( )
sorted ( l , key=lambda x : '' join ( ( x [ : -1 ] , ' { ' ) ) if x [ -1 ]  isdigit ( ) else x )
print ( np where ( a == a min ( ) ) )
return super ( forms modelform , self )  save ( commit )
[ item for item in l for repetitions in range ( 2 ) ]
df iloc [ sort_by_custom_dict ( df [ 'm ' ] ) ]
`` `` '' { 0 : b } '' '' ''  format ( 10 )
df to_csv ( 'test csv ' , sep='\t ' )
{ d [ 'city ' ] : d [ 'country ' ] for d in li }
data = ' '' this '' , '' is '' , '' a '' , '' test '' '
[ x for x in matrix if x [ 2 ] == 1 0 ]
self set_edgecolor ( rcparams [ 'axes edgecolor ' ] )
d1 groupby ( 'examenyear ' )  apply ( zahloccurence_0 )
re split ( ' ( \\w+ ) ' , 'words , words , words   ' )
worksheet delete_row ( 42 )
response = urllib request urlopen ( req )  read ( )
[ min ( j ) for i , j in itertools groupby ( a , key=lambda x : x [ :7 ] ) ]
rgb_img = cv2 cvtcolor ( img , cv2 color_bgr2rgb )
my_result = cb_function ( )
return httpresponsenotallowed ( [ 'post ' ] )
urllib request urlretrieve ( stream_url , target_path )
d update ( ( k , v * 0 5 ) for k , v in list ( d items ( ) ) )
input ( '\n\npause ' )
conn = s3connection ( ' < aws access key > ' , ' < aws secret key > ' )
plt show
res = os system ( sys argv [ 1 ] , sys argv [ 2 ] )
`` `` '' abcd '' '' ''  encode ( 'hex ' )
[ 1 2836621854632262 , 3 9203405733007317 ]
return os environ get ( 'user_is_admin ' , '0 ' ) == '1 '
cursor execute ( query_string , varlist )
[ m group ( ) for m in re finditer ( ' ( ( \\w ) \\2 ) + ' , 'bookkeeper ' ) ]
signal signal ( signal sigint , signal_handler ) 
x = [ [ none ] * 5 ] * 6
result [ [ ( 'b ' , 'mean ' ) , ( 'c ' , 'mean ' ) ] ]
json dumps ( { 'a ' : 5 , 'b ' : 6 , 'c ' : 7 } , sort_keys=false )
self bind ( wx evt_paint , self _onpaint )
return '' join ( sorted ( string ) )
fcntl flock ( g , fcntl lock_un )
[ [ 'a ' ] , [ 'b ' , 'c ' ] , [ 'd ' ] ]
print ( json dumps ( json loads ( json_string ) ) )
[ listoflines [ i ] for i in sortedindex ]
result = model ( collection )  find_one ( { user : 'joe ' } )
plt show
return a b c if hasattr ( a , 'b ' ) and hasattr ( a b , 'c ' ) else none
numpy zeros ( ( 10 , 4 , 100 ) )
os path split ( 'product/bin/client ' )
data = '' join ( code get ( i , ' ' ) for i in data )
br set_response ( resp )
print ( chunked_topsort ( [ 'ac ' , 'bc ' , 'bde ' , 'be ' , 'fbcg ' ] ) )
cursor execute ( 'insert into     ' )
[ b append ( item ) for item in a if item not in b ]
df groupby ( [ 'b ' ] ) [ 'c ' ]  transform ( date_test )  astype ( 'int64 ' )
a = np fromfile ( f , dtype=np uint32 )
print ( '\u3053 ' )
time mktime ( d timetuple ( ) )
print ( 'value is `` % d '' ' % value )
( n + 1 ) ** 2 == n ** 2 + ( 2 * n + 1 )
[ [ [ 0 , 0 , 1 ] , [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ]
data ix [ '2010-01-04 ' ]
print ( re sub ( '^\\s*\\s ' , '' , s ) )
sys _getframe ( )  __code__ co_argcount
logging basicconfig ( level='info ' , handlers= [ handler ] )
array ( [ x [ 0 , 0 ] , x [ 1 , 0 ] , x [ 2 , 0 ] ] )
s = '' join ( random choice ( '0123456789abcdef ' ) for _ in range ( 10 ) )
gems add ( gem )
`` `` '' u'\\'foo ( var=123 ) \\ ' < div id= '' divvy '' > 123 < /div > ' '' '' ''
dict ( zip ( keys , values ) ) 
function ( )
session close ( )
sys exit ( app exec_ ( ) )         
split_str groupby ( [ 0 , 1 ] ) [ 2 ]  apply ( fnc )
requests post ( 'http : //example com/ ' , json= { 'hello ' : 'world ' } )
print ( '\n ' )
sys stdout flush ( )                               
myfile write ( buffer ( c_uncompdata_p raw , 0 , c_uncompsize ) )
np asarray ( t )
return pd dataframe ( series_data , columns=series_name )
plt show
{ 'df { 0 : d }  close' format ( idx + 1 ) : df [ 'close ' ] for idx , df in enumerate ( dflist ) }
print ( '7\xe6\x9c\x8810\xe6\x97\xa5' decode ( 'utf-8 ' ) )
sys getsizeof ( x )
print ( '*warn* danger will robinson ' )
df [ 'first_name ' ] = df [ 'id ' ]  map ( lambda x : names [ x ] [ 0 ] )
data [ data groupby ( 'tag ' )  pid transform ( len ) > 1 ]
user objects filter ( friends='tom ' )  order_by ( '-pet__age ' ) [ :10 ]
`` `` '' [ bb ] eta ( \\d+| $ |version ) |^ [ bb ] eta `` '' ''
sorted ( list_of_edges , key=lambda edge : edge [ 'weight ' ] )
array astype ( 'int16 ' )  tofile ( filename )
plt savefig ( 'outfig ' )
myl [ : ] = [ ( x if x ! = 4 else 44 ) for x in myl ]
{ 'a ' : 1 , 'b ' : 2 , 'c ' : 3 }
format ( num % ( 1 < < 16 ) , '016b ' )
data [ [ 'a ' , 'c ' ] ]
assert exception __class__ __name__ == 'nameerror '
df mycolumn map ( func )
df idxmax ( axis=1 ) 
nested_lst_of_tuples = [ tuple ( l ) for l in nested_lst ]
appcfg py
links = soup find_all ( 'a ' , { 'id ' : re compile ( '^c\\d+ ' ) } )
~s index isin ( list ( 'bde ' ) )
app mainloop ( )      
map ( ord , 'hello ' )
self update ( dict ( *args , **kwargs ) )
match = re search ( '\\d { 4 } -\\d { 2 } -\\d { 2 } ' , text ) date = datetime strptime ( match group ( ) , ' % y- % m- % d ' )  date ( )
cmap ( np linspace ( 0 2 , 0 8 , 100 ) )
getattr ( 'a ' , 'isalpha ' ) ( )
{ value : key for key , values in list ( my_map items ( ) ) for value in values }
abort ( '********* failed to execute deploy ! ********* ' )
self _driver quit ( )
matplotlib use ( 'gtk ' )
len ( a ) - len ( a lstrip ( ) )
plt show
self append ( x )
sorted ( l ) == list ( range ( min ( l ) , max ( l ) + 1 ) )
print ( u8 decode ( 'utf-8 ' ) )
os stat ( 'test txt ' )
file_obj seek ( 0 )
url ( '^sitemap\\ xml $ ' , sitemap , { 'sitemaps ' : sitemaps } ) ,
link_model = 'someproject somemodel '
print ( get_ip ( ) )
`` `` '' { 0 : n } '' '' ''  format ( 1234567890 )
a = [ [ 1 , 2 , 3 , 4 , 5 ] for _ in range ( 4 ) ]
plt show
grouped apply ( wavg )
matplotlib use ( 'tkagg ' ) 
f = open ( os path join ( path , infile ) , 'r ' )
results = cursor fetchone ( )
s lower ( )
map ( ord , s )
app run ( port=0 , debug=true )
[ [ 1 , 2 ] , [ 3 , 4 ] ]
model fit ( df drop ( 'y ' , axis=1 ) , df [ 'y ' ] )
`` `` '' , '' '' ''  join ( sorted ( set ( strs ) ) )
plt show
a [ : , ( b ) ]
sorted ( l , key=operator itemgetter ( 1 ) ) 
df set_index ( [ 'r_number ' , 'c_number ' ] )  avg unstack ( level=1 )
test = test decode ( 'cp1252 ' )  encode ( 'utf8 ' )
len ( mylist ) - mylist [ : :-1 ]  index ( myvalue ) - 1
len ( s ) 
self mywidget helloworldbutton clicked connect ( self slot1 )
plt show
self grid_columnconfigure ( 0 , weight=1 ) 
n = str ( input ( ) )
map ( sum , l ) == [ n ] * len ( l )
f write ( content )
mratings mean ( axis=1 )
df [ 'date ' ]
pip3 - -version
plt show
df = df sort ( [ 'count ' , 'colfromindex ' ] )
df2 set_index ( 'filename ' , inplace=true )
plt show
fu_list = [ ( k , fus_d get ( k ) , fus_s get ( k ) ) for k in s ]
np sum ( c [ : , 1 : ] == c [ : , : -1 ] , axis=1 )
sum ( n * ( n - 1 ) // 2 for n in list ( index2count values ( ) ) )
p [ 0 ] , p [ 1 ]
print ( dt strftime ( ' % s ' ) )
myclass property1
r hmget ( 'myhash ' , 'field0 ' )
a = [ int ( x ) for x in input ( )  split ( ) ]
[ d for d in test_list if d [ 'id ' ] == 'an id ' ]
all_strings = [ s for string_list in list ( my_dict values ( ) ) for s in string_list ]
`` `` '' { : < 15 } '' '' ''  format ( a )
vsampled = numpy interp ( numpy arange ( t [ 0 ] , t [ -1 ] ) , t , v )
re findall ( ' ( \\d { 2 } ) ( 020511|00 ) ' , thestr )
[ '1 ' , '2 ' , '3 ' , '4 ' , '5 ' , '6 ' , '7 ' , '8 ' , '9 ' ]
lm prob ( 'spain ' , [ 'rain ' , 'in ' ] )
n = subelement ( root , ' { http : //purl org/dc/elements/1 1 } foo ' )
plt scatter ( df col1 , df col2 , s=df col3 )
print ( len ( glob glob ( '/tmp/* ' ) ) )
tablero = [ ]
population = list ( itertools chain ( fhd , fhet , fhr ) )
p getfitness ( )
[ path for path in glob iglob ( ' / ' + ' [ 0-9 ] ' * 14 ) if os path isdir ( path ) ]
jinja2 template ( ' { { `` ``  join ( bar ) } } ' )  render ( bar='baz ' )
worst = sorted ( player ( v , k ) for k , v in list ( d items ( ) ) )
[ 6 , 5 , 1 ]
json dumps ( list ) 
[ 'arthur ' , 'belling ' ]
from functools import reduce reduce ( lambda x , y : x + list ( y ) , l , [ ] )
return f ( *args , **kwargs ) 
df [ df [ 'a ' ]  str contains ( 'hello|britain ' ) ]
df_test iloc [ 0 ]
df [ 'new_col ' ] = se values
pdb set_trace ( )              
print ( df [ [ 'a ' , 'b ' ] ]  sum ( )  sum ( ) )
cv2 drawcontours ( image , [ ctr ] , 0 , ( 255 , 255 , 255 ) , 1 )
np random seed ( 0 )
df head ( )  
sorted ( iter ( d items ( ) ) , key=operator itemgetter ( 1 ) )
list ( range ( 0 , 100 + 1 , 5 ) )
`` `` '' '' '' ''  join ( sorted ( set ( s lower ( ) ) ) )
print ( 'value is `` % d '' ' % value ) 
p = re compile ( '^b* ( abb* ) *a ? $ ' )
func ( 'arg ' , 'arg2 ' , ** ( { 'arg3 ' : 'some value ' } if condition == true else { } ) )
function_in_library ( 'hello % s ' , ' , ' join ( my_args ) )
gtk main_iteration ( ) 
arr reshape ( 3 , 12 )  t
int ( '' join ( bin ( x ) [ :1 : -1 ] ) , 2 )
pygame display set_caption ( 'animation ' )
`` `` '' `` '' ''  join ( ' { 0 } { 1 } ' format ( key , val ) for key , val in sorted ( adict items ( ) ) )
sorted ( a , key=lambda x : order_dict [ x [ 0 ] ] )
[ 1 , 2 , 4 , 5 ]
plt show
plt legend ( [ 'y = x ' , 'y = 2x ' , 'y = 3x ' , 'y = 4x ' ] , loc='upper left ' )
plt draw ( )         
driver save_screenshot ( 'screen png ' )
plt show
`` `` '' i '' '' ''  join ( ' ! ' * len ( x ) for x in strs split ( 'i ' ) )
q = session query ( articles )  filter ( articles tags any ( name='tag_name ' ) )
df columns = [ 'col1 ' , 'col2 ' ]
search_pattern = re compile ( '\\+ [ a-za-z ] \\+ ' )
print ( re sub ( ' ( ? < ! ^ ) ( ? = [ a-z ] ) ' , '_ ' , example )  lower ( ) )
p terminate ( )  
iter_length = len ( list ( iterable ) )
print ( urlparse parse_qs ( os environ [ 'query_string ' ] ) )
my_list [ : my_list index ( 'item ' ) ] + my_list [ my_list index ( 'item ' ) + 1 : ]
np expand_dims ( np array ( [ 1 , 2 , 3 , 4 ] ) , 1 )
root config ( menu=menu )
key encode ( 'ascii ' )
np argwhere ( np isnan ( x ) )
canvas drawstring ( 10 , 100 , 'in the vera tt font ! ' )
random sample ( [ 'some ' , 'provider ' , 'can ' , 'be ' , 'null ' ] , 3 )
assert response status_code == 200
p stdin write ( 'my message\n ' )
return [ ks [ i ] for i in range ( len ( ks ) ) if i == 0 or ks [ i ] ! = ks [ i - 1 ] ]
print ( df applymap ( lambda x : str ( x )  isdigit ( ) )  t )
~df [ 'second ' ]  str contains ( word )
b grid ( row=2 , column=3 , columnspan=2 )
re findall ( p , test_str )
print ( 'this was preserved ' )
[ [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , [ [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ]
`` `` '' `` '' ''  join ( ' '' { } '' ' format ( x ) if x isdigit ( ) else x for x in words split ( ) )
sum ( x ** 2 ) * ( x [ 1 ] - x [ 0 ] )
json dump ( data , jsonfile )
( x * 2 for x in [ 2 , 2 ] )
print ( 'last : ' , lst [ -1 ] )
a = [ i [ 0 ] for i in sorted ( zip ( a , ind ) , key=lambda x : x [ 1 ] ) ]
parser addoption ( ' -- bar ' , action='store_false ' , help='do not do bar ' )
`` `` '' 3b '' '' ''
print ( ddiff [ 'values_changed ' ] [ `` root [ 4 ] [ 'b ' ] '' ] [ 'diff ' ] )
{ k : v for k , v in ( e split ( ' : ' ) for e in a ) }
re findall ( ' ( ? : ^|\\+ ) ( [ a-z ] ) ' , formula )
plt show
lib some_function ( ffi addressof ( lib , 'some_callback ' ) )
json dumps ( cls=myencoder )
[ { 'id ' : 2 , 'name ' : 'bar ' } , { 'id ' : 1 , 'name ' : 'foo ' } , { 'id ' : 3 , 'name ' : 'baz ' } ]
[ lambda x : x * x ] * 3
db = create_engine ( 'mysql : //user : pass @ localhost/db ? charset=utf8 ' )
pylab savefig ( 'foo png ' )
do_stuff ( )  
return struct unpack ( ' > d ' , bf ) [ 0 ]
print ( a [ : , ( 0 ) ] )
[ '' , ' '' java jobs in delhi '' ' , ' delhi ' , ' '' another text '' ' , ' and this ' ]
df [ 'gamename ' ] = df [ 'user-agent ' ]  apply ( select )
template render ( context )
workbook close ( )   
arr [ np argsort ( arr [ : , ( 1 ) ] ) ]
[ [ 'a ' , 0 ] , [ 'b ' , 32 ] , [ 'c ' , 69 ] , [ 'd ' , 117 ] , [ 'e ' , 173 ] , [ 'f ' , 257 ] ]
result = datetime datetime now ( ) - datetime timedelta ( seconds=x )
list __setitem__ ( index , value )
test_df where ( test_df > = 4 )
zip ( [ a , b , c , d ] , repeat ( x ) )
session query ( rssfeed )  get ( 1 )
return new_list
libdl = ctypes cdll ( 'libdl so ' )
ivd = { v : k for k , v in list ( d items ( ) ) }
plt show
sorted ( set ( mylist ) , key=lambda x : mylist index ( x ) )
self canvas1 pack ( side='left ' , fill='both ' , expand=true )
[ ( ' %  2f ' % ( n / d ) ) for n , d in ( map ( float , i split ( '/ ' ) ) for i in data ) ]
app config [ 'mail_server ' ] = 'smtp googlemail com '
random shuffle ( x )
os system ( cmd ) 
ffprofile set_preference ( 'extensions adblockplus currentversion ' , 'x x x ' )
system ( 'python { $ pyt } ' )
a append ( ( 2 , 3 , 4 ) )
lasts append ( bpos )
df agg ( * [ count ( c )  alias ( c ) for c in df columns ] )  show ( )
print ( 'some utf-8 encoded bytestring \xe2\x82\xac' decode ( 'utf-8 ' ) )
match = re search ( ' < a href= '' ( ? p < url > [ ^ '' ] * ? ) '' ' , line )
array ( [ 0 , 2 , 1 ] , dtype=int64 )
d = { '1 ' : 'one ' , '3 ' : 'three ' , '2 ' : 'two ' , '5 ' : 'five ' , '4 ' : 'four ' } 'one ' in list ( d values ( ) )
m group ( 1 )
root mainloop ( )                                                                  
logging getloggerclass ( )  root handlers [ 0 ]  basefilename
np digitize ( [ 1 5 ] , a , right=true ) [ 0 ]
return math sqrt ( ( p1 [ 0 ] - p2 [ 0 ] ) ** 2 + ( p1 [ 1 ] - p2 [ 1 ] ) ** 2 )
input ( )  
data objects filter ( name__regex= ' ( word1|word2|word3 ) ' )
result = max ( iter ( your_dict items ( ) ) , key=operator itemgetter ( 1 ) ) [ 0 ]
item_pipelines = [ 'myproject pipeline somepipeline ' ]
items = sorted ( list ( ipcount items ( ) ) , key=lambda item : socket inet_aton ( item [ 0 ] ) )
app config [ 'debug ' ] = os environ get ( 'debug ' , false )
mya [ ( mya > val )  nonzero ( ) [ 0 ] [ :2 ] ] = 0
data [ numpy where ( data > 3 ) ]
intbids = [ int ( bid ) for bid in bids ]
isinstance ( a , test1 )
conn voidcmd ( 'noop ' )
messages success ( self request _request , 'domain added   ' )
ax set_ylabel ( 'y-axis ' )
server quit ( )
dict ( ( k , mydict [ k ] ) for k in keys_to_select )
print ( reportlab version )
print ( int ( netaddr ipaddress ( '2001:0db8:0000:0000:0000 : ff00:0042:8329 ' ) ) )
re findall ( '   { 1,6 } ' , 'four score and seven years ago   ' )
{ 'outer ' : { 'middle ' : { 'inner ' : [ 1 , 2 , 3 ] } } }
[ ( ( index % 8 + 2 ) * item ) for index , item in enumerate ( range ( 1 , 21 ) ) ]
list ( [ x for x in names if 'aet ' in x ] )
df convert_objects ( convert_numeric=true ) 
( lambda a , b : a ( a , b ) ) ( lambda a , b : b * a ( a , b - 1 ) if b > 0 else 1 , num )
sys getsizeof ( s )
__bind_key = 'db1 '
print ( colored ( 'hello ' , 'red ' ) , colored ( 'world ' , 'green ' ) )
list ( itertools chain from_iterable ( a ) )
l [ -3 : ]
df1 = df [ ( df a ! = -1 ) & ( df b ! = -1 ) ]
[ string for string in dnalist if all ( char in 'gatc ' for char in string ) ]
excel = client dispatch ( 'excel application ' )
df 
app mainloop ( )       
writer writerows ( [ [ item ] for item in new_text_list ] )
list ( set ( dict_a values ( ) )  intersection ( list ( dict_b values ( ) ) ) )
[ ( x + 2 ) for x in [ 1 , 2 , 3 ] ]
[ my_tuple [ isinstance ( x , str ) ]  append ( x ) for x in a_list ]
[ [ f for f in family if f ! = i ] for i , family in enumerate ( families ) ]
print ( f ( ) )
ax yaxis set_major_locator ( yloc )
return os path dirname ( str ( __file__ , encoding ) )
best = sorted ( [ player ( v , k ) for k , v in list ( d items ( ) ) ] , reverse=true )
api update_status ( 'my status update @ whoireplyto ' , tweetid )
plt show
app logger addhandler ( handler )
`` `` '' ^   * ( \\d+\\ \\d+ ) % packet loss $ '' '' ''
print ( p communicate ( ) [ 0 ] )
numpy dstack ( ( a , b ) )  transpose ( 0 , 2 , 1 )  reshape ( a shape [ 0 ] * 2 , a shape [ 1 ] )
model_instance image_field save ( 'filename jpeg ' , fd read ( ) , true )
{ { request meta http_name } }
all ( x == mylist [ 0 ] for x in mylist ) 
date parse ( 'thu , 1 july 2004 22:30:00 ' )
ax xaxis set_major_locator ( ticker loglocator ( base=1000 0 ) )
map ( itemgetter ( 0 ) , ( ( 1 , ) , ( 3 , ) ) )
counter ( elem [ 0 ] for elem in list1 )
time sleep ( 1 )                                 
[ ( ' % s : % d ' % ( e , i ) ) for e in mylist for i in ( 1 , 2 ) ]
print ( 'financial return of outcome 1 = { :  2f } ' format ( decimal ( '33 515 ' ) ) )
browser get ( 'url ' )
s = socket socket ( socket af_inet , socket sock_stream )
df drop_duplicates ( )   
int ( '0x123 ' , 16 )
pylab legend ( loc='lower left ' )
print ( '\n\n' join ( paras ) )
re sub ( ' [ ^\\x00-\\x7f ] ' , ' ' , s )
list ( itertools combinations ( [ 1 , 2 , 3 , 4 ] , 2 ) )
function ( ) [ 1 ]
df set_index ( 'filename ' , inplace=true )
self emit ( signal ( 'newstatuses ( pyqt_pyobject ) ' ) , statuses )
slice = arr [ 0:2 , 0:2 ]
a reshape ( -1 , m / k , k )  swapaxes ( 0 , 1 )  reshape ( -1 , k )
from functools import reduce print ( reduce ( lambda x , y : x + y * y , l ) )
a = [ ( [ none ] * 7 ) for _ in range ( 7 ) ]
`` `` '' fireshot3+ ( 2 )  png '' '' ''
map ( '' join , itertools product ( *letters ) )
set ( [ 'stackoverflow ' , 'serverfault ' ] )  issubset ( sites )
return mydict [ 'rank ' ]
my_list = [ line rstrip ( '\n ' ) for line in f ] 
df append ( row , ignore_index=true )
bin ( 1 ) [ 2 : ]  zfill ( 8 )
result = sum ( some_list [ 1 : ] )
res = [ ( i if i < 4 else 0 ) for i in range ( 1 , 6 ) ]
print ( et tostring ( root ) )
print ( sorted ( filenames , key=lambda f : map ( int , f split ( '   ' ) [ : -1 ] ) ) )
self text_info config ( text=self text_info cget ( 'text ' ) + str )
[ '1 1a1 ' , '1 1b1 ' , '1 1 ' ]
averages = [ ( ( x + y ) / 2 0 ) for x , y in zip ( my_list [ : -1 ] , my_list [ 1 : ] ) ]
json_object = json load ( raw )
plt show
cursor execute ( '**** ' )
indices = np where ( np in1d ( x , y ) ) [ 0 ]
warnings filterwarnings ( 'ignore ' , 'django contrib localflavor is deprecated ' )
get_keyring ( )
np unpackbits ( np arange ( 2 ** r , dtype='uint8 ' ) [ : , ( none ) ] , axis=1 ) [ : , 8 - r : ]
print ( [ x for x in a if x in b ] )
s find ( '\xff\xc0 ' )
return int ( '' join ( map ( str , nums ) ) )
new_dict setdefault ( v , [ ] )  append ( k )
newlist = [ [ ch , len ( ch ) , ch upper ( ) ] for ch in sent ]
np sum ( boolarr )
print ( [ { 'type ' : x [ 'type_id ' ] , 'name ' : x [ 'type_name ' ] } for x in d ] )
re sub ( '\\s+ ' , ' ' , 'some test with ugly whitespace ' )
form = userform ( user=request user )
file close ( )     
root_dir = os path dirname ( os path abspath ( __file__ ) )
a = sorted ( b , key=sortkeypicker ( [ '-total_points ' , 'tot_pts_misc ' ] ) )
db settings databases [ 'default ' ] [ 'name ' ]
my_dataframe columns values tolist ( )
unistring = '\u039c\u03b5\u03c4\u03b1\u03bb\u03bb\u03b9\u03ba\u03b1 '
return [ k for k in seq if counts [ k ] == 1 ]
pattern = re compile ( '^ ( ? = *tim ) ( ? = *stupid )   * $ ' )
result = [ r for r in x if not any ( z in r for z in y ) ]
plt colorbar ( h [ 3 ] , ax=ax )
sock setsockopt ( socket ipproto_ip , socket ip_add_membership , mreq )
warnings warn ( 'deprecated ' , deprecationwarning )
test replace ( ' , ' , ' ' )  replace ( '   ' , ' ' )  replace ( ' ? ' , ' ' )  split ( )
print ( '' join ( ordereddict fromkeys ( foo ) ) )
df applymap ( np isreal )  all ( 1 )
self bind ( wx evt_size , self onsize )
[ '123 ' , '235 ' , '456 ' , '910 ' , '911 ' , '912 ' , '913 ' , '915 ' , '916 ' ]
print ( f readlines ( ) )
df [ 'deltas ' ] = df groupby ( 'client_id ' )
print ( headers [ 'host ' ] )
db committrans ( )
list ( im getdata ( ) )
plt show
with open ( 'daemons txt ' , 'w ' ) as fp : fp write ( '\n' join ( ' % s % s ' % x for x in mylist ) )
print ( rankdata ( [ 1 , 2 , 3 , 3 , 3 , 4 , 5 ] ) )
mylist = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
[ ( x + y ) for x , y in zip ( string , string [ i : ] ) ]
np array ( a )
plt ylabel ( 'number of occurrence ' )
'hello % s ' % ' , ' join ( [ str ( e ) for e in my_args ] )
cherrypy session regenerate ( )
'this is a % s ' % 'unicode string '
df [ 'period ' ] = df [ [ 'year ' , 'quarter ' ] ]  apply ( lambda x : '' join ( x ) , axis=1 )
list_of_lists = [ [ ] for _ in columns ]
day_indexes = dict ( ( name , i ) for i , name in enumerate ( calendar day_name ) )
base64 b64encode ( str ( foo )  encode ( 'ascii ' ) )
print ( recursive_dict_eval ( my_dict ) )
print ( df to_csv ( columns= [ 'a ' , 'b ' , 'c ' ] , sep='\t ' , index=false ) )
print ( ' { latitude } { longitude } ' format ( **geopoint ) )
plt savefig ( 'image png ' , bbox_inches='tight ' , dpi=100 )
return 'a : % s , b : % s , c : % s ' % ( a , b , c )
[ [ 1 , 4 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 7 , 9 ] , [ 8 , 10 ] ]
plt tight_layout ( )    
self emit ( qtcore signal ( 'statechanged ( int , int ) ' ) , index , checkstate )
`` `` '' '' '' ''  join ( char * n for char in s )
df [ 'cola+colb ' ] = df [ 'cola ' ]  fillna ( '' ) + df [ 'colb ' ]  fillna ( '' )
list ( conn execute ( query )  keys ( ) )
nf write ( str ( random randint ( 0 , 1000 ) ) )
plt show
set ( itertools permutations ( lst ) )
pipe close ( )
' : francja' lstrip ( ' : ' )
f = codecs open ( 'file csv ' , 'r ' , 'utf-8 ' )
np array ( v1fcolor split ( ' , ' ) , dtype=np uint8 )
datetime timedelta ( 0 , 540 )
np random multinomial ( 10 , [ 0 1 , 0 2 , 0 7 ] )
plt legend ( loc=3 )
t start ( )    
list ( { v [ 'id ' ] : v for v in l }  values ( ) )
scrapy request ( url=url , callback=callback , headers= { 'cookie ' : my_cookie } )
return jsonresponse ( serializers serialize ( 'json ' , mensajes ) , safe=false )
print ( 'hi ' + eval ( input ( 'say something : ' ) ) )
us encode ( 'utf-8 ' )
f = lambda x , y : x [ 0 ] + x [ 1 ] + ( y [ 0 ] + y [ 1 ] )
list_1 , list_2 = zip ( * ( ( x , y ) for x , y in zip ( list_1 , list_2 ) if f ( x ) ) )
os getenv ( 'path ' ) 
urlpatterns += static ( settings media_url , document_root=settings media_root ) 
`` `` '' { :03d } { :03d } { :03d } '' '' ''  format ( *foo ( ) )
dict = { 'name ' : 'monty ' , 'age ' : 42 , 'food ' : 'spam ' }
os path abspath
df = pd concat ( dfs )
ax set_xticks ( xticks ) 
writer writerow ( [ 'label1 ' , 'label2 ' , 'label3 ' ] )
path = os path dirname ( os path realpath ( __file__ ) )
content_sizer add ( grid_2 , 1 , wx expand | wx all , 3 )
db session commit ( )          
numpy array ( [ sub_array for sub_array in counts_array ] )
mysocket setsockopt ( socket sol_socket , socket so_reuseaddr , 1 )
`` `` '' hello { user name } '' '' ''  format ( **stuf ( { 'user ' : { 'name ' : 'markus ' } } ) )
plt show
sorted ( unsorted_list , key=itemgetter ( 3 ) )
self bind ( wx evt_char_hook , self onkey )
t = s reshape ( -1 , 2 )
hasattr ( cls , '_ { } __flag' format ( cls __name__ ) )
{ { ( news description | truncatewords ) : 50 } }
return sum ( map ( sum , input ) )
subj translate ( none , '' join ( chars_to_remove ) )
plt show
list ( range ( 2 , 2 ) )
t = tuple ( int ( v ) for v in re findall ( ' [ 0-9 ] + ' , x ) )
re split ( '\\s { 2 , } ' , text )
x = [ 'fee ' , 'fiefoo ' , 'fum ' ]
list1 sort ( key=int ) 
ax set_xlabel ( 't ' )
sys stdout flush ( )                                
axes yaxis set_major_formatter ( formatstrformatter ( ' % d ' ) )
df3 = df [ ( df [ 'a ' ] == 0 ) | ( df [ 'b ' ] == 0 ) ]
cluster fit ( x )
sys stdout = open ( ' ? ? ? ' , 'w ' , 0 )
unsplitlinks = self request get ( 'links ' )
print ( re sub ( ' [ aeiou ] ' , repl , 'yesterday ' ) )
print ( et tostring ( tree , pretty_print=true ) )
sys stdout write ( output_line )
print ( { k : v for k , v in mime_types items ( ) } )
input objects filter ( enddate__year='2011 ' , enddate__month='01 ' )
fig tight_layout ( )  
[ x for x in [ f ( v ) for v in range ( 3 ) ] if x > 1 ]
[ '123 ' , '456 ' , '789 ' , '876 ' , '567 ' , '543 ' ]
np zeros ( ( 2 , 3 , 2 ) )
qtwidgets qmainwindow __init__ ( self , parent )
print ( 'done ' )
[ i for i in a if i in '0123456789 ' ]
return list ( filter ( os path isdir , [ os path join ( d , f ) for f in os listdir ( d ) ] ) )
date_list = [ ( base - datetime timedelta ( days=x ) ) for x in range ( 0 , numdays ) ]
print ( np array ( list ( mystr ) ) )
subprocess call ( [ 'java ' , '-jar ' , 'temp jar ' ] , env=env )
all ( x == 'qs ' or 'h ' in x for x in mycards )
conn close ( )   
print ( json dumps ( info ) )
re findall ( '\\w+ ' , 'my   text , -- without -- ( punctuation ) 123 ' )
`` `` '' '' '' ''  join ( sorted ( set ( s lower ( ) ) ) )  strip ( )
print ( list ( range ( n , ( m + 1 ) * n , n ) ) ) 
sys_team objects filter ( hostname__contains=' amgr   ' )
counter ( { ( 2 ) : 1 , ( 5 ) : 1 , ( 6 ) : 1 , ( 13 ) : 4 , ( 16 ) : 2 , ( 19 ) : 3 , ( 20 ) : 2 , ( 21 ) : 1 } )
browser get ( 'link to the website ' )
set ( mylist )
locale setlocale ( locale lc_all , 'fr_fr utf8 ' )
' % ( message ) s ' % { 'message ' : exception ( '\u0449 ' ) }
dateutil parser parse ( '20080903 ' )
np genfromtxt ( 'filename ' , dtype=none )
plt colorbar ( )  
queue put ( 'done ' )
pyplot show ( )   
print ( is_cardano_triplet ( 2 , 1 , 5 ) )
btn grid ( column=x , row=y , sticky=n + s + e + w ) 
{ value : key for key , values in my_map items ( ) for value in values }
cursor execute ( 'insert into anooog1 values ( % s , % s ) ' , ( 188 , 90 ) )
`` `` '' read this short text '' '' ''  translate ( none , 'aeiou ' )
raw_img_data = img tostring ( )
app config [ 'trap_bad_request_errors ' ] = true
datetime strptime ( '07/28/2014 18:54:55 099000 ' , ' % m/ % d/ % y % h : % m : % s  % f ' )
a __class__ print_x ( b )
model fit ( x , y )
re match ( 'cat\\ndog ' , s , re m )
all ( x > 0 for x in list_of_xs )
plt savefig ( 'second ps ' )
df set_index ( [ 'ticker ' , 'date ' ] , inplace=true )
subprocess popen ( [ 'xdg-open ' , path ] )
file = open ( filename , 'r ' , newline= '' )
keep update ( yoursequenceofvalues )
df groupby ( lambda x : x , axis=1 )  sum ( )
print ( a count ( '1 ' ) )
groups = df groupby ( 'customer_id ' )
ax xaxis set_major_formatter ( mdates autodateformatter ( locator ) )
image save ( image_out_path )
main ( )        
[ ( float ( i ) if '   ' in i or 'e ' in i else int ( i ) ) for i in s ]
res = pd dataframe ( json loads ( out ) )
l = list ( gen_items ( ) )
mymodel objects get ( pk=a [ i ] )
[ int ( t ) for t in ( true , true , false ) ]
config write ( configfile )
frame pack ( )
print ( ' ' join ( str ( i ) for i in a ) )
os system ( '/bin/ls ' )
entry objects filter ( hasbit ( 'weekdays ' , weekdays fri ) )
d = defaultdict ( lambda : 1 )
subprocess call ( [ 'wget ' , '-nh ' , image_url , '-p images/ ' ] )
row = [ thestring [ i : i + 3 ] for i in range ( 0 , len ( thestring ) , 3 ) ]
logger setlevel ( logging debug )     
df [ df columns [ 2 ] ]
return [ [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] ]
row append ( 'berry ' )
from functools import reduce reduce ( lambda v , k : { k : v } , reversed ( 'a/b/c' split ( '/ ' ) ) , 42 )
documents = [ sub_list [ 0 ] for sub_list in documents ]
pdb gimp_progress_set_text ( 'this goes to the status bar ' )
sorted ( x ) == sorted ( y ) 
plt show
logging getlogger ( )  addhandler ( logging streamhandler ( ) )
time sleep ( 1 )                                  
ax plot ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , 'k   ' )
data = [ ( [ 0 ] * cols ) for i in range ( rows ) ]
s start ( )
getattr ( color , 'none ' )
return urllib request urlopen ( req )
sapi filter ( track= [ 'twitter ' , 'python ' , 'tweepy ' ] )
frw close ( )
[ 'lmao ' , 'rofl ' , 'lol ' , 'wtf ' , 'pwned ' ]
[ 'the ' , 'quick ' , 'brown ' , 'fox ' , 'jumped ' ]
button connect_object ( 'event ' , self button_press , menu )
array = np array ( s split ( '| ' ) , dtype=int )
plt show
cur execute ( 'select @ @ session tx_isolation ' )
cur execute ( 'select * from bar ' )
cur execute ( 'set session transaction isolation level repeatable read ' )
return 'unknown { key } ' format ( key=key )
pd concat ( [ dataframe ( { 's1 ' : s1 } ) , dataframe ( { 's2 ' : s2 } ) ] )  ffill ( )  bfill ( )
new_func ( 'eggs ' )
self emit ( signal ( 'newstatuses ( list ) ' ) , statuses )
data = numpy empty ( shape=1 , dtype= [ ( 'start date ' , 's11 ' ) , ( 'n ' , int ) ] ) [ 0 ]
pool apply_async ( test , ( t , ) , dict ( arg2=5 ) )
birthplace = models foreignkey ( birthplace , related_name='people ' )
profile save ( )
p = np arange ( 20 )  reshape ( ( 4 , 5 ) )
dt = datetime strptime ( datestring , ' % y- % m- % d % h : % m : % s ' )
self fields [ 'support_staff ' ]  queryset = user objects exclude ( user='michael ' )
np logical_or ( np logical_or ( x , y ) , z )
df = df astype ( str )
self asserttrue ( r zrangebyscore ( name , ' ( 1 ' , ' ( 3 ' ) == [ 'two ' ] )
`` `` '' { 0:08b } '' '' ''  format ( 1 )
good_data = data [ : , ( data [ 0 ] == 1 ) ]
a ! = np array ( none )
setparameters ( [ 'abc ' , 'def ' , 'ghi ' ] )
print ( key , sum ( [ item [ 'tmst ' ] for item in group ] ) )
self send_header ( 'content-type ' , 'text/plain ' )
( x count ( item ) for item in set ( x ) )
[ _f for _f in lis if _f ]
re match ( '^cat $ \\ndog ' , s , re m )  group ( 0 )
a = a replace ( ' '' ' , `` ' '' )
value = float ( dic [ 'value ' ] ) if dic [ 'operator ' ] == ' ! = ' else dic [ 'value ' ]
df to_csv ( filename )
unpack ( 'hhl ' , '\x00\x01\x00\x02\x00\x00\x00\x03 ' )
urlpatterns += patterns ( '' , ( '^ ( ? p < page_alias >  + ? ) / $ ' , 'views static_page ' ) )
df = pd read_sql ( query statement , query session bind )
`` `` '' string replaced : xxxxx , yyyyy '' '' ''
w pack ( )
return np sum ( np vstack ( [ dr1 , dr2 , dr3 ] ) / drrp3 , axis=1 )
array ( [ 5 0 , 3 0 , 3 0 , 2 0 , 1 0 , 1 0 , 1 0 , 0 0 ] )
active = true if request post get ( 'active ' ) == 'true ' else false
documents = [ ' ' join ( sentence ) for sentence in documents ]
con commit ( )  
return '' join ( chars [ : -1 ] )
print ( 'not ok - mysql is not running   ' )
sublist = [ thelist [ n : n + n ] for n in range ( 0 , len ( thelist ) , n ) ]
root mainloop ( )                                                                   
[ 'cats ' , 'like ' , 'dogs ' , 'as ' , 'much ' , 'cats   ' ]
result_dict = [ u __dict__ for u in my_query all ( ) ]
return list ( ordereddict fromkeys ( my_list ) )
arr [ np isnan ( arr )  cumsum ( 1 ) > 0 ] = np nan
item_pipelines = [ 'myproject pipelines somepipeline ' ] 
list ( foo items ( ) ) [ list ( foo keys ( ) )  index ( 'apple ' ) + 1 ]
y = numpy r_ [ 0 , x [ : -1 ] ]
`` `` '' use beautifulsoup or lxml instead   '' '' ''
logging exception ( 'message ' )
[ item for item in full_list if all ( x not in omit for x in item ) ]
re sub ( ' ( ? < ! ^ ) ( \\b|\\b ) ( ? ! $ ) ' , '- ' , string )
print ( 'primary argument is : ' , sys argv [ 1 ] )
df = df [ df line_race notnull ( ) ]
self thread start ( )  
'a ' == 'a '
app run ( host='0 0 0 0 ' )
data = np genfromtxt ( 'data csv ' , delimiter= ' , ' , names=true )
sys path append ( os path abspath ( sys path [ 0 ] ) + '/  / ' )
time sleep ( 1 )                                   
re sub ( 'i am foo ' , 'i am ( ? : foo ) ? ' , '' )
isinstance ( s , str )    
mylist [ 1 ] [ 'd ' ]
img [     , : :-1 ]
app mainloop ( )        
( x * sin ( y ) )  subs ( [ ( x , y ) , ( y , x ) ] , simultaneous=true )
df append ( duplicates )  sort_index ( )
xmldoc = minidom parsestring ( ' { 0 } ' format ( str )  encode ( 'utf-8 ' ) )
set ( second_list )  difference ( map ( f , first_list ) )
[ 1 , 2 , 3 , 0 , 0 , 6 ]
v decode ( 'iso-8859-1 ' ) == '\xc4pple '
df drop ( remove , axis=1 , inplace=true )
common_start ( 'apple pie available ' , 'apple pies ' )
merged to_csv ( 'merged csv ' , header=none , index=none )
`` `` '' `` '' ''  join ( word for word in msg split ( ) if word not in stopwords )
f apply ( clean , axis=1 )
max ( ( v , i ) for i , v in enumerate ( a ) ) [ 1 ]
data = 'line1\nline2\n '
pd merge_asof ( x , y )
[ 0 , 'h ' , 1 , 'e ' , 2 , 'l ' , 3 , 'l ' , 4 , 'o ' ]
plt legend ( ( line1 , line2 ) , ( 'text ' , 'other text ' ) , numpoints=1 , loc=1 )
self a , self b = a , b
logging error ( ' % s ' , stacktrace )
self grid_columnconfigure ( 1 , weight=1 )
text = ' < font face= '' courier new , courier , monospace '' > ' + text + ' < /font > '
conn commit ( )           
print ( datetime now ( ) )
a resample ( '15s ' , base=5 )  interpolate ( )
repeat = re compile ( ' ( ? p < start > [ a-z ] ) ( ? p=start ) +- ? ' )
numpy array ( [ 1 , 2 , 3 , 4 ] ) ** 2
np sum ( np abs ( x ) ** 2 , axis=-1 ) ** ( 1 0 / 2 )
pylab show ( )    
logging getlogger ( )  addhandler ( handler )
metros = [ metro ( **k ) for k in data [ 'metros ' ] ]
sum ( [ '123 ' , '345 ' , '567 ' ] , '' )
cnxn commit ( ) 
datetime date ( 2015 , 8 , 9 )  isocalendar ( ) [ 1 ]
br set_handle_equiv ( true )
[ 'my ' , 'name ' ]
plt draw ( )          
[ 'test2 ' , 'test3 ' , 'test5 ' ]
print ( lm prob ( 'word ' , [ 'this is a context which generates a word ' ] ) )
combs extend ( els )
dater = re compile ( date )
ax set_ylim ( 0 , 1 ) 
datetime datetime now ( ) - datetime timedelta ( minutes=15 ) 
my_randoms = random sample ( range ( 1 , 101 ) , 10 )
np random uniform ( -10 , 10 , size= ( 1 , 5 , 1 ) )
s run ( 'uptime ' )
ax set_ylabel ( '' )
xvar , yvar = zip ( * ( ( x , y ) for x , y in zip ( xvar , yvar ) if y < = 100 ) )
return dict ( ( key , getattr ( self , key ) ) for key in keys )
new_list_of_dict = [ new_dict ( d ) for d in list_of_dict ]
df = pandas read_excel ( open ( 'your_xls_xlsx_filename ' , 'rb ' ) , sheetname=2 )
name_list = root xpath ( '/rootelement/book/author/name/text ( ) ' )
' % d ' * len ( s ) % tuple ( map ( ord , s ) )
`` `` '' { } '' '' ''  format ( 38 2551994324 )
df = pd concat ( [ pd read_sql_query ( q , connection ) for q in queries ] )
np array ( [ x for x in set ( tuple ( x ) for x in a ) & set ( tuple ( x ) for x in b ) ] )
{ { d content } }
print ( hex ( int ( '0xad4 ' , 16 ) + 512 ) )
a reshape ( ( -1 , 3 ) )  max ( axis=1 )
np array ( [ [ 0 ] , [ 1 ] ] )
bytearray ( 100 )
[ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ,
legend figure canvas mpl_connect ( 'button_release_event ' , self on_release )
print ( 'this is a tuple { 0 } ' format ( t ) )
data = json loads ( '     ' )
e3 pack ( )
res = df [ df ! = 0 0 ]  bfill ( axis=1 ) [ 'a ' ]
file create ( collection='foobar ' , name='/secret/password ' )
l append ( '' )
patches [ 0 ]  set_hatch ( '/ ' )
conn commit ( )            
plt rcparams [ 'patch linewidth ' ] = 0
print ( '\n' join ( s splitlines ( ) ) )
results = [ int ( match group ( 1 ) ) for match in matches ]
root mainloop ( )                                                                    
os uname ( ) [ 1 ]
f write ( etree tostring ( root , pretty_print=true ) )
a [ 'id ' ] [ ( none ) , : ] == b [ : , ( none ) ]
fig savefig ( 'full_figure png ' ) 
print ( parsedate_tz ( 'fri , 15 may 2009 17:58:28 +0700 ' ) )
return [ val for i , val in enumerate ( values ) if i not in indices ]
[ some_string [ i : i + 2 ] for i in range ( 0 , len ( some_string ) , 2 ) ]
sum ( 1 for i in l if i % 4 == 3 )
termios tcsetattr ( sys stdin , termios tcsadrain , old_settings )
ds to_netcdf ( new_file )
cython uchar
plt show
[ 'a ' , 'b ' , 'c ' ]
zf close ( )
a [ : , : , ( [ 5 ] ) ]  shape
sampledf [ 'housing ' ] = sampledf [ 'housing ' ]  map ( { 'yes ' : 1 , 'no ' : 0 } )
tuple ( x for sublist in base_lists for x in sublist )
return min ( l , key=lambda d : d get ( 'id ' , float ( 'inf ' ) ) ) [ 'id ' ]
expense save ( )
urllib parse unquote ( url ) 
time sleep ( 1 )                                    
array ( [ 1 , 1 , 1 , 1 , 0 , 13 , 1 , -2 , -7 ] )
pygame display flip ( )      
plt show
conn commit ( )             
plt figlegend ( lines , labels , loc='lower center ' , ncol=5 , labelspacing=0 0 )
locale localeconv ( ) [ 'decimal_point ' ]
pd dataframe ( [ data ] )
re sub ( '\\s+ ' , lambda m : str ( m end ( ) - m start ( ) ) , string )
admin site register ( user , userprofileadmin )
pretty_csv pretty_file ( 'test csv ' , header=false , border=false , delimiter='| ' )
df [ 'count ' ] = df groupby ( [ 'cumsum ' ] ) [ 'cumsum ' ]  transform ( 'count ' )
`` `` '' print percent % in sentence and not { 0 } '' '' ''  format ( test )
np einsum ( 'ijkl- > kl ' , m )
s = ' , ' join ( str ( x ) + ' ' + str ( a [ x ] ) for x in a )
list ( groupings values ( ) )
np argmin ( df applymap ( np isreal )  all ( 1 ) )
list ( flatten ( a ) )
ax plot ( x , y , 'k- ' )
browser get ( 'file : ///tmp/example html ' )
[ 1 , 0 , 'integer division or modulo by zero ' , 0 , 0 ]
return httpresponse ( 'hello world ! ' )
df max ( ) > 0
a = p stdout read ( )  decode ( 'utf16 ' )
timestamp = serializers datetimefield ( format= ' % s  % f ' )
ax spines [ 'top ' ]  set_color ( 'none ' ) 
datetime datetime ( 2011 , 1 , 10 , 9 , 30 , 0 , 934549345 )
plt show
df groupby ( [ 'name ' , df [ 1 ]  map ( foo ) ] )
ax set_xlabel ( 'x label ' ) 
foo ( )       
httplib httpconnection ( 'myip dnsomatic com/ ' )  request ( 'get ' , '/ ' )
print ( et tostring ( tree , pretty_print=true ) ) 
max ( array flatten ( ) )
df append ( [ df_try ] * 5 , ignore_index=true )
sys modules [ 'thepackage submodule ' ] = myreplacement
browser implicitly_wait ( 30 )
result = [ i for k , g in groupby ( lst , bool ) for i in ( ( sum ( g ) , ) if k else g ) ]
plt show
plt savefig ( 'test png ' , bbox_inches='tight ' )  
p sub ( 'gray \\1 ' , s )
my_process kill ( )
print ( linalg solve ( a , x ) )
int ( '1,374' replace ( ' , ' , '' ) )
[ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ]
data = request stream read ( )
sorted ( wrong_order , key=lambda x : int ( x split ( '/ ' ) [ 0 ] [ 2 : ] ) )
return sum ( delta_list , timedelta ( ) ) / len ( delta_list )
cats = a objects annotate ( num_b=count ( 'b ' ) )  filter ( num_b__lt=2 )
data = ( float ( row [ 1 ] ) for row in incsv )
ax scatter ( x , y , c=z , s=100 , edgecolor= '' )
f ( 3 , 5 , * [ 1 , 2 , 3 ] )
[ 1 , 2 , 1 , 1 , 2 , 1 , 2 , 2 , 1 , 2 ]
time sleep ( 0 001 )
urllib parse quote ( '\xed\x95\x9c\xea\xb8\x80 ' )
db session commit ( )           
{ 'layer1 ' : { 'layer2 ' : { 'layer3_3 ' : { 'b ' : 1 , 'a ' : 2 } , 'layer3_2 ' : 'string ' } } }
[ 'hattrick ' , 'google ' , 'wampum ' , 'newcom ' , 'smithsonian ' ]
py test
val , idx = min ( ( val , idx ) for idx , val in enumerate ( my_list ) )
textb = 'so is very cool '
time strptime ( '20100304 082835 ' , ' % y % m % d % h % m % s ' )
sys exit ( app exec_ ( ) )          
ax2 yaxis set_major_locator ( matplotlib ticker linearlocator ( nticks ) )
[ 'aet2000 ' , 'aet2001 ' ]
plt show
ax set_title ( 'likelihood of reaching the frontpage ' )
sys stdout write ( line )  
uniq append ( max ( scores , key=itemgetter ( 'score ' ) ) )
time sleep ( 0 1 )      
arr ravel ( order='f ' )  tofile ( 'output dat ' )
write ( 'temperature is { 0 :  1f } and pressure is { 1 :  2f } ) ' format ( x , y ) )
result = pd merge ( samples , df , how='inner ' )
print ( new_func __name__ )
a astype ( 'bar ' )
plt show
versions_list sort ( key=lambda s : map ( int , s split ( '   ' ) ) )
lambda x , i=i : x % i == 0
obj = result json ( )
root mainloop ( )                                                                     
pd read_csv ( 'whitespace csv ' , header=none , sep='\\s+|\t+|\\s+\t+|\t+\\s+ ' )
print ( 'os stat ( )  st_size returns : ' , os stat ( 'out txt ' )  st_size )
exit ( )
df groupby ( 'country ' )  apply ( lambda df : df irow ( df value argmax ( ) ) )
self view setmodel ( model )
a [ 2:4 ] = a [ 3:1 : -1 ]
quote_df = quote_df ix [ : , ( [ 0 , 3 , 2 , 1 , 4 , 5 , 8 , 9 , 30 , 31 ] ) ]
plt plot ( x , y , ' -- ' )
cursor execute ( 'select rowid from components where name = ? ' , ( name , ) )
glcolor3ub ( 0 , 0 , 255 )
sum ( np einsum ( 'ij     , i- > ij     ' , a , p ) )
conn commit ( )              
np dot ( a , b )
print ( json loads ( json_string ) )
print ( 'yes sir : ) ' )
print ( 'strncmp success ! ' )
`` `` '' '' '' ''  join ( map ( '' join , zip ( * ( [ iter ( a ) ] * 2 ) ) ) [ : :-1 ] )
newwords = set ( words )  difference ( englishwords )
a [ np arange ( a shape [ 0 ] ) [ : , ( np newaxis ) ] , i ]
myiter = ( 100 if i in ( 0 , 1 , 3 ) else e for i , e in enumerate ( mylist ) )
df select_dtypes ( include= [ 'datetime64 ' ] )
df loc [ ( 'a ' ) , : ] = df_
self response headers add_header ( 'set-cookie ' , c2 output ( header= '' ) )
pyplot plot ( [ point [ 0 ] , point2 [ 0 ] ] , [ point [ 1 ] , point2 [ 1 ] ] )
myapp ( )  run ( ) 
c = b [ 1 : ]
pool = multiprocessing pool ( 2 )
pygtk require ( '2 0 ' )
ax1 set_yticklabels ( [ ] )
os environ [ 'my_namespace some_param ' ]
datetime strptime ( date_string , ' % y- % m- % d ' )
nltk downlad ( 'all ' )
del sys modules [ 'mod_1 ' ]
list ( lrange ( 138264128374162347812634134 , 138264128374162347812634140 ) )
subprocess call ( cmd )
set ( pd dataframe ( df genres tolist ( ) )  stack ( )  tolist ( ) )
print ( 'hello ' )   
array ( [ 0 , 7 , 1 , 0 , 4 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ] )
`` `` '' { 0 } , { 1 } , { 2 } '' '' ''  format ( 1 , 2 , 3 )  encode ( )
df1 ix [ [ 1 , 3 ] ]
np ravel_multi_index ( x t , dims )
[ x for t in zip ( *lists ) for x in t ]
re sub ( '\\w+ ' , '' , your_string )
re findall ( '\\w+ ' , string )
print ( ( 'global : ' , x ) )
print ( np sort ( np partition ( y , -10 , axis=1 ) [ : , -10 : ] , axis=1 ) )
os chmod ( 'mydir ' , 493 )
print ( '\xe2\x99\x9e' decode ( 'utf-8 ' ) )
df index get_loc ( ds )
re findall ( ' [ ^\\w\\d_ ] +|\\d+ ' , 'westminister15london england ' )
[ entry for tag in tags for entry in entries if tag in entry ]
print ( 'unmarked nodes : ' + ' ' join ( str ( x ) for x , y in list ( d items ( ) ) if not y ) )
os chdir ( 'd : ' )
os chdir ( 'c : ' )
scatter ( x , y , s= [ 5 , 50 , 500 , 1000 , 1500 , 2000 ] , color='green ' , marker='h ' )
df = pd read_csv ( file_path , header=none , usecols= [ 3 , 6 ] )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
[ 'x ' , 'sin ' , 'x ' , 2 , 'pow ' , '* ' ]
outputfile close ( )
pattern = ' # reg { 0 } ( [ ^ # ] * ( ? : # ( ? ! reg { 0 } ) [ ^ # ] * ) * ) '
pd concat ( [ s1 , s2 ] , axis=1 ) 
return cipher decrypt ( base64 b64decode ( text ) )
len ( set ( map ( len , ( a , b , c ) ) ) ) == 1
cursor execute ( 'select * from foo ' )
list ( bin ( 6 ) [ 2 : ] )
print ( datetime strftime ( ' % b % d , % y ' ) )
self bind ( wx evt_enter_window , self _onmouseenter )
sorted ( top_n , key=lambda t : ( -t [ 1 ] , t [ 0 ] ) )
parser add_option ( '-f ' , ' -- file ' , dest='filename ' , help='foo help ' ) 
d [ 'word ' ] [ keys [ 0 ] ] [ keys [ 1 ] ]
p1 = subprocess popen ( [ 'cmd ' , '/c ' , 'date ' ] , stdout=subprocess pipe )
setattr ( self , key , initial_data [ key ] )
b __class__ __class__
soup = beautifulsoup beautifulsoup ( html_string )
[ item for item in l for _ in range ( r ) ]
print ( np array ( [ 1 123456789 ] ) )
sorted ( unsorted_list , key=lambda x : order get ( x , float ( 'inf ' ) ) )
l sort ( key=lambda x : x timetuple ( ) [ 1:3 ] )
print ( '\n' join ( ' { } : { } ' format ( *k ) for k in enumerate ( lst ) ) )
self log_message ( 'stuff ' )
baz = models manytomanyfield ( child , related_name='baz+ ' )
yaml dump ( datamap , f , default_flow_style=false )
rdd = df rdd map ( list )
d += dt timedelta ( days=1 )
root destroy ( )    
[ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ] ,
ax6 set_yticks ( np linspace ( 0 , 1 , 7 ) )
request = urllib request request ( url )
test = 'i have one { fruit } on the { place }   ' format ( **dic )
list ( csv reader ( open ( 'demo txt ' , 'rb ' ) , delimiter='\t ' ) )
print ( df to_html ( ) )
permissions = permission objects filter ( user=user )
lst = [ [ 1 , 2 , 3 ] , [ 1000000 0 , 2000000 0 , 3000000 0 ] , [ 1e-06 , 2e-06 , 3e-06 ] ]
[ ( n - 9 * int ( ( n - 1 ) / 9 ) ) for n in list1 ]
dic get ( 'b ' , 'b ' )
personid = request form get ( 'personid ' , type=int )
requests post ( url , params=params , data=json dumps ( data ) , headers=headers )
self configure ( relief='sunken ' )
c = dict ( a , **b )
k append ( ( str ( item [ 0 ] ) , { 'num ' : str ( item [ 1 ] ) } ) )
array ( [ [ [ 4 , 5 ] , [ 12 , 14 ] , [ 24 , 27 ] ] , [ [ 0 , 0 ] , [ 6 , 7 ] , [ -8 , -9 ] ] ] )
plt show
print ( re sub ( 'blah ' , callback , s ) )
fig savefig ( 'test png ' , dpi=600 )
sort_me sort ( key=attr_or_itemgetter ( 'name ' ) )
df [ ( df a > 0 ) & df index isin ( [ 0 , 2 , 4 ] ) ]
print ( 'upload error : ' , uploadr [ 0 ] )
pow ( decimal ( '2 ' ) , decimal ( '2 5 ' ) )
f close ( )                               
s = ' { foo } { { bar } } '
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
logging info ( 'danger will robinson ! ' )
plt axis ( 'off ' )  
`` `` '' i am a string '' '' ''  encode ( 'ascii ' )
mainloop ( )
sort ( data , key=datekey , reverse=true )
subprocess check_call ( [ 'ping ' , 'google com ' ] , shell=true )
time sleep ( 1 )                                     
profile save ( ) 
plt show
file write ( bytes ( chr ( int ( mgcnmbr ) ) , 'iso8859-1 ' ) )
ord ( '\xc2\xa3 ' )
sys stdout = self _stdout
img save ( 'image png ' )
session commit ( )          
df groupby ( [ 'a ' , 'name ' ] , as_index=false )  median ( )
c = [ x [ 0 ] for x in a ]
json dumps ( o )
app run ( )                             
qtcore qobject connect ( a , qtcore signal ( 'qtsig ( ) ' ) , pyclass pymethod )
sorted ( unsorted_list , key=order __getitem__ )
array = np fromiter ( s split ( '| ' ) , dtype=int )
self lc bind ( wx evt_list_begin_drag , self ondrag )
[ ( a [ x ] , b [ x % len ( b ) ] ) for x in range ( len ( a ) ) ]
is_dir = lambda zipinfo : zipinfo filename endswith ( '/ ' )
ax set_xlabel ( 'distance ' )
activate ( 'en ' )
value = list ( d values ( ) ) [ index ]
plt show
[ [ -1 , -2 , -3 ] , [ -4 , -5 , -6 ] , [ -7 , -8 , -9 ] ]
pattern match ( string )
g add_nodes_from ( l )
df = pd read_csv ( 'my csv ' , dtype= { 'my_column ' : np float64 } )
uuid uuid4 ( )
re sub ( ' [ ^\\w\\-_\\   ] ' , '_ ' , filename )
return response ( status=401 , data= { 'detail ' : 'bad access token ' } )
np log ( df / df shift ( ) )
br set_cookiejar ( cj )
file write ( your_string + '\n ' )
plt show
file_old = open ( '1 php ' , mode='ru ' , encoding='gbk ' , errors='strict ' )
{ 'b ' : [ 2 , 3 ] , 'c ' : [ 3 ] , 'a ' : [ 1 , 2 ] }
files = sorted ( ( f for f in files if firstfile < = int ( f ) < lastfile ) , key=int )
tree = et parse ( 'blah xml ' )
get_multi ( keys , key_prefix= '' , namespace=none )
sess run ( tf initialize_all_variables ( ) ) 
logging config fileconfig ( 'logging conf ' )
'is ' , 'a ' , 'quote ' , 'from ' , 'jfk ' , 'who ' , 'is ' , 'a ' , 'former '
'ask ' , 'what ' , 'you ' , 'can ' , 'do ' , 'for ' , 'your ' , 'country ' , ' ! '
binary_representation = struct pack ( ' { } i' format ( len ( numbers ) ) , *numbers )
a = pd read_table ( 'out file ' , header=none , sep= ' ' )
[ 'm ' , 'on ' , 'key ' ]
[ 'm ' , 'onk ' , 'ey ' ]
[ 'm ' , 'onke ' , 'y ' ]
[ 'mo ' , 'n ' , 'key ' ]
[ 'mo ' , 'nk ' , 'ey ' ]
[ 'mo ' , 'nke ' , 'y ' ]
[ 'mon ' , 'k ' , 'ey ' ]
[ 'mon ' , 'ke ' , 'y ' ]
[ 'monk ' , 'e ' , 'y ' ]
time sleep ( 2 ) 
os system ( 'mkdir c : \\temp\\vhd ' )
l [ len ( l ) : -len ( l ) - 1 : -1 ]
sum ( 1 for _ in iterable )
newmethod_a = functools partial ( newmethod , foo='a ' )
dict [ 'data ' ]  append ( { 'type ' : 'locale ' , 'lat ' : 321 } )
df = pd dataframe ( list_of_series , columns=cols )
ax2 set_title ( 'cells ' )
d = { k : ( lambda s , k=k : s * a [ k ] ) for k in range ( n ) }
ax1 set_xlim ( [ 0 , 5 ] )
{ { ( your_date_value | date ) : 'short_date_format ' } }
parser parse ( io bytesio ( ' < a > \xc3\xa9 < /a > ' ) )
people = [ 'lisa ' , 'pam ' , 'phil ' , 'john ' ]
signchange [ 0 ] = 0
[ ( p [ 0 ] , sum ( p [ 1 : ] ) / 2 0 ) for p in playerlist ]
top_package = __import__ ( __name__ split ( '   ' ) [ 0 ] )
lst = [ ( 'apple ' , 1 ) , ( 'banana ' , 2 ) , { 'k ' : [ 1 , 2 , 3 ] } , { 'l ' : [ 4 , 5 , 6 ] } ]
plt show
re split ( ' ( \\w ) ' , `` '' '' foo/bar spam eggs '' '' '' )
set ( a )  intersection ( b )  
summary_dict = { c : [ ] for c in new columns [ 1 : ] }
df merge ( s to_frame ( ) , left_index=true , right_index=true )
print ( f reap ( [ 1 , 2 , 3 ] , 4 ) )
[ [ i for i in sublist if counts [ i ] == 1 ] for sublist in mylist ]
np matmul ( a , b )
( '^home/ ? $ ' , 'user_home_page ' ) ,
buckets = [ [ 0 ] * 100 ] * 100
ex reset_index ( )  pivot_table ( index='a ' , aggfunc=lambda x : x nunique ( ) )
sum ( item get ( 'one ' , 0 ) is true for item in list ( tadas values ( ) ) )
ax set_ylim ( -5 , 5 )
df [ 'col_name ' ] = df [ 'col_name ' ]  astype ( object )
foo_for_today = foo objects filter ( datefield__date=datetime today ( ) )
print ( get_domain ( 'http : //abcde co uk ' , tlds ) )
p = np delete ( p , 2 , axis=1 )
next ( ( a for a in s if s count ( a ) == 1 ) )
ax set_ylabel ( 'percentage of frontpaged submissions ' )
df reorder_levels ( [ 'firstlevel ' , 'a ' , 'b ' ] )
df set_index ( 'recd ' )  resample ( '1m ' , how='count ' )
worksheet update_cells ( cell_list )
biglist sort ( key=operator itemgetter ( *args ) )
print ( ' [ % s ] % s ' % ( mod __name__ , msg ) )
print ( sum ( 1 for elem in list1 if elem [ 0 ] == entry [ 0 ] ) )
dict ( { 'one ' : 1 , 'two ' : 2 } )
var = 'dork1 '
tostring ( element )  split ( ' > ' , 1 )
map ( tuple , map ( flatten , zip ( a , b , c ) ) )
ax set_ylabel ( 'frequency ' )
pd concat ( [ df [ [ 'knownvalue ' ] ] , new_cols ] , axis=1 )
return '\n' join ( ' { } { } ' format ( k , v ) for k , v in list ( self items ( ) ) )
[ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) ]
mylist = [ '' join ( word split ( 'l ' ) [ :2 ] ) for word in [ 'hello ' , 'world ' ] ]
print ( etree tostring ( root , pretty_print=true ) )   
re compile ( ' < ! - ( [ ^- ] ) ' ) , lambda match : ' < ! -- ' + match group ( 1 )
d = { 'foo ' : 'bar ' }
finder score_ngrams ( bigram_measures pmi )
print ( np nanmean ( arr , axis=0 ) )
ivd = dict ( ( v , k ) for k , v in list ( d items ( ) ) )
do_something ( ' { 0 } { 1 } { 2 } ' format ( 1 , 2 , 3 ) )
a [ np arange ( np shape ( a ) [ 0 ] ) [ : , ( np newaxis ) ] , np argsort ( a ) ] 
np expand_dims ( np array ( [ 1 , 2 , 3 , 4 ] ) , 0 )
keys = set ( l1 )  intersection ( d1 )
df = pd concat ( [ df , dummy_df ] , axis=1 )
doc toxml ( )
print ( d [ 1 ] [ 2 ] [ 3 ] )
isinstance ( fn , collections callable )
df reindex ( prev_dates union ( df index ) )
server = smtplib smtp ( 'smtp gmail com ' , 587 )  
foo save ( )
print ( struct pack ( ' > i ' , your_int ) )
r = requests get ( 'https : //api github com ' , auth= ( 'user ' , 'pass ' ) )  
len ( words )
mainwindow show ( )
max ( glob iglob ( 'permissionsonsystems* ' ) , key=os path getmtime )
plot plot ( linewidth=2 0 , *np log10 ( np loadtxt ( 'plot_me dat ' , unpack=true ) ) )
map ( centroids __delitem__ , sorted ( index , reverse=true ) )
array ( [ 3 , 4 , 5 , 1 , 2 ] )
a = [ 0 , 1 ]
plt savefig ( 'test pdf ' )  
return render_to_response ( 'template htm ' , { 'people ' : people } )
testdf iloc [ : , 1 : ]  stack ( )  groupby ( level=0 )  nunique ( )
np where ( np all ( a == b , axis=1 ) )
s = set ( lst )
[ ' ( ' , '2 ' , '   ' , 'x ' , '   ' , ' ( ' , '3 ' , '- ' , '1 ' , ' ) ' ]
nums search ( '1 ' )  group ( 0 )
df eq ( 3 2 )  any ( axis=1 ) & ~df isin ( [ 0 1 , 1 2 ] )  any ( axis=1 )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
print ( [ item for item , count in list ( collections counter ( a )  items ( ) ) if count > 1 ] )
outfile writelines ( lines )
iqr = np subtract ( *np percentile ( x , [ 75 , 25 ] ) )
product ( [ [ 1 , 2 ] , [ 4 , 5 ] ] )
print ( { k : round ( v ) for k , v in x items ( ) } )
array ( [ [ 1 , 0 , 1 ] , [ 2 , 0 , 1 ] ] )
list ( ordered_merge ( mapping , [ 'b ' , 'c ' , 'a ' , 'a ' , 'b ' , 'c ' ] ) )
max ( glob glob ( os path join ( directory , '*/ ' ) ) , key=os path getmtime )
ax set_ylim ( [ 0 , 1 ] )
df plot ( x='c1 ' , y='c3 ' , ax=ax )
shutil copyfile ( 'xxx mp4 ' , 'yyy mp4 ' )
print ( df iloc [ : , ( np r_ [ 1:3 , 6 : len ( df columns ) ] ) ] )
foo allocate_ids ( max=26740080011050 )
print ( ( old_string , '= ' , new_string ) )
sys exit ( test ( ) )
ax scatter ( [ 0 2 , 0 5 , 0 8 ] , [ 2 3 , 0 47 , 1 0 ] , [ 2 1 , 5 3 , 0 7 ] )
x_pieces = [ x [ i : i + step ] for i in range ( 0 , len ( x ) , step ) ]
hex ( random randint ( 0 , 16777215 ) ) [ 2 : ]  upper ( )
print ( dict ( a=dict ( b=true ) ) )
numpy vstack ( ( a , b , c ) )  t
server serve_forever ( )            
print ( '\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98 ' )
`` `` '' nltk is a python library for working human-written text   summarize is a package that uses nltk to create summaries   '' '' ''
b = list ( a [ 0 ] )
b = [ x for x in a if x not in itemstoremove ]
super ( paginationformset , self )  __init__ ( *args , **kwargs )
[ [ [ [ 1 ] , [ 2 ] ] , [ [ 3 ] , [ 4 ] ] ] , [ [ [ 5 ] , [ 6 ] ] , [ [ 7 ] , [ 8 ] ] ] ]
return redirect ( 'anotherview ' , username=request user username , **kwargs )
[ ( ( '' , i [ 1 ] ) if i [ 0 ] == none else i ) for i in map ( none , a , b ) ]
pprint pprint ( shallow ( parser st2list ( parser expr ( ' ( ( ( 1+0 ) +1 ) +1 ) ' ) ) ) )
plt show
'b ' in list ( vars ( foo )  values ( ) )
[ [ 2 , 3 ] , [ 7 , 1 ] ]
print ( binascii hexlify ( 'abcz ' ) )
df = pd dataframe ( df_dict )
intersect = { key : [ o , spec2 [ key ] ] for key , o in list ( spec1 items ( ) ) if key in spec2 }
{ 'default_extend_env ' : { 'path ' : ' { path } ; c : \\python27 ' } }
root mainloop ( )                                                                      
dlg show_all ( )
( np arange ( 2 ** r ) [ : , ( none ) ] & 2 ** np arange ( r ) [ : :-1 ] > 0 )  astype ( int )
from functools import reduce return sum ( reduce ( operator mul , data ) for data in zip ( *lists ) )
df [ df duplicated ( subset='website ' , keep=false ) ]
fruits = { k : [ ] for k in names }
br form [ 'prodclass ' ] = [ '1 ' ]
args = parser parse_args ( )  
plt show
d setdefault ( x , [ ] )  append ( y )
df groupby ( level=0 ) [ 3 ]  transform ( lambda x : x [ 0 ] / x [ 1 ] )
soup select ( 'div [ class=aa ] ' )
print ( os path isdir ( '/home/el ' ) )
re sub ( ' ( ? < =fo+ ) bar ( ? =baz ) ' , 'quux ' , 'foobarbaz ' )
unpack ( 'cchs* ' , data )
parser add_argument ( 'stop ' , type=int , help='specify stop   ' )
parser add_argument ( 'step ' , type=int , help='specify step   ' )
sess = tf interactivesession ( '' , config=config )
[ ( int ( i ) if not i % 1 else i ) for i in li ]
return json jsonencoder default ( self , obj )
( x - y for x , y in it izip ( a [ 1 : ] , a ) )
c = a [ ( np searchsorted ( a [ : , ( 0 ) ] , b ) ) , : ]
np concatenate ( [ [ 88 ] , a , [ 77 ] ] )
print ( [ item for item in text split ( ) if item count ( '- ' ) == 5 ] )
'dammitimmad ' [ : :-1 ] == 'dammitimmad '
xmlfiles_folder = os path join ( project_root , 'f1/f2/xml_files/ ' )
plt show
plt show
diffs == array ( [ 0 1 , 0 2 , 0 3 ] )
pylab show ( )     
time sleep ( 0 01 )
return httpresponse ( '' ) 
pd read_csv ( 'test csv ' , sep='| ' , skiprows=list ( range ( 1 , 10 ) ) )
plt show
r setdefault ( key , [ ] )  append ( lst2dct ( val ) )
admin site register ( email , emailadmin )
len ( arr )
size = fields integerrangefield ( min_value=1 , max_value=50 )
print ( element tag , element text , element tail )
pytz timezone ( 'europe/helsinki ' )  localize ( datetime_obj )
app exec_ ( )        
`` `` '' wilbur smith ( son of john ( johnny , son of james ) , aka billy ) , eddie murphy ( john ) '' '' ''
reactor run ( )              
help ( assign2 )
d = dict ( [ ( k , v ) for k , v in zip ( l [ : :2 ] , l [ 1 : :2 ] ) ] )
print ( re sub ( ' (   ) \\1+ ' , '\\1 ' , a ) )
np array ( [ [ d [ str ( i ) ] , d [ str ( j ) ] ] for i , j in a ] )
os listdir ( '   ' )
print ( colorstr ( 'red ' , 'red ' ) )
`` `` '' earth '' '' ''  endswith ( 'earth ' )
self response out write ( simplejson dumps ( data ) )
tst save ( )
new_y = sp interpolate interp1d ( x , y , kind='cubic ' ) ( new_x )
list ( range ( 0 , 10 , 2 ) )
b objects filter ( a__name='test ' )
h = data reshape ( n , nt , n )  transpose ( 0 , 2 , 1 )
df [ ( df [ [ 0 , 1 ] ] > 0 )  all ( 1 ) ]
v1 , v2 , v3 , v4 = [ max ( x , 0 ) for x in ( a , b , c , d ) ]
cnxn commit ( )  
df where ( ~outliers_low , down_quantiles , axis=1 )
datetime datetime ( *d timetuple ( ) [ :6 ] )
gc remove_edge ( clique [ 0 ] , clique [ 1 ] )
df [ df filter ( regex='^sps ' )  eq ( df sps1 , axis='rows ' )  sum ( axis=1 ) == 1 ]
[ ( 6 , 3 , 18 , 12 ) , ( 1 , 2 , 3 , 4 ) , ( 9 , 6 , 8 , 15 ) ]
scipy stats chi2 ppf ( 0 05 , 5 )
ax1 set_ylim ( 0 , 1 )
logo = `` \nhello '' 'world\n ''  replace ( `` ' '' , ' '' ' )
b reindex ( a index , method='ffill ' )
gca ( )  xaxis set_major_formatter ( xfmt )
mymethod ( myvariable , *mytuple )
'xyz' format ( pluralizer ( 2 ) ) == 'xyz '
list ( csv reader ( open ( filename , 'rb ' ) , delimiter= ' , ' , quotechar= ' '' ' ) ) [ 1 : ]
a = array ( [ 2 , 3 , 4 ] )
dict ( x split ( ' : ' ) for x in a )
logger info ( 'the sky is so blue ' )
print ( np unravel_index ( result argmax ( ) , result shape ) ) 
ax zaxis set_major_formatter ( formatstrformatter ( ' %  02f ' ) )
ipdb set_trace ( )
plt show
cursor = conn cursor ( mysqldb cursors dictcursor )
format ( addrint , ' # 04x ' )
re compile ( ' ( \\w+ ) ' )  split ( 'hello , foo ' )
np fill_diagonal ( out , np diag ( a ) )
big = np random randint ( -10 , 10 , size=10000000 )
fig savefig ( 'ax2_figure png ' , bbox_inches=extent )
random_lines = random choice ( open ( 'file ' )  readlines ( ) )
b = [ list ( x ) for x in b_set ]
slack chat post_message ( ' @ to_user ' , msg , username= ' @ from_user ' )
{ 'key1 ' : 'val1 ' , 'key2 ' : 'val2 ' }
help ( random random )
ax spines [ 'top ' ]  set_visible ( false ) 
ax plot ( x , y )   
x [ -2 : :-1 ]
print ( ' % s % s % s ' % ( row [ 'id ' ] , row [ 'name ' ] , row [ 'price ' ] ) )
json dumps ( o ) 
return x ** 2 + 1
ax yaxis set_major_formatter ( mpl ticker funcformatter ( mjrformatter ) )
msg send ( )
print ( somefake readlines ( ) )
c = [ [ ( 0 ) for row in range ( len ( a ) ) ] for col in range ( len ( b [ 0 ] ) ) ]
[ a [ 'a ' ] for a in x1 ] == [ b [ 'a ' ] for b in x2 ]
model rx ( 'importance ' ) [ 0 ]
db close ( )   
swf = boto3 client ( 'swf ' )
ax get_xaxis ( )  set_minor_locator ( mpl ticker autominorlocator ( ) )
ser write ( 'your text ' )
worksheet conditional_format ( 'b2 : b8 ' , { 'type ' : '3_color_scale ' } )
pd dataframe ( data , tid1 , ucat )
somemodule somefunctionw ( str ( s encode ( 'utf-16-le ' ) ) )
self linenumbers tag_configure ( 'line ' , justify='right ' )
tar addfile ( tarfile tarinfo ( 'myfilename txt ' ) , file ( '/path/to/filename txt ' ) )
file = forms filefield ( required=false )
main ( )         
logging getlogger ( __name__ )  setlevel ( logging warning )
return re compile ( '\\w+ ' )  findall ( text )
collection find ( )  sort ( { 'timestamp ' : -1 } )  limit ( 10 )
df = pd read_sql_query ( 'select * from stat_table ' , con=engine )
re findall ( '\\b\\d\\d\\d\\d\\d\\b ' , 'helpdesk-agenten ( m/w ) kennziffer : 12966 ' )
return queryset filter ( ** { 'attributes__value ' : value } )
exec ( compile ( open ( 'main py ' )  read ( ) , 'main py ' , 'exec ' ) )
bits = [ 0 , 0 , 0 , 0 ]
from functools import reduce pd expanding_apply ( s , lambda s : reduce ( lambda x , y : x * ( 1 + y ) , s , 1 ) )
print ( 'temp1 : +31 0\xb0c ( crit = +107 0\xb0c ) ' encode ( 'utf-8 ' ) )
df loc [ 'total ' ] = df sum ( )
my_dict = { k : [ ] for k in keys }
print ( '\n ' * 100 )
input_seq [ ix1 ] , input_seq [ ix2 ] = input_seq [ ix2 ] , input_seq [ ix1 ]
lst_int = [ int ( x ) for x in test split ( '- ' ) ]
l1 [ 0:1 ] = 'cake '
namedtype namedtype ( 'rfc822name ' , char ia5string ( ) ) ,
return httpresponse ( 'updated ' )
return super ( myresource , self )  obj_update ( bundle , **kwargs )
return math sqrt ( ( p0 [ 0 ] - p1 [ 0 ] ) ** 2 + ( p0 [ 1 ] - p1 [ 1 ] ) ** 2 )
cur execute ( sql , ( data , ) )
app mainloop ( )         
ax scatter ( x , y )
d = { c : i for i , c in enumerate ( ascii_lowercase , 1 ) }
conn commit ( )               
np dot ( r , y reshape ( 1 , 3 ) )
self asserttrue ( issubclass ( quizform , forms form ) ) 
cursor execute ( sql , args )  
conn execute ( sql , list )
dict_compare ( dict_a , dict_b )
chat_messages objects all ( )  values_list ( 'name ' )
nums2 search ( '0 1e-456 ' )  group ( 0 )
type = models charfield ( max_length=10 , choices=types , default='customer ' )
[ 'arts & entertainment ' , 'television ' , 'talk show ' ]
np arange ( new [ 1 ] ) % old [ 1 ]
root mainloop ( )                                                                       
re compile ( '|' join ( list_patterns ) )
shutil copyfile ( 'file txt ' , '/dev/usb/lp0 ' )
env append ( cppdefines= { 'blub ' : none , 'value2 ' : none , 'foo ' : 1 } )
aapl index to_series ( )  diff ( )  mean ( ) / ( 60 * 60 * 10 ** 9 )
shapesmatch ( [ ( 0 , 0 ) , ( 1 , 0 ) , ( 1 , 1 ) , ( 2 , 1 ) , ( 2 , 2 ) , ( 0 , 2 ) ] , l_shape )
def a ( ) : globals ( ) [ 'something ' ] = 'bob '
print ( c most_common ( 3 ) )
dictionary = df to_dict ( orient='index ' )
df [ 'value ' ]  ffill ( )  shift ( 1 )
df = pd read_csv ( 'sample_file csv ' , comment= ' # ' )
hashlib new ( 'sha ' , '\xd2\x04\x00\x00 ' )  hexdigest ( )
( my_array [ : , ( np newaxis ) ] == my_array )  all ( axis=2 )  sum ( axis=1 )
sorted ( [ 'some ' , 'words ' , 'sort ' , 'differently ' ] , key=lambda word : word lower ( ) )
`` `` '' '' '' ''  join ( random choice ( 'abcde ' ) for _ in range ( 3 ) )
x = np array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )
flask redirect ( flask url_for ( 'operation ' ) , code=307 )
[ d [ k ] for k in lst ]
print ( myobject myvar if hasattr ( myobject , 'myvar ' ) else 'not defined ' )
[ i for i , x in enumerate ( t ) if x ]
sys path append ( '/path/ra_list/ ' )
[ ( ord ( x ) % 32 ) for x in char2 ]
traceback print_stack ( )
mock_function run ( 'wrong arguments ' )
json loads ( ' [ `` foo '' , { `` bar '' : [ `` baz '' , null , 1 0 , 2 ] } ] ' )
{ ' $ where ' : 'function ( ) { for ( var i=0 ; i < 1000000 ; i++ ) { } ; return true ; } ' }
time sleep ( 1 )                                      
entry objects bulk_create ( [ entry ( id=x ) for x in list ] )
'n ' , 'no ' , 'f ' , 'false ' , 'off ' , '0 '
return jsonify ( json_list=qryresult all ( ) )
t = map ( lambda s : s strip ( ) , t )
dict ( a )
print ( soup prettify ( ) )   
'\xa0 '
[ ( 4 0 , [ 4 0 , 4 1 , 4 2 , 4 3 ] ) , ( 8 9 , [ 8 9 , 9 0 , 9 4 ] ) ]
{ { myexample } }
parser add_argument ( '-r ' , default='0 ' , action='store ' )
bytes_string decode ( 'utf-8 ' )
b = dict ( zip ( i , i ) )
self transport write ( self message encode ( ) )
self canvas pack ( side='left ' , fill='both ' , expand=true )
time sleep ( 3 ) 
print ( '\t' join ( nested_list ) )
a , b = [ 1 , 3 , 4 , 5 , 6 ] [ :2 ]
np sort ( m ) [ : , -n : ]
array ( [ [ 4 , 5 ] , [ 1 , 4 ] ] )
foo __class__ __class__
`` `` '' \\s+ ( ? p < name > \\w+ ) \\d* ( ? p < num > \\d+ ) \\sof\\s ( ? p < item > [ ^ , ] + ) ( ? : ,\\d+ ) ? ( ? p < costs > \\d+ ) ? '' '' ''
print ( list ( itertools combinations ( '123 ' , 2 ) ) ) [ ( '1 ' , '2 ' ) , ( '1 ' , '3 ' ) , ( '2 ' , '3 ' ) ]
self redirect ( '/tasks ' )
set ( lista ) & set ( listb )
dict ( list ( x items ( ) ) | list ( y items ( ) ) )
[ e for l in lst for e in l ]
`` `` '' hello world ! `` `` ''  lstrip ( )
{ 'id ' : '83 ' , 'password ' : '12345 ' }
return [ y for y in listoflists if y [ x ]  isdigit ( ) ]
result append ( os path join ( root , name ) )
urllib request urlopen ( 'http : // ' + domain_idna )  read ( )
setattr ( self , pointer , group )
plt ylim ( -6 , 6 )
a [ [ 0 , 1 ] , [ 1 , 2 ] , 2 ]
np asarray ( [ 123 ] , dtype='|s2 ' )
raise notimplementederror ( )
re findall ( 'bus|cars|car|\\s ' , s )
`` `` '' two quotes : '\ '' '' '' ''
a [ 'abc ' ] = [ 1 , 2 ]
g add_edge ( 1 , 2 , color='blue ' )
f = open ( ' % s csv ' % name , 'wb ' )
sum ( 1 for _ in takewhile ( lambda x : x == a [ 0 ] , a ) )
i = int ( math floor ( x ) - 1 )
shutil make_archive ( 'simonszip ' , 'zip ' , 'files ' )
f ( [ [ 0 0 , 0 0 ] , [ 1 0 , 1 0 ] ] , [ [ 0 0 , 1 0 ] , [ 0 0 , 1 0 ] ] )
df [ 'flag ' ] [ df name str contains ( 'e $ ' ) ] = 'blue '
logging warn ( 'disable me with the -o option ' )
self setwindowtitle ( 'window title ' )
[ ( x , y ) for x , y , label in data_one ]
print ( a [ 'key3 ' ] )
`` `` '' this is \\n a test \\r '' '' ''
jdf = df _jdf
pprint ( dict ( grouped_by_soundex ) )
print ( 'first number is { } and second number is { } ' format ( first , second ) )
custom [ 1 ] [ 'b ' ]
cv2 imshow ( 'bottom ' , bottom )
time strftime ( ' % d % h : % m ' , time localtime ( int ( '1284101485 ' ) ) )
portalocker lock ( file , flags )
print ( m group ( 1 ) ) 
hand = { k : v for k , v in hand items ( ) if v ! = 0 }
ftp quit ( )   
red , green , blue , alpha = img split ( )
print ( bytes encode ( 'utf-8 ' )  decode ( 'utf-8 ' ) )
nx draw_networkx ( g )
df reorder_levels ( [ 'letter ' , 'color ' , 'number ' ] )
pl show ( )  
f = open ( 'lst ' , 'r ' )
x [ 'result ' ]  fillna ( method='ffill ' , inplace=true )
`` `` '' { 0 : < 15 } = { 2:6   { 1 } f } '' '' ''  format ( id , i , val )
return ' { } , d ( { } ) ' format ( super ( d , self )  __repr__ ( ) , self __dict__ )
print ( ' { 0 } { 1 } { 2 } ' format ( *mystuff [ x : x + 3 ] ) )
f = open ( os path join ( sub_dir , file ) )
[ [ copy deepcopy ( foo ) for x in range ( 10 ) ] for y in range ( 10 ) ]
'string with \\n escape ignored ' == 'string with \\n escape ignored '
data select ( lambda x : x [ 1 ] in [ 'a ' , 'b ' ] , axis=1 )
dict ( ( x1 , ( x0 , x2 ) ) for x0 , x1 , x2 in zip ( x [ : -2 ] , x [ 1 : -1 ] , x [ 2 : ] ) )
{ ( '10 10 10 10 ' , 'red ' ) : 64540 , ( '192 168 10 10 ' , 'blue ' ) : 3802 }
df div ( df sum ( 1 ) , axis=0 )
image = cv2 cvtcolor ( image , cv2 cv cv_bgr2rgb )
dill pickles ( f )
ls_output = subprocess popen ( [ 'ls ' , '-a ' ] , stdout=subprocess pipe )
m = sqrt ( a ** 2 + b ** 2 )
dt = yaml load ( `` dt : ! ! timestamp '2010-11-17 13:12:11 ' '' )
logging basicconfig ( filename='error log ' , level=logging debug )
int ( '10 ' ) < int ( '2 ' )
plt show
sys stdout close ( ) 
self render ( 'register_page html ' )
re sub ( ' \\ ( \\s+|\\s+\\ ) ' , lambda x : x group ( )  strip ( ) , my_string )
df reindex ( df index drop ( 1 ) )
d [ 'key1 ' ] [ 'key2 ' ] [ 'key3 ' ] [ 'key4 ' ] [ 'key5 ' ]
x [ index ] if len ( x ) > index else default
ax ticklabel_format ( style='sci ' , scilimits= ( -3 , 4 ) , axis='both ' )
df apply ( you_function , axis=1 )
result = subprocess check_output ( [ 'your_program exe ' , 'arg1 ' , 'arg2 ' ] )
self show ( )  
print ( capitalize_nested ( [ 'this ' , 'that ' , [ 'other ' ] ] ) )
driver get ( 'http : //jsfiddle net/falsetru/mlgnb/show/ ' )
cursor execute ( query_insert , data * 2 )
canvas config ( scrollregion=canvas bbox ( all ) )
list ( itertools chain ( *list ( foo values ( ) ) ) )
`` `` '' '' '' ''  join ( t )
1 , 0 , 0 , 0 , 0 , 0 , 0
data [ data [ : , ( 0 ) ]  argsort ( ) ]
struct pack ( ' > i ' , 456 )  lstrip ( chr ( 0 ) ) or chr ( 0 )
mystring = mystring replace ( '\r ' , '' )  replace ( '\n ' , '' )
plt show
word = word [ : x ] + ' , \n '
len ( lst ) - lst count ( none )
' % ( 0 ) s % ( 1 ) s % ( 1 ) s ' % { '0 ' : 'foo ' , '1 ' : 'bar ' }
logging handlers pop ( )
list ( min ( x , y ) for x , y in zip ( [ 1 , 2 , 3 , 4 ] , [ 0 , 10 , 0 , 10 ] ) )
result = [ numbers [ i ] for i in indices ]
driver save_screenshot ( 'testing2 png ' )
setattr ( type ( obj ) , 1 , 'change ' )
ax set_ylim ( 0 , 3 )
hsub = h [ 1 : h shape [ 0 ] - 1 , 1 : h shape [ 1 ] - 1 ]
logging config stoplistening ( )
domain = a split ( ' @ ' ) [ 1 ]
x = y [ np arange ( a ) [ : , ( none ) ] + np arange ( b ) ]
ax plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) )
re findall ( 'imgurl= ( [ ^ & ] + ) & ' , url )
[ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ]
result append ( '\n' join ( row_result ) )
app run ( debug=true )           
random seed ( seed )
re compile ( '\\d { 3 } ' )
plt show
print ( proc stdout readline ( ) )
pd dataframe ( l )
s = open ( filename , 'r ' )  read ( )
plt show
urlpatterns = patterns ( '' , url ( '^tasks/ ' , include ( 'djcelery urls ' ) ) )
root title ( 'feudhjelper av martin skow r\xc3\xb8ed ' )
cursor execute ( sql , ( val1 , val2 ) )
random choice ( string ascii_letters )
cv2 imwrite ( 'color_img jpg ' , img )
' % i % i ' % ( true , false )
x groupby ( [ 'name ' , x [ 'value ' ] > 0 ] ) [ 'tickets ' ]  sum ( )
user query filter_by ( **kwargs )
array ( [ 0 , 1 , 0 , 0 ] )
df drop ( df columns [ [ 1 , 69 ] ] , axis=1 , inplace=true )
fileh close ( )
print ( link get_attribute ( 'href ' ) )
df groupby ( pd periodindex ( df columns , freq='q ' ) , axis=1 )  mean ( )
ax set_xlabel ( 'x label ' )  
super ( stop , self )  save ( )
ax xaxis set_ticks_position ( 'none ' )
a = np delete ( a , zero_row , 0 )
file_writer writerow ( [ x [ i ] for x in lol ] )
[ x [ 'filemod ' ] for x in filelist if x [ 'filename ' ] == 'filename2 typ ' ] [ 0 ]
len ( s encode ( 'utf-32 ' ) )
plt show
[ ( 'xxx ' if item == 'abc ' else item ) for item in mylist ]
g filter ( lambda x : len ( x ) > 1 )
request session [ '_username ' ] = request user username
df t groupby ( level=0 )  first ( )  t
sorted_df = df sort_values ( df last_valid_index ( ) , axis=1 )
[ [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ]
tornado ioloop ioloop instance ( )  start ( )  
'development ' in os environ [ 'server_software ' ]
a = [ 1 , 2 , 3 ] 
[ sympy diff ( sum ( m * m t ) , i ) for i in m ]
programs = tapjoy - game1 , tapjoy - game2
arr [ [ 2 , 1 ] ]
t start ( )     
np in1d ( fake , [ 0 , 2 , 6 , 8 ] )  reshape ( fake shape )
thread start_new_thread ( interrupt_user , ( ) )
merge ( df1 , df2 , on='key ' ) [ [ 'col1 ' , 'col2 ' , 'col3 ' ] ]
datetime date ( 2010 , 6 , 16 )  strftime ( ' % v ' )
requests post ( url , data=data )
graph post ( 'me/feed ' , message='hello world ! ' )
soup findall ( re compile ( '^a $ | ( div ) ' ) )
sys stdout flush ( )                                 
parser add_argument ( ' -- doh ' , action='store_true ' )
return jsonresponse ( { 'foo ' : 'bar ' } ) 
5 55 % 1
json_string = json dumps ( row )
s flush ( )
sys stdout flush ( )                                  
df [ ( df a == 'blue ' ) & ( df b == 'red ' ) & ( df c == 'square ' ) ] [ 'd ' ] = 'succeed '
plt show
cursor execute ( 'set transaction isolation level repeatable read ' )
return len ( os listdir ( directory ) )
print ( socket gethostbyname_ex ( socket gethostname ( ) ) [ 2 ] )
cgi parse_qs ( qs )
d get ( 'ham ' , { } )  get ( 'fry ' , 88 )
all ( 0 < n < 50 for n in thetuple )
songs sort_index ( by= [ 'peak ' , 'weeks ' ] , ascending= [ true , false ] )
list_of_nums [ : ] = [ x for x in list_of_nums if x ! = 2 ]
lambda m : replacement_dict get ( m group ( ) , m group ( ) )
s call ( [ 'gpio ' , '-g ' , 'read ' , '17 ' ] )
helv36 = tkfont font ( family='helvetica ' , size=36 , weight='bold ' )
return df groupby ( [ 'state ' , 'city ' ] )  resample ( '2d ' )  sum ( )
sum ( [ i for i in l1 if isinstance ( i , int ) ] )
[ [ k , len ( list ( g ) ) ] for k , g in groupby ( strs ) ]
print ( '' join ( ' { } _ { } ' format ( k , v ) for k , v in r items ( ) ) )
timedelta ( hours=3 ) + timedelta ( hours=2 )
ax1 set_yticks ( [ int ( j ) for j in range ( 0 , 4 ) ] )
static_root = os path join ( base_dir , 'play/ ' )
f = parser parse ( 'sin ( x ) *x^2 ' )  to_pyfunc ( )
os system ( 'firefox ' )
print ( s issuperset ( '013456789 ' ) )
plt subplot ( 122 ) , plt imshow ( cv2 cvtcolor ( img , cv2 color_bgr2rgb ) )
ax set_zlim ( 0 , 100 )
im = cv2 imread ( path , -1 )
blob_service get_blob_to_path ( 'containername ' , 'blobname ' , 'localfilename ' )
country objects filter ( code=country_reverse [ 'france ' ] )
return zip ( xnew [ 1 : ] , ynew [ 1 : ] )
return super ( linguistresource , self )  build_filters ( filters )
f = lambda x , a=a : x ** a
p = np array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
raise exception ( 'message ' )
cursor execute ( 'select username , password from galaxy_user ' )
re sub ( '\n* ' , '' , yourstring )
df loc [ 3 ] = [ 'v1 ' , 4 3 , 2 2 , 2 2 , 20 2 ]
pygame mixer music play ( ) 
print ( 'ohai ' )
django setup ( ) 
datetime date today ( )
setattr ( instance , function __name__ , function __get__ ( instance ) )
`` `` '' ( ? i ) \\b ( ( ? : https ? : //|www\\d { 0,3 } [   ] | [ a-z0-9 \\- ] + [   ] [ a-z ] { 2,4 } / ) ( ? : [ ^\\s ( ) < > ] +|\\ ( ( [ ^\\s ( ) < > ] +| ( \\ ( [ ^\\s ( ) < > ] +\\ ) ) ) *\\ ) ) + ( ? : \\ ( ( [ ^\\s ( ) < > ] +| ( \\ ( [ ^\\s ( ) < > ] +\\ ) ) ) *\\ ) | [ ^\\s` ! ( ) \\ [ \\ ] { } ; : ' ''   , < > ? « » “ ” ‘ ’ ] ) ) '' '' ''
subprocess call ( [ 'grep ' , 'one ' , 'file_1 txt ' ] )
`` `` '' xpath=//a [ text ( ) ='submit » ' ) ] '' '' ''
array ( [ [ 1 , 1 , 1 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 4 , 4 , 4 ] ] )
dis dis ( compile ( 'a , b , c ' , '' , 'eval ' ) )
zip ( *filterer ( list1 , list2 ) )
max ( l1 , l2 , key=len )
numpy sqrt ( numpy sum ( ( a - b ) ** 2 ) )
sorted ( nums , key=lambda x : str ( x )  ljust ( 10 , ' ' ) , reverse=true )
print ( var get ( ) )
all ( isinstance ( e , int ) and e > 0 for e in [ 1 , 2 , 'joe ' ] )
re findall ( '\\ { (  + ? ) \\ } ' , request params [ 'upsell ' ] )
v = np array ( [ [ 3 ] , [ 4 ] , [ 5 ] ] )
ax plot ( x , y , z )
`` `` '' '' '' ''  join ( format ( ord ( c ) , '02x ' ) for c in text )
sys stdout write ( ' { 0 : < 7 } { 1 : < 51 } { 2 : < 25 } \n' format ( code , name , industry ) )
__init__ py              
np argsort ( k ) [ -5 : ]
`` `` '' { :  2f } '' '' ''  format ( 1 679 )
getattr ( module_a , mod ) ( )
pd dataframe ( rows , columns=df columns )
plt plot ( dates , values , 'xb- ' )
c [ a & b ]
fcntl fcntl ( fd , fcntl f_setfl , oldflags )
print ( '' join ( c for c in s if c islower ( ) ) )
lol = lambda lst , sz : [ lst [ i : i + sz ] for i in range ( 0 , len ( lst ) , sz ) ]
output_file close ( )
df groupby ( 'a ' ) [ 'c ' ]  apply ( sum )
gpio output ( 4 , false )
`` `` '' { name } is a { adjective } { noun } that { verb } '' '' ''  format ( **locals ( ) )
f ( 3 , [ 'a ' , 'b ' ] )
p update ( ** { 'set__name ' : 'hank ' , 'set__address ' : 'far away ' } )
print ( 'key : % d ; value : % s < br / > ' % ( key , value ) )
plt legend ( )   
canvas save ( )
[ 2 , 5 , 7 , 8 , 9 , 12 ]
min ( alist , key=itemgetter ( 1 ) ) [ 1 ] , max ( alist , key=itemgetter ( 1 ) ) [ 1 ]
print ( ' { :0 > 8 4f } ' format ( 2 02 ) )
main ( )          
ax plot ( x , y , '- ' , color='black ' , linewidth=5 )
[ re findall ( '\\w+|\\w+ ' , s ) for s in lst ]
setattr ( self , k , v ) 
a [ ~np isnan ( a )  any ( axis=1 ) ]
[ ( a split ( '- ' , 1 ) [ 0 ] , b ) for a , b in sorted_x ]
scipy signal ltisys lti
log warning ( 'test ' )
`` `` '' ? \\ ( \\w+\\ ) '' '' ''
return [ x for x in result stdout readlines ( ) if 'duration ' in x ]
urllib request urlopen ( url )
execute ( ssh_keygen , 'jbloggs ' , '/home/jbloggs ' , host='server1 ' )
dfunstacked2 columns
meta session commit ( )
self layout addwidget ( self button ) 
re split ( ' ( ? < = > ) (  + ? ) ( ? = < ) ' , ' < label > olympic games < /label > ' )
np tensordot ( a , b , axes= [ [ 0 , 1 ] , [ 0 , 2 ] ] )
set_vibration ( 0 , 1 0 , 0 5 )
list ( insert_none ( [ 1 , 2 , 3 , 4 , 5 ] ) )
fig canvas mpl_connect ( 'draw_event ' , on_draw )
p apply ( f , 'items ' )
io open ( 'test txt ' , 'r ' , newline= '' )  readlines ( )
cv waitkey ( 0 ) 
root mainloop ( )                                                                        
text = re sub ( ' ( get ) ' , '\\1 @ ' , text )
pipe = subprocess popen ( [ 'perl ' , 'uireplace pl ' , var ] )
result = set ( d [ 0 ] )  intersection ( *d [ :1 ] )
self root mainloop ( )
rc ( 'mathtext ' , fontset='stixsans ' )
print ( re findall ( ' [ ^- ] +- [ ^- ] + ' , s ) )
gevent wait ( )
plt savefig ( 'test pdf ' )   
sess run ( y , feed_dict= { i : d for i , d in zip ( inputs , data ) } )
c = list ( chain ( *zip ( a , b ) ) )
df [ 'name ' ]  isin ( [ 'alice ' , 'bob ' ] )
outfile write ( '\n ' )
response = requests post ( url , data=json dumps ( payload ) , headers=headers )
df [ 'hb ' ] - 5 
math isnan ( x )
logger setlevel ( logging info )
print ( counter ( ngrams ( 'abbabcbabbabr ' ) ) )
a , b = [ f ( ) [ k ] for k in ( 'a ' , 'b ' ) ]
return re sub ( ' ( - ? \\d+ ) | ( \\+1 ) ' , lambda m : str ( int ( m group ( 0 ) ) - 1 ) , text )
255 , 255 , 255
[ '* ' , 'sin ' , 'x ' , 'pow ' , 'x ' , 2 ]
res drop ( [ 'abstract ' , '_merge ' ] , axis=1 )
return { k : v for k , v in d items ( ) if k startswith ( s ) }
[ set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) , set ( [ 9 , 10 , 11 ] ) ]
plt show
( dict ( x=x [ ii ] , y=y [ ii ] , z=z [ ii ] ) for ii in range ( 10 ) )
igd connect ( 'mapped-external-port ' , mep )
np array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )  size
f write ( 'foo ' )  
cur execute ( 'select x from test order by x collate reverse ' )
time sleep ( 1000 )
res = [ dict ( ( k , none ) for k in line ) for line in l ]
__tablename__ = 'paste_code '
new_module = __import__ ( modulename )
path = path decode ( 'utf8 ' )
driver quit ( )         
print ( my_list )
result = json dumps ( response [ 1 ] )
leaderboard = session query ( player )  order_by ( player score )  all ( )
labels = [ 'a ' , 'b ' , 'c ' , 'a ' , 'b ' , 'a+b ' , 'c ' , 'a+b+c ' ]
s = map ( sum , zip ( * ( [ s ] * 2 ) ) )
np random rand ( 2 , 3 )
max_index = max ( max_index , index )
data tz_localize ( 'utc ' )
[ ( x + y ) for x , y in itertools zip_longest ( '12345 ' , 'ab ' , fillvalue='* ' ) ]
doc xpath ( '//prefix : element ' , namespaces=nsmap )
print ( repr ( input ( ) ) )
run ( 'mkdir -p /home/frodo/tmp ' )
self assertequal ( result , 'mary had a little lamb \n ' )
a = [ [ 1 , 2 ] , [ 3 , 4 ] ] sum ( map ( sum , a ) )
timeit ( lambda : list ( test ( 12 , 5 ) ) , number=1 )
print ( obj __class__ __name__ replace ( '_deferred_name ' , '' ) )
root mainloop ( )                                                                         
striped = [ l split ( ) for l in [ c strip ( ) for c in file_desc readlines ( ) ] if l ]
test dosomethingelse ( )
df words str contains ( 'he|wo ' )
agent = driver execute_script ( 'return navigator useragent ' )
time sleep ( 1 )                                       
print ( ' , ' join ( str ( e ) for e in s ) )
logfile write ( msg + '\n ' )
list ( filter ( or_ ( cots langauge == 'en ' , cots language == none ) ) )
sys stdout = open ( 'file ' , 'w ' )
plt bar ( x , y , color='indianred ' , tick_label=label , align='center ' )
plt show
res = list ( timestables ( 5 ) )
return np exp ( 2j * np pi * np random rand ( n , 1 ) )  view ( dtype=np float64 )
model _meta get_field ( 'g ' )  get_internal_type
setattr ( self , k , kwargs [ k ] )
df columns = [ ( 'log ( gdp ) ' if x == 'gdp ' else x ) for x in df columns ]
d setdefault ( k , [ ] )  append ( v )
b2 [ np in1d ( b1 , a ) ]
[ x for t in a for x in t ]
root mainloop ( )                                                                          
f close ( )                                
ax set_aspect ( 'auto ' )
ax set_aspect ( 'equal ' ) 
print ( doc xpath ( '//element [ text ( ) = '' a '' ] ' ) [ 0 ]  text )
temp = lambda x , i=i : x + i
a = [ [ none ] * 7 ] * 7
np any ( [ ( x == i ) for i in ( 2 , 3 ) ] , axis=0 )
s * a == s * a + s * 0
plt plot ( *zip ( *a ) )
' %  2f ' % round ( 2606 89579999999 , 2 )
dict fromkeys ( my_list )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
list ( { v [ 'id ' ] : v for v in l }  values ( ) ) 
ax axes get_yaxis ( )  set_visible ( false ) 
parser add_argument ( '-a ' , narg=2 )
print ( ' % s % s % s ' % ( 'python ' , 'is ' , 'fun ' ) )
object = object __iadd__ ( value )
struct pack ( ' > i ' , 1 ) 
try : float ( element ) except valueerror : print ( 'not a float ' )
[ 'hattrick ' , 'google ' , 'wampum ' , 'newcom ' ]
mylist [ : ] = [ x for x in mylist if x not in totoss ]
time sleep ( 60 )   
pandas set_option ( 'expand_frame_repr ' , false )
dict ( lst )
out sort_index ( level= [ 'book ' , 'trader ' ] )
ax imshow ( img , interpolation='none ' )
logging info ( 'finished ' )
a = a [ 0:100 ]
dt datetime strptime ( '30mar1990 ' , ' % d % b % y ' )
next ( n for n in range ( 1000 , 3 , -1 ) if str ( n ) == str ( n ) [ : :-1 ] and is_prime ( n ) )
[ ' % y- % m- % d ' , ' % m/ % d/ % y ' , ' % m/ % d/ % y ' ]
parser parse_args ( ) 
workbook close ( )    
__init__ py               
open ( 'newfile txt ' , 'wb ' )  write ( data )
numpy random seed ( 42 )
canvas pack ( side=left , expand=true , fill=both )
command3 stdin close ( )
self write ( jsonp )
re findall ( '\\w+ ' , 'abc def g\xc3\xbci jkl ' , re unicode )
0 , 1 , 0 , 0 , 0 , 0 , 0
conn commit ( )                
self grid_rowconfigure ( 0 , weight=1 )
`` `` '' say ( ? p < value >  + ) endsay '' '' ''
foobar objects filter ( q ( blah=1 ) ^ q ( bar=2 ) )
re findall ( '   { 1,2 } ' , '123456789 ' )
re findall ( '   ' , '1234567890 ' )
re findall ( '   ? ' , '123456789 ' )
size = re findall ( '\\d { 1,3 } ( ? : ,\\d { 3 } ) * ( ? : \\ \\d+ ) ? ' , my_string )
del mylist [ -2 : ]
parser parse_intermixed_args ( [ 'fileone ' , '-a ' , 'filetwo ' , '-b ' , 'filethree ' ] )
plt show
time sleep ( 5 )          
`` `` '' '' '' ''  join ( ' % 3d ' % num for num in nums )
ax2 yaxis set_major_locator ( maxnlocator ( nbins=nbins , prune='upper ' ) )
s = [ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ]
[ 'tc2 ' , 'tc1 ' , 'er ' , 'tc4 ' , 'tc3 ' ]
'\u0430\u0431\u0432\u0433\u0434 '
ax set_ylabel ( 'radiation ( $ mj\\ , m^ { -2 } \\ , d^ { -1 } $ ) ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
worker start ( )
plt figure ( )     
child kill ( )
df2 = concat ( [ df ix [ :2 ] , line , df ix [ 3 : ] ] )  reset_index ( drop=true )
[ item for item in yourlist if item % 2 ]
{ 'phrase ' : `` i 'm cool ! `` , 'age ' : 12 , 'name ' : 'bob ' , 'hobbies ' : 'games , reading ' }
`` `` '' , '' '' ''  join ( l )
a encode ( 'latin-1 ' )
df [ 'data ' ]  convert_objects ( convert_numeric=true )
return [ int ( i in locs ) for i in range ( size ) ]
cur execute ( 'select d from test ' )
`` `` '' , `` '' ''  join ( subdict [ 'data3 ' ] for subdict in list ( maindict values ( ) ) )
time sleep ( 2 )  
`` `` '' | '' '' ''  join ( list ( x values ( ) ) )
s groupby ( s index weekday )  transform ( lambda x : pd rolling_mean ( x , window=n ) )
matrix [ 0 ]  extend ( [ 'str6 ' ] )
plt show
[ x for x in matrix if x [ 2 ] == 0 0 ]
ax xaxis set_major_formatter ( scaledformatter ( dx=6 ) )
run ( 'hostname ' )
s quit ( )
doc = lxml html fromstring ( res content )
time time ( )
set ( a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] == a [ i - 1 ] )
a [ np isnan ( a ) ] = 0 0
re escape ( ' [ ' ) == ' [ '
new_list = [ dict ( ( transform [ k ] , v ) for k , v in list ( d items ( ) ) ) for d in old_list ]
pandas set_option ( 'display max_rows ' , 0 )
super ( mainwindow , self )  __init__ ( *args , **kwargs )
sys path append ( root ) 
outfile write ( 'new line3\n ' )
plt show
df [ 'col ' ]  plot ( style= '   ' )
max ( t , key=lambda e : ( -e [ 1 ] , e [ 2 ] ) )
print ( pd merge ( t2 , t4 [ [ 'store_code ' , 'groups ' ] ] ) )
urlparse urljoin ( 'http : //www foo com/stuff/mike/doc html ' , '  /bob/doc html ' )
[ ( 2 , 3 ) ]
struct unpack ( ' > i ' , bytes )
regex findall ( s )
from functools import reduce reduce ( lambda x , y : x + y * y , [ l [ :1 ] [ 0 ] ** 2 ] + l [ 1 : ] )
sorted ( l , key=lambda x : ( x is none , x ) )
result_list = list ( map ( list , deduped ) )
test ( [ 'important ' ] )
re split ( '\\ [ |\\ ] *\\ [ ? ' , s ) [ 1 : ]
f seek ( 0 )   
display sendstop ( )
input close ( )
print ( '2 + ' + str ( integer ) + ' = ' + str ( rslt ) ) 
counter_list = [ item for item in counter_list if item ]
ax set_title ( 'lalala ' )
driver implicitly_wait ( secs )
return app config [ 'session_cookie_domain ' ]
proc stdin write ( 'here , have some data\n ' )
logger error ( 'an error ' )
x reindex ( pd date_range ( '2013-11-1 ' , periods=4 ) , fill_value=0 )
print ( vars ( args ) [ 'lambda ' ] )
print ( s strftime ( ' % h : % m % d % b % y ( utc ) ' ) )
print ( 'i is 5 and ii is 10 ' )
data groupby ( [ lambda x : x year , lambda x : x time ] )
plt show
locale atof ( '1,000,000 53 ' )
print ( `` you 'll see this '' )
plt xticks ( list ( range ( 10 ) ) , labels )
exec ( '\n' join ( ' % s= % r ' % i for i in list ( d items ( ) ) ) )
res = service cse ( )  list ( q=search_term , cx=my_cse_id )  execute ( )
matplotlib use ( 'gtkagg ' )
os chdir ( 'c : \\users\\username\\desktop\\headfirstpython ' )
{ p id : { 'id ' : p id , 'position ' : i } for i , p in enumerate ( p_list ) }
clean = [ x for x in lis if x is not none ]
figure set_size_inches ( 8 , 6 )
__init__ py                
print ( 'e\u0301a ' [ : :-1 ] )
result = [ x decode ( 'utf8 ' ) for x in proc stdout readlines ( ) ]
ax set_xlabel ( 'time of posting ( us est ) ' )
ax = fig add_subplot ( 111 , projection='3d ' ) 
max ( enumerate ( ld ) , key=lambda x_y : x_y [ 1 ] [ 'size ' ] ) [ 0 ]
( np arange ( a max ( ) ) == a [ : , : , ( none ) ] - 1 )  astype ( int )
os rmdir ( temp_dir )
plt show
subprocess call ( cmd , shell=true )
hasattr ( obj , '__call__ ' )
pua = re compile ( ' [ \ue000-\uf8ff\u000f0000-\u000fffff\u00100000-\u0010ffff ] ' )
[ ( a [ 'a ' ] == b [ 'a ' ] ) for a , b in zip ( x1 , x2 ) ]
[ 'a ' , 'b ' , 'c ' ] 
cur execute ( query , ( sortname , limit1 , limit2 ) )
dt = dt_tz replace ( tzinfo=none )
print ( [ d isoformat ( ) for d in get_week ( datetime datetime now ( )  date ( ) ) ] )
root mainloop ( )                                                                           
[ 'five ' , 'two ' , 'three ' , 'six ' , 'four ' , 'one ' ]
self stdout write ( serializers serialize ( 'json ' , records , indent=2 ) )
bisect bisect_left ( mylist , comparevalue )
spam_list = [ spam_list [ i ] for i in spam_order ]
ax set_xlim ( [ 0 , n ] )
fh4 close ( )
print ( ' { : x } ' format ( num ) )
plot ( x , y )
np vstack ( { tuple ( row ) for row in a } )
print ( find_values ( 'p1 ' , json_repr ) )
data decode ( 'hex ' )
conn = s3connection ( ' < aws access key > ' , ' < aws secret key > ' ) 
ser read ( 5 )
random sample ( list ( range ( 1 , 10 ) ) , 10 - 1 )
print ( data groupby ( 'currency ' )  apply ( f ) )
l = l [ 1 : :2 ]
plt show
b = a [ : , : , : :-1 ]
parser parse_args ( )  
fn = lambda x : sys stdout write ( str ( x ) + '\n ' )
[ ( a % 1 ) for a in l ]
ax set_xticklabels ( years , rotation=30 )
foo ( 1 , 2 , 3 )
se2 commit ( )
time strftime ( ' % y- % m- % d % h : % m : % s ' , time gmtime ( ) )
sys path insert ( 0 , ' /lib ' )
print ( element get_attribute ( 'value ' ) )
[ j for i in x for j in i ] 
r = requests post ( url , data=body , headers=headers )
ax axis ( 'image ' )
d strftime ( ' % m ' )
print ( np allclose ( cols , cols2 ) )
data sort ( key=lambda entry : entry [ 1 ] , reverse=true )
ssh set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )  
df to_csv ( 'names ' , encoding='utf-8 ' )
print ( expon rvs ( 5 , size=30 ) )
db session commit ( )            
df [ 'column_new ' ] = df [ 'column ' ]  str split ( ' , ' )
time sleep ( 1 )                                        
return l [ : :-1 ]
rolling_corr iloc [ -200 : ]  mean ( axis=0 )
list ( itertools permutations ( set ( [ 1 , 1 , 2 , 2 ] ) ) )
[ t for t in mylist if t [ 0 ] == 10 ]
d = image objects filter ( ** { 'image__endswith ' : 'jpg ' } )
x [ 0 , 0 ] - a [ 0 ] , x [ 0 , 1 ] - a [ 1 ] , x [ 0 , 2 ] - a [ 2 ] , x [ 0 , 3 ] - a [ 3 ]
x [ 0 , 0 ] - a [ 0 ] , x [ 1 , 0 ] - a [ 1 ] , x [ 2 , 0 ] - a [ 2 ] , x [ 3 , 0 ] - a [ 3 ]
df isnull ( )  values ravel ( )  sum ( )
unittest main ( )           
a [ a < 0 ] += 1
isinstance ( re compile ( '' ) , re _pattern_type )
print ( myintfunction ( 5j ) )
`` `` '' { 0:15 2f } '' '' ''  format ( 1464 1000000000001 )
new_list = [ foo for foo in foos if foo location == 2 ]
a reshape ( -1 , m / k , k )  transpose ( 1 , 0 , 2 )  reshape ( -1 , k )
socket setdefaulttimeout ( 15 )
print ( list ( chain from_iterable ( a ) ) )
[ hex ( ord ( c ) ) for c in chars ]
return httpresponse ( response content )
os startfile ( file )
gtk main_iteration ( )  
a = [ operation ( a [ i ] , a [ i + 1 ] ) for i in range ( len ( a ) - 1 ) ]
df [ [ 'col2 ' , 'col3 ' ] ]  drop_duplicates ( )
print ( etree tostring ( builder , pretty_print=true ) )
root mainloop ( )                                                                            
4 * scipy integrate nquad ( f , [ [ 0 , 1 ] , [ 0 , 1 ] ] ) [ 0 ] / 12 565472446489999
sys stdout flush ( )                                   
max ( self allpartners , key=attrgetter ( 'attrone ' ) )
return '' join ( i for i in s if ord ( i ) < 128 )
array ( [ [ 1 0 , 0 0 , 0 0 ] , [ 0 0 , 1 0 , 0 0 ] , [ 0 0 , 1 0 , 0 0 ] , [ 0 0 , 0 0 , 1 0 ] ] )
[ ( 2 , 3 , 4 , 5 ) , ( 6 , 7 , 8 ) , ( 9 , 10 ) ]
len ( [ i for i in a if i [ 'value ' ] == 'blah ' ] )
print ( ' % 27s % 5s ' % ( key , value ) )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
numpy array ( data ) [ : , ( [ 0 , 2 ] ) ]
task retry ( queue='worker1 example com ' )
s configure ( 'my tframe ' , background='red ' )
`` `` '' , `` '' ''  join ( ' '' { 0 } '' ' format ( w ) for w in words )
a = set ( )
demo ( ( 5 , 5 ) , [ ( 5 , 3 ) , ( 5 , 1 ) , ( 8 , 2 ) , ( 4 , 3 ) , ( 1 , 5 ) , ( 3 , 5 ) ] )
bin = ' { :0 { } b } ' format ( r , self n )
print ( etree tostring ( new_root , pretty_print=true ) )
a = list ( set ( a ) ) 
result_array , result_variable = my_function ( )
a sort ( key=lambda x : b count ( x ) )
my_dict = { x [ 0 ] : { k : v for k , v in zip ( my_headers , x [ 1 : ] ) } for x in my_list }
input ( 'hello % r , what is your age ? ' % firstname )
end_date = date_1 + datetime timedelta ( days=10 )
manager add_command ( 'runserver ' , gunicornserver ( ) )
random sample ( the_list , 50 )
a , b , c , d = [ x [ i : i + step ] for i in range ( 0 , len ( x ) , step ) ]
subprocess call ( [ 'c : \\temp\\a b c\\notepad exe ' , 'c : \\test txt ' ] )
ax hist ( mydata , weights=np zeros_like ( data ) + 1 0 / data size )
imshow ( b , interpolation='nearest ' )
wavwriter writeframes ( data_bytes [ 0:3 ] )
`` `` '' c : \\program files\\python\\python exed : \\github\\miscellaneous-programs\\python\\check py '' '' ''
data view ( dtype= [ ( n , 'float64 ' ) for n in csv_names ] )  reshape ( len ( data ) )
x , y = y , x
a = min ( a , b )
wx frame __init__ ( self , parent , id , title , pos , size , style )
grayimg = cv2 cvtcolor ( image , cv2 cv cv_bgr2gray )
str ( hrs ) + ' : ' + str ( min ) + ' : ' + str ( sec ) + '   ' + str ( msec )
subprocess call ( [ 'gpsctl ' , '-c ' , '0 2 ' ] )
this_function_name = sys _getframe ( )  f_code co_name
df_new head ( )
min ( li , key=lambda x : x number )
print ( datetime datetime strptime ( '2010-15-27 ' , ' % y- % m- % d ' ) )
datetime fromtimestamp ( timestamp2 )
socket inet_ntoa ( struct pack ( ' < l ' , addr_long ) )
nx write_graphml ( g , 'my_graph graphml ' )
print ( json dumps ( s ) )
sorted ( flist , key=lambda friend : friend [ 'name ' ] )
print ( df interpolate ( method='nearest ' , axis=0 )  ffill ( )  bfill ( ) )
tk button ( root , text='refresh ' , command=refresh )  grid ( )
cv2 imshow ( 'dst_rt ' , img )
re findall ( ' ( [ a-z ] [ \\w- ] * ( ? : \\s+ [ a-z ] [ \\w- ] * ) + ) ' , article )
df ix [ idx ] 
rest = text split ( sep , 1 ) [ 0 ]
cursor executemany ( sql , rows )
a append ( s )
df replace ( d )
print ( 'mystr is empty ' )
btn1 grid ( row=0 , column=0 , columnspan=1 , sticky='ewns ' )
[ m start ( ) for m in re finditer ( 'ab ' , s ) ] [ 2 ]
return unique_a view ( a dtype )  reshape ( ( unique_a shape [ 0 ] , a shape [ 1 ] ) )
f ( **arg_dict ( 'a , b , c , d , e ' ) )
f close ( )                                 
parser add_argument ( 'command ' )
tuple ( a split ( ' ; ' ) [ : -1 ] )
self bind ( wx evt_leave_window , self _onmouseleave )
plt show
ax2 scatter ( [ 1 , 2 ] , [ 3 , 4 ] )
print ( translit ( 'die gr\xf6\xdften katzenrassen der welt ' , 'de ' ) )
link get ( 'href ' )
set ( range ( 1 , 101 ) ) - s
self bind ( 's ' , self sharpen )
[ x for x in [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ] if x not in [ 'b ' , 'c ' ] ]
results = myclass objects all ( )  distinct ( 'my_integer ' )  order_by ( 'created_ts ' )
list1 sort ( key=natural_sort_key )
plt xlim ( -3 , 3 )
a = global_dict [ 'foo ' ]
sns kdeplot ( x , shade=true )
kwargs pop ( 'obj ' , none )
ast literal_eval ( `` [ 'first ' , 'sec ' , 'third ' ] '' )
set ( list2 )  issubset ( list1 )
local_file close ( )
json_string = json dumps ( foo __dict__ )
df iloc [ df index get_loc ( datetime datetime ( 2016 , 2 , 2 ) , method='nearest ' ) ]
return self queue pop ( )
left_df merge ( right_df , how='outer ' , indicator=true )
button1 pack ( side='bottom ' , padx=5 , pady=5 )
super ( cachemix , self )  __init__ ( *args , **kwargs )
list = map ( str strip , list )
session flush ( )
plt savefig ( 'mytable png ' )
[ list ( t ) for t in zip ( *l ) ]
res_list = [ x for x , _ in rows ]
s_datetime = datetime datetime strptime ( s , ' % y % m % d ' )
workbook = xlsxwriter workbook ( '2016 ' + str ( name_get ) )
return template ( var )  render ( context )
x [ 5 : ]
[ var for var in combinations ( [ 1 , 2 , 3 , 4 , 5 ] , 3 ) ]
imshow ( a , interpolation='nearest ' )
plt show
[ x for x in filter ( lambda x : x not in [ 'b ' , 'c ' ] , [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ] ) ]
list ( object [ 'value ' ] for object in test_data )
shutil rmtree ( name )
q = [ [ none for i in range ( 5 ) ] for j in range ( 4 ) ]
df [ 'pct_diff ' ] = df [ 'dew_p temp ( c ) ' ] / df [ 'dew_p temp ( c ) ' ]  iat [ 0 ] - 1
np flipud ( your_array )
p wait ( )   
df apply ( lambda row : row [ 1 ] if row [ 0 ] > 0 else row [ 2 ] , 1 )
vbar pack ( side=right , fill=y )
set ( a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] == a [ i - 1 ] ) 
np multiply ( np arange ( 1 , 5 ) , np cumprod ( [ 1 , 2 , 2 , 2 ] ) [ np newaxis ]  t )
timestamps sort ( )
qtcore qobject __init__ ( self )
df to_csv ( filename , date_format= ' % y- % m- % d ' )
url ( '^polls/ ( ? p < string > [ \\w\\- ] + ) / $ ' , 'polls views detail ' )
k append ( ( str ( x ) , { 'num ' : str ( y ) } ) )
return '\n' join ( res )
foo_bar = __import__ ( 'foo bar ' )
list ( k for k , g in itertools groupby ( x for x in numbers if x ! = 0 ) )
fvtool ( hd1 , hd2 )
[ int ( i ) for i in x [ num - n : num ] ]
res = cv2 matchtemplate ( img , template , cv2 tm_ccorr_normed )
foo = none
y = x reshape ( x shape [ 0 ] / 2 , 2 , x shape [ 1 ] , 2 )
print ( `` you 're not an admin   `` , os getpid ( ) , 'params : ' , sys argv )
a = datetime datetime today ( )  year
from functools import reduce result = [ reduce ( lambda x , y : x + y , l ) for l in a ]
{ 'name2 ' : 'value2 ' , 'name3 ' : 'value3 ' , 'name1 ' : 'value1=2 ' }
typedstring = input ( )
print ( re search ( ' ( ? p < url > https ? : // [ ^\\s ] + ) ' , mystring )  group ( 'url ' ) )
numpy rollaxis ( t reshape ( 3 , 3 , 3 , 3 ) , 2 , 1 )
test = df sort_values ( [ 'one ' ] , ascending= [ 0 ] )
con = mysqldb connect ( )
__import__ ( 'abc def ghi jkl myfile mymethod ' , fromlist= [ '' ] )
os system ( 'pause ' )
newlist = [ ( x / myint ) for x in mylist ]
self setwindowstate ( qtcore qt windowminimized )
main ( sys argv [ 1 ] , sys argv [ 2 ] , sys argv [ 3 ] )
cv2 destroyallwindows ( )         
datetime datetime ( 1890 , 1 , 1 , 0 , 0 )
pd read_csv ( reader ( gen ( ) ) )
plt show
session query ( mytable col1 )  count ( )
array ( [ [ 18 , 6 ] , [ 19 , 5 ] , [ 17 , 9 ] , [ 10 , 5 ] ] ) ,
r = requests get ( url , cookies=cj )
df iloc [ : , ( [ 1 ] ) ]
val0 = f ( list [ 0 ] )
plt show
br open ( 'https : //github com/login ' )
signal signal ( signal sigquit , handler )
re match ( '^org/ ( ? p < company_name > \\w+ ) / ? $ ' , 'org/companya ' )  groupdict ( )
self top_frame grid_columnconfigure ( 1 , weight=1 )
df3 = df2 sort_values ( by='somequantity ' , ascending=false )
sys stderr write ( 'debug : got line : ' + line )
sorted ( ( i , j ) for i , j in zip ( x , y ) )
args = parser parse_args ( )   
plt show
lambda x , y : x + y 
open ( location , mode )  write ( content )
parameters = urllib parse urlencode ( { 'param1 ' : '7 ' , 'param2 ' : 'seven ' } )
self response out write ( 'hello ' + name + ' ! ' )
db session commit ( )             
users = table ( 'users ' , metadata , autoload=true )
db commit ( )      
print ( 'bar ' )
time mktime ( dt timetuple ( ) ) + dt microsecond / 1000000 0 
mylist = [ item for item in data if item == 'number1 ' ]
( ( 0 , 1 ) , ) * 5
array ( [ [ 0 96488889 , 0 73641667 , 0 67521429 , 0 592875 , 0 53172222 ] ] )
round ( 315 15321531321 , 2 )
sys path append ( '/home/john/dependancies/pycharm-debug egg ' )
float ( 'nan ' )
return ' ' join ( input_string split ( ) ) == input_string strip ( )
return httpresponse ( 'please enable cookies and try again   ' )
plt savefig ( 'pal1 png ' )
[ false ] * 10
clusters = [ x [ labels == i ] for i in range ( n_clusters_ ) ]
x2 [ : , ( 0 ) ] = np roll ( x2 [ : , ( 0 ) ] , -2 )
print ( eval ( '2 + 4 ' ) )
matplotlib use ( 'agg ' ) 
plt show
print ( 'got error { ! r } , errno is { } ' format ( e , e args [ 0 ] ) )
self root mainloop ( ) 
ax1 plot ( x [ i : i + 2 ] , y [ i : i + 2 ] )
return f ( *args , **kw )
is_private = request post get ( 'is_private ' , false )
datetime datetime today ( )  weekday ( )
return ' % s and % s ' % ( ' , ' join ( words [ : -1 ] ) , words [ -1 ] )
os path dirname ( file )
stream close ( )
added sort ( key=lambda x : os stat ( os path join ( path_to_watch , x ) )  st_mtime )
f close ( )                                  
my_model save ( )  
c ravel ( )
ax = fig gca ( projection='3d ' )
fig savefig ( 'gradcolorline png ' )
ctx process ( target=foo , args= ( x , ) )  start ( )
json loads ( s replace ( `` ' '' , ' '' ' ) )
obj refresh_from_db ( )
[ i for i in my_list if my_counter [ i ] > 1 ]
' % s % d ' % ( s , i )
a = np array ( [ 1 , 2 , 3 , 4 ] )
infile close ( )
client images data ( img )
np random seed ( 1977 )
f = lambda x : x if x is not none else ''
df iloc [ df index get_indexer ( [ 2 , 7 ] ) ]
{ 'description ' : 'some description for the build ' }
df stack ( ) 
s ix [ 1:10 , ( 'b ' ) ]
`` `` '' '' '' ''  join ( c for c in s if c islower ( ) )
sys path append ( '/home/visgean/scripty/pymodules/ ' )
`` `` '' ^patternhere $ '' '' ''
numpy array ( list ( c ) ) 
browser = webdriver phantomjs ( desired_capabilities=dcap )
self frame pack ( )
g remove_nodes_from ( to_remove )
list ( blog objects filter ( name__startswith='beatles ' )  values ( ) )
e1sq = 0 006739497
reactor run ( )               
print ( line ) 
df apply ( lambda f : to_number ( f [ 0 ] ) , axis=1 )  sum ( )
plt xlim ( 0 , 10000 )
matplotlib pyplot plot_date ( dates , values )
file_name = os environ [ 'mapreduce_map_input_file ' ]
text_content = sel xpath ( '//a [ 1 ] //text ( ) ' )  extract ( )
wx frame __init__ ( self , *args , **kwargs )
arr = arr [ : , : , : :2 ]
'hello\xa0world' replace ( chr ( 160 ) , 'x ' )
df = pd dataframe from_dict ( map ( dict , df_list ) )
print ( 'x is 3 ! ' )
print ( match group ( 'peer_id ' ) )
return func ( *args , **kwargs )    
d sort_values ( [ 'ano ' , 'mno ' ] )  reset_index ( drop=true )
`` `` '' not-meta '' '' ''
plt ylim ( 0 , 30 )
row _make ( [ 1 , 2 , 3 ] )
bmp savefile ( 'screenshot png ' , wx bitmap_type_png )
os startfile ( 'c : \\samplebatch bat ' )
self checkqueue ( )
df groupby ( 'id ' )  agg ( fnc )  reindex_axis ( df columns drop ( 'id ' ) , 1 )
print ( rdd collect ( ) )
os system ( 'rmdir /s /q `` { } '' ' format ( directory ) )
np array ( [ int ( i ) for line in data for i in line split ( ) ] )  reshape ( ( 3 , 6 ) )
[ 'a ' , 'c ' ] 
np all ( a == 0 )
cursor execute ( 'select * from posts where tags like ? ' , ( tag , ) )
process_file ( sys argv [ 1 ] )
dirname2 = os path split ( dir ) [ 1 ]
ax scatter ( x , y , c=z , s=50 , edgecolor= '' )
ax1 yaxis set_visible ( false )
d set_start_comment ( 'data for class a ' )
{ 'y ' : 5 , 'z ' : 2 }
weightmatrix = [ { 'a ' : 0 , 'c ' : 0 , 'g ' : 0 , 't ' : 0 } for k in range ( motifwidth ) ]
m = [ row for row in l if 'a ' == row [ 0 ] ]
logging getlogger ( 'base bar ' )  error ( 'log from bar ' )
result = sum ( itertools islice ( some_list , 1 , none ) )
eval ( '2 + 2 ' )
df [ 'delta ' ] = df [ 'index_col ' ]  diff ( )
a [ np ix_ ( [ -1 , 0 , 1 ] , [ 2 , 3 , 4 ] ) ] += np ones ( ( 3 , 3 ) )
assert datetime now ( ) == datetime ( 2012 , 1 , 14 )
time time ( ) 
plt show
' % d : % d : d ' % ( hours , minutes , seconds )
df [ 'label ' ]  str join ( sep='* ' )  str get_dummies ( sep='* ' )
translation [ 'data ' ] [ 'translations ' ] [ 1 ] [ 'translate ' ]
help ( [ 'foo ' , 'bar ' , 'baz ' ] )
return not_done_yet
foo ( [ 1 , 3 , 5 ] , [ 2 , 4 , 6 ] )
inspect signature ( datetime datetime now )
print ( 'poll = ' , proc poll ( ) )
{ { ( mylist | slice ) : ' : ' } }
struct pack ( ' > i ' , 34 )
print ( np allclose ( rows , rows2 ) )
time sleep ( 0 5 )  
f ( )
prepopulated_fields = { 'slug ' : ( 'title ' , ) }
{ t [ 0 ] : t [ 1 : ] for t in s }
con commit ( )   
response = requests get ( 'http : //example com/api/add json ' , params=data )
print ( timestables ( 5 ) )
print ( ( animals [ 0 ] , animals [ 3 ] ) )
df1 ix [ : , ( 1 ) ]
self frames [ 'pagetwo ' ]  grid ( row=0 , column=0 , sticky='nsew ' )
np log ( 42 ** np array ( [ 3 , 4 ] ) ) / np log ( 42 )
admin site register ( session , sessionadmin )
logging getlogger ( '' )  addhandler ( console )
df [ 'c ' ] = [ a join ( b ) for a , b in zip ( df a , df b ) ]
my_dictionary [ 'foo ' ] += whatever
import imp imp reload ( user )
new_lst sort ( )
regex findall ( '\\p { lu } ' , '\xdc\xec\xd1 ' )
print ( [ v for v in simplex vertices ] )
print ( 'whatever you would like to print goes here , preferably in between tags to make it look nice ' )
os kill ( cpid , signal sigkill )
install packages ( 'package ' , '/users/yourusernamehere/anaconda/lib/r/library ' )
df values == rowmax [ : , ( none ) ]
tiffiles sort ( key=getint )
arr argsort ( ) [ : n ]
print ( re findall ( '\\a^   *\\  $ ' , data , re multiline ) )
random shuffle ( lst )  
my_array pop ( )
my_dictionary [ 'foo ' ] += new_variable
extensions = { 'spiders extensions faillog faillogger ' : 599 }
print ( hashlib md5 ( 'whatever your string is' encode ( 'utf-8 ' ) )  hexdigest ( ) )
fliplr ( m swapaxes ( 0 , 1 ) )
dict ( map ( lambda l : l split ( ) , s splitlines ( ) ) )
fig savefig ( 'theplot png ' )
df index = pd to_datetime ( df index )
print ( len ( '\uc815\uc815' encode ( 'utf-32 ' ) ) )
logger debug ( 'some message ' )
[ sum ( e ) for e in zip ( *data ) ]
logging config fileconfig ( os path join ( dirname , 'logging conf ' ) )
time sleep ( 10 )    
plt show
resp = requests get ( 'http : //example com ' , proxies=proxies )
os symlink ( '/usr/bin/python ' , 'python ' )
doc = lxml html parse ( url )
cur execute ( 'select arr from test ' )
word = list ( '* ' * len ( word ) )
plt savefig ( 'answerssa1a png ' )
median = numpy median ( a [ -30 : ] )
arr [ : , ( none ) ]
pd dataframe ( list ( d items ( ) ) )
[ 'arab world ' , 'arb ' , '1976 ' , '182208407088 856 ' ]
ax set_xlabel ( 'amount ( $ ) ' )
print ( ' { } : { } ' format ( name , getattr ( mod , name ) ) )
sys stdout write ( ' [ ' )
sys stdout write ( '\n ] \n } ' )
sys stdout write ( ' , ' )
sys stdout write ( ' ] ' )
c = [ [ ( 0 ) for col in range ( len ( b [ 0 ] ) ) ] for row in range ( len ( a ) ) ]
pickle loads ( encoded encode ( 'latin1 ' ) )
pd value_counts ( list ( concat ( df categories values tolist ( ) ) ) )
fh close ( )  
adate + datetime timedelta ( days=30 )
random shuffle ( x ) 
result = sorted ( mylist , key=lambda x : d [ x [ 0 ] ] )
df [ 'id ' ] = df [ 'id ' ]  str zfill ( 15 )
list_of_hets append ( hets )
maybechoice = ( 'y ' , 'yes ' ) , ( 'n ' , 'no ' ) , ( 'u ' , 'unknown ' )
w bind ( ' < 1 > ' , lambda event : w focus_set ( ) )
np unravel_index ( [ 0 , 18 , 26 ] , a shape )
cursor execute ( 'insert into table values ( % s , % d , % s ) ' , t )
urllib request urlopen ( url )  geturl ( )
plt ylim ( -3 , 3 )
np where ( ( a > = 6 ) & ( a < = 10 ) )
print ( a dtype )
df [ df isnull ( )  any ( axis=1 ) ]
datetime ( 2011 , 2 , 11 , 20 , 0 , 0 , 0 , pacific )  astimezone ( utc )  strftime ( ' % s ' )
index = numpy clip ( index , 0 , len ( my_list ) - 1 )
[ i for i in range ( 10 ) if i == 9 ]
print ( s encode ( 'string-escape ' ) )
input ( )   
plt subplot ( 212 , sharex=ax1 , sharey=ax1 )
print ( 'all following prints will be red     ' )
w setparent ( none )
d = dict ( itertools zip_longest ( fillvalue= '' , * ( [ iter ( l ) ] * 2 ) ) ) 
list ( s ) [ 0 ]
re sub ( ' ( \\w ) ( [ a-z ] ) ' , '\\1 \\2 ' , 'wordwordword ' )
glortho ( self left , self right , self bottom , self top , 1 , -1 )
pc set_edgecolor ( 'black ' )
s = re sub ( pattern2 , ' ' , s )  strip ( )
time += datetime timedelta ( hours=1 )
print ( type ( '\u0646\u0635 \u0639\u0631\u0628\u064a ' ) )
main ( )           
print ( ' { foo } ' format ( foo=foo ) )
`` `` '' '' ' '' '' ''
[ random random ( ) for _ in range ( 100000 ) ]
driver = webdriver chrome ( chrome_options=chrome_options )
links = soup findall ( 'a ' , { 'id ' : re compile ( '^c ' ) } )
getpass getuser ( ) 
return render_template ( 'users html ' , users=users )
f close ( )                                   
stokes_list = np vstack ( ( stokes_list , stokes_line ) )
print ( 'group somegrp does not exist   ' )
app mainloop ( )          
new_foo = ( item for item in foo if item % 3 ! = 0 )
ax plot ( x , y )    
plt show
plt show
df stack ( )  apply ( pd series )  unstack ( )  swaplevel ( 0 , 1 , 1 )  sort_index ( 1 )
offset = dt astimezone ( cet )  utcoffset ( )
os system ( 'echo -e `` at+sapbr=3,1 , '' apn '' , '' tata docomo internet '' \r\n '' > > ttyama0 ' )
print ( ' < % *s > ' % ( len ( text ) - 2 , text ) )
versions_list sort ( key=lambda s : [ int ( u ) for u in s split ( '   ' ) ] )
`` `` '' '' '' ''  join ( [ c for c in subj if c not in sc ] )
plt show
out_file write ( replace_all ( text , spelling_dict ) )
pytz timezone ( 'us/eastern ' )  localize ( datetime datetime ( 1901 , 1 , 1 ) )
ax1 set_ylim ( [ 0 , 5 ] )
f close ( )                                    
top5 = itertools islice ( my_list , 5 )
print ( ' % s : % s : % s ' % ( hours , minutes , seconds ) )
list_2 = [ i for i in list_1 if isinstance ( i , ( int , float ) ) ]
return render_to_response ( 'template html ' , { 'message ' : e message } )
np dtype ( [ ( 'a ' , double ) , ( 'b ' , double ) ] )
print ( ' , ' join ( repr ( e ) for e in list ) )
property = models foreignkey ( doc , related_name='images ' )
plt show ( )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
reverse_dict = { value : keypath for keypath , value in keypaths ( example_dict ) }
proc stdin write ( 'foo\n ' )
g = nx digraph ( )
df to_csv ( 'dftest txt ' , '\t ' , header=true , cols= [ 'b ' , 'a ' , 'c ' ] )
out = np linalg norm ( row data )
contains_non_string = s [ s apply ( type ) ! = str ]  any ( )
np array ( _ )
ax plot ( x , y , label= ' $ \\sin ( x ) $ ' )
filename = self request post [ 'content ' ]  filename
multi_line_word setparseaction ( lambda t : '' join ( t ) )
import numpy as np
self listbox selection_set ( first=0 )
ax plot ( x , y , marker= 's ' , linestyle='none ' , label='big ' )
ser write ( 'your text ' ) 
b3 insert ( end , item )
np fromiter ( ( row [ index ] for row , index in zip ( x , y ) ) , dtype=int )
sorted ( l , key=lambda x : ( x [ : -1 ] , x [ -1 ]  isdigit ( ) ) ) 
help ( func )
print ( sys stdout isatty ( ) )
np subtract outer ( a , b )
min ( a , key=lambda t : t [ 1 ] )
self check_object_permissions ( self request , obj )
struct unpack ( 'f ' * n , file read ( 4 * n ) )
df = df [ df [ 'score ' ] > 50 ]
p = multiprocessing pool ( 1000000 )
plt show
print ( mydict [ 'jeff ' ] )
list ( tuple ( mydata transpose ( ) ) )
print ( single_date strftime ( ' % y- % m- % d ' ) )
subprocess popen ( [ 'python ' , '-c ' , 'exit ( -11 ) ' ] )  wait ( )
tuples = list ( genredictionary items ( ) )
return '' join ( reversed ( result ) )
a [     , ( numpy newaxis ) ] * b [ ( numpy newaxis ) ,     ]
logging debug ( 'debug message ' )
m = re search ( '// ( [ ^/ ] * ) ' , str ) print ( m group ( 1 ) )
self lock acquire ( )
self logr = logging getlogger ( 'root ' )
self value = value
theproc communicate ( )
df [ df c str contains ( 'xyz ' ) == false ]
return [ item for item in thelist if item in thedict ]
self asserttrue ( com isnull ( df ix [ 'c ' , 'timestamp ' ] ) )
user save ( )  
execute ( secondssh , hosts= [ ( 'notmmaley @ % s:8101 ' % h ) for h in env hosts ] )
[ 497 72447701 , 984 39685939 , 3377 17916825 , 4126 77552299 , 237 92397237 ]
d update ( { 'key1 ' : [ 'val1 ' , 'val2 ' ] , 'key2 ' : dictref ( d , 'key1 ' ) } )
df1 count ( )
[ 1 , 2 , 3 , 6 , 8 , 9 , 10 , 16 ]
setattr ( self , k , v )  
client get ( '/admin ' )  responds_access_denied ( )
story append ( paragraph ( ' < bullet > the rain in spain < /bullet > ' , text_style ) )
print ( sorted ( set ( my_list ) ) )
color ( ' # % 06x ' % random randint ( 0 , 16777215 ) )
plt imsave ( 'foo png ' , a , dpi=1 )
s = pd series ( [ 1 , 5 , 20 , -1 ] )
plt axis ( 'off ' )   
`` `` '' returns the string without non ascii characters '' '' ''
'foo\n\rbar' splitlines ( )
self bind ( wx evt_motion , self onmousemove )
user save ( )   
' %  3g ' % num
print ( 'hello world ' ) 
do_it_lots ( )
l = map ( int , num_str split ( ' , ' ) )
df select ( * [ ( count ( c ) / count ( '* ' ) )  alias ( c ) for c in df columns ] )  show ( )
np where ( ( vals [ : , ( 0 ) ] == 0 ) & ( vals [ : , ( 1 ) ] == 1 ) ) [ 0 ]
numpy array ( [ [ elem for elem in x_row ] for x_row in x ] )
lst extend ( data )
self _conn = create_engine ( src , client_encoding='utf8 ' )
[ '   ' , '   ' , '0 ' , '0 ' , '0 ' , '0 ' , '0 ' , '   ' , '   ' ] ,
[ '   ' , '   ' , '   ' , '0 ' , '0 ' , '0 ' , '   ' , '   ' , '   ' ] ,
{ 'is_staff ' : true , 'last_name__startswith ' : 'a ' }
request remote_addr
round ( 1 5145 , 2 )
f = open ( 'links csv ' , 'rb ' )
print ( [ m start ( 1 ) for m in matches ] )
re sub ( ' ( \\d ) ( [ -+ ] ) ' , '\\1e\\2 ' , number )
time sleep ( 0 5 )   
s = line replace ( '\x0c ' , '' )
ax set_xlim ( [ datetime date ( 2014 , 1 , 26 ) , datetime date ( 2014 , 2 , 1 ) ] )
super ( authorform , self )  __init__ ( *args , **kwargs )
some_class ( *os path split ( somefile ) )
return set ( word_list )  intersection ( a_string split ( ) )
plt pause ( 1 )
chardet detect ( open ( 'file txt ' , 'rb ' )  read ( ) )
re sub ( ' (   ) (   ) ' , '\\g < 2 > \\g < 1 > ' , s )
admin site register ( user , useradmin )  
cursor execute ( 'select field1 , field2 , fieldn from table1 ' )
print ( lxml etree tostring ( tree2 ) )
'fizz ' if i % 3 == 0 else ''
return np sum ( drr t / dr3 , axis=1 )
list ( chain ( * ( x split ( ' , ' ) if ' , ' in x else x for x in lis ) ) )
return self basedict [ key ]
`` `` '' it will cost $ { 0 } dollars   `` `` ''  format ( 95 )
{ { ( variable | stringformat ) : ' 3f ' } } 
getattr ( callme , variable ) ( )
b resample ( 'm ' , how='sum ' )  dropna ( )
merged to_csv ( 'merged csv ' , index=false )
r sadd ( 'a ' , 1 , 2 , 3 ) 
cl getlevel ( 2 )
`` `` '' bword bword '' '' ''
ordered = ordereddict ( ( k , mydict [ k ] ) for k in myorder )
np maxdims
plt plot ( [ 1 , 2 , 3 , 4 ] )
time sleep ( 0 2 ) 
f ( [ 3 , 2 , 2 , 4 ] , [ 2 , 4 , 2 ] )
zip ( s , s [ 1 : ] , s [ 2 : ] )
{ ( 0 ) : [ 0 , 1 , 3 ] , ( 2 ) : [ 4 , 5 ] , ( 47 ) : [ 2 , 6 ] }
proc = subprocess popen ( [ 'cat ' , '/tmp/baz ' ] , stdout=subprocess pipe )
__init__ py                 
self asserttrue ( 'expected_part_of_string ' in my_longer_string )
ax set_yticklabels ( [ ] )  
df set_index ( 'time ' , inplace=true )
system ( 'python myscript py ' + args )
[ 'cmaj7 ' , 'f # m ' , 'c7 ' ]
plt show
decimal decimal ( 1 1 )
server sendmail ( msg [ 'from ' ] , [ msg [ 'to ' ] ] , msg as_string ( ) )
ax set_zlabel ( 'z_values ' )
uni = [ k for k , v in a items ( ) if countmap [ v ] == 1 ]
lowercase = [ c for c in s if c islower ( ) ]
[ [ 2 5 , 20 ] , [ 3 5 , 30 ] ]
df apply ( lambda x : ' % s is % s ' % ( x [ 'bar ' ] , x [ 'foo ' ] ) , axis=1 )
list ( '' join ( l + 'x ' * ( n % 3 == 2 ) for n , l in enumerate ( letters ) ) )
self __dict__ update ( *args , **kwargs )
df2 [ 'one ' ] == np nan
x = x [ :50 ]
self navbar pack ( side='left ' , fill='y ' )
print ( list ( itertools product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) ) [ ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 2 , 6 ) , ( 3 , 4 ) , ( 3 , 5 ) , ( 3 , 6 ) ]
return '' join ( chars [ -i : ] )
text = text ( app , state='disabled ' , width=44 , height=5 )
z = dict ( list ( x items ( ) ) + list ( y items ( ) ) ) 
ax margins ( 0 05 )
[ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ]
sys exit ( 0 )            
logging basicconfig ( ) 
plt show
[ ' { 0:06 } ' format ( i ) for i in range ( 1000000 ) if sum ( map ( int , str ( i ) ) ) == 20 ]
[ _f for _f in lst if _f ]
sys exit ( 1 )       
msg [ 'subject ' ] = 'auto hella restart report ' + sys argv [ 1 ] 
plt ylabel ( 'distribution [ % ] ' , fontsize=16 )
system ( 'say hello world ! ' )
webbrowser open ( 'http : //www google com ' )
friend_id = db column ( db integer , db foreignkey ( 'user id ' ) )
[ y for x in list ( d values ( ) ) for y in x ]
df3 resample ( 'h ' )  plot ( )
self linenumbers pack ( side='left ' , fill='y ' )
sorted ( [ ( 0 , 0 , 0 , int ( random getrandbits ( 4 ) ) ) for x in range ( 10 ) ] )
min ( a , b ) / max ( a , b )
self client post ( url , data=post_data )
plt plot ( x , y , linestyle='- ' , color=color )
f write ( foo encode ( 'utf8 ' ) )
d = { t [ 0 ] : t [ 1 : ] for t in arr }
[ '1 0,4 ' , '2 0,5 ' , '3 0,6 ' , '' ]
plt show
vc = df date value_counts ( )
print ( 'pototo\x08\x08\x08a\x1b [ 2ces ' )
[ 'ab ' , 'cde ' , 'fghi ' , 'jkl ' , 'mn ' ]
wb save ( 'test xlsx ' )
driver find_element_by_id ( 'main_buttonmissiontextnext ' )  click ( )
self frame pack ( side='top ' , fill='both ' , expand=true )
qtgui qwidget __init__ ( self )
setattr ( self , 'string ' , var )
asps += glob glob ( os path join ( root , '* asp ' ) )
admin autodiscover ( )
ax set_axis_bgcolor ( 'y ' )
from django conf import settings
re findall ( ' (   { 6 } | + $ ) ' , 'four score and seven years ago   ' )
x , y , z = ( v + 2 for v in l )
min ( list ( d items ( ) ) , key=lambda x : x [ 1 ] )
f write ( '\x00 ' )
print ( pix [ x , y ] ) 
s = re sub ( ' ( ? < ! ) ( ? = [   , ! ? ( ) ] ) | ( ? < = [   , ! ? ( ) ] ) ( ? ! ) ' , ' ' , s )
curses endwin ( ) 
olib oshape ( 'b ' , b )
ax legend ( loc='upper left ' , labelspacing=2 )
words_list extend ( contents [ i ]  split ( ) )
plt show
os path normpath ( os path join ( os getcwd ( ) , os path dirname ( __file__ ) ) )
f close ( )                                     
d = pd concat ( [ d , temp ] )
quantiles = df quantile ( [ 0 01 , 0 25 , 0 5 , 0 75 , 0 99 ] )
df selectexpr ( '* ' , 'date_sub ( date_col , day_col ) as subtracted_dates ' )
rows = session query ( func count ( congress id ) )  scalar ( )
self label pack ( )
seaborn kdeplot ( df [ 'col2 ' ] , ax=ax )
file = models filefield ( blank=true , null=true )
text_area pack ( )
cur execute ( 'set session transaction isolation level read uncommitted ' )
myfile write ( ' < /html > ' )
plt plot ( list ( range ( 5 ) ) )
word1 = ' ' join ( re findall ( ' [ a-za-z ] + ' , st ) )
[ y for x in zip_longest ( l1 , l2 ) for y in x if y is not none ]
eval ( ' '' x '' +str ( i ) + '' = '' + '' 123 '' ' )
time strptime ( '2009-09-09 16:26:57 ' , ' % y- % m- % d % h : % m : % s ' )
ids = [ t [ 'id ' ] for t in json [ 'test ' ] if t [ 'description ' ] == 'test 1 ' ]
[ tuple ( zip ( *x ) ) for x in lst ]
proc = subprocess popen ( [ 'python ' , 'fake_utility py ' ] , stdout=subprocess pipe )
df = pd dataframe ( np random randn ( 10 , 5 ) , columns= [ 'a ' , 'b ' , 'c ' , 'd ' , 'e ' ] ) 
matplotlib use ( 'wx ' )
a [ 1 ] = 'b '
root mainloop ( )                                                                             
plt show
print ( foo bar )
[ a index ( item ) for item in b ]
a [ np arange ( a shape [ 0 ] ) [ : , ( none ) ] , inds ]
writer writerow ( list ( d keys ( ) ) )
u encode ( 'ascii ' , 'ignore ' )
userincrease = int ( input ( 'increase > ' ) )
sock bind ( ( mcast_grp , mcast_port ) )
shutil copy ( file , dest_dir )
return map ( lambda x : x ** 2 , list )
`` `` '' { : , 2f } '' '' ''  format ( num )  replace ( '   ' , ' % ' )  replace ( ' , ' , '   ' )  replace ( ' % ' , ' , ' )
update_fitness ( )
multimap sort ( )
os chdir ( os path expanduser ( newdir ) )
shutil rmtree ( dirpath )
[ 1 , 8 , 9 , 10 , 11 , 20 ]
new_list = [ f ( x ) for x in it takewhile ( lambda x : condition ( x ) , l ) ]
nx draw_networkx_nodes ( g , pos , cmap=plt get_cmap ( 'jet ' ) , node_color=values )
tk tk __init__ ( self , *args , **kwargs )
plt gca ( )  set_aspect ( 'equal ' , adjustable='box ' )
super ( match , self )  save ( *args , **kwargs )
os unsetenv ( 'pythonhome ' )
pattern = re compile ( '^/ ( ? : \\\\ | [ ^/\\\\ ] ) */ ' )
plt show
[ i [ 0 ] for i in list ( zip ( listoftuples , bools ) ) if i [ 1 ] == true ]
os path dirname ( __file__ )
ax plot_surface ( x , y , z )
re findall ( ' ( { {  * ? } } ) ( ? : \\z|\\s+ ) ' , output )
cv2 waitkey ( 0 )      
re search ( '\\ $   ' , str ( p ) )  group ( 0 )
np einsum ( 'ij , ik- > ijk ' , x , x )
arbiter run ( )
login_required ( templateview as_view ( template_name='foo_index html ' ) )
h = dict ( line strip ( )  split ( '= ' ) for line in open ( 'filename txt ' ) )
__init__ py                  
screen fill ( ( 255 , 255 , 255 ) )
data append ( [ int ( v ) for v in line split ( ) ] )
raise valueerror ( 'minval or maxval must be specified ' )
import imp imp reload ( mymodule )
exec ( compile ( open ( activate_this_file )  read ( ) , activate_this_file , 'exec ' ) , dict ( __file__=activate_this_file ) )
pylab show ( )      
super ( x , self )  __init__ ( )
subprocess call ( 'explorer c : \\temp\\yourpath ' , shell=true )
s = 'cat goose mouse horse pig cat cow' re sub ( '^ ( (  * ? cat * ? ) { 1 } ) cat ' , '\\1bull ' , s )
s = 'cat goose mouse horse pig cat cow' re sub ( '^ ( ( ? : ( ? ! cat )   ) *cat ( ? : ( ? ! cat )   ) * ) cat ' , '\\1bull ' , s )
pat = re compile ( ' [ a-f ] +\\d+ ' )
( df [ 0 ] - df [ 1 ] )  astype ( 'timedelta64 [ us ] ' )
a = re sub ( 'this   *ok ' , '' , a , flags=re dotall )
pygame display flip ( )       
list ( map ( fs format , sum ( map ( str split , l ) , [ ] ) ) )
max ( re findall ( 'g+ ' , 'fggfggggfggfg ' ) , key=len )
print ( ' { :10s } { :3d } \xc2\xa0 { :7 2f } ' format ( 'zz ' , 42 , 123 34 ) )
plt xticks ( [ ] )
return ' { } and { } ' format ( ' , ' join ( lst [ : -1 ] ) , lst [ -1 ] )
plt show
list_display = [ 'name ' , 'companyid ' , 'active ' , 'modified ' , 'created ' ]
logging getlogger ( 'base foo ' )  error ( 'log from foo ' )
print ( list ( keep_dupes ( [ 1 , 2 , 2 , 2 , 3 , 4 , 5 , 6 , 6 , 7 ] ) ) )
sys exit ( 1 )        
[ b for a in ( ( x , -x ) for x in range ( 1 , 10 + 1 ) ) for b in a ]
print ( soup get_text ( ) ) 
list ( r keys ( ) )
plt show
df reset_index ( inplace=true ) 
[ item for item in my_list if any ( x in item for x in bad ) ]  
[ { 'type ' : k , 'items ' : v } for k , v in list ( res items ( ) ) ]
df columns get_loc ( 'pear ' )
client connect ( ( '127 0 0 1 ' , 57120 ) )
[ [ 10 , 6 , 45 , 18 , 49 ] , [ 5 , 6 , 45 , 6 , 14 ] ]
im = imread ( 'farm jpg ' )
df [ 'stops ' ] = df [ 'stops ' ]  bfill ( )
time sleep ( 1 )                                         
skipsdist = bool
u replace ( ' % 7c ' , '| ' )
[ [ 'a ' , 'b ' , 'c ' ] , [ 'd ' , 'e ' , 'f ' ] , [ 'g ' , 'h ' ] ]
struct pack ( 'i ' , -4 )
c execute ( 'select * from foo ' )
data groupby ( 'contactid ' )  filter ( lambda g : ( g paymenttype == 160 )  any ( ) )
postcodes = re findall ( ' [ a-z ] { 1,2 } [ 0-9r ] ? [ 0-9a-z ] ? [ 0-9 ] [ a-z ] { 2 } ' , content )
print ( ' ' join ( get_words ( [ '\u0bae ' , '\u0baa ' , '\u0b9f ' , '\u0bae\u0bcd ' ] ) ) )
pl pcolormesh ( x , y , z , cmap='blues ' , linewidth=0 , rasterized=true )
cur execute ( 'select * from contacts where name like ? ' , ( ' % ' + search + ' % ' , ) )
csv_writer writerow ( [ x for x in line ] )
mars circle ( 228 , 1 )
print ( [ len ( x ) for x in partition ( list ( range ( 105 ) ) , 10 ) ] )
testobj = { 'test ' : [ a1 , a2 , b2 ] , 'test2 ' : 'something else ' , 'test3 ' : 1 }
super ( myexception , self )  __init__ ( arg1 )
result = [ '_' join ( ( i , j ) ) for i , j in zip ( la , itertools cycle ( lb ) ) ]
row [ x ]  lstrip ( '- ' )  isdigit ( )
sorted ( s2 , key=prefixed_digits ( 'b ' , 'd ' ) )
ax set_xticklabels ( ( 'g1 ' , 'g2 ' , 'g3 ' , 'g4 ' , 'g5 ' ) )
[ 4 , 4 , 2 , 1 , 2 ]
plt ylim ( [ -4 , 2 ] )
et find ( 'img ' )  tail
foo __getitem__ ( slice ( a , b , c ) )
form = userform ( request form , obj=user )
return hashed digest ( )  encode ( 'base64 ' )  rstrip ( '\n ' )
df2 boxplot ( column= [ 'obs1 ' ] , by=df2 index month , showmeans=true , ax=ax )
output_list = list ( set ( itertools chain ( first_list , second_list ) ) )
mystr replace ( ' ' , '' )
re sub ( ' @ \\w+ ' , my_replace , string )
plt show
mydll = ctypes cdll ( '     ' )
mydll = ctypes cdll ( ' /mylib so ' )
socket gethostbyname ( socket gethostname ( ) )
pygame display update ( )     
plt show
{ { env [ 'xmpp_domain ' ] or 'localhost ' } }
data = pandas read_csv ( myfile , encoding='utf-8 ' , quotechar= ' '' ' , delimiter= ' , ' )
struct unpack ( ' > i ' , '\x00 ' + '\x00\x00\x01 ' )
plt contour ( xi , yi , zi , 20 , linewidths=1 )
print ( df loc [ df groupby ( 'type ' )  votes agg ( 'idxmax ' ) ] )
[ [ 's4s1 ' ] [ 's4s2 ' ] [ 's4s3 ' ] [ 's5s1 ' ] [ 's5s2 ' ] [ 's5s3 ' ] ]
ax spines [ 'bottom ' ]  set_position ( 'zero ' )
df apply ( pd to_numeric , errors='coerce ' )  dtypes
math modf ( x )
pfile seek ( 0 )
lines = [ line for line in open ( '/some/file ' ) if random ( ) > = 0 5 ]
{ { ( wrapping | slice ) : ' : -3 ' } }
f = open ( os path dirname ( __file__ ) + '/  /data yml ' )
str ( round ( value ) )  rstrip ( '0 ' )  rstrip ( '   ' )
imagepath = os path dirname ( __file__ ) + '/1 jpg '
use_tz = false
root winfo_toplevel ( )  wm_geometry ( '' )
subprocess call ( shlex split ( 'command -option value -option value ' ) )
time sleep ( 5 )           
f = np vectorize ( f , otypes= [ np float ] )
func ( *args , **kwargs ) 
new_list = sorted_set ( my_list )
d [ 'text ' ]
base64 b64decode ( coded_string )
a [ ( a ! = 5 )  all ( 1 ) ]
plt figure ( )      
return [ ( i , sublist index ( item ) ) for i , sublist in enumerate ( list ) ]
[ v for k , v in d items ( ) if k not in ( 2 , 5 ) ]
filtered_list = list ( [ x for x in input_list if x % 2 == 0 ] )
print ( ' { 0 } *10^ ( { 1 } ) ' format ( *item ) )
fdf pivot_table ( 'percent ' , rows='row ' , cols='col ' , aggfunc='sum ' )  values
do_something ( )     
server serve_forever ( )             
urllib request urlretrieve ( dls , 'test xls ' )
data = np array ( [ float ( f ) for f in file ( filename )  read ( )  split ( ) ] )
{ 'id ' : 10150133855458396 , 'name ' : 'my-name ' }
print ( datetime ( 2012 , 3 , 1 , 0 , 0 , 0 , 0 , tzinfo=tz ) )
print ( 'foo ' )
raise valueerror ( 'fields must not be empty   ' )
print ( list ( isplit ( 'abcb ' , 'b ' ) ) )
main ( )            
result = [ r for r in x if all ( z not in r for z in y ) ]
any ( kidname == row [ ct ] for row in csv reader ( file ) )
query_wildcard = ' % { 0 } % ' format ( query replace ( ' % ' , '\\ % ' ) )
return httpresponse ( 'return this string ' )
`` `` '' , '' '' ''  join ( map ( str , numbers ) )
p set_preference ( 'webdriver log file ' , '/tmp/firefox_console ' )
plt show
stealth_check = { range ( 1 , 6 ) : 'you are about as stealthy as thunderstorm   ' }
br form [ 'type ' ] = '22 '
list ( map ( chr , [ 66 , 53 , 0 , 94 ] ) )
newd = dict fromkeys ( origdict )
print ( count ( 'adnndaend ' , 'and ' ) )
-- honour - stdin
[ [ int ( i ) for i in line split ( ) ] for line in data ]
print ( s replace ( ' , ' , '\t ' ) )
static_root = os path join ( project_dir , 'static ' )
`` `` '' < b > '' '' ''  join ( s split ( '/b ' ) )
logger = logging getlogger ( __name__ )    
sum ( 1 for _ in itertools takewhile ( str isspace , a ) )
con commit ( )    
open ( filename , 'w ' )  write ( text replace ( lastknown , current ) )
{ ( 1 ) : [ 1 , 1 ] , ( 2 ) : [ 2 , 2 ] , ( 3 ) : [ 3 ] , ( 4 ) : [ 4 ] , ( 5 ) : [ 6 ] , ( 7 ) : [ 8 ] }
test reshape ( -1 , 2 ) [ : :2 ]  reshape ( -1 , 4 )
df [ 'last_value ' ] = g [ 'value ' ]  apply ( lambda x : x ffill ( )  shift ( 1 ) )
fout write ( struct pack ( ' > f ' , 2 71828182846 ) )
w show_all ( )
return jsonresponse ( list ( data ) , safe=false )
{ 'outer ' : { 'foo ' : 'x ' , 'bar ' : 'y ' } }
[ x for x in foo if not 2 == x get ( 'id ' ) ]
l = [ [ 4 , 5 , 6 , 7 ] , [ 2 , 2 , 6 , 3 ] , [ 4 , 4 , 9 , 4 ] , [ 8 , 1 , 6 , 1 ] ]
`` `` '' nín hǎo   wǒ shì zhōng guó rén '' '' ''
ax plot ( [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , z - 1 ] , 'k- ' )
np savetxt ( 'test csv ' , example [ ( 1 ) ,     ] , delimiter= ' , ' )
[ ( k , v ) ] = list ( d items ( ) )
driver refresh ( )
return { }
time sleep ( 1 )                                          
timeit timeit ( lambda : function ( x ) )
result stack ( )
link = link1 css ( 'span title a : :attr ( href ) ' )  extract ( ) [ 0 ]
link = link1 css ( 'span [ class=title ] a : :attr ( href ) ' )  extract ( ) [ 0 ]
app run ( )                              
nf write ( '' join ( str ( random randint ( 0 , 1000 ) ) for _ in range ( 1000000 ) ) )
df2 [ 1 : ]  to_sql ( 'table_name ' , con , if_exists='append ' )
plt show
type ( d copy ( ) )
grouped boxplot ( )
pyplot show ( )    
df [ 'text ' ]
return tuple ( sum ( z ) for z in zip ( a , b ) )
ax add_patch ( circ )
[ [ true , false ] , [ false , true ] ]
plt imshow ( rotate_lena , cmap=plt cm gray )
print ( binascii unhexlify ( line )  decode ( 'utf-16-be ' ) )
aa = dict ( [ ( k , d [ k ] ) for k in f ] )
return sum ( strat ( line ) for line in f )
pd value_counts ( d [ [ 1 , 3 , 4 , 6 , 7 ] ]  values ravel ( ) )
[ [ 10 , 6 , 45 , 18 , 49 ] , [ 5 , 6 , 45 , 6 , 14 ] ] 
print ( pd concat ( [ d1 , df ] , axis=1 ) )
msg = email message_from_string ( msgtxt ) print ( msg [ 'subject ' ] )
datetime datetime strptime ( 'februar ' , ' % b ' )
'^watch/ ( ? p < id > \\d+ ) / ' , 'watch '
df [ 'col1 ' ]  update ( pd series ( di ) )
cv2 waitkey ( 0 )       
super ( )  __init__ ( ) 
nx draw ( g , pos )
float_to_hex ( 17 5 )
number = list ( filter ( str isdigit , filename ) )
linkstodomain = soupstrainer ( 'a ' , href=re compile ( 'example com/ ' ) )
df [ 'month ' ] = df [ 'arrivaldate ' ]  dt month
avg = y mean ( axis= ( 1 , 3 ) )
mass_replace ( sys argv [ 1 ] , sys argv [ 2 ] , sys argv [ 3 ] )
return result [ 'attributes ' ] [ 'some_attr ' ]
with open ( 'path/to/file ' , 'r ' ) as content_file : content = content_file read ( )
df = df [ ( df [ 'date ' ] > '2000-6-1 ' ) & ( df [ 'date ' ] < = '2000-6-10 ' ) ]
list ( map ( lambda x : x strip ( ) , l ) )
[ x [ 0 ] for x in listd [ 1 ] ]
return control_char_re sub ( '' , s )
print ( sorted ( list ( d items ( ) ) , key=lambda x : x [ 1 ] , reverse=true ) [ 0 ] )
result = [ a for a in a if a not in subset_of_a ]
main ( )             
help ( re compile ( '' ) )
a , b = map ( int , sys stdin readline ( )  split ( ) )
tree xpath ( `` //table [ not ( descendant : :table ) ] /* [ contains (   , 'header1 ' ) ] '' )
cursor execute ( 'select name , category from animal ' )
[ 'a ' , 'bbb ' ]
content = text selection_get ( )
`` `` '' `` '' ''  join ( format ( x , 'b ' ) for x in bytearray ( st ) )
with open ( 'text txt ' , 'a ' , encoding='utf-8 ' ) as file : file write ( 'spam and eggs ! ' )
root configure ( background='gold ' )
[ ( x * y ) for x , y in zip ( lis [ 0 ] , cyc ) ]
app run ( )                               
req send_header ( 'content-disposition ' , 'attachment ; filename= % s ' % filename )
print ( re sub ( ' ( ? ! [ \\d_ ] ) \\w ' , 'x ' , 'df\xc3\xa4g ' ) )
ext_id = db column ( db integer , primary_key=true , autoincrement=false )
os environ [ 'auth_domain ' ] = 'testbed '
os environ [ 'user_is_admin ' ] = '1 ' 
serialization_modules = { 'json ' : 'wadofstuff django serializers json ' }
print ( matcher match ( '100 { `` 1 '' : { `` a '' : '' b '' , `` c '' : '' d '' } , `` 3 '' :4 } 312 ' )  group ( 1 ) )
toy objects filter ( owner__parent=parent )
np in1d ( arr1 , arr2 )
parser add_argument ( 'foo ' )
plt figure ( )       
sock setsockopt ( socket sol_socket , socket so_keepalive , 1 )
os environ [ 'requests_ca_bundle ' ] = os path join ( os getcwd ( ) , 'cacert pem ' )
json dump ( feeds , feedsjson )
title_year = [ ( i [ 'title ' ] , i [ 'year ' ] ) for i in movie_dicts ]
data [ : , ( set_col ) ] = val
re findall ( '\\ { date :   *\\ } ( ? =\\ { ) ' , str )
time sleep ( 1 )                                           
' % s % % s % s ' % ( 'foo ' , 'bar ' ) 
re sub ( 'url ( # [ 0-9 ] +| $ ) ' , 'new_url\\1 ' , test2 )
mailbox quit ( )
att saveasfile ( os getcwd ( ) + '\\new xlsx ' )
background = pygame transform scale ( background , ( 1200 , 800 ) )
records sort ( key=lambda x : x [ 'date ' ] )
socket setdefaulttimeout ( 10 )
ax1 set_aspect ( 'equal ' )
myform fields [ 'description ' ]
del mydict [ 'key ' ]
browser find_elements_by_xpath ( ' //span [ @ class = `` gbts '' ] ) ' ) [ 2 ]  text
colors = [ 'red ' , 'green ' , 'blue ' , 'orange ' , 'yellow ' ]
b [ : , ( 1 ) ] [ ( a == b [ : , ( 0 ) ]  astype ( int ) [ : , ( none ) , ( none ) ] )  argmax ( 0 ) ]
plt contour ( xx , yy , z , cmap=plt cm paired )
print ( 'brl x usd rate today : % s ' % brlxusd )
return all ( word [ i + 1 ] > = word [ i ] for i in range ( len ( word ) - 1 ) )
plt show
file split ( '\n ' )
list ( sum ( list ( dict items ( ) ) , ( ) ) )
driver get ( 'http : //cn bing com ' ) 
print ( [ s strip ( '8 ' ) for s in lst ] )
p = multiprocessing process ( target=write , args= ( 'hello ' , ) ) 
print ( pandas concat ( [ x , y ] , axis=1 ) )
parser = argparse argumentparser ( )
return sorted ( l , key=alphanum_key )
sys stdout write ( '\n ' )
sys stdout write ( '\r ' ) 
foo split ( '\n ' , 2 )
myformatter ( )  format ( ' { 0 } { 1 : t } ' , 'hello ' , 4 567 )
a repeat ( 2 , axis=0 )  repeat ( 2 , axis=1 )
list focus_set ( )
pdf trailer [ '/root ' ] [ '/pagelabels ' ] [ '/nums ' ]
df values [ : ] = df sum ( )
return [ m group ( 0 ) for m in matches ]
gb get_group ( 'foo ' )
os makedirs ( dir_path )
newstr = oldstr [ :4 ] + oldst [ 5 : ]
logging basicconfig ( level=your_level )
print ( '' join ( e [ 0 ] for e in x split ( ) ) )
locale setlocale ( locale lc_all , saved )
f_minkowski = theano function ( [ x , y , p ] , minkowski_distances )
func = lambda s : [ ( t * 2 + s * 2 ) for t in range ( 1 , 100 ) ]
ax set_ylabel ( 'y ' ) 
res to_csv ( 'foo csv ' )
c = b groupby ( 'node ' ) [ 'lfreq ' ]  unique ( )  reset_index ( name='lfreq ' )
s = socket socket ( socket af_inet , socket sock_stream ) 
newdata = np array ( [ d [ :4 ] for d in data ] )
a a __get__ ( a , a )
vf ( numpy outer ( phases , numpy arange ( 1 , 4 ) ) )
ax scatter ( x , [ 1 ] * len ( x ) , c=values , marker= 's ' , s=100 )
print ( date isoformat ( ) )
print ( a , 'plus ' , b , 'equals ' , a + b )
plt show
df a value_counts ( )
fib = lambda n : reduce ( lambda x , n : [ x [ 1 ] , x [ 0 ] + x [ 1 ] ] , list ( range ( n ) ) , [ 0 , 1 ] ) [ 0 ]
mydict = default copy ( )
ax set_ylabel ( 'y label ' ) 
y [ : , ( 1 ) ]
df = df loc [ : , ( ~df columns duplicated ( ) ) ]
timestamp = int ( time mktime ( time strptime ( date , ' % d  % m  % y % h : % m : % s ' ) ) )
return re search ( 'id ( \\d+ ) ' , toparse )  groups ( ) [ 0 ]
listview setwindowtitle ( 'listview ' )
main_sizer add ( self centred_text , 0 , wx align_centre | wx all , 3 )
d [ n1 ] = 'node 1 '
re findall ( ' [ a-za-z ] + ( ? ! [ a-za-z ( ] ) ' , 'movav ( x/2 , 2 ) *movsum ( y , 3 ) *z ' )
np where ( idx )
plt show
matplotlib use ( 'tkagg ' )  
data [ 'result ' ]  replace ( regex=true , inplace=true , to_replace='\\d ' , value= '' )
array ( [ 0 , 0 , 0 , 0 ] )
logger setlevel ( logging debug )      
raise exception ( 'my error ! ' ) 
test ( x , * [ 'one ' , 'two ' ] )
np iinfo ( np int32 )
parser add_argument ( '-a ' , ' -- arg ' , nargs='+ ' , type=int )
session commit ( )           
[ [ w for w in l if len ( w ) == num ] for num in set ( len ( i ) for i in l ) ]
file2 write ( ' , ' join ( buffer ) )
df loc [ ( 'a ' ) , : ] = df_ values
return render_template ( 'output html ' )
links = [ rel get_accessor_name ( ) for rel in a _meta get_all_related_objects ( ) ]
unicodedata normalize ( 'nfkd ' , title )  encode ( 'ascii ' , 'ignore ' ) 
hex ( 291 )
    
setattr ( c , key , value )
result_list = [ elements [ i ] for i in indices ]
app = wx app ( redirect=true , filename='mylogfile txt ' )
sys path append ( 'c : /python/files/folder1 ' )
print ( '01000111000011' replace ( '1 ' , ' % s ' ) % tuple ( 'orange ' ) )
dictget = lambda d , *k : [ d [ i ] for i in k ]
ax legend ( loc='upper left ' , bbox_to_anchor= ( 0 , 1 3 ) )
print ( dom find ( 'body ' ) )
print ( 'created new file   ' )
assert f ( x , y ) ! = z , 'expected : f ( % r , % r ) == % r ' % ( x , y , z )
test_file write ( ' , ' join ( [ str ( j ) for j in write_row ] ) )
print ( open ( 'yourfile ext ' )  read ( ) )
np modf ( [ 1 565888 , 2 073744 , 2 962492 , 4 52838 , 5 417127 , 7 025337 ] ) [ 0 ]
os kill ( pid , signal sigterm ) 
plt show
a [ np arange ( a shape [ 0 ] ) , ( a ! = 0 )  cumsum ( 1 )  argmax ( 1 ) ] = 0
my_dict = { '+ ' : add , '- ' : sub , '* ' : mult , '/ ' : div }
open ( 'test txt ' , 'u ' )  read ( )
{ 'my_key ' : 'my_value ' }
line [ 0:3 ] + [ line [ 3 ] [ :2 ] , line [ 3 ] [ 2 : ] ]
json dumps ( dct , separators= ( ' , ' , ' : ' ) )
sys exit ( 0 )             
db session commit ( )              
a [ a ! = np array ( none ) ]
print ( ( item [ 0 ] , 'has a price of ' , item [ 1 ] ) )
a = [ ( 'a ' , ) , ( 'b ' , ) , ( 'c ' , 'd ' ) ]
pprint pprint ( dictionary [ 'age ' ] )
somemodel objects filter ( id__in=ids_list )  delete ( )
pandas dataframe sort_values ( by='scores ' )
convolve ( [ 1 , 5 , 2 ] , [ 6 , 1 , 4 , 3 ] )
yield request ( url , callback=self parse )
app register_blueprint ( account_api , url_prefix='/accounts ' )
print ( i , ' ' , type ( getattr ( x , i ) ) )
plt show
td_series astype ( 'timedelta64 [ d ] ' )  astype ( int )
re sub ( ' ( [ a-z ] ) \\1 ' , lambda pat : pat group ( 1 )  lower ( ) , s )
con commit ( )     
{ { a name } }
sample [ 'somedate ' ] = str ( datetime now ( ) )
parser add_argument ( ' -- file2 ' )
cygstart / cygdrive / c / python27 / python exe
y = [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 ]
r findall ( 'fffagggaahhh ' )
unittest main ( )            
df2 = df set_index ( 'timestamp ' )
some_value = os environ [ 'debussy ' ]
print ( response content )
l4 = [ item for item in l1 if item not in unwanted ]
os remove ( 'myfile csv bak ' )
self fields pop ( 'nickname ' )
p1 = process ( target=f , args= ( d , ) )
pd dataframe ( list ( zip ( *sometuple ) ) , columns= [ 'bird ' , 'birdcount ' ] )
np dot ( a , b ) 
gtk main ( )                  
scipy misc imsave ( 'outfile bmp ' , data )
plt show
sum ( x > i for i in x )
draw = imagedraw draw ( im )
map ( itemgetter ( 0 ) , g )
time sleep ( 3 )  
print ( getattr ( test , a_string ) )
plt figure ( figsize= ( 4 , 4 ) )
sqlcontext sql ( 'select * from df1 left outer join df2 on df1 k = df2 k ' )
sqlcontext sql ( 'select * from df1 join df2 ' )
df loc [ df [ 'precedingword ' ] == 'de ' , 'gender ' ] = 'neuter '
print ( 'one line in , one line out ! ' )
this_row append ( s cell_value ( row , col )  encode ( 'utf8 ' ) )
resp_dict [ 'value ' ] [ 'queryinfo ' ] [ 'creationtime ' ]
legend ( ( 'label1 ' , 'label2 ' , 'label3 ' ) , loc='upper left ' )
`` `` '' somestring '' '' ''  decode ( 'utf-8 ' )
fileobj = open ( 'scrpt py ' , 'r ' )
{ i : words count ( i ) for i in set ( words ) }
sys setrecursionlimit ( 10000 )
res = df - df shift ( )
df = df reset_index ( )    
return sum ( ( dosomething ( x ) for x in originallist ) , [ ] )
subprocess call ( 'net use y : \\\\live sysinternals com\\tools ' )
return re findall ( '\\d { 2 } : \\d { 2 } ( ? : am|pm ) ' , text , re i )
df groupby ( [ 'a ' ] )  max ( )
return [ ( [ 0 ] * cols ) for x in range ( rows ) ]
[ pair for pair in itertools combinations ( li , 2 ) if sum ( pair ) == 10 ]
print ( max ( max ( x ) if isinstance ( x , list ) else x for x in my_list ) )
sys modules [ 'original ' ] = myreplacement
root update_idletasks ( )
any ( s startswith ( 'three ' ) for s in test_list )
numpy array ( [ 1 2 , 'abc ' ] , dtype=float )
( s iloc [ : :2 ]  values + s iloc [ 1 : :2 ] ) / 2
shuffle ( x )
{ 'a ' : 1 , 'b ' : 2 } == { 'b ' : 2 , 'a ' : 1 }
plt show
plt show
p dumps ( re compile ( 'a*b+c*x+y* ' ) )
reporter objects all ( )  delete ( ) 
conn commit ( )                 
ax = fig add_subplot ( 111 )
[ -0 666 , -0 666 , -0 333 ]
fig savefig ( 'test png ' )
list ( map ( str strip , x split ( 'or ' ) ) )
plt axvline ( x=xc , color='k ' , linestyle= ' -- ' )
hasmethod ( obj , 'some_method ' )
driver get ( 'http : //www kahoot it ' )
f write ( reversed encode ( 'utf-8 ' ) )
return base64 b64encode ( num decode ( 'hex ' ) )
p stdin write ( '\x1boa ' )
p stdin write ( 'q ' )
d = { k : [ ] for k in keys } 
stack [ -1 ]
some_list append ( dic )
blogpost tags [ : ] = [ ]
plt show
os remove ( path )
result [ np lexsort ( ( result [ : , ( 0 ) ] , result [ : , ( 0 ) ] ) ) ]
[ i for i in range ( 10 ) if i not in digits ]
my_list [ 0:1 ] = [ 'cake ' ]
root mainloop ( )                                                                              
print ( [ m start ( ) for m in re finditer ( '\\btest and\\b ' , a ) ] )
print ( ' { 0 [ 0 ] : { 1 [ 0 ] } s } { 0 [ 1 ] : { 1 [ 1 ] } d } { 0 [ 2 ] : { 1 [ 2 ] } f } ' format ( res , args ) )
loop run_forever ( )
ctypes windll kernel32 setconsoletitlea ( 'my new title ' )
print ( u16 decode ( 'utf16 ' ) )
print ( json dumps ( data ) ) 
dateutil parser parse ( date_string )
plt show
messages = re split ( ' ( ? : ( ? : \xff ) { 8 } ) + ' , payload )
pd dataframe ( ordereddict ( { 'foo ' : pd series ( foo ) , 'bar ' : pd series ( bar ) } ) )
filename = 'c : \\documents and settings\\file % d txt ' % i
self txt pack ( expand=true , fill='both ' )
return new_string , np tensordot ( tensor1 , tensor2 , axes )
last = df index [ -1 ]
[ item for item in re split ( ' ( \\* ) ' , '*abc*bbc ' ) if item ]
writer writerow ( [ latlon ] )
a reshape ( ( len ( a ) / 3 , 3 ) )  max ( axis=1 )
codes = enumerate ( 'foo bar baz ' )
parser = parse_args ( sys argv [ 1 : ] )
print ( e get ( 'title ' )  text )
output = proc communicate ( ) [ 0 ]
args = parser parse_args ( )    
result = '' join ( tmp [ : :-1 ] )
set ( [ 'a ' , 'b ' ] )
return itertools chain ( *lists )
print ( 'foo= '' a_value '' ' )
text2_re = re sub ( ' ( \\d+ ) / ( \\d+ ) / ( \\d+ ) ' , '\\3-\\1-\\2 ' , text2 )
df col2 replace ( -1 , np nan )  interpolate ( )  astype ( int )  astype ( 'category ' )
print ( `` ca n't convert '' )
df [ 'date ' ] [ df index [ 0 ] ]
df insert ( 0 , 'mean ' , df mean ( 1 ) )
super ( )  __init__ ( name , year )
ax contourf ( x , y , z , zdir='y ' , offset=y_max , cmap=cm coolwarm )
fout writelines ( data [ 1 : ] )
noise = np random normal ( 0 , 1 , 100 )
root mainloop ( )                                                                               
ax xaxis set_major_locator ( mdates yearlocator ( ) )
time sleep ( 1 )                                            
sys stdout flush ( )                                    
return '' join ( sorted ( diff elements ( ) ) )
a , b = 2 , 3
contained = [ x for x in d if x in paid [ j ] ]
self send ( data )
pygame display flip ( )        
os startfile ( 'path_to_pdf pdf ' )
array ( [ nan , nan , nan , 0 0 , 1 0 , 2 0 , 3 0 , 4 0 , 5 0 , 6 0 ] )
zeromatrix = [ ( [ 0 ] * np ) for i in range ( np ) ]
plt show
[ i for i in zip ( narrative , subject , activity , filer ) ]
writer writerow ( [ 'name ' , 'address ' , 'phone ' , 'etc ' ] )
a_parser add_argument ( 'something ' , choices= [ 'a1 ' , 'a2 ' ] )
df drop ( [ col for col in [ 'column_name1 ' , 'column_name2 ' ] ] , axis=1 )
os system ( 'notepad exe ' + filename )
subprocess call ( [ 'grep ' , 'jdoe ' , '/etc/passwd ' ] )
df groupby ( 'a ' )  apply ( zscore )
plt plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) , 'ro- ' )
self progressbar pack ( padx=10 , pady=10 )
return chain from_iterable ( combinations ( s , r ) for r in range ( len ( s ) + 1 ) )
print ( f read ( ) )   
ordereddict ( itertools islice ( iter ( d items ( ) ) , 500 ) )
strip_accents ( 'a \xc0 \u0394 \u038e ' )
cursor execute ( 'insert or ignore into foo ( bar , baz ) values ( ? , ? ) ' , ( 1 , 3 ) )
nx draw_networkx ( g , pos , node_size=200 , node_color='blue ' )
{ l [ 'n ' ] for l in lst }
sheet merge ( top_row , bottom_row , left_column , right_column )
pandas to_datetime ( '2012-05-01t01:00:00 000000+0100 ' )
seq_iter = x if isinstance ( x , dict ) else range ( len ( x ) )
resultlist append ( m [ : ] )
[ t parent for t in x findall ( text='price ' ) ]
print ( 'true ' )
binascii b2a_hex ( '\x02p\x1ca\xd1\x00\x00\x02\xcb\x11\x00 ' )
outfile write ( line )  
g es [ 'label ' ] = [ 'a ' , 'b ' , 'c ' ]
print ( _ ( 'this is a translatable string   ' ) )
data [ idx == 0 ]  shape
df1 date = pd to_datetime ( df1 date )
fig canvas set_window_title ( 'test ' )
figure ( 1 , figsize= ( 6 , 6 ) )
self timer cancel ( )
writer writerow ( [ val ] ) 
'\xef\xbb\xbf ' + 'text with a utf-8 bom '
df = pd dataframe ( { 'a ' : a , 'b ' : b } )
print ( matrix data )
print ( ' ' join ( ' ( `` % s '' % d ) ' % c for c in counts if c [ 0 ] not in ' \t\n ' ) )
[ ( 'd ' , 'option5 ' ) , ( 'd ' , 'option1 ' ) , ( 'd ' , 'option2 ' ) ]
os remove ( filename )  
ip = urllib request urlopen ( 'http : //automation whatismyip com/n09230945 asp ' )  read ( )
print ( horqs ( [ '0h ' , '8h ' , '7k ' , '6h ' , 'ah ' , 'hs ' ] ) )
a [ np argpartition ( -a , np arange ( ( ~np isnan ( a ) )  sum ( ) ) ) ]
ws0 write ( row , col , value , style )
`` `` '' '' '' ''  join ( ' % *s ' % i for i in zip ( widths , items ) )
next ( v for k , v in list ( my_dict items ( ) ) if 'c ' in k )
super ( mydatefield , self )  __init__ ( *args , **kwargs )
print ( line strip ( ) )
unittest main ( )             
x , y = map ( list , zip ( * [ ( e , -e ) for e in range ( 10 ) ] ) )
writer writerow ( [ word ] )
ax legend ( handles , labels )
return render_to_response ( 'template html ' , { 'user ' : user } )
return session query ( someclass )  all ( )
root find ( ' //tag3 ' )
[ p [ 0 ] for p in datapoints [ 0:5 ] ]
plt show
social_auth_edxorg_extra_data = [ 'updated_at ' ]
re sub ( pattern , '' , txt )
admin site unregister ( user )
[ 'dog ' , 'duck ' , 'goose ' , 'duck ' , 'goose ' , 'duck ' , 'goose ' , 'duck ' ]
raise valueerror ( 'lo must be non-negative ' )
request environ [ 'remote_addr ' ]
threading thread __init__ ( self )  
np sum ( m , axis= ( 0 , 1 ) )
bool ( np where ( np array ( [ 0 , 0 ] ) ) )
print ( '2 + { } = { } ' format ( integer , rslt ) )
meta = { 'indexes ' : [ { 'fields ' : ( 'course_name ' , 'group_name ' ) , 'unique ' : true } ] }
url = browser execute_script ( 'return window location ; ' )
df2 = df2 [ [ 'a ' , 'b ' , 'c ' ] ]
print ( re search ( ' [ a-za-z ] + ' , string ) )
print ( ' % 02i , % 02i , % 05 2f ' % ( 3 , 4 , 5 66 ) )
sudo ( 'chpasswd < my_password_file ' )
opener addheaders = [ ( 'user-agent ' , 'mozilla/5 0 ' ) ]
parser add_argument ( '-m ' , action='store ' )
print ( temperature value )
root_path = os path split ( os path abspath ( __file__ ) ) [ 0 ]
result = [ x for x in orig if x ]
hours , rest = ( lambda t : ( int ( t [ 0 ] ) , t [ 1 ] ) ) ( s split ( ' : ' ) )
cursor execute ( 'desc table_name ' )
return encoded decode ( 'hex ' )
istr close ( )
scipy stats chi2_contingency ( data )
plt show
arr2d [ np arange ( 10 ) [ : , ( none ) ] , np random rand ( 10 , 10 )  argsort ( 1 ) [ : , :3 ] ] = 1
mylist [ : ] = ( i for i in mylist if i ! = '' )
[ true , true , false ]  count ( true )
df loc [ df col4 isin ( target_array ) ]  index
element = wait until ( ec element_to_be_clickable ( ( by xpath , '//div ' ) ) )
print ( '789 ' )
list ( chain from_iterable ( zip_longest ( d , reversed ( e ) ) ) )
singletest addtest ( mytestsuite ( 'test_false ' ) )
del mydict [ key ]
all ( a ! = b for a , b in itertools combinations ( [ 'a ' , 'b ' , 'c ' , 'd ' ] , 2 ) )
print ( cls __base__ )
solve ( [ x + 5 * y - 2 == 0 , -3 * x + 6 * y - 15 == 0 ] , [ x , y ] )
np column_stack ( ( np repeat ( coords [ 0 ] , 3 ) , np tile ( coords [ 1 ] , 3 ) ) )
root mainloop ( )                                                                                
sys stdout flush ( )                                     
[ ( '10 ' , 'people ' ) , ( '5 ' , 'cars ' ) ]
return os path abspath ( inspect getsourcefile ( local_function ) )
domain = a partition ( ' @ ' ) [ 2 ]
list_1 , list_2 = list ( list_1 ) , list ( list_2 )
my_dictionary = dict ( line split ( ) for line in f )
conn execute ( 'insert into example values ( ? , ? ) ; ' , ( 0 , 200 ) )
a max ( axis=0 )  max ( )
( 1 , ) + ( 2 , 3 ) * 4
objs append ( myclass ( ) )
ans = [ i for i in xy if i [ 1 ] > 0 ]
df [ 'new_date ' ] = df [ 'acc_date ' ]  apply ( lambda x : x replace ( year=x year - 1 ) )
[ len ( max ( i , key=len ) ) for i in tabledata ]
msg attach ( html_text )
logging error ( 'more of the same ' )
t tz_localize ( none )
smtp sendmail ( send_from , send_to , msg as_string ( ) ) 
[ 0 013306 , 0 059634 , 0 09832 , 0 059634 , 0 013306 ] ,
[ 0 021938 , 0 09832 , 0 162103 , 0 09832 , 0 021938 ] ,
[ int ( s [ x [ 1 ] : x [ 2 ] ] ) for x in parser parse ( s ) [ 1 ] ]
setattr ( self , attr , val )
response = re search ( '^ ( http : // ) ? ( www\\  ) ? ( vimeo\\ com/ ) ? ( \\d+ ) ' , embed_url )
np arange ( 1000000 )  dtype
f seek ( 0 )    
self fields [ 'is_staff ' ] = none
label destroy ( )
def is_member ( user ) : return user groups filter ( name='member ' )  exists ( )
out = [ ( 1 if num & 1 < < 7 - n else 0 ) for n in range ( 8 ) ]
raise runtimeerror ( `` does n't make sense   '' )
np pi
n append ( float ( row [ 8 ] ) )
my_list remove ( item )
re sub ( ' ( [ ^\\s\\w ] |_ ) + ' , '' , origlist )
file close ( )      
a [ :5 , :5 ]
re findall ( '\\b ( [ a-za-z ] \\s { 8 } \\d ) \\b ' , txt )
time sleep ( 1 )                                             
`` `` '' '' '' ''  join ( str_list )
[ 'c ' , 'b ' , 'd ' , 'a ' , 'b ' , 'c ' , 'd ' , 'a ' ]
[ 'b ' , 'd ' , 'a ' , 'c ' , 'a ' , 'b ' , 'd ' , 'c ' ]
[ 'd ' , 'c ' , 'a ' , 'b ' , 'c ' , 'd ' , 'a ' , 'b ' ]
[ 'c ' , 'd ' , 'a ' , 'b ' , 'd ' , 'c ' , 'a ' , 'b ' ]
[ 'c ' , 'd ' , 'a ' , 'b ' , 'c ' , 'd ' , 'a ' , 'b ' ]
[ 'c ' , 'b ' , 'a ' , 'd ' , 'a ' , 'b ' , 'd ' , 'c ' ]
sys exit ( app exec_ ( ) )           
tag = soup find ( lambda tag : tag name == 'script ' and 'src ' in tag attrs )
time sleep ( 0 1 )       
df [ ( df < = 2 )  any ( axis=1 ) ]
counter ( words )  most_common ( 10 )
`` `` '' '' '' ''  join ( sorted ( set ( foo ) , key=foo index ) )
list ( wrapper ( raisinggenfunc ( ) ) )
parser add_argument ( '-ipv4 ' , ' -- ipv4 ' , action='store_true ' , dest='ipv4 ' )
qtgui qwidget __init__ ( self ) 
plt show
x = np array ( [ -3 , -2 , -1 , 0 , 1 , 2 , 3 ] )  astype ( np float )
plt plot ( [ 4 , 5 , 6 ] , 'g ' )
nine_hours_from_now = datetime now ( ) + timedelta ( hours=9 )
ax1 set_xlim ( 0 , 1 )
`` `` '' { : g } '' '' ''  format ( float ( your_string_goes_here ) )
my_array = np array ( map ( lambda x : numpy nan if x == none else x , my_list ) )
imshow ( a , interpolation='nearest ' ) 
f = open ( filename , 'rb ' )
root mainloop ( )                                                                                 
mylist sort ( key=lambda x : x lower ( ) ) mylist sort ( key=str lower )
do_something ( )      
`` `` '' `` '' ''  join ( [ item replace ( ' ' , '' ) for item in shlex split ( text ) ] )
root mainloop ( )                                                                                  
git git ( )  clone ( 'git : //gitorious org/git-python/mainline git ' )
df [ [ col for col in list ( 'bcd ' ) if col in df columns ] ]
subprocess call ( [ 'touch ' , 'mainpgm py ' ] )
urllib request build_opener ( httpcookieprocessor )  open ( url )
df2 reset_index ( drop=true , inplace=true )
sys modules [ 'tools ' ] = tools
plt show
aggregated plot ( x='training_examples ' , y='accuracy ' , label='model ' )
sys exit ( app exec_ ( ) )            
row save ( )
list_of_tuples
logging basicconfig ( level=logging info ) 
matplotlib use ( 'qt4agg ' )
print ( self request body )
print ( 'u+ % 04x ' % ord ( c ) )
plt colorbar ( im , cax=cax )
shutil copy ( str ( my_file ) , str ( to_file ) )
len ( repr ( float ( x ) / 3 ) )
plt rcparams [ 'lines linewidth ' ] = 2
plt show
plt axis ( 'equal ' )
print ( d [ key ] )
return '' join ( c if c isalnum ( ) else ' ' for c in text )  split ( )
datetime datetime ( 2013 , 9 , 20 , 14 , 8 , 4 , 89761 )
logging getlogger ( 'py warnings ' )  addhandler ( console_handler )
response = urllib request urlopen ( req )
subprocess call ( [ 'test exe ' , files [ i ] ] )
buffer append ( np ndarray ( ( len ( my_buf ) , ) , buffer=my_buf , dtype=datatype ) )
print ( config get ( 'job2 ' , 'logfile ' ) )
func1 ( 1 , 2 )
yesterday strftime ( ' % m % d % y ' )
path = 'd : \\work\\kindle\\srcs\\test1 html '
datetime datetime now ( ) - datetime timedelta ( days=3 * 365 )
[ ( i ** 2 ) for i in l ]
`` `` '' ve9lojxnwv9ut0tftj4k '' '' ''
sorted ( [ 0 , 0 , 0 , 1 , 2 , 3 , 4 ] , key=lambda x : x if x ! = 0 else float ( 'inf ' ) )
mydict [ x ] += 1
`` `` '' { : % m/ % d/ % y } '' '' ''  format ( dt )
pylab show ( )       
plt axis ( 'off ' )    
s sendmail ( me , to , msg as_string ( ) )
users_list = [ int ( x ) for x in users_list ]
ax set_yticks ( [ ] )  
base_dir = os path dirname ( os path realpath ( __file__ ) )
driver switch_to_frame ( 'tinymcewindow_ifr ' )
p = [ ( i + 1 ) for i , ( x , y ) in enumerate ( zip ( a , a [ 1 : ] ) ) if x > y ]
plt show
print ( re findall ( ' ( nn\\d+ ) ' , st ) [ -1 ] )
tag findnextsibling ( 'h2 ' )
a_view __dict__ get ( 'login_is_required ' , false )
c = ( a + b ) [ : len ( b ) ]
plt xlabel ( 'spacing ( m ) ' , fontsize=15 )
mask = numpy repeat ( a [ : , ( 0 ) ] == 1 , a shape [ 1 ] )
[ '1 7 0rc0 ' , '1 7 0 ' , '1 11 0 ' ]
plt colorbar ( )   
time sleep ( 1 )                                              
{ 'a ' : 1 , 'b ' : 1 , 'c ' : 2 }
inspect getframeinfo ( inspect currentframe ( ) )  function
type ( myinst )  __dict__ [ 'attr ' ]  __set__ ( myinst , 1234 )
json dumps ( new_d )
printx2 ( )
tf initialize_all_variables ( )  run ( ) 
print ( simplejson loads ( s2 ) [ 'z ' ] [ 0 ] [ 'a ' ] )
[ 'miami ' , 'jacksonville ' , 'macon ' , 'charlotte ' , 'charleston ' ]
parser add_argument ( '-m ' , ' -- my-dict ' , type=str )
sys exit ( 0 )              
assert quotify ( ' '' '' type '' / ? '' ' ) == ' '' '' type '' / ? '' '
return super ( classa , cls )  __new__ ( cls , theirnumber )
df t groupby ( level=0 )  agg ( ' , ' join )  t
final_dict [ key ] = int ( item split ( ' = ' ) [ 1 ] )
num = int ( your_str , 8 )
map ( list , list_of_tuples )
[ [ 1 , 2 , 4 , 8 ] , [ 2 , 3 , 21 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ] 
delta total_seconds ( )
min ( double ( x ) for x in [ 1 , 2 , 3 ] )
c execute ( 'insert into x2_new select * from x2 ' )
`` `` '' ^ [ work|accus*|planet ] '' '' ''
print ( soup get_text ( ) )  
list ( k for k , _ in itertools groupby ( k ) )
str ( dec )
ax legend ( loc='upper left ' , bbox_to_anchor= ( 0 , 1 1 ) )
re sub ( ' ( ^|\\s ) ( \\s ) ' , repl_func , s )
top mainloop ( )
return mymodel filter ( id__in=ids )
df loc [ ~ ( df == 0 )  all ( axis=1 ) ]
[ 'dit is de eerste zin   ' , 'dit is de tweede zin   ' ]
max ( len ( list ( y ) ) for c , y in itertools groupby ( my_str ) if c == 'b ' )
img putalpha ( alpha )
plt show
id send ( '\x03 ' )
[ x for x , v in enumerate ( str ) if v == '| ' ]
config readfp ( open ( 'settings conf ' ) )
a = [ ( [ none ] * x ) for i in range ( y ) ]
return self __class__ ( os path expanduser ( str ( self ) ) )
self redirect ( url )
plt show
[ 1 , 4 , 2 , 3 , -13 , 5 , 6 , 7 , 3 , 1 , -5 , 4 , 9 , -12 ]
os system ( `` awk ' { print $ 2 } ' inputdata1 txt '' )
plt subplots_adjust ( left=0 2 , top=0 8 )
list ( map ( chr , list ( range ( 97 , 123 ) ) ) )
return qtcore qt itemiseditable | qtcore qt itemisenabled
pd dataframe ( df values reshape ( -1 , 2 , df shape [ 1 ] )  mean ( 1 ) )
doc_df = pd dataframe ( list ( iter_docs ( etree ) ) )
zzz = '\\u0101 '
re findall ( ' [ ^aeiou ] + ' , 'concertation ' )
sys path append ( submod_path )
wm reset ( )
return a stack ( 0 )  dot ( twos )  unstack ( )
render_template ( 'result html ' , result=figdata_png decode ( 'utf8 ' ) )
print ( parser parse_args ( ) )
now replace ( hour=0 , minute=0 , second=0 , microsecond=0 )
p wait ( )    
print ( a decode ( 'unicode-escape ' ) )
print ( df sort_index ( axis=1 ) )
file write ( content )
a , b , c , d , e = my_string split ( ) [ :5 ]
dir ( __builtins__ )
hivmsrej = models charfield ( max_length=100 , null=true , blank=true )
forms modelform __init__ ( self , *args , **kwargs )  
ax set_title ( 'amount frequency ' )
sys stdout write ( ' % s ' % c )
unique_filename = uuid uuid4 ( )
connection close ( )  
country = tree findall ( ' //country ' )
window show_all ( )
onedollar match ( ' $ 1 off delicious $ 5 ham   ' )
word [ 1 : ] 
sys exit ( app exec_ ( ) )             
' % d , % d , % s ' % ( x + ( y , ) )
print ( 'foo\\nbar\\n\\tbaz' decode ( 'string_escape ' ) )
root mainloop ( )                                                                                   
[ 409 , 422 , 430 , 437 , 451 ]
model objects filter ( id=i [ 1 ] )  update ( order=i [ 0 ] )
x ravel ( )  tolist ( ) [ 0 ]
diff = set ( dictb keys ( ) ) - set ( dicta keys ( ) )
print ( list ( product ( *with_nones ) ) )
socket getfqdn ( )
os listdir ( '   ' ) 
rows = csv reader ( f1 , delimiter=dialect delimiter )
plt savefig ( 'table png ' )
a [ np arange ( a shape [ 0 ] ) , a shape [ 1 ] - 1 - ( a [ : , : :-1 ] ! = 0 )  argmax ( 1 ) ] = 0
print ( sys modules [ 'os ' ] )
print ( ' , ' join ( ' ( % s , % s ) ' % tup for tup in mylist ) )
[ ( 'b ' , 2 ) , ( 'c ' , 2 ) , ( 'a ' , 3 ) , ( 'b ' , 3 ) , ( 'c ' , 3 ) ]
result , data = mail search ( none , ' ( to `` johndoe @ gmail com '' ) ' )
libraries = [ 'rt ' ]
isinstance ( your_var , str )
pd dataframe ( zip ( a , b ) , columns= [ a name , b name ] )
s split ( 'mango ' , 1 ) [ 1 ]
db commit ( )       
p1 = process ( target=func1 )
return render_template ( 'path html ' , token=session [ 'token ' ] )
print ( ' { } , { } ' format ( item , 1 if item in list else 0 ) )
next ( ( x for x in lst if matchcondition ( x ) ) , none )
empty_dict = { 'apple ' : none , 'ball ' : none }
content = urlopen ( url )  read ( )
main ( )              
imshow ( data )
pylab plot ( x , y )
`` `` '' location : { 0:20 } revision { 1 } '' '' ''  format ( location , revision )
[ x for x in collection ]
df update ( df [ lifestyle_var ]  fillna ( 1 ) )
browser implicitly_wait ( 10 )
my_item = next ( ( item for item in my_list if item [ 'id ' ] == my_unique_id ) , none )
tuples = [ tuple ( [ _f for _f in t strip ( ' ( ) ' )  strip ( )  split ( ' , ' ) if _f ] ) for t in input ]
import imp imp reload ( sys modules [ 'module ' ] )
canvas save ( ) 
created_weekday short_description = 'foo '
df [ 'fruit ' ] = df [ 'fruit ' ]  str lower ( )
df_new1 , df_new2 = df [ :10 , : ] , df [ 10 : , : ] if len ( df ) > 10 else df , none
parse = elementtree parse ( 'foo xml ' )
s = '' join ( l )
logging getlogger ( )  handlers [ 0 ]  setformatter ( formatter )
root mainloop ( )                                                                                    
bit_array setall ( 0 )
type ( us encode ( 'utf8 ' ) )
app run ( debug=false )
rs = client createobject ( 'adodb recordset ' , dynamic=true )
2 ** np arange ( m )
options = { 'py2exe ' : { 'bundle_files ' : 1 , 'compressed ' : true } } ,
print ( key , value )
foo ( * ( v1 , v2 , v3 ) )
[ ( 2 ** i ) for i , v in enumerate ( bin ( 109 ) [ :1 : -1 ] ) if int ( v ) ] [ : :-1 ]
struct unpack ( 'f ' , '\xdb\x0fi @ ' )
wb save ( 'border_test xlsx ' ) 
os makedirs ( os path join ( base , 'john smith ' ) )
im save ( 'text jpg ' )
output = [ { 'name ' : k , 'playing ' : list ( v ) } for k , v in list ( merged items ( ) ) ]
`` `` '' scheme : { 0 } , user : { 1 } , password : { 2 } , host : { 3 } , port : { 4 } , params : { 5 } , headers : { 6 } '' '' ''
dic = dict ( [ ( x , y ) for x , y in list ( dic items ( ) ) if not x startswith ( 's_ ' ) ] )
datetime strftime ( datetime now ( ) - timedelta ( 1 ) , ' % y- % m- % d ' )
root findall ( 'owl : class ' , namespaces )
p legend label_text_font = 'times '
scipy ndimage convolve
' % ( foo ) s % ( foo ) s % ( bar ) s ' % { 'foo ' : 'foo ' , 'bar ' : 'bar ' }
numpy fromstring ( data , dtype=int , sep='| ' )
df groupby ( [ 'candidate_id ' , 'enddate ' ] , as_index=false )  last ( )
super ( mymodel , self )  save ( )
fig savefig ( 'equal png ' )
print ( ( name , ' : ' , name lower ( ) ) )
browser find_elements_by_xpath ( '//input [ @ id= '' createfoldercreatebtn '' ] ' )
matched = np array ( list ( set ( arrays [ 0 ] )  intersection ( *arrays [ 1 : ] ) ) )
return map ( sum , data )
dates dt strftime ( ' % y- % m- % d ' ) 
{ 'count ' : '786 ' , 'year ' : '1603 ' } , { 'count ' : '779 ' , 'year ' : '1609 ' }
{ 'count ' : '762 ' , 'year ' : '1597 ' } , { 'count ' : '753 ' , 'year ' : '1594 ' }
{ 'count ' : '740 ' , 'year ' : '1596 ' } , { 'count ' : '738 ' , 'year ' : '1612 ' }
{ 'count ' : '718 ' , 'year ' : '1590 ' } , { 'count ' : '717 ' , 'year ' : '1610 ' }
{ 'count ' : '715 ' , 'year ' : '1602 ' } , { 'count ' : '680 ' , 'year ' : '1606 ' }
{ 'count ' : '674 ' , 'year ' : '1603 ' } , { 'count ' : '639 ' , 'year ' : '1603 ' }
{ 'count ' : '637 ' , 'year ' : '1603 ' } , { 'count ' : '634 ' , 'year ' : '1590 ' }
{ 'count ' : '633 ' , 'year ' : '1599 ' } , { 'count ' : '616 ' , 'year ' : '1596 ' }
{ 'count ' : '614 ' , 'year ' : '1596 ' } , { 'count ' : '612 ' , 'year ' : '1595 ' }
{ 'count ' : '607 ' , 'year ' : '1603 ' } , { 'count ' : '579 ' , 'year ' : '1593 ' }
{ 'count ' : '570 ' , 'year ' : '1600 ' } , { 'count ' : '541 ' , 'year ' : '1599 ' }
{ 'count ' : '525 ' , 'year ' : '1608 ' } , { 'count ' : '520 ' , 'year ' : '1599 ' }
{ 'count ' : '518 ' , 'year ' : '1602 ' } , { 'count ' : '486 ' , 'year ' : '1595 ' }
{ 'count ' : '470 ' , 'year ' : '1593 ' } , { 'count ' : '433 ' , 'year ' : '1609 ' }
{ 'count ' : '429 ' , 'year ' : '1607 ' } , { 'count ' : '421 ' , 'year ' : '1611 ' }
cursor execute ( query )
( ( df == 0 ) * 1 )  astype ( str )  sum ( axis=1 )
f seek ( 0 )     
df to_html ( classes='mytable ' )
`` `` '' '' '' ''  join ( [ c for c in a if c in '1234567890   ' ] )
x [ 0 ] [ 0 ]  append ( value1 )
new_field = models charfield ( max_length=140 , default='default value ' )
`` `` '' , `` '' ''  join ( ' % s= % s ' % pair for pair in zip ( a , b ) )
ax set_xticklabels ( [ '1/1 ' , '1/2 ' , '1/3 ' ] )
browser get ( 'http : //www google com ' ) 
a [ : , ( np arange ( ncols ) % a shape [ 1 ] ) ]
screen blit ( transsurface , ( 0 , 0 ) )
return min ( [ val for obj in ids for key , val in list ( obj items ( ) ) if key == 'id ' ] )
mydict [ 'a ' ] [ 'b ' ] = 4
parser add_argument ( ' -- opt1 ' , help='first optional parameter ' )
sum ( 1 for x in frequencies if x > 0 )
con close ( )
run ( 'command ' )
plt figure ( )        
return len ( [ _f for _f in a_list if _f ] ) > 0
x if x is not none else some_value
print ( soup prettify ( ) )    
list ( find_format_specifiers ( 'worker name is % s and id is % d but % % q ' ) )
os unlink ( filename )
f flush ( )
run ( 'hostname ' ) 
rows append ( { 'id ' : '1 ' , 'name ' : 'cat ' , 'year ' : '1998 ' , 'priority ' : '1 ' } )
transmission_array append ( 1 )
sorted ( lst , key=lambda l : ( l lower ( ) , l ) ) 
yvalues [ idx ]
print ( ( k , v ) )
mtcars [ 'n ' ] = mtcars groupby ( 'cyl ' ) [ 'cyl ' ]  transform ( 'count ' )
array ( [ 1715 37476 , 1715 37476 , 1715 37476 ] )
print ( os path dirname ( os path realpath ( sys argv [ 0 ] ) ) )
coru send ( 'hello ' )
magnitudes = np sqrt ( ( vectors ** 2 )  sum ( -1 ) ) [     , ( np newaxis ) ]
sid = session key ( )  id ( )
yticks [ -1 ]  set_visible ( false )
x = np delete ( a , zero_row , 0 )
files = { 'file ' : f }
user objects create_user ( **data )
`` `` '' ( \\d+\\  ? ) + $ '' '' ''
b = [ ( n > > i & 1 ) for i in range ( 7 , -1 , -1 ) ]
input ( 'press < enter > for more ' )
os rename ( thisfile , base + ' aln ' )
element = et parse ( fp )
my_stuff append ( 'apple ' )
logger setlevel ( logging info ) 
{ k : ( d get ( k , '' ) + d1 get ( k , '' ) ) for k in keys }
{ { ( object created | date ) : 'u ' } }
ax invert_yaxis ( )
locals ( )
np may_share_memory ( a , a [ [ 3 , 4 , 5 , 6 , 7 ] ] )
self reportservicestatus ( win32service service_stopped )
ordereddict ( sorted ( list ( d items ( ) ) , key=lambda t : len ( t [ 0 ] ) ) )
b = [ i for i in a ]
d1 update ( { 'c ' : '3 ' } )
print ( p [ 'id ' ] )
sys stdout flush ( )                                      
info = data [ :75 ] + '   ' if len ( data ) > 75 else data
cv2 imwrite ( 'image_processed jpg ' , img )
array ( [ 1 00002202 , 1 00004222 ] )
logging basicconfig ( stream=sys stdout , level=logging info )
print ( ( 'but locals ( ) is now ' , locals ( ) ) )
func2 ( 'a ' , 'b ' , 'c ' , 'd ' , 'e ' )
p = subprocess popen ( 'a bat ' , creationflags=subprocess create_new_console )
{ x : 1 , y : 2 }
super ( mymodelform , self )  __init__ ( *args , **kwargs )
orig = list ( csv reader ( open ( 'googlel csv ' , 'rb ' ) , delimiter= ' ; ' ) )
f __globals__ [ '__builtins__ ' ] [ '__import__ ' ] ( 'sys ' )
data [ i ] [ 0 ] = math sin ( data [ i ] [ 0 ] )
rel = membership objects filter ( group=your_group )  select_related ( )
signal pause ( )
os path join ( *choices [ : -1 ] )
dfrm ix [ dfrm [ 'a ' ]  idxmax ( ) ]
a [ : , ( np newaxis ) , : ] - v
[ tuple ( y for y in x if y ) for x in a ]
print ( max ( flatten ( l ) ) )
[ 'fill ' , 'shape ' , 'angle ' , 'size ' ]
tf initialize_all_variables ( )  run ( )  
functools reduce ( operator add , map ( collections counter , dict1 ) )
setattr ( a , the_name , classmethod ( func ) )
max ( [ l1 , l2 ] , key=len )
f seek ( 0 )      
return httpresponse ( 'yoohoo ! ' )
cv2 destroyallwindows ( )          
ax [ 0 ]  xaxis set_ticks_position ( 'top ' )
group set_index ( 'month ' )  plot ( )
random shuffle ( shufflethis )
`` `` '' abc\\dev\\t '' '' ''
[ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ]
ax xaxis set_major_formatter ( ticks )
print ( 'height = ' , getsystemmetrics ( 1 ) )
admin site register ( book )
plt imshow ( data , interpolation='none ' )
sudo ( 'touch tmp/test ' )
f ( [ 3 , 2 , 5 , 4 ] , [ 2 , 4 , 2 ] )
print ( ' % s = % s ' % ( key , value ) )
somedict = { x : ( 1 ) for x in somelist }
`` `` '' boat txt '' '' ''  replace ( ' txt ' , '' )
print ( ' , ' join ( names ) )
next ( i for i , j in enumerate ( lst ) if j )
return pd concat ( [ total , xtabs ] , axis=1 )
print ( request params [ 'username ' ] )
any ( re search ( '\\d { 4 } ' , s ) for s in lst )
ax set_ylabel ( 'y_values ' )
list ( incremental_window ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) )
list ( set ( tuple ( sorted ( s ) ) for s in all_the_ways ) )
ax format_coord = lambda x , y : ' ( { 0 : f } , ' format ( y ) + ' { 0 : f } ) ' format ( x )
[ ( b index ( x ) + 1 if x in b else none ) for x in a ]
super ( mymodel , self )  save ( ) 
return np sum ( arr , axis=0 )
df [ 'new_column ' ] = df [ 'source_column ' ]  diff ( )
datetime strptime ( datestr , ' % m/ % d/ % y % h : % m ' )
print ( re sub ( ' ( \\b\\w+ ) ( \\s+\\1\\b ) + ' , '\\1 ' , 'hello there there ' ) )
return hex ( struct unpack ( ' < q ' , struct pack ( ' < d ' , f ) ) [ 0 ] )
table c column contains ( 'needle ' )
return [ 'thing1 ' , 'other_thing ' , 'thing2 ' ]
df groupby ( df index / 3 )  mean ( )
ssh set_missing_host_key_policy ( paramiko autoaddpolicy ( ) )   
os unlink ( 'testdv py ' )
ax1 set_title ( 'scattered points ' )
id = models charfield ( max_length=10 )
tuple ( small_list ) in zip ( big_list [ : ] , big_list [ 1 : ] , big_list [ 2 : ] )
__loader__ fullname
values , vectors = scipy sparse linalg eigs ( p , k=1 , sigma=1 )
[ 'data1 ' , ' data2 ' , `` data3 '' ' '' , ' \'data4 '' '' \ '' , '' , '' , 'data5 ' , '' ]
`` `` '' '' '' ''  join ( filter ( str isdigit , '+123-456-7890 ' ) )
[ x for i , x in enumerate ( mylist ) if i not in toremove ]
solve ( eqs , [ x , y ] )
print ( '' join ( [ ( c if c isalnum ( ) else '* ' ) for c in s ] ) )
print ( ' error was ' + str ( type ( e ) ) + str ( e args ) )
np intersect1d ( a , b )
timeit timeit ( 'function ( x ) ' , setup='from __main__ import function , x ' )
df to_csv ( 'names csv ' , index=false )
sys path append ( os path abspath ( path ) )
admin site register ( item , itemadmin )
df query ( 'b ! = b ' )
conv ravel ( )
dftest groupby ( [ 'name ' , 'year ' ] )  amt apply ( f )  unstack ( )
ax1 set_ylabel ( 'y1 data ' , color='g ' )
sorted_list = sorted ( results , key=attrgetter ( 'person birthdate ' ) )
beautifulsoup ( html , 'lxml ' )
ax1 imshow ( [ [ 0 , 1 ] , [ 2 , 0 ] ] )
[ 6 , 2 , 6 , 3 , 2 , 3 ]
e [ np all ( e - np array ( [ 1 , 2 ] ) == 0 , axis=2 ) ]
sc parallelize ( list ( line ) )  collect ( )
app mainloop ( )           
time timetuple ( )
re match ( ' [ ^ [ ] *\\ [ ( [ ^ ] ] * ) \\ ] ' , yourstring )  groups ( ) [ 0 ]
location_out = [ ' , ' join ( locations [ n : ] ) for n in range ( len ( locations ) ) ]
[ name for name in names if 'aet ' in name ]
second_input = eval ( input ( 'enter second input : ' ) )
sample_dict = { ( 8 ) : [ 9 ] , ( 3 ) : [ 6 , 8 ] , ( 4 ) : [ 2 , 1 ] , ( 5 ) : [ 4 , 3 ] , ( 6 ) : [ 0 , 7 ] }
s multiply ( sparse csr_matrix ( 1 / np sqrt ( s multiply ( s )  sum ( 1 ) ) ) )
format ( 14 , '08b ' )
conn execute ( 'vacuum ' )
a [ : ] = [ 1 , 2 ]
cv2 imshow ( 'masked ' , masked_data )
print ( sum ( i == 1 for i in flatten_list ( x ) ) )
a [ [ 3 , 4 , 5 , 6 , 7 ] ]
set ( [ 'a ' , 'c ' , 'b ' ] )
obj save ( )  
print ( str ( socket gethostbyname ( socket getfqdn ( ) ) ) )
np std ( sample )
print ( ' % s is % 3d  % d ' % ( 'pi ' , 3 , 14159 ) )
print ( re search ( ' ( ? p < url > https ? : // [ ^\\s ] + ) ' , mystring )  group ( 'url ' ) ) 
os path abspath ( os path dirname ( __file__ ) )
selenium get_text ( `` //div [ @ id='1 ' ] /descendant : :* [ not ( self : :h1 ) ] '' )
sys modules [ 'packagea modulea ' ] = modulea
f write ( line rstrip ( '\r\n ' ) + '\n ' + content )
plt show
df set_index ( 'concatenated ' )
print ( ' { :  6s } ' format ( ' { :0 4f } ' format ( n ) ) )
return np isnan ( y ) , lambda z : z nonzero ( ) [ 0 ]
driver get ( 'http : //httpbin org/headers ' )
b = np array ( [ list ( word ) for word in a ] )
help ( parrot norwegian )
`` `` '' what '' ever '' '' '' 
re split ( '\\s|- ' , text )
( lambda a , b : a ( a , b ) ) ( x , b )
plt grid ( )
a [ : , 1:3 ]
instance set_password ( 'my_pw ' )
os write ( 1 , bytes ( 'your string to stdout ' , 'utf-8 ' ) )
writer writerow ( [ 'bob ' , '2 main st ' , '703 ' , 'yada ' ] )
a [ 0:2 , 0:2 ]
round ( 2606 89579999999 , 2 )
model fit ( s )
plt style use ( 'ggplot ' )
df [ :5 ] [ 'duration ' ] / np timedelta64 ( 1 , 's ' )
output write ( bytearray ( int ( i , 16 ) for i in yoursequence ) )
super ( child , self )  __init__ ( *args , **kwargs )
print ( a [ 'y ' ] )
`` `` '' i like { food } '' '' ''  format ( food='chocolate ' )
thumb = base64 b64encode ( im tostring ( ) )
np take ( a , b , axis=1 )
[ 'i am ' , 'show ' ] 
matches = [ m span ( ) for m in re finditer ( pattern , text ) ]
data sort ( key=lambda x : sorted ( tally [ i ] for i in x ) )
( np cumsum ( np bincount ( v , minlength=u size ) ) - 1 ) [ v ]
cursor close ( )    
pipeline fit_transform ( data )
raise exception ( 'not a dict in additionalkeyvaluepair ' )
ax plot_surface ( x , y , z ) 
lambda i : isinstance ( i , ( int , float ) )
{ x : ( x + 6 ) for x in range ( 1 , 5 ) }
fig savefig ( 'violins gif ' )
np concatenate ( [ [ 0 2 ] , linspace ( 1 , 60 , 60 ) , [ 60 8 ] ] )
print ( sys argv [ 0 ] )
{ 'comment_counts ' : { '33519766 ' : 226 } }
return ' '' ' + encodable replace ( ' '' ' , ' '' '' ' ) + ' '' '
a shape = a = a reshape ( ( a shape [ 0 ] , -1 , n ) )
`` `` '' - spam ham and eggs - `` '' ''  join ( l )
all ( x > limit for x in my_list )
print ( df [ [ 'a ' , 'b ' ] ]  sum ( axis=1 ) )
a [ 1 : ] -= a [ : -1 ]
ax plot_trisurf ( triang , z_refi , cmap=cm jet , lw=0 0 )
process = subprocess popen ( cmd , stdout=subprocess pipe , stderr=subprocess pipe )
img mean ( axis=0 )  mean ( )
plt show
my_array = numpy empty ( [ 1 , 2 ] , dtype='s10 ' )
foo objects filter ( bar_y__name='bar y ' )
image ( filename='data/empire jpg ' )
_cache clear ( )
plt show
return all ( getattr ( self , key ) == val for key , val in list ( kwargs items ( ) ) )
a [ : , : :2 ] + a [ : , 1 : :2 ] 
len ( set ( [ 9 , 20 , 413 , 425 ] )  intersection ( list ( range ( 34 , 566 ) ) ) )
{ k : v }
data decode ( 'utf-16 ' )
print ( 'the abbreviation for % s is % s   ' % ( key , value ) )
s close ( )
gtk window __init__ ( self , title='dialog example ' )
pdb set_trace ( )               
print ( json dumps ( [ 23 67 , 23 97 , 23 87 ] ) )
df groupby ( [ 'a ' , 'b ' ] )  tail ( 2 )  groupby ( [ 'a ' , 'b ' ] )  head ( 1 )
locale setlocale ( locale lc_all , '' ) 
df apply ( lambda x : x argmax ( ) , axis=1 )
a = [ [ ] , [ ] , [ ] , [ ] ]
chr ( ord ( 'a ' ) + 5 )
posts = post objects filter ( likes__21__exists=true )
sys stdout flush ( )                                       
urllib request urlopen ( 'http : //www example com/login html ' )
df = dd read_csv ( '2000-* csv ' , parse_dates= [ 'timestamp ' ] )
super ( )  __init__ ( )  
plt pause ( 3 )
[ { 'type ' : 6 , 'name ' : 'type 1 ' } , { 'type ' : 12 , 'name ' : 'type 2 ' } ]
list ( df [ 'foo ' ] * df [ 'bar ' ] )
sqlalchemy_database_uri = 'sqlite : // '
scipy signal fftconvolve ( may_a , may_b , mode='valid ' )
con execute ( 'alter table `example_table` add primary key ( `id_column` ) ; ' )
openmode = 'w ' or 'wt '
list ( '1111 ' ) 
list ( starmap ( add , zip ( lst , lst [ 1 : ] ) ) )
b = [ ( n > > i & 1 ) for i in range ( 0 , n bit_length ( ) - 1 ) ]
plt show
print ( [ n tolist ( ) for n in diags ] )
pattern = re compile ( '/ ( \\w+ ) \\ mp3 $ ' )
resp = requests post ( url , data=values , allow_redirects=true )
{ tuple ( x ) for x in l1 } & { tuple ( x ) for x in l2 }
[ ( fname , hashlib md5 ( open ( fname , 'rb ' )  read ( ) )  digest ( ) ) for fname in fnamelst ]
time sleep ( 0 5 )    
plt pcolormesh ( x , y , z , cmap=mpl cm reds )
edges = cv2 canny ( image_blurred , 100 , 300 , aperturesize=3 )
label pack ( fill=both , expand=1 )
testa4 testa4 ( [ 'aa ' , 'bb ' , 'cc ' ] )
x_train = scaler fit_transform ( x_train ) x_test = scaler transform ( x_test )
re search ( '\\ [ \\ [ ( [ ^\\ ] | ] * ) ( ? =   *\\ ] \\ ] ) ' , ' [ [ aaabbb ] ] ' )  group ( 1 )
np isnan ( [ nan , nan ] )  any ( )
list ( y )
f = open ( 'c : \\\\ ' + str ( i ) + ' gif ' , 'wb ' )
cb ax xaxis set_ticks ( minorticks , minor=true )
[ 1 , 2 , 3 , 4 , 5 , 6 ] [ 5 : -7 : -1 ]
max ( [ [ '1 ' , '2 ' , '3 ' ] , [ '7 ' , '8 ' , '9 ' ] ] , key=mymaxfunction )
result = requests get ( login_url , auth= ( username , password ) )
plt show
re split ( ' [ \u200b\\s ] + ' , 'some string ' , flags=re unicode )
self canvas pack ( ) 
g dropna ( )  reset_index ( )
request session [ 'card ' ] = card id
alist = [ row for row in alist if 2 not in row ]
resamp dropna ( )  reset_index ( )
one , two , three = list ( range ( 1 , 4 ) )
root title ( 'app ' )
root mainloop ( )                                                                                     
mpi_finalize ( )
page findall ( 'img ' )
a = [ 'a ' , 'a ' , 'a ' , 'a ' , 'b ' , 'b ' , 'c ' , 'c ' , 'c ' , 'd ' , 'e ' , 'e ' , 'e ' , 'e ' , 'e ' ] 
posts = post objects filter ( tags__in=tags )
splitlists = [ mylist [ i : i + n ] for i in range ( 0 , len ( mylist ) , n - 1 ) ] splitlists [ -1 ]  append ( splitlists [ 0 ] [ 0 ] )
pd read_hdf ( 'test h5 ' , 'foo ' )
cursor execute ( sql )   
var = ' { foo } { foo } { foo } ' format ( foo='python you so crazy ' )
x_str = ' $ % s \\times 10^ { % s } $ ' % ( l [ 0 ] , str ( int ( l [ 1 ] ) ) )
' @ ' + 'blahblah @ gmail com' split ( ' @ ' ) [ -1 ]
file close ( )       
l = [ 'ch ' , '' , '' , 'e ' , '' , 'e ' , 'se ' ]
im = image open ( '1_tree jpg ' )
form save ( ) 
import imp imp reload ( mainscript )
df = sqlcontext table ( 'df ' )
plt plot ( x_list , y_list )
df [ 'target ' ]  values
new_df = pd dataframe ( { 'class ' : [ j for i in repeated_items for j in i ] } )
print ( 'upload error : ' + uploadr [ 0 ] )
first_element = mylist [ i ] [ 0 ]
sorted ( zip ( listoftimes , listoflines ) )
print ( ( '2 + ' , integer , '= ' , rslt ) )
set ( list1 + list2 )
soup = beautifulsoup ( page read ( ) , 'html parser ' )
foo_bar_mod = importlib import_module ( 'path to foo bar ' )
print ( tips groupby ( [ 'sex ' , 'day ' , 'smoker ' ] ) [ 'tip ' , 'size ' ]  mean ( ) )
new_dict = dict ( ( k , v ) for k , v in dict items ( ) if k in list )
a = np array ( a ) 
session commit ( )            
df2 t drop_duplicates ( )  t
plt show
stream filter ( track= [ 'twitterapi ' ] )
json dumps ( separators= ( ' , ' , ' : ' ) ) 
print ( df [ [ 'a ' , 'b ' ] ]  sum ( ) )
pipe stdin close ( )
( a [ n : n + 1 ] + [ default ] ) [ 0 ]
'cyrillic and \u043a\u0438\u0440\u0438\u043b\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439 '
re search ( ' ( ? u ) \\by\\b ' , '\xc3\xbcy\xc3\xbc ' )
zip ( * ( [ iter ( x ) ] * 3 ) )
rstr xeger ( ' [ a-z ] \\d [ a-z ] \\d [ a-z ] \\d ' )
web setcookie ( 'session ' , '' , expires=-1 , domain=session_cookie_domain )
pprint pprint ( obj , compact=true )
`` `` '' string to search '' '' ''  index ( 'needle ' )
a sum ( axis=0 )
pylab plot ( x , y , 'o ' )
ax get_yaxis ( )  set_minor_locator ( mpl ticker autominorlocator ( ) )
[ { 'event ' : 'd ' , '_id ' : objectid ( '4d5b     0003 ' ) , 'uid ' : 3 , 'time ' : 4 } ]
ts [ datetime ( 2011 , 1 , 8 ) : ]
np diff ( index ) / np timedelta64 ( 1 , 's ' )
b = numpy vstack ( ( numpy zeros ( a shape , int ) , a ) )
print ( list ( map ( lambda x , y : x + [ y ] , a , list ( range ( 1 , len ( a ) + 1 ) ) ) ) )
db session commit ( )               
print ( df to_csv ( sep='\t ' , index=false ) )
{ 'a ' : [ 1 , nan , nan ] , 'b ' : [ 2 , 3 , nan ] , 'c ' : [ 3 , 4 , 4 ] , 'd ' : [ nan , nan , 4 ] }
file write ( 'second line\n ' )
return render ( request , 'books html ' , books_list )
conn commit ( )                  
pylab show ( )        
value = root [ 'a ' ] [ 0 ] [ 'b ' ] [ 0 ] [ 'c ' ] [ 0 ]
df = df [ df [ 'sale item ' ] ! = 'item1 ' ]
return sum ( functools reduce ( operator mul , data ) for data in zip ( *lists ) )
sys exit ( 1 )         
class a ( object ) : __slots__ = [ ]
return render_to_response ( 'template html ' , { 'mylist ' : mylist } )
print ( s seconds / 60 )
return [ ( i , lst count ( i ) ) for i in set ( lst ) ]
[ 'mo ' , 'nkey ' ]
[ 'mon ' , 'key ' ]
[ 'monk ' , 'ey ' ]
[ 'monke ' , 'y ' ]
image_model image_field ( 'path ' , file ( )  read ( ) )
re sub ( 'blah ' , lambda m , i=iter ( '123 ' ) : next ( i ) , 'blah blah blah ' )
return line [ 5 : ]
sorted ( a , key=my_key )
arr = np array ( list_of_arrays )
df ix [ df cherry == 'bad ' , [ 'apple ' , 'banana ' ] ] = np nan
print ( match group ( 2 ) )
tuple ( re findall ( '\\ { ( [ ^ { } ] + ) \\ } ' , s ) )
print ( s replace ( '\n ' , '\n ' ) )
browser get ( 'mikekus com ' )
sys stdout write ( ' % d % % completed \r ' % ( i , ) )
session commit ( )             
return sum ( i for i in range ( a , b + 1 ) if i % 2 == 0 )
sys path append ( '   ' )   
nx draw_networkx_labels ( g , pos_higher , labels )
conn escape_string ( )
`` `` '' repr ( ) shows quotes : { ! r } ; str ( ) does n't : { ! s } '' '' ''  format ( 'test1 ' , 'test2 ' )
df iloc [ df index get_level_values ( 'f ' ) == 'a ' ]
msg [ 'to ' ] = 'a @ b com , b @ b com , c @ b com '
from functools import reduce dict = reduce ( lambda x , y : { y : x } , reversed ( mylist ) , { } )
`` `` '' '' '' ''  join ( random sample ( s , 10 ) )
return os path dirname ( f )
random shuffle ( migrant )
numpy setxor1d ( a , b )
df cumsum ( )
str = re sub ( ' ( & [ a-za-z ] ) ' , ' % ( \\1 ) s ' , str )
logging config fileconfig ( '/path/to/logging conf ' )
plt show
arr sum ( axis= ( 0 , 1 ) )  shape
xy = np mgrid [ -5:5 1:0 5 , -5:5 1:0 5 ]  reshape ( 2 , -1 )  t
s % { 'x ' : 'apples ' , 'y ' : 'oranges ' }
print ( re sub ( ' (   { 64 } ) ' , '\\1\n ' , s , 0 , re dotall ) )
[ x for x in x if x [ id ] == 20 ]
return self get_model ( )  objects all ( )
plt show
repr ( a )
soup = beautifulsoup ( html ) print ( soup get_text ( ) )
str lower ( 'hello ' )
f seek ( 0 )       
sort ( arr , arr size )
ordered_dictionary = [ ordereddict ( zip ( names , subl ) ) for subl in list_of_lists ]
print ( ' ' join ( to_search [ name ] ) )
len ( gzip open ( 'fuse-ext2-0 0 7 tar gz ' )  read ( ) )
plt show
plt xlabel ( ' $ \\frac { \\phi + x } { 2 } $ ' )
element = et parse ( fp )  getroot ( )
df drop ( df columns [ 11 : ] , axis=1 )
2 ** 2 ** numpy arange ( 5 )
a [ 'pos ' ] [ [ 'y ' , 'x ' ] ] > b [ 'pos ' ] [ [ 'y ' , 'x ' ] ]
print ( str ( netaddr ipaddress ( 42540766411282592856904265327123268393 ) ) )
pl show ( )   
a insert ( 0 , a pop ( ) ) 
print ( ' % f ' % x )
root mainloop ( )                                                                                      
r mainloop ( )
np random shuffle ( a )
app run ( )                                
print ( myclass ( ) )
re findall ( ' { ( [ ^ { } ] * ) } ' , ' { a } { { b } c { { d } } } ' )
self show ( )   
data = numpy array ( f read ( )  split ( ) , dtype=float )  reshape ( 7000 , 8 )
x astype ( 'm8 [ d ] ' )  astype ( 'o ' )
df mean ( axis=1 )  
dfsearch [ 'str_value ' ]  map ( lambda x : urllib parse unquote ( x )  decode ( 'utf8 ' ) )
print ( result get ( 'link ' ) )
new_dict [ key ]  extend ( value )
raise forms validationerror ( 'must enter a start date ' )
urllib parse quote ( '/test ' , safe= '' )
print ( get_lists_with_sum ( 11 , 8 ) )
session expunge_all ( )
s decode ( 'utf-8 ' )  upper ( )
xx , yy = np mgrid [ :5 , :5 ]
plt grid ( true , color='w ' , linestyle='- ' , linewidth=2 )
urllib parse urlencode ( { 'lang ' : 'en ' , 'tag ' : 'python ' } )
big + np array ( [ 1 , 2 , 3 ] )
a [ : :-1 , : ]
print ( ' { foo } ' format ( **locals ( ) ) )
ax = fig add_subplot ( 1 , 1 , 1 )
return itertools chain from_iterable ( lists )
df groupby ( [ 'level0 ' , 'level1 ' ] )  cumcount ( )
ax plot ( x , y , ' -- ' , color='lawngreen ' , linewidth=5 )
np mean ( t , axis=1 )
super ( test , self )  save ( force_insert , force_update )
root mainloop ( )                                                                                       
session query ( whateverclass )  filter ( whateverclass _containerclassid == 5 )  all ( )
deviceparent = fexdata [ destdevice ] [ 'parent ' ]
driver quit ( )          
return s decode ( 'ascii ' , 'ignore ' )
df = df replace ( '0 ' , np nan )
open ( filename , 'wb ' )
webb traceroute ( 'your-web-page-url ' )
h setlevel ( logging debug )
raise importerror ( 'reportlab version 2 1+ is needed ! ' )
return np cos ( np pi * x ) * np sin ( np pi * y )
parser add_argument ( 'files ' , nargs='* ' ) 
len ( s ) - len ( s rstrip ( '0 ' ) )
self clickcursor execute ( query )
plt show
return httpresponse ( 'ok ' )
print ( 'hello ' )    
[ whatever_data ] = pickle load ( open ( 'myalldata p ' , 'rb ' ) )
`` `` '' { 0 } ^ { { { 1 : +03 } } } '' '' ''  format ( *frexp10 ( -1234000000 0 ) )
pd value_counts ( list ( chain ( *df categories values tolist ( ) ) ) )
plt show
`` `` '' `` '' ''  join ( ' ' join ( x ) for x in merged )
pd date_range ( start=datetime datetime now ( ) , periods=5 , freq='a ' )
json = serializers serialize ( 'json ' , some_queryset [ 0:1 ] )
sample = [ [ 'cgg ' , 'att ' ] , [ 'gcgc ' , 'taaa ' ] , [ 'acaa ' , 'caac ' ] ]
type ( variable_name )
a [ a == ndv ] = numpy nan
print ( any ( l [ i : i + len ( pat ) ] == pat for i in range ( len ( l ) - len ( pat ) + 1 ) ) )
urllib request urlopen ( 'http : //www example com/ ' , jdata )
pygame init ( )   
testdata [ 'value ' ]  str contains ( testdata [ 'value ' ] [ 0 ] )  any ( )
x [ np r_ [ 0:2 , -2:0 ] ]
s += ' ' join ( str ( a [ i , j , k ]  imag ) )
sys path append ( 'c : \\python24\\lib ' )
print ( s tell ( ) )
re findall ( 'this is ( \\d+ ) the string ( \\d+ ) that , i need ( \\d+ ) ' , s )
time sleep ( 5 )            
dest = dict ( list ( orig items ( ) ) + list ( extra items ( ) ) )
result = 'function ( % s ) ' % ' , ' join ( map ( str , args ) )
print ( my_new_list )
df loc [ row , key ] = data [ key ]
parser add_argument ( '-e ' , ' -- example ' , action=make_action ( 'your arg ' ) )
pipeline steps [ 1 ] [ 1 ]
dir ( request body )
df [ ( df > 16 ) & mask ]
order = [ 'gender ' , 'male ' , 'female ' , 'unknown ' ] pd concat ( [ df , pd get_dummies ( df , '' , '' )  astype ( int ) ] , axis=1 ) [ order ]
writer writerow ( [ 'subject ' , 'itemid ' , 'bias1answer ' ] )
[ 'big ' , 'fat ' , 'cat ' , 'sits ' , 'on ' , 'the ' , 'mat ' , 'eating ' , 'a ' , 'rat ' ]
re sub ( ' (   * ) iss ' , '\\1xxx ' , mystr )
bar ( x , y , width=30 )
fp = urllib request urlopen ( 'http : //remotedomain com/file mp3 ' )
xvfb wait ( )
[ x for x in lis if x > 2 ]
print ( new_string )
files = [ f for f in os listdir ( dirtoscreens ) if path isfile ( f ) ]
print ( re search ( '\\d * [ a-z ] | [ a-z ]   *\\d ' , x ) )
[ random randrange ( 1 , 10 ) for _ in range ( 0 , 4 ) ]
cur execute ( 'select host , user from user ' )
root mainloop ( )                                                                                        
sys stdout flush ( )                                        
[ [ 1 , 3 , 4 , 5 ] , [ 1 , 3 , 8 ] , [ 1 , 7 , 8 ] , [ 6 , 7 , 8 ] , [ 9 ] ]
print ( eval ( '+' join ( lines ) ) )
print ( 'length of { 0 } is { 1 } ' format ( repr ( myunicode ) , len ( myunicode ) ) )
[ i for i in records if i [ 'price ' ] ! = 0 ]
plt savefig ( 'figure1 png ' )
plt show
sum ( 1 for i in x if i )
x = ( x + y ) % 48 
int ( 3 745 )
return struct unpack ( ' < q ' , bytes )
isascii = lambda s : len ( s ) == len ( s encode ( ) )
users = models manytomanyfield ( users )
df [ 'col2 ' ] = df [ 'col2 ' ]  astype ( 'category ' )
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]  
pprint pprint ( obj , depth=1 )
re search ( 'a { 1,65535 } ' , 'aaa ' )
df query ( ' @ start < = timestamp < = @ end ' )
sortedtotal rename ( columns=lambda x : x strip ( )  replace ( ' ' , '_ ' ) , inplace=true )
req close ( )
return hash ( self __key__ ( ) )
func ( np array ( [ 10 , 20 , 30 ] ) )
print ( ' , ' join ( row ) ) 
[ 'mo ' , 'n ' , 'k ' , 'e ' , 'y ' ]
a __getitem__ ( slice ( 0 , 1 ) )  __getitem__ ( 0 )  __setitem__ ( 0 , 5 )
np einsum ( 'ijkl , jk ' , h , x )
app = create_app ( )
len ( set ( a ) ) == len ( a ) == max ( a ) and min ( a ) == 1
super ( waypointform , self )  __init__ ( *args , **kwargs )
print ( input ( ' > ' ) )
df3 groupby ( [ 'item1 ' , 'item2 ' ] , as_index=false )  sum ( )
time sleep ( 1 )                                               
print ( etree tostring ( page , pretty_print=true ) )
`` `` '' ew91cib0zxh0 '' '' ''  decode ( 'base64 ' )
sess run ( train_op )
label pack ( )
system ( ' '' c : \\path\\to\\chrome exe '' -incognito www foo com ' )
site delete ( os path join ( path , ftpfile name ) )
[ 'joe ' , 'dave ' , 'professional , ph d  ' , 'someone else ' ]
( dt - datetime ( 1970 , 1 , 1 ) )  total_seconds ( )
plt savefig ( 'graph pdf ' , dpi=1000 , bbox_inches='tight ' )
ax1 set_zorder ( 1 )
m = types moduletype ( 'm ' , 'the m module ' )
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ) 
np any ( ( 0 < x ) & ( x < 1 ) )
gtk main ( )                   
[ a for a , b in zip ( aa , bb ) if a == b ]
datetime strptime ( '2011-05-25t20:34:05 787z ' , ' % y- % m- % dt % h : % m : % s  % fz ' )
issubclass ( c , a )
fig tight_layout ( )   
df set_index ( 'subindex ' , append=true )
df = pd concat ( [ df , pd dataframe ( new_data ) ] )
matplotlib get_backend ( )
df to_records ( )  view ( [ ( 'id ' , ' < i8 ' ) , ( 'a ' , ' < f8 ' ) , ( 'b ' , ' < f8 ' ) , ( 'c ' , ' < f8 ' ) ] )
sum ( i for i , j in enumerate ( s , 1 ) if j == 'a ' )
process stdin write ( '\n ' )
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] zip ( *a )
conn commit ( )                   
print ( list ( igroups ( [ 9 , 1 , 2 , 3 , 1 , 1 , 2 , 3 , 5 ] ) ) )
[ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ] 
pd merge_asof ( dfa , dfb , 'datetime ' )
os path basename ( f name )
plt ticklabel_format ( style='sci ' , axis='x ' , scilimits= ( 0 , 0 ) )
p start ( )   
parser add_argument ( 'foo ' , nargs='* ' , action=extender )
any ( x [ 1 : ] == x [ : -1 ] for x in zip ( *arr ) )
df stack ( )  reset_index ( 1 )
self assertequal ( 0 , os getpid ( ) )
int ( '' join ( s split ( ) ) , 16 )
`` `` '' , `` '' ''  join ( str ( e ) for e in s )
my_array [ : , ( 0 ) ] , my_array [ : , ( 1 ) ] = my_array [ : , ( 1 ) ] , my_array [ : , ( 0 ) ]  copy ( )
re findall ( '\\b [ a-za-z ] +\\b ( ? ! \\ ( ) ' , 'movav ( x/2 , 2 ) *movsum ( y , 3 ) *z ' )
df shape [ 1 ]
len ( df )
utc_dt = datetime ( 1970 , 1 , 1 ) + timedelta ( seconds=timestamp )
import nltk
a [ : , ( 1 ) , ( none ) ]
cts minute == 0 and cts second == 0
[ 0 ] * 10
pyplot show ( )     
return fragments
app = flask ( __name__ , static_url_path='/static ' )
locations = sorted ( list ( range ( len ( a ) ) ) , key=a __getitem__ )
print ( yesterday strftime ( ' % m % d % y ' ) ) 
sys stdout flush ( )                                         
[ ( 'aa ' , 2 ) , ( 'bb ' , 2 ) , ( 'cc ' , 1 ) ]
root = tree getroot ( ) 
ax xaxis set_major_locator ( mylocator )
print ( min ( mylist , key=lambda x : x [ 1 ] ) )
print ( '- ' * 3 )
et fromstring ( ' < c > < a > < b > < /b > < /a > < /c > ' )  find ( ' //b/   ' )
ax contourf ( x , y , z , zdir='y ' , offset=y_min , cmap=cm coolwarm )
city = models charfield ( max_length=50 , blank=true , default= '' )
raise valueerror ( 'non increasing matches for a ' )
tup [ 0 ] = tup [ 0 ]  __iadd__ ( ( 4 , 5 , 6 ) )
gtk main ( )                    
config readfp ( open ( 'abc txt ' ) )
python - devel
print ( ' { 0 : < 10 } { 1 : > 8 } { 2 : > 8 } ' format ( *args ) )
[ '' join ( x ) for x in product ( * ( d [ y ] for y in seq ) ) ]
super ( stoppablethread , self )  __init__ ( )
y [ 1 : -1 , 1 : -1 ] *= x [ 1 : -1 , 2 : ]
ax set_xlim ( 1 , 11 )
logging info ( 'finished ' ) 
logging info ( 'started ' )
lines = line split ( '\n ' )
plt draw ( )           
decimal decimal ( '4 ' ) / decimal decimal ( '100 ' )
my_int_list = [ int ( v ) for v in open ( 'myfile txt ' )  read ( )  split ( ) ]
{ i : a [ i ] for i in np nonzero ( a ) [ 0 ] }
return [ i strip ( ) for i in txt split ( default_sep ) ]
p wait ( )     
tmp [ : , : -1 ] += a [ : , 1 : ]
df to_sql ( 'table_name ' , engine ) 
plt show
l2 = zip ( l1 [ 0 : :2 ] , l1 [ 1 : :2 ] )
plt show
rpt groupby ( level= [ 'stk_id ' , 'rpt_year ' ] ) [ 'sales ' ]  apply ( sale_per_q )
x = np array ( [ 1 , 2 , 3 , 4 , 5 ] )
db = mysqldb connect ( 'localhost ' , 'root ' , 'password ' , 'testdb ' )
[ a [ 'b ' ] [ 'c ' ] [ key ] [ 'answer ' ] for key in list ( a [ 'b ' ] [ 'c ' ]  keys ( ) ) ]
df_example groupby ( 'id_1 ' )  apply ( collapse )  reset_index ( drop=true )
newd = dict ( zip ( list ( d keys ( ) ) , [ round ( v ) for v in list ( d values ( ) ) ] ) )
s3 meta client get_bucket_location ( bucket='boto3 region ' )
key = '' join ( chr ( x ) for x in [ 19 , 0 , 0 , 0 , 8 , 0 ] )
numcount = counter ( numstring split ( ' , ' ) )
self save ( ) 
gtk main_quit ( )
outfile write ( 'new line2\n ' )
outfile write ( 'new line1\n ' )
a [ ( ( 0 , ) , ( 1 , ) ) , b ]
return int ( t [ 0 ] , 2 ) + int ( t [ 1 ] , 2 ) / 2 0 ** len ( t [ 1 ] )
[ '1 ' , none , '3 ' , '4 ' , none ]
os environ [ 'django_settings_module ' ] = 'myproject settings '
print ( [ ( int ( i ) + 1 ) for i in s split ( ) ] )
ax plot_surface ( x , y , z , rstride=4 , cstride=4 , color='b ' )
print ( 'not float ' )
print ( ' > ' + '\n' join ( pair ) )
df apply ( calculatec2 , axis=1 )
window show ( )
db insert_many ( df to_dict ( 'records ' ) )
pdb set_trace ( )                
str = str [ :1 ]  upper ( ) + str [ 1 : ]
fig savefig ( 'ax2_figure png ' , bbox_inches=extent ) 
ax2 set_xticklabels ( [ '7 ' , '8 ' , '99 ' ] )
df index = df index [ : -1 ]  append ( pd index ( [ 'a ' ] ) )
collections ordereddict ( sorted ( result items ( ) ) )
group ( 'news_providers_loading ' )  send ( { 'content ' : str ( provider ) } )
( 10 ) ( )
rc ( 'text ' , usetex=true )  
f close ( )                                      
mail login ( 'emailaccount @ live com ' , 'yourpassword ' )
test ( x , 'one ' )
plt show
x = ( x + y ) % 48  
df_with_x5 show ( )
[ [ 'alpha ' , 'beta ' ] , [ 'delta ' , 'gamma ' ] ]
return condition1 or condition2 or condition3
array2 = [ i for i in array2 if i not in array1 ]
return unicodedata normalize ( 'nfkd ' , unicodetext )  encode ( 'ascii ' , 'ignore ' )
t2c main ( )
sorted ( get , key=sortkey )
plt show
sys exit ( app exec_ ( ) )              
spamwriter writerow ( [ 'spam ' , 'lovely spam ' , 'wonderful spam ' ] )
[ i for sublist in zip_longest ( *a ) for i in sublist if i is not none ]
rdd = sc parallelize ( [ ( 'a ' , 1 ) ] )
return requests get ( url )
os remove ( filename )   
url = os environ [ 'http_host ' ]
print ( line rstrip ( ) )  
print ( df loc [ df [ 'col1 ' ]  isnull ( ) , [ 'col1 ' , 'col2 ' , 'col3 ' ] ] )
pivot sort ( 'sum ' , ascending=false , inplace=true )
watchout ( )
skycake ( )
[ [ '-' join ( ( min ( a , b ) , max ( a , b ) ) ) for b in shops if b ! = a ] for a in shops ]
fig savefig ( 'test png ' , dpi=fig dpi )
plt show
df = df [ df [ 'col 2 ' ] < 2 ]
return func ( self , *args , **kwargs )
show ( ) 
foo update ( list ( range ( 2 , 6 ) ) )
pg mixer set_num_channels ( 50 )
a = np genfromtxt ( 'test txt ' , delimiter= [ 19 , 4 , 5 , 5 ] , skip_header=1 )
df mask ( np arange ( df shape [ 0 ] ) > = np arange ( df shape [ 1 ] ) [ : , ( np newaxis ) ] )
[ os path join ( root , *choices [ : i + 1 ] ) for i in range ( len ( choices ) ) ]
print ( iter2 ( a copy ( ) , rc1 , rc2 ) )
p communicate ( `` insert into egg values ( 'egg ' ) ; '' )
df loc [ target_index ]
b = a [ 0:2 ]
dsp close ( )
from nltk collocations import *
np savetxt ( 'test txt ' , ab , fmt= ' % 10s % 10 3f ' )
root mainloop ( )                                                                                         
check_all ( [ 'bc ' , 'ab ' ] , [ 'abc ' ] )
foo = type ( 'foo ' , ( ) , { 'bar ' : true } )
my_dictionary [ 'norway ' ]
df [ sorted ( df columns , key=lambda x : datetime strptime ( x , ' % m/ % y ' ) ) ]
driver get ( 'https : //localhost/test/ ' )
np nanmean ( data , axis=0 )
counter ( test split ( ) )  most_common ( )
print ( df sum ( )  sum ( ) )
glob glob ( '/path/to/dir/* csv ' )
all ( i in list ( a3 f items ( ) ) for i in list ( l [ 0 ]  f items ( ) ) )
isinstance ( dates , pd datetimeindex )
df columns = [ str ( i ) for i in df columns values tolist ( ) ]
data [ 'realms ' ] [ 0 ] [ 'name ' ]
canvas pack ( )
( my_array [ : -1 ] * my_array [ 1 : ] < 0 )  sum ( )
raise valueerror ( 'int value is required ' )
reactor run ( )                
isdeployed strip ( )
print ( a [ 0 ] [ 0 ] )
parser add_argument ( 'foo ' , type=int , choices=range ( 0 , 1000 ) )
super ( mymodel , self )  save ( *args , **kwargs )   
np asarray ( z ) [ : , ( 0 ) ]
s = df1 [ 'value ' ]  unstack ( 0 )  asfreq ( 'd ' )  ffill ( )  stack ( )
list ( set ( a ) & set ( b ) )
ws write ( rowi , coli , converters [ coli ] ( value ) )
max_value = max ( my_list ) max_index = my_list index ( max_value )
array ( [ [ -1 , -2 , -1 , 2 ] , [ 1 , 0 , 1 , 4 ] ] )
glcolor3ub ( 0 , 255 , 0 )
df groupby ( 'a ' , group_keys=false )  apply ( lambda x : x ix [ x b idxmax ( ) ] )
plt show
sys exit ( )            
do_something ( )       
cv2 imshow ( 'frame ' , frame )
self tcp_socket connect ( '0 0 0 0 ' , '6767 ' )
f close ( )                                       
x [ : :2 , 1 : :2 ]
setattr ( instance , function __name__ , function )
print ( [ i for i in range ( len ( list ) ) if list [ i ] == '\n ' ] )
df groupby ( level='project ' )  last ( )
np exp ( 1 3938 )
a , b = my_list [ :2 ]
req add_header ( 'content-length ' , ' % d ' % len ( data ) )
{ 'a ' : 'a ' , 'b ' : 'b ' }
[ a [ i ] for i in np argsort ( a ) [ -2 : ] ]
plt show
s = 'please answer my question' len ( s )
url ( '^login/ $ ' , views login , name='login ' ) , 
ax [ 0 ]  imshow ( arr , interpolation='nearest ' , cmap=cmap )
df [ 'new_date ' ] = df [ 'acc_date ' ] - pd timedelta ( days=365 )
ax set_xlabel ( 'time ( h ) ' )
[ { 'column1 ' : 'value_column1 ' } , { 'column2 ' : 'value_column2 ' } ]
np allclose ( r1 , r2 )
emp save ( )
[ 1 , 3 , 4 , 5 , 6 , 7 , 10 , 11 , 12 , 13 , 14 , 15 ]
requests get ( endpoint_url , verify='/path/to/file crt ' )
f seek ( 0 )        
[ ( ord ( x ) % 32 ) for x in char1 [ 0 ] ]
os makedirs ( dir )
os makedirs ( mypath )
t [ 'foo ' ] [ 'spam ' ]
list1 , list2 = f ( )
cc send ( 'starttls\r\n ' )
pygame joystick init ( )
ipython magic ( 'timeit abs ( -42 ) ' )
driver get ( 'http : //google com ' )
[ substring strip ( ) for substring in string split ( ' , ' ) ]
plt gcf ( )  canvas get_supported_filetypes_grouped ( )
first3 = numpy dstack ( firstmatrices )
return super ( hmm , self )  __call__ ( priorprobs )
[ { 'play ' : 5 0 , 'uid ' : 'abc ' , 'id ' : 1 } , { 'play ' : 1 0 , 'uid ' : 'def ' , 'id ' : 2 } ]
df reindex ( stk_list , level=0 )
del c [ 0 ]
plt show
os remove ( i )
plt show
float ( 'inf ' ) < ellipsis
d strftime ( ' % s ' )
func ( ) 
string_val = '' join ( choice ( lowercase ) for i in range ( n ) )
print ( etree tostring ( root , pretty_print=true ) )    
gtk_icons = os path join ( 'share ' , 'icons ' )
d = dict ( map ( str split , list1 ) )
time strptime ( example , ' % y- % m- % dt % h : % m : % s  % fz ' )
np array ( [ arr [ ( [ 0 , n ] ) , : ] , arr [ : , ( [ 0 , n ] ) ]  t ] )  ravel ( )
random choice ( [ true , false ] )
feature3 = [ d get ( 'feature3 ' ) for d in a ]
[ x for x , _ in lst ]
( abs ( x ) + x ) / 2
mydtype = np dtype ( ( np void , arr dtype itemsize * arr shape [ 1 ] * arr shape [ 2 ] ) )
cgi parse_qsl ( qs )
s sendmail ( 'xyz @ gmail com ' , [ 'xyz @ gmail com ' ] , msg as_string ( ) )
dict1 update ( [ ( key , dict2 [ key ] ) for key in list ( dict2 keys ( ) ) ] )
ax scatter ( x , y , z , zdir='z ' , c='red ' )
df groupby ( [ 'year ' , 'fungicide ' ] )  sum ( )  unstack ( )  plot ( )
pd read_csv ( stringio ( s ) , parse_dates= [ 0 ] , date_parser=parser )
root findall ( 'owl : class ' , my_namespaces )
peers select ( )  where ( ( peers user == 'foo ' ) & peers deleted > > none )
plt legend ( [ arrow ] , [ 'my label ' ] )
__import__ ( 'pkg_resources ' )  declare_namespace ( __name__ )
