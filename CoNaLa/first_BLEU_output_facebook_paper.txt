/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/bin/python /Users/nicolasg-chausseau/ExtractionOfAPIUsagePatterns5/CoNaLa/train_with_word2vec.py











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































GOOD -- no empty entry in SOquestions
boolean
[('start', 0.9945924878120422), ('two-strid', 0.9932505488395691), ('occur', 0.9923938512802124), ('exclud', 0.9922449588775635), ('one', 0.9922224283218384), ('remov', 0.9920413494110107), ('condit', 0.9917714595794678), ('far', 0.991738498210907), ("'int", 0.9917119741439819), ('compar', 0.991629421710968)]
list
[('l', 0.9968430995941162), ('tupl', 0.9876756072044373), ('itself', 0.9846429824829102), ('creat', 0.9832758903503418), ('done', 0.9719357490539551), ('item', 0.9693474769592285), ('testdata', 0.9673119187355042), ('10000', 0.9657598733901978), ('queryresult', 0.9637715816497803), ('element', 0.9601413607597351)]
dictionary
"word 'dictionary' not in vocabulary"
array
[('numpi', 0.9963712692260742), ('np', 0.9890029430389404), ('at', 0.9798977375030518), ('greater', 0.9789766073226929), ('1-dimension', 0.9731402397155762), ('index', 0.9705483317375183), ('largest', 0.9628695249557495), ('done', 0.9606147408485413), ('2d', 0.9588149785995483), ('arr', 0.955909013748169)]
sort
[('order', 0.995245099067688), ('base', 0.9835047721862793), ('ascend', 0.9766809344291687), ('example_list', 0.9754091501235962), ('your_list', 0.9735655188560486), ('descend', 0.9725702404975891), ('divid', 0.9723727703094482), ('arbitrari', 0.9716836214065552), ('lod', 0.9653565883636475), ('mydict', 0.9652302861213684)]
pip
"word 'pip' not in vocabulary"
loop
[('f', 0.9973604679107666), ('love', 0.9966135621070862), ("'monkey", 0.9961439967155457), ('banana', 0.9960811138153076), ('ahead', 0.9958673715591431), ('monkey', 0.9957861304283142), ('00:17', 0.9956309199333191), ('-x', 0.9956229329109192), ('2011', 0.9955490231513977), ("'30", 0.9955086708068848)]
integer
"word 'integer' not in vocabulary"
dirty
"word 'dirty' not in vocabulary"

/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/lib/python3.6/site-packages/sklearn/feature_extraction/text.py:300: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['abov', 'afterward', 'alon', 'alreadi', 'alway', 'ani', 'anoth', 'anyon', 'anyth', 'anywher', 'becam', 'becaus', 'becom', 'befor', 'besid', 'cri', 'describ', 'dure', 'els', 'elsewher', 'empti', 'everi', 'everyon', 'everyth', 'everywher', 'fifti', 'formerli', 'forti', 'ha', 'henc', 'hereaft', 'herebi', 'hi', 'howev', 'hundr', 'inde', 'latterli', 'mani', 'meanwhil', 'moreov', 'mostli', 'nobodi', 'noon', 'noth', 'nowher', 'onc', 'onli', 'otherwis', 'ourselv', 'perhap', 'pleas', 'seriou', 'sever', 'sinc', 'sincer', 'sixti', 'someon', 'someth', 'sometim', 'somewher', 'themselv', 'thenc', 'thereaft', 'therebi', 'therefor', 'thi', 'thu', 'togeth', 'twelv', 'twenti', 'veri', 'wa', 'whatev', 'whenc', 'whenev', 'wherea', 'whereaft', 'wherebi', 'wherev', 'whi', 'yourselv'] not in stop_words.
  'stop_words.' % sorted(inconsistent))




















































































































































































































































































































































































































































































































GOOD -- no empty entry in SOquestions
query is --> send a signal `signal.sigusr1` to the current process
distances and indices:
[[0.42477733 0.44464839 0.46035522 0.46638682 0.4702567 ]]
[[ 726  725 2180 1251 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.kill(os.getpid(), signal.SIGUSR1)
------------------------------------------------------------------------------
query is --> decode a hex string '4a4b4c' to utf-8.
distances and indices:
[[0.2190917  0.2519025  0.26778966 0.2880183  0.29106998]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
bytes.fromhex('4a4b4c').decode('utf-8')
------------------------------------------------------------------------------
query is --> check if all elements in list `mylist` are identical
distances and indices:
[[0.17048989 0.18647262 0.21430959 0.21482308 0.21545753]]
[[1984 1985  757 1170 1492]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
all(x == myList[0] for x in myList)
------------------------------------------------------------------------------
query is --> format number of spaces between strings `python`, `:` and `very good` to be `20`
distances and indices:
[[0.14073516 0.15120526 0.16994607 0.19631259 0.20201924]]
[[ 726 1343 2009   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))
------------------------------------------------------------------------------
query is --> how to convert a string from cp-1251 to utf-8?
distances and indices:
[[0.22827266 0.24900118 0.2839959  0.2932569  0.29345214]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
d.decode('cp1251').encode('utf8')
------------------------------------------------------------------------------
query is --> get rid of none values in dictionary `kwargs`
distances and indices:
[[0.12125657 0.13507642 0.14268301 0.14688726 0.14799635]]
[[ 508 1108  796 1351 1107]]
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the zip output as list from the list ` [ 1 , 2 , 3 ] ` , ` [ 4 , 5 , 6 ] ` , ` [ 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
res = dict((k, v) for k, v in kwargs.items() if v is not None)
------------------------------------------------------------------------------
query is --> capture final output of a chain of system commands `ps -ef | grep something | wc -l`
distances and indices:
[[0.1407449  0.15865046 0.16199903 0.17014027 0.17674264]]
[[ 663 1200   79  690  810]]
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
open imag 'picture.jpg '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
img = Image.open('picture.jpg')
img.show()
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
------------------------------------------------------------------------------
query is --> concatenate a list of strings `['a', 'b', 'c']`
distances and indices:
[[0.28033745 0.29567757 0.29816237 0.29847568 0.30033258]]
[[ 726 2009 1343  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join(['a', 'b', 'c'])
------------------------------------------------------------------------------
query is --> find intersection data between series `s1` and series `s2`
distances and indices:
[[0.26570264 0.27954432 0.31338927 0.32558915 0.33424252]]
[[ 726  725 1107 1343   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.Series(list(set(s1).intersection(set(s2))))
------------------------------------------------------------------------------
query is --> sending http headers to `client`
distances and indices:
[[0.15146127 0.17352371 0.17729686 0.17786211 0.17944635]]
[[ 663   79 1200  540  539]]
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
client.send('HTTP/1.0 200 OK\r\n')
------------------------------------------------------------------------------
query is --> format a datetime string `when` to extract date only
distances and indices:
[[0.23556837 0.25069687 0.2643379  0.26635462 0.2684136 ]]
[[2268 1996 1341 1705  758]]
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
request url ` url ` use http header ` { 'refer ' : my_refer } `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get(url, headers={'referer': my_referer})
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
swap each pair of charact in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])
bleu:7.04
exact:0.00
that BLEU score was for the following reference translation: 
then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
------------------------------------------------------------------------------
query is --> split a multi-line string `inputstring` into separate strings
distances and indices:
[[0.19866088 0.20750172 0.21568412 0.23637894 0.24041976]]
[[1343   79  726  539   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
inputString.split('\n')
------------------------------------------------------------------------------
query is --> split a multi-line string ` a \n b \r\n c ` by new line character `\n`
distances and indices:
[[0.14286545 0.14379613 0.15059896 0.1553899  0.15807894]]
[[  79  663  891  539 1288]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
' a \n b \r\n c '.split('\n')
------------------------------------------------------------------------------
query is --> concatenate elements of list `b` by a colon ":"
distances and indices:
[[0.3204099  0.32473576 0.33884352 0.34563658 0.3489825 ]]
[[  79 1343  726  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""":""".join(str(x) for x in b)
------------------------------------------------------------------------------
query is --> get the first object from a queryset in django model `entry`
distances and indices:
[[0.42423224 0.4250674  0.42865074 0.42950866 0.4301942 ]]
[[ 726 1251 2180 1985  725]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
Entry.objects.filter()[:1].get()
------------------------------------------------------------------------------
query is --> calculate sum over all rows of 2d numpy array
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
a.sum(axis=1)
------------------------------------------------------------------------------
query is --> enable warnings using action 'always'
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
warnings.simplefilter('always')
------------------------------------------------------------------------------
query is --> concatenate items of list `l` with a space ' '
distances and indices:
[[0.15295833 0.15921825 0.18255451 0.19779746 0.20624407]]
[[ 725 1107  726 1108 2180]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(' '.join(map(str, l)))
------------------------------------------------------------------------------
query is --> run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable
distances and indices:
[[0.26916102 0.29125455 0.30150172 0.30396107 0.31141973]]
[[1251 2180  405 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])
------------------------------------------------------------------------------
query is --> how can i parse a time string containing milliseconds in it with python?
distances and indices:
[[0.26509973 0.27029067 0.29196352 0.29399267 0.30452332]]
[[1341 2268 1263 1996  572]]
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')
------------------------------------------------------------------------------
query is --> convert a string `my_string` with dot and comma into a float number `my_float`
distances and indices:
[[0.21115863 0.24870273 0.2632486  0.28424343 0.2874064 ]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
my_float = float(my_string.replace(',', ''))
------------------------------------------------------------------------------
query is --> convert a string `123,456.908` with dot and comma into a floating number
distances and indices:
[[0.22293489 0.24291329 0.2847807  0.2867289  0.28873312]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
float('123,456.908'.replace(',', ''))
------------------------------------------------------------------------------
query is --> set pythonpath in python script.
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sys.path.append('/path/to/whatever')
------------------------------------------------------------------------------
query is --> split string 'words, words, words.' using a regex '(\\w+)'
distances and indices:
[[0.19092187 0.20405965 0.2244266  0.24735759 0.25347346]]
[[ 725  726 1107   53   11]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.split('(\\W+)', 'Words, words, words.')
------------------------------------------------------------------------------
query is --> open a file `output.txt` in append mode
distances and indices:
[[0.15221596 0.16354926 0.1836702  0.18498385 0.18691783]]
[[1343  726   79   11 2009]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
file = open('Output.txt', 'a')
------------------------------------------------------------------------------
query is --> download a file "http://www.example.com/songs/mp3.mp3" over http and save to "mp3.mp3"
distances and indices:
[[0.20695423 0.23652212 0.25332353 0.2639804  0.26845902]]
[[ 726 1343 2009  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
------------------------------------------------------------------------------
query is --> download a file `url` over http and save to `file_name`
distances and indices:
[[0.19369231 0.20378855 0.23615883 0.25738224 0.2591985 ]]
[[ 726 1343   79   11  725]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()
------------------------------------------------------------------------------
query is --> download a file 'http://www.example.com/' over http
distances and indices:
[[0.2353646  0.241442   0.2630247  0.29768842 0.29871622]]
[[1343  726   79  539   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
response = urllib.request.urlopen('http://www.example.com/')
html = response.read()
------------------------------------------------------------------------------
query is --> download a file `url` over http
distances and indices:
[[0.29482707 0.32033035 0.3594221  0.37043962 0.37591916]]
[[ 726 1343 2009   79  725]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
r = requests.get(url)
------------------------------------------------------------------------------
query is --> download a file `url` over http and save to "10mb"
distances and indices:
[[0.20777787 0.22639748 0.2508782  0.2600525  0.2609002 ]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)
------------------------------------------------------------------------------
query is --> argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`
distances and indices:
[[0.08538397 0.1107169  0.13187866 0.13252002 0.1399386 ]]
[[ 726 1343 2009   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
------------------------------------------------------------------------------
query is --> remove key 'c' from dictionary `d`
distances and indices:
[[0.18197617 0.18772922 0.20667207 0.20817351 0.21231169]]
[[ 405 2009  726 1705 2034]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
request url ` url ` use http header ` { 'refer ' : my_refer } `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get(url, headers={'referer': my_referer})
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
{i: d[i] for i in d if i != 'c'}
------------------------------------------------------------------------------
query is --> create new dataframe object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively
distances and indices:
[[0.17259759 0.19194795 0.19907957 0.20961118 0.21735592]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))
------------------------------------------------------------------------------
query is --> split a string `s` by space with `4` splits
distances and indices:
[[0.28527328 0.2971752  0.31028017 0.31207475 0.3183794 ]]
[[1251 2180 1342  405 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
s.split(' ', 4)
------------------------------------------------------------------------------
query is --> read keyboard-input
distances and indices:
[[0.16089757 0.19173963 0.19594973 0.19823347 0.20661323]]
[[  79 1343  663  539 1200]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
input('Enter your input:')
------------------------------------------------------------------------------
query is --> enable debug mode on flask application `app`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
app.run(debug=True)
------------------------------------------------------------------------------
query is --> python save list `mylist` to file object 'save.txt'
distances and indices:
[[0.14419703 0.162435   0.18363482 0.20141557 0.20549579]]
[[ 725 1107  726 1108 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pickle.dump(mylist, open('save.txt', 'wb'))
------------------------------------------------------------------------------
query is --> multiply a matrix `p` with a 3d tensor `t` in scipy
distances and indices:
[[0.15547024 0.16431843 0.17313272 0.1845829  0.19755186]]
[[1985 1251 1342 1984 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)
------------------------------------------------------------------------------
query is --> create 3d array of zeroes of size `(3,3,3)`
distances and indices:
[[0.33800164 0.34934902 0.3702588  0.37037113 0.3795198 ]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
numpy.zeros((3, 3, 3))
------------------------------------------------------------------------------
query is --> cut off the last word of a sentence `content`
distances and indices:
[[0.35020405 0.35363212 0.36186582 0.3823012  0.38379037]]
[[1343   79  726  539   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""" """.join(content.split(' ')[:-1])
------------------------------------------------------------------------------
query is --> convert scalar `x` to array
distances and indices:
[[0.20649664 0.20928492 0.21436729 0.218697   0.2370266 ]]
[[1251 1342 1985 2180 1107]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
x = np.asarray(x).reshape(1, -1)[(0), :]
------------------------------------------------------------------------------
query is --> sum all elements of nested list `l`
distances and indices:
[[0.20987505 0.21959238 0.23181547 0.2447043  0.26863536]]
[[1985 1984 1107  757 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sum(sum(i) if isinstance(i, list) else i for i in L)
------------------------------------------------------------------------------
query is --> convert hex string '470fc614' to a float number
distances and indices:
[[0.17018388 0.1865958  0.20838185 0.2104308  0.21228853]]
[[ 726  725 1343   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
struct.unpack('!f', '470FC614'.decode('hex'))[0]
------------------------------------------------------------------------------
query is --> multiple each value by `2` for all keys in a dictionary `my_dict`
distances and indices:
[[0.21769528 0.22591531 0.23173395 0.23315506 0.23592108]]
[[2180  725 1251 1342  726]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
that BLEU score was for the following reference translation: 
my_dict.update((x, y * 2) for x, y in list(my_dict.items()))
------------------------------------------------------------------------------
query is --> running bash script 'sleep.sh'
distances and indices:
[[0.35873199 0.36058167 0.36602885 0.37537754 0.37626064]]
[[2180 1251  405  726 1342]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call('sleep.sh', shell=True)
------------------------------------------------------------------------------
query is --> join elements of list `l` with a comma `,`
distances and indices:
[[0.49578884 0.51738256 0.5245835  0.52786404 0.5315359 ]]
[[  79 1343  663  539 1200]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""",""".join(l)
------------------------------------------------------------------------------
query is --> make a comma-separated string from a list `mylist`
distances and indices:
[[0.08249424 0.09890106 0.11849601 0.12299988 0.12567197]]
[[1107 1108  757  508  725]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
myList = ','.join(map(str, myList))
------------------------------------------------------------------------------
query is --> reverse the list that contains 1 to 10
distances and indices:
[[0.24523522 0.25886518 0.26148736 0.30447283 0.30875507]]
[[ 725  726 1107 1108  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(reversed(list(range(10))))
------------------------------------------------------------------------------
query is --> remove substring 'bag,' from a string 'lamp, bag, mirror'
distances and indices:
[[0.25396118 0.263436   0.29850122 0.29937991 0.3058009 ]]
[[ 726  725 1107 2180 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('lamp, bag, mirror'.replace('bag,', ''))
------------------------------------------------------------------------------
query is --> reverse the order of words, delimited by `.`, in string `s`
distances and indices:
[[0.31452477 0.32128146 0.32370266 0.3462626  0.34858185]]
[[1343  726   79   11  891]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""".""".join(s.split('.')[::-1])
------------------------------------------------------------------------------
query is --> convert epoch time represented as milliseconds `s` to string using format '%y-%m-%d %h:%m:%s.%f'
distances and indices:
[[0.27259544 0.2733142  0.29962113 0.29972854 0.3100287 ]]
[[1341 2268 1996 1263  572]]
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')
------------------------------------------------------------------------------
query is --> parse milliseconds epoch time '1236472051807' to format '%y-%m-%d %h:%m:%s'
distances and indices:
[[0.22733687 0.23621309 0.2527661  0.27143914 0.2764046 ]]
[[2268 1341 1996  926  572]]
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))
------------------------------------------------------------------------------
query is --> get the date 7 days before the current date
distances and indices:
[[0.3662748 0.3960025 0.423305  0.4320535 0.4427146]]
[[ 726  725 1343 1107   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
(datetime.datetime.now() - datetime.timedelta(days=7)).date()
------------------------------------------------------------------------------
query is --> sum elements at index `column` of each list in list `data`
distances and indices:
[[0.20841289 0.23964526 0.24258317 0.24710964 0.25266784]]
[[2050  898 1904  757  590]]
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(sum(row[column] for row in data))
------------------------------------------------------------------------------
query is --> sum columns of a list `array`
distances and indices:
[[0.18150209 0.19887708 0.22304328 0.22904606 0.24859534]]
[[1985 1984 1251 1342  757]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[sum(row[i] for row in array) for i in range(len(array[0]))]
------------------------------------------------------------------------------
query is --> encode binary string 'your string' to base64 code
distances and indices:
[[0.12891018 0.16108416 0.16465996 0.18476462 0.19168492]]
[[ 726  725 1343   11   79]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
base64.b64encode(bytes('your string', 'utf-8'))
------------------------------------------------------------------------------
query is --> combine list of dictionaries `dicts` with the same keys in each list to a single dictionary
distances and indices:
[[0.08314162 0.08653778 0.09311204 0.10398098 0.10435691]]
[[1170  898 1746 2259 1889]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 123 to 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(round(123, -2))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
gener all permut of list ` [ 1 , 2 , 3 ] ` and list ` [ 4 , 5 , 6 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(list(itertools.product([1, 2, 3], [4, 5, 6])))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
dict((k, [d[k] for d in dicts]) for k in dicts[0])
------------------------------------------------------------------------------
query is --> merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`
distances and indices:
[[0.04448253 0.06152102 0.07634891 0.07662088 0.08064331]]
[[1746  604  858 1361 2020]]
best_sentence_match_to_query: 
round 123 to 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(round(123, -2))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
filter the object in django model 'sampl ' between date rang ` 2011-01-01 ` and ` 2011-01-31 `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
destruct element of list ` [ 1 , 2 , 3 ] ` to variabl ` a ` , ` b ` and ` c `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
a, b, c = [1, 2, 3]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add row ` [ ' 8/19/2014 ' , 'jun ' , 'fli ' , '98765 ' ] ` to datafram ` df `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get all environ variabl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
os.environ
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
{k: [d[k] for d in dicts] for k in dicts[0]}
------------------------------------------------------------------------------
query is --> how do i get the url parameter in a flask view
distances and indices:
[[0.2616354  0.3026631  0.3070858  0.31063536 0.32952926]]
[[1251 1985 1342 2180 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
request.args['myParam']
------------------------------------------------------------------------------
query is --> identify duplicate values in list `mylist`
distances and indices:
[[0.12984885 0.14666717 0.1510917  0.15153503 0.152794  ]]
[[ 508  590  796  898 1108]]
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[k for k, v in list(Counter(mylist).items()) if v > 1]
------------------------------------------------------------------------------
query is --> insert directory 'apps' into directory `__file__`
distances and indices:
[[0.3882533  0.39133602 0.39974687 0.40040538 0.40055612]]
[[1251 2180  726 1985 1342]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))
------------------------------------------------------------------------------
query is --> modify sys.path for python module `subdir`
distances and indices:
[[0.4138095  0.437394   0.4508522  0.45926687 0.46482784]]
[[ 726  725 2180 1251  405]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
------------------------------------------------------------------------------
query is --> insert a 'none' value into a sqlite3 table.
distances and indices:
[[0.2023892  0.21143058 0.23805602 0.25834784 0.26232034]]
[[ 725  726 1107   53   11]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
------------------------------------------------------------------------------
query is --> flatten list `list_of_menuitems`
distances and indices:
[[0.10786071 0.12222207 0.1340192  0.14514525 0.14747913]]
[[1842  796 1022 1590 2168]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
run app ` app ` on host '192.168.0.58 ' and port 9000 in flask
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
app.run(host='192.168.0.58', port=9000, debug=False)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the size of a list ` [ 1,2,3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
len([1, 2, 3])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert string '01/12/2011 ' to an integ timestamp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[image for menuitem in list_of_menuitems for image in menuitem]
------------------------------------------------------------------------------
query is --> append elements of a set `b` to a list `a`
distances and indices:
[[0.31474623 0.33219907 0.33529174 0.34087208 0.36066768]]
[[1251 1985 2180 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
a.extend(b)
------------------------------------------------------------------------------
query is --> append elements of a set to a list in python
distances and indices:
[[0.32992595 0.33318612 0.34394926 0.3458206  0.3580263 ]]
[[1985 1251 2180 1342 1984]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
a.extend(list(b))
------------------------------------------------------------------------------
query is --> write the data of dataframe `df` into text file `np.txt`
distances and indices:
[[0.17339726 0.23850003 0.26916668 0.2757877  0.27943203]]
[[ 405  368 2034 2181 1926]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get current script directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
os.path.dirname(os.path.abspath(__file__))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')
------------------------------------------------------------------------------
query is --> write content of dataframe `df` into text file 'c:\\data\\pandas.txt'
distances and indices:
[[0.25078437 0.3053154  0.30571106 0.31456286 0.33683798]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')
------------------------------------------------------------------------------
query is --> split a string `x` by last occurrence of character `-`
distances and indices:
[[0.17468122 0.19170247 0.21224767 0.22670846 0.22904633]]
[[ 725 1107  726 1342  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(x.rpartition('-')[0])
------------------------------------------------------------------------------
query is --> get the last part of a string before the character '-'
distances and indices:
[[0.1892701  0.18936013 0.19452463 0.20547868 0.20564048]]
[[1342 1107  725 1985 1251]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(x.rsplit('-', 1)[0])
------------------------------------------------------------------------------
query is --> upload file using ftp
distances and indices:
[[0.12400469 0.12911646 0.14238381 0.14996913 0.15326004]]
[[1343  726   11  891 2009]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
ftp.storlines('STOR ' + filename, open(filename, 'r'))
------------------------------------------------------------------------------
query is --> add one to the hidden web element with id 'xyz' with selenium python script
distances and indices:
[[0.2563137  0.281646   0.2944921  0.31160015 0.31258115]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
browser.execute_script("document.getElementById('XYZ').value+='1'")
------------------------------------------------------------------------------
query is --> create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`
distances and indices:
[[0.26215383 0.26844057 0.29447085 0.30553845 0.3254987 ]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.maximum([2, 3, 4], [1, 5, 2])
------------------------------------------------------------------------------
query is --> print a list `l` and move first 3 elements to the end of the list
distances and indices:
[[0.14466976 0.16603968 0.1751358  0.17822467 0.18880107]]
[[1985 1984 1107 1342 1251]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(l[3:] + l[:3])
------------------------------------------------------------------------------
query is --> loop over files in directory '.'
distances and indices:
[[0.16708069 0.16726573 0.17897956 0.1811433  0.18416296]]
[[  79 1343  726  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass
------------------------------------------------------------------------------
query is --> loop over files in directory `source`
distances and indices:
[[0.16162995 0.18865041 0.19857475 0.19986366 0.20155756]]
[[  79  663 1200 1343  358]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass
------------------------------------------------------------------------------
query is --> create a random list of integers
distances and indices:
[[0.17594461 0.18717037 0.21055937 0.23016946 0.23474118]]
[[ 725 1107  726 1108  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[int(1000 * random.random()) for i in range(10000)]
------------------------------------------------------------------------------
query is --> using %f with strftime() in python to get microseconds
distances and indices:
[[0.24101058 0.26100105 0.2652754  0.28409472 0.2844936 ]]
[[2268 1341 1996 1343  758]]
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
swap each pair of charact in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])
bleu:7.04
exact:0.00
that BLEU score was for the following reference translation: 
datetime.datetime.now().strftime('%H:%M:%S.%f')
------------------------------------------------------------------------------
query is --> google app engine execute gql query 'select * from schedule where station = $1' with parameter `foo.key()`
distances and indices:
[[0.28640702 0.3339651  0.3367403  0.3654918  0.36858895]]
[[ 726 1343  725   53 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())
------------------------------------------------------------------------------
query is --> filter rows in pandas starting with alphabet 'f' using regular expression.
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.b.str.contains('^f')
------------------------------------------------------------------------------
query is --> print a 2 dimensional list `tab` as a table with delimiters
distances and indices:
[[0.20459451 0.20505981 0.21388195 0.21587569 0.21980087]]
[[ 540  663  891 1842  796]]
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
------------------------------------------------------------------------------
query is --> pandas: delete rows in dataframe `df` based on multiple columns values
distances and indices:
[[0.35031423 0.3520971  0.3573861  0.3582019  0.35905585]]
[[ 725  726 1985 2180 1251]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()
------------------------------------------------------------------------------
query is --> format the variables `self.goals` and `self.penalties` using string formatting
distances and indices:
[[0.30994275 0.3281418  0.336943   0.36334762 0.368015  ]]
[[1343   79  726 2009  840]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""({:d} goals, ${:d})""".format(self.goals, self.penalties)
------------------------------------------------------------------------------
query is --> format string "({} goals, ${})" with variables `goals` and `penalties`
distances and indices:
[[0.3998767  0.40868208 0.4179498  0.4492864  0.45180577]]
[[1343  726   79 2009   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""({} goals, ${})""".format(self.goals, self.penalties)
------------------------------------------------------------------------------
query is --> format string "({0.goals} goals, ${0.penalties})"
distances and indices:
[[0.42326924 0.43673497 0.4384485  0.47521627 0.47593096]]
[[1343  726   79 2009  539]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""({0.goals} goals, ${0.penalties})""".format(self)
------------------------------------------------------------------------------
query is --> convert list of lists `l` to list of integers
distances and indices:
[[0.08328632 0.08922296 0.11522351 0.14127602 0.15273899]]
[[1107  725 1108  757   53]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[int(''.join(str(d) for d in x)) for x in L]
------------------------------------------------------------------------------
query is --> combine elements of each list in list `l` into digits of a single integer
distances and indices:
[[0.06809773 0.09500679 0.10423947 0.11135142 0.11683322]]
[[1107 1108  757  725 1385]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[''.join(str(d) for d in x) for x in L]
------------------------------------------------------------------------------
query is --> convert a list of lists `l` to list of integers
distances and indices:
[[0.08934013 0.09929953 0.13475744 0.13528563 0.14559545]]
[[1107  725 1108  757 1342]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
L = [int(''.join([str(y) for y in x])) for x in L]
------------------------------------------------------------------------------
query is --> write the elements of list `lines` concatenated by special character '\n' to file `myfile`
distances and indices:
[[0.35717672 0.3908635  0.39593384 0.41638175 0.43196654]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
myfile.write('\n'.join(lines))
------------------------------------------------------------------------------
query is --> removing an element from a list based on a predicate 'x' or 'n'
distances and indices:
[[0.2074569  0.23621145 0.24740107 0.255751   0.25799578]]
[[1251 1492 1342 1985 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]
------------------------------------------------------------------------------
query is --> remove duplicate words from a string `text` using regex
distances and indices:
[[0.2595689  0.28786176 0.29941157 0.31616315 0.32589024]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)
------------------------------------------------------------------------------
query is --> count non zero values in each column in pandas data frame
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.astype(bool).sum(axis=1)
------------------------------------------------------------------------------
query is --> search for string that matches regular expression pattern '(?<!distillr)\\\\acrotray\\.exe' in string 'c:\\somedir\\acrotray.exe'
distances and indices:
[[0.27385005 0.31113556 0.31652924 0.31862456 0.33283076]]
[[ 726  405  725 1343 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
------------------------------------------------------------------------------
query is --> split string 'qh qd jc kd js' into a list on white spaces
distances and indices:
[[0.5634439  0.56924605 0.57934344 0.581415   0.5885693 ]]
[[  79 1803  690 1801  639]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
how to plot with x-axi at the top of the figur ?
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ax.xaxis.set_ticks_position('top')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""QH QD JC KD JS""".split()
------------------------------------------------------------------------------
query is --> search for occurrences of regex pattern '>.*<' in xml string `line`
distances and indices:
[[0.2086844  0.2354493  0.24585336 0.2686786  0.27496976]]
[[ 726  725 1343   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(re.search('>.*<', line).group(0))
------------------------------------------------------------------------------
query is --> erase all the contents of a file `filename`
distances and indices:
[[0.11293688 0.12275808 0.16273579 0.16715327 0.16761868]]
[[1343   79  539  726   80]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
open(filename, 'w').close()
------------------------------------------------------------------------------
query is --> convert a string into datetime using the format '%y-%m-%d %h:%m:%s.%f'
distances and indices:
[[0.2732249  0.28225812 0.2920179  0.30679822 0.30954325]]
[[1341 2268 1263 1996  572]]
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')
------------------------------------------------------------------------------
query is --> find the index of a list with the first element equal to '332' within the list of lists `thelist`
distances and indices:
[[0.2052536  0.21797916 0.23196957 0.23714653 0.2416008 ]]
[[1984 1985 2050 1492  757]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[index for index, item in enumerate(thelist) if item[0] == '332']
------------------------------------------------------------------------------
query is --> lower a string `text` and remove non-alphanumeric characters aside from space
distances and indices:
[[0.29373974 0.30441907 0.33651462 0.3388497  0.3442664 ]]
[[ 726  725 1107 2180 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()
------------------------------------------------------------------------------
query is --> remove all non-alphanumeric characters except space from a string `text` and lower it
distances and indices:
[[0.30235472 0.33019763 0.35363075 0.37399012 0.37435746]]
[[ 726  725 1343 1107   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('(?!\\s)[\\W_]', '', text).lower().strip()
------------------------------------------------------------------------------
query is --> subscript text 'h20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
distances and indices:
[[0.17185575 0.21059574 0.2189868  0.22123277 0.23505037]]
[[ 405 2180 2181  726  725]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
plt.plot(x, y, label='$H_2O$')
------------------------------------------------------------------------------
query is --> loop over a list `mylist` if sublists length equals 3
distances and indices:
[[0.14913335 0.15502988 0.20631342 0.22133136 0.22238436]]
[[1985 1984 1251 1492 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in mylist if len(x) == 3]
------------------------------------------------------------------------------
query is --> initialize a list `lst` of 100 objects object()
distances and indices:
[[0.13639422 0.15132682 0.15663405 0.17366603 0.17569086]]
[[ 725 1107 1108  891  540]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
lst = [Object() for _ in range(100)]
------------------------------------------------------------------------------
query is --> create list `lst` containing 100 instances of object `object`
distances and indices:
[[0.12622873 0.1399518  0.17167583 0.17819105 0.1932152 ]]
[[ 725 1107 1108  726  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
lst = [Object() for i in range(100)]
------------------------------------------------------------------------------
query is --> get the content of child tag with`href` attribute whose parent has css `someclass`
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')
------------------------------------------------------------------------------
query is --> joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'date_time' in both dataframes
distances and indices:
[[0.22152422 0.23012581 0.23281187 0.23732717 0.24465205]]
[[1342 1251 2180 1492 2181]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df1.merge(df2, on='Date_Time')
------------------------------------------------------------------------------
query is --> use `%s` operator to print variable values `str1` inside a string
distances and indices:
[[0.1625291  0.1853423  0.19271064 0.1930589  0.19786239]]
[[1343 2268 1705   79 1996]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
request url ` url ` use http header ` { 'refer ' : my_refer } `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get(url, headers={'referer': my_referer})
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
'first string is: %s, second one is: %s' % (str1, 'geo.tif')
------------------------------------------------------------------------------
query is --> split a string by a delimiter in python
distances and indices:
[[0.24537906 0.28233814 0.28868502 0.31301227 0.31318673]]
[[ 726 1343  725   11 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]
------------------------------------------------------------------------------
query is --> check if directory `directory ` exists and create it if necessary
distances and indices:
[[0.33035845 0.3441988  0.36490604 0.3774831  0.39111426]]
[[ 726 1343   79  725  539]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
if (not os.path.exists(directory)):
    os.makedirs(directory)
------------------------------------------------------------------------------
query is --> check if a directory `path` exists and create it if necessary
distances and indices:
[[0.3032422  0.30615088 0.335928   0.36710876 0.36712068]]
[[ 726 1343   79   11 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
------------------------------------------------------------------------------
query is --> replace a separate word 'h3' by 'h1' in a string 'text'
distances and indices:
[[0.2132765  0.21770486 0.22208546 0.22898243 0.2352676 ]]
[[ 725  726 2180  405 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('\\bH3\\b', 'H1', text)
------------------------------------------------------------------------------
query is --> substitute ascii letters in string 'aas30dsa20' with empty string ''
distances and indices:
[[0.28707668 0.30062893 0.30327561 0.31362513 0.32576805]]
[[ 726  405  725 2180 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('\\D', '', 'aas30dsa20')
------------------------------------------------------------------------------
query is --> get digits only from a string `aas30dsa20` using lambda function
distances and indices:
[[0.34311375 0.3453804  0.34945658 0.36039853 0.36660632]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join([x for x in 'aas30dsa20' if x.isdigit()])
------------------------------------------------------------------------------
query is --> access a tag called "name" in beautifulsoup `soup`
distances and indices:
[[0.1499258  0.17935382 0.18734066 0.20633884 0.20862742]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(soup.find('name').string)
------------------------------------------------------------------------------
query is --> get a dictionary `records` of key-value pairs in pymongo cursor `cursor`
distances and indices:
[[0.1455846  0.1604173  0.16204722 0.1621101  0.16712527]]
[[1842  796  663  540 1590]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the size of a list ` [ 1,2,3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
len([1, 2, 3])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
records = dict((record['_id'], record) for record in cursor)
------------------------------------------------------------------------------
query is --> create new matrix object  by concatenating data from matrix a and matrix b
distances and indices:
[[0.35768968 0.3666141  0.37153462 0.37505364 0.39030588]]
[[1251 2180 1985 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.concatenate((A, B))
------------------------------------------------------------------------------
query is --> concat two matrices `a` and `b` in numpy
distances and indices:
[[0.35768968 0.3666141  0.37153462 0.37505364 0.39030588]]
[[1251 2180 1985 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.vstack((A, B))
------------------------------------------------------------------------------
query is --> get the characters count in a file `filepath`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.stat(filepath).st_size
------------------------------------------------------------------------------
query is --> count the occurrences of item "a" in list `l`
distances and indices:
[[0.36589202 0.37438175 0.38678557 0.4006431  0.40288714]]
[[ 405  726 2180 1251 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l.count('a')
------------------------------------------------------------------------------
query is --> count the occurrences of items in list `l`
distances and indices:
[[0.20724505 0.21200292 0.22322439 0.2271311  0.22772628]]
[[1985 1107 1342  725 1251]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
dict(((x, l.count(x)) for x in set(l)))
------------------------------------------------------------------------------
query is --> count the occurrences of item "b" in list `l`
distances and indices:
[[0.28180218 0.29423535 0.29595342 0.3154057  0.31592363]]
[[1251  405 2180 2181 1342]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l.count('b')
------------------------------------------------------------------------------
query is --> copy file `srcfile` to directory `dstdir`
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
shutil.copy(srcfile, dstdir)
------------------------------------------------------------------------------
query is --> find the key associated with the largest value in dictionary `x` whilst key is non-zero value
distances and indices:
[[0.12895086 0.13536315 0.14416829 0.15535901 0.15639032]]
[[1842  796  508 1590 1946]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the size of a list ` [ 1,2,3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
len([1, 2, 3])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip a list of tupl ` [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] ` into a list of tupl accord to origin tupl index
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[(1, 4), (2, 5), (3, 6)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max(k for k, v in x.items() if v != 0)
------------------------------------------------------------------------------
query is --> get the largest key whose not associated with value of 0 in dictionary `x`
distances and indices:
[[0.14383385 0.14661269 0.15482906 0.15850689 0.16103956]]
[[ 508 1108 1107  796  725]]
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
(k for k, v in x.items() if v != 0)
------------------------------------------------------------------------------
query is --> get the largest key in a dictionary `x` with non-zero value
distances and indices:
[[0.12895086 0.13536315 0.14416829 0.15535901 0.15639032]]
[[1842  796  508 1590 1946]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the size of a list ` [ 1,2,3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
len([1, 2, 3])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip a list of tupl ` [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] ` into a list of tupl accord to origin tupl index
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[(1, 4), (2, 5), (3, 6)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max(k for k, v in x.items() if v != 0)
------------------------------------------------------------------------------
query is --> put the curser at beginning of the file
distances and indices:
[[0.3255311  0.33133113 0.33329907 0.3422397  0.34271744]]
[[1985 1251 1342  725 1107]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
file.seek(0)
------------------------------------------------------------------------------
query is --> combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`
distances and indices:
[[0.2466033  0.2662528  0.27785048 0.28167397 0.28745502]]
[[1251  405 2180 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['c'] = np.where(df['a'].isnull, df['b'], df['a'])
------------------------------------------------------------------------------
query is --> remove key 'ele' from dictionary `d`
distances and indices:
[[0.10330034 0.16590627 0.18035913 0.1916619  0.2050713 ]]
[[ 734 1248 2181 2180 1251]]
best_sentence_match_to_query: 
declar an array ` variabl `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
variable = []
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
disabl abbrevi in argpars
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
parser = argparse.ArgumentParser(allow_abbrev=False)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
del d['ele']
------------------------------------------------------------------------------
query is --> update datetime field in `mymodel` to be the existing `timestamp` plus 100 years
distances and indices:
[[0.3229377  0.33719054 0.37123835 0.39207152 0.39715114]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))
------------------------------------------------------------------------------
query is --> merge list `['it']` and list `['was']` and list `['annoying']` into one list
distances and indices:
[[0.20660429 0.22085471 0.22154938 0.24201898 0.2446032 ]]
[[1251 1342 2180 2181  405]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
['it'] + ['was'] + ['annoying']
------------------------------------------------------------------------------
query is --> increment a value with leading zeroes in a number `x`
distances and indices:
[[0.24037352 0.24962659 0.26158208 0.3012274  0.30242   ]]
[[ 725  726 1107 1342   53]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
str(int(x) + 1).zfill(len(x))
------------------------------------------------------------------------------
query is --> check if a pandas dataframe `df`'s index is sorted
distances and indices:
[[0.20221756 0.21196398 0.23374358 0.23766172 0.23966789]]
[[ 725  726 1107 2180 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
all(df.index[:-1] <= df.index[1:])
------------------------------------------------------------------------------
query is --> convert tuple `t` to list
distances and indices:
[[0.17758356 0.19068602 0.19492424 0.20023654 0.22192705]]
[[1107  725 1108  508  757]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(t)
------------------------------------------------------------------------------
query is --> convert list `t` to tuple
distances and indices:
[[0.30405116 0.30468252 0.34610575 0.35248843 0.3695673 ]]
[[1984 1985  757 1107 1170]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
tuple(l)
------------------------------------------------------------------------------
query is --> convert tuple `level1` to list
distances and indices:
[[0.18605535 0.19763179 0.19807374 0.20897782 0.20904198]]
[[2049  367 1385 2181 2180]]
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a list ` l `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
L.reverse()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
level1 = map(list, level1)
------------------------------------------------------------------------------
query is --> send the output of pprint object `dataobject` to file `logfile`
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pprint.pprint(dataobject, logFile)
------------------------------------------------------------------------------
query is --> get index of rows in column 'boolcol'
distances and indices:
[[0.25359526 0.29342413 0.2935874  0.30991572 0.3101277 ]]
[[1251 1342 1985 1984 1492]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.loc[df['BoolCol']]
------------------------------------------------------------------------------
query is --> create a list containing the indexes of rows where the value of column 'boolcol' in dataframe `df` are equal to true
distances and indices:
[[0.2354636  0.26689953 0.26938137 0.27361608 0.2967275 ]]
[[1251 1342 1985 2180 1984]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.iloc[np.flatnonzero(df['BoolCol'])]
------------------------------------------------------------------------------
query is --> get list of indexes of rows where column 'boolcol' values match true
distances and indices:
[[0.18423869 0.20294034 0.21682766 0.22810379 0.22989544]]
[[1251 1342 1985 1492 1984]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df[df['BoolCol'] == True].index.tolist()
------------------------------------------------------------------------------
query is --> get index of rows in dataframe `df` which column 'boolcol' matches value true
distances and indices:
[[0.22628398 0.25509483 0.26776206 0.2710172  0.28633937]]
[[1251 1342 2180 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df[df['BoolCol']].index.tolist()
------------------------------------------------------------------------------
query is --> change working directory to the directory `owd`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.chdir(owd)
------------------------------------------------------------------------------
query is --> insert data from a string `testfield` to sqlite db `c`
distances and indices:
[[0.20600724 0.21926193 0.2398808  0.25381434 0.26078403]]
[[ 726  725 1343   11  891]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
------------------------------------------------------------------------------
query is --> decode string "\\x89\\n" into a normal string
distances and indices:
[[0.6151883 0.6305416 0.6510563 0.6537067 0.6555421]]
[[  79 1343  358  663  539]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""\\x89\\n""".decode('string_escape')
------------------------------------------------------------------------------
query is --> convert a raw string `raw_string` into a normal string
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
raw_string.decode('string_escape')
------------------------------------------------------------------------------
query is --> convert a raw string `raw_byte_string` into a normal string
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
raw_byte_string.decode('unicode_escape')
------------------------------------------------------------------------------
query is --> split a string `s` with into all strings of repeated characters
distances and indices:
[[0.318492   0.35706356 0.37218124 0.37588578 0.3840284 ]]
[[ 726  725  405 2180 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[m.group(0) for m in re.finditer('(\\d)\\1*', s)]
------------------------------------------------------------------------------
query is --> scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none
distances and indices:
[[0.21918227 0.23831277 0.23959066 0.28007314 0.28007603]]
[[ 725  726 1107 1108 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')
------------------------------------------------------------------------------
query is --> do a scatter plot with empty circles
distances and indices:
[[0.12750687 0.15729252 0.16796485 0.18331596 0.18449618]]
[[ 725 1107  726   53 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')
------------------------------------------------------------------------------
query is --> remove a div with a id `main-content` using beautifulsoup
distances and indices:
[[0.21355677 0.23051298 0.27207476 0.27365822 0.2754681 ]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
soup.find('div', id='main-content').decompose()
------------------------------------------------------------------------------
query is --> filter rows containing key word `ball` in column `ids`
distances and indices:
[[0.21778548 0.2255229  0.23157404 0.24682485 0.24753162]]
[[1251 1492 1342 2050 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df[df['ids'].str.contains('ball')]
------------------------------------------------------------------------------
query is --> convert index at level 0 into a column in dataframe `df`
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.reset_index(level=0, inplace=True)
------------------------------------------------------------------------------
query is --> add indexes in a data frame `df` to a column `index1`
distances and indices:
[[0.1705937  0.19760948 0.19914722 0.20413719 0.2047273 ]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['index1'] = df.index
------------------------------------------------------------------------------
query is --> convert pandas index in a dataframe to columns
distances and indices:
[[0.288771   0.30767182 0.31813163 0.32552287 0.32676014]]
[[1251 2180 1342  405 1985]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.reset_index(level=['tick', 'obs'])
------------------------------------------------------------------------------
query is --> get reverse of list items from list 'b' using extended slicing
distances and indices:
[[0.10473377 0.13191052 0.1438525  0.14971475 0.1540212 ]]
[[1251 1342 1985 1492 1984]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x[::-1] for x in b]
------------------------------------------------------------------------------
query is --> join each element in array `a` with element at the same index in array `b` as a tuple
distances and indices:
[[0.13017069 0.15548596 0.15855952 0.15963773 0.18203725]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.array([zip(x, y) for x, y in zip(a, b)])
------------------------------------------------------------------------------
query is --> zip two 2-d arrays `a` and `b`
distances and indices:
[[0.3835938  0.3933949  0.39748344 0.3999697  0.40722275]]
[[ 726  725 2180 1251 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)
------------------------------------------------------------------------------
query is --> convert list `list_of_ints` into a comma separated string
distances and indices:
[[0.36470744 0.36519203 0.38065565 0.4011931  0.40866843]]
[[1343   79  726  539   80]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""",""".join([str(i) for i in list_of_ints])
------------------------------------------------------------------------------
query is --> send a post request with raw data `data` and basic authentication with `username` and `password`
distances and indices:
[[0.15180796 0.1549818  0.18740286 0.18834275 0.19345738]]
[[ 725  726   11 1343  891]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))
------------------------------------------------------------------------------
query is --> find last occurrence of character '}' in string "abcd}def}"
distances and indices:
[[0.2278728  0.26855248 0.2718214  0.27338102 0.27518559]]
[[ 726 1343  725 2009  405]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
'abcd}def}'.rfind('}')
------------------------------------------------------------------------------
query is --> iterate ove list `[1, 2, 3]` using list comprehension
distances and indices:
[[0.14452052 0.16936497 0.20868468 0.22406258 0.25335282]]
[[1985 1984 1251 1342  757]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print([item for item in [1, 2, 3]])
------------------------------------------------------------------------------
query is --> extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples
distances and indices:
[[0.12773666 0.17339452 0.17579956 0.18446016 0.1859225 ]]
[[1251 2180 1342 2181 1492]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[(x['x'], x['y']) for x in d]
------------------------------------------------------------------------------
query is --> get the filename without the extension from file 'hemanth.txt'
distances and indices:
[[0.31958494 0.31974173 0.33720115 0.3392454  0.3400076 ]]
[[ 725  726 2180 1107 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(os.path.splitext(os.path.basename('hemanth.txt'))[0])
------------------------------------------------------------------------------
query is --> create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it
distances and indices:
[[0.18399103 0.18986388 0.19083428 0.20703873 0.20930243]]
[[1985 1251 1342 2180 1984]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
dict(x[i:i + 2] for i in range(0, len(x), 2))
------------------------------------------------------------------------------
query is --> create a list containing flattened list `[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]`
distances and indices:
[[0.16033572 0.16987468 0.17871644 0.18907347 0.19712402]]
[[1251  405 2180 2181 1342]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
------------------------------------------------------------------------------
query is --> select rows in a dataframe `df` column 'closing_price' between two values 99 and 101
distances and indices:
[[0.1872818  0.20276639 0.2110135  0.21359906 0.21963133]]
[[725 726  53  11 405]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
------------------------------------------------------------------------------
query is --> replace all occurences of newlines `\n` with `<br>` in dataframe `df`
distances and indices:
[[0.15449858 0.17495415 0.19080664 0.19415505 0.19788407]]
[[1343   79 2009  726   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
------------------------------------------------------------------------------
query is --> replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`
distances and indices:
[[0.15449858 0.17495415 0.19080664 0.19415505 0.19788407]]
[[1343   79 2009  726   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
------------------------------------------------------------------------------
query is --> create a list containing each two adjacent letters in string `word` as its elements
distances and indices:
[[0.12861624 0.13411367 0.1366348  0.14380753 0.15529819]]
[[1107 1342  725 2180 1251]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[(x + y) for x, y in zip(word, word[1:])]
------------------------------------------------------------------------------
query is --> get a list of pairs from a string `word` using lambda function
distances and indices:
[[0.05506169 0.06319329 0.07741722 0.07954752 0.08876887]]
[[1107 1108  725 1385  757]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(map(lambda x, y: x + y, word[:-1], word[1:]))
------------------------------------------------------------------------------
query is --> extract a url from a string `mystring`
distances and indices:
[[0.22358003 0.22855188 0.2506139  0.26924494 0.27131164]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))
------------------------------------------------------------------------------
query is --> remove all special characters, punctuation and spaces from a string `mystring` using regex
distances and indices:
[[0.20071566 0.20749368 0.24042337 0.24822247 0.2544483 ]]
[[ 725  726 1107   53   11]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('[^A-Za-z0-9]+', '', mystring)
------------------------------------------------------------------------------
query is --> create a datetimeindex containing 13 periods of the second friday of each month starting from date '2016-01-01'
distances and indices:
[[0.29743442 0.30232084 0.30393007 0.32321802 0.32420182]]
[[1251  405 2180 2181 1342]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)
------------------------------------------------------------------------------
query is --> create multidimensional array `matrix` with 3 rows and 2 columns in python
distances and indices:
[[0.05961932 0.10593509 0.11727597 0.13460188 0.1349009 ]]
[[1251 1342 2180 2181 1985]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
matrix = [[a, b], [c, d], [e, f]]
------------------------------------------------------------------------------
query is --> replace spaces with underscore
distances and indices:
[[0.17824574 0.22548208 0.22901744 0.22911814 0.23165794]]
[[ 405 2180 2181  725 2009]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
mystring.replace(' ', '_')
------------------------------------------------------------------------------
query is --> get an absolute file path of file 'mydir/myfile.txt'
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.path.abspath('mydir/myfile.txt')
------------------------------------------------------------------------------
query is --> split string `my_string` on white spaces
distances and indices:
[[0.5761858  0.58353144 0.6095094  0.61477494 0.62286645]]
[[  79 1343  726  539  663]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""" """.join(my_string.split())
------------------------------------------------------------------------------
query is --> get filename without extension from file `filename`
distances and indices:
[[0.1567744  0.16966562 0.1797598  0.19441321 0.19472033]]
[[1107  725  757 1342 1108]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.path.splitext(filename)[0]
------------------------------------------------------------------------------
query is --> get a list containing the sum of each element `i` in list `l` plus the previous elements
distances and indices:
[[0.11073224 0.12227717 0.14758861 0.14775006 0.15278015]]
[[1985 1984  757 1107 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[sum(l[:i]) for i, _ in enumerate(l)]
------------------------------------------------------------------------------
query is --> split a string `docs/src/scripts/temp` by `/` keeping `/` in the result
distances and indices:
[[0.38068014 0.3840797  0.41489673 0.41765296 0.42349836]]
[[  79 1343  726  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')
------------------------------------------------------------------------------
query is --> shuffle columns of an numpy array 'r'
distances and indices:
[[0.43120003 0.45285696 0.46012977 0.47228938 0.47612017]]
[[ 726  405 2180  725 2181]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.random.shuffle(np.transpose(r))
------------------------------------------------------------------------------
query is --> copy all values in a column 'b' to a new column 'd' in a pandas data frame 'df'
distances and indices:
[[0.2564891  0.27137467 0.28801942 0.29361814 0.2952181 ]]
[[1251  405 2180 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['D'] = df['B']
------------------------------------------------------------------------------
query is --> find a value within nested json 'data' where the key inside another key 'b' is unknown.
distances and indices:
[[0.1546455  0.18927765 0.19997829 0.20373839 0.22116944]]
[[1251 1342 2180 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(data['A']['B'].values())[0]['maindata'][0]['Info']
------------------------------------------------------------------------------
query is --> check characters of string `string` are true predication of function `predicate`
distances and indices:
[[0.13391374 0.1696916  0.17020454 0.1750902  0.19547418]]
[[1107  757 1108  725  508]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
all(predicate(x) for x in string)
------------------------------------------------------------------------------
query is --> determine number of files on a drive with python
distances and indices:
[[0.18139994 0.18831426 0.19529206 0.19565918 0.19571629]]
[[1343  726   79  891   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.statvfs('/').f_files - os.statvfs('/').f_ffree
------------------------------------------------------------------------------
query is --> how to get a single result from a sqlite query in python?
distances and indices:
[[0.28147244 0.28373426 0.3018048  0.31268707 0.3161245 ]]
[[1985 1251 1342 1984 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
cursor.fetchone()[0]
------------------------------------------------------------------------------
query is --> convert string `user_input` into a list of integers `user_list`
distances and indices:
[[0.17788187 0.19700983 0.20290157 0.22323774 0.2266919 ]]
[[ 725 1107  726 1342 2180]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
user_list = [int(number) for number in user_input.split(',')]
------------------------------------------------------------------------------
query is --> get a list of integers by splitting  a string `user` with comma
distances and indices:
[[0.18251859 0.21625927 0.25275713 0.25750875 0.2640051 ]]
[[ 726  725   53 2180 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[int(s) for s in user.split(',')]
------------------------------------------------------------------------------
query is --> sorting a python list by two criteria
distances and indices:
[[0.09721611 0.11510266 0.12124157 0.12180709 0.15978682]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(list, key=lambda x: (x[0], -x[1]))
------------------------------------------------------------------------------
query is --> sort a list of objects `ut`, based on a function `cmpfun` in descending order
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
ut.sort(key=cmpfun, reverse=True)
------------------------------------------------------------------------------
query is --> reverse list `ut` based on the `count` attribute of each object
distances and indices:
[[0.25187907 0.26261452 0.26909748 0.26954186 0.27008265]]
[[2180 1251 1342  405  726]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
that BLEU score was for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
------------------------------------------------------------------------------
query is --> sort a list of objects `ut` in reverse order by their `count` property
distances and indices:
[[0.25187907 0.26261452 0.26909748 0.26954186 0.27008265]]
[[2180 1251 1342  405  726]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
that BLEU score was for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
------------------------------------------------------------------------------
query is --> click a href button 'send' with selenium
distances and indices:
[[0.4247764  0.45551726 0.47799224 0.48578373 0.48619238]]
[[ 726  725 2180  405 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
driver.find_element_by_partial_link_text('Send').click()
------------------------------------------------------------------------------
query is --> click a href button having text `send inmail` with selenium
distances and indices:
[[0.43670806 0.4672883  0.49433774 0.49742758 0.5008401 ]]
[[ 726  725 2180 1343 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
driver.findElement(By.linkText('Send InMail')).click()
------------------------------------------------------------------------------
query is --> click a href button with text 'send inmail' with selenium
distances and indices:
[[0.4247764  0.45551726 0.47799224 0.48578373 0.48619238]]
[[ 726  725 2180  405 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
driver.find_element_by_link_text('Send InMail').click()
------------------------------------------------------------------------------
query is --> cast an int `i` to a string and concat to string 'me'
distances and indices:
[[0.23392342 0.2645243  0.2708632  0.29780364 0.30156082]]
[[ 726  725 1343   11   79]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
'ME' + str(i)
------------------------------------------------------------------------------
query is --> sorting data in dataframe pandas
distances and indices:
[[0.288771   0.30767182 0.31813163 0.32552287 0.32676014]]
[[1251 2180 1342  405 1985]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.sort_values(['System_num', 'Dis'])
------------------------------------------------------------------------------
query is --> prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'
distances and indices:
[[0.16235848 0.1666388  0.18858026 0.20403044 0.20949484]]
[[1343  726   79   11  891]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
open('outfile', 'w').write('#test firstline\n' + open('infile').read())
------------------------------------------------------------------------------
query is --> sort a list `l` by length of value in tuple
distances and indices:
[[0.16037679 0.17302458 0.19675523 0.21288839 0.21702659]]
[[ 725 1107  726 1342  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l.sort(key=lambda t: len(t[1]), reverse=True)
------------------------------------------------------------------------------
query is --> split string `s` by words that ends with 'd'
distances and indices:
[[0.30378255 0.34624875 0.3516098  0.38257936 0.38749   ]]
[[ 726 1343  725   79   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('\\b(\\w+)d\\b', s)
------------------------------------------------------------------------------
query is --> return `true` if string `foobarrrr` contains regex `ba[rzd]`
distances and indices:
[[0.34349778 0.35049105 0.36216894 0.36914062 0.3692535 ]]
[[1251 2180 1342  405 1985]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
bool(re.search('ba[rzd]', 'foobarrrr'))
------------------------------------------------------------------------------
query is --> removing duplicates in list `t`
distances and indices:
[[0.18097721 0.19254448 0.2135389  0.22806433 0.24538356]]
[[ 725 1107  726 1108  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(set(t))
------------------------------------------------------------------------------
query is --> removing duplicates in list `source_list`
distances and indices:
[[0.29822534 0.30247456 0.31416982 0.3446572  0.3484057 ]]
[[ 725  726 1107 1985 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(set(source_list))
------------------------------------------------------------------------------
query is --> removing duplicates in list `abracadabra`
distances and indices:
[[0.367206   0.38060215 0.39969078 0.4035112  0.40722892]]
[[ 726  725 2180 1107 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(OrderedDict.fromkeys('abracadabra'))
------------------------------------------------------------------------------
query is --> convert array `a` into a list
distances and indices:
[[0.3330726 0.341157  0.3665926 0.3954026 0.396676 ]]
[[ 726  725 1107 1343   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
numpy.array(a).reshape(-1).tolist()
------------------------------------------------------------------------------
query is --> convert the first row of numpy matrix `a` to a list
distances and indices:
[[0.3492428  0.3497536  0.35989723 0.36321923 0.37867147]]
[[1251 1985 1342 2180 1984]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
numpy.array(a)[0].tolist()
------------------------------------------------------------------------------
query is --> in `soup`, get the content of the sibling of the `td`  tag with text content `address:`
distances and indices:
[[0.29449835 0.30712542 0.32490888 0.33563042 0.33740446]]
[[ 726  725 2180 1342 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(soup.find(text='Address:').findNext('td').contents[0])
------------------------------------------------------------------------------
query is --> convert elements of each tuple in list `l` into a string  separated by character `@`
distances and indices:
[[0.16748652 0.1826433  0.19241689 0.19893192 0.20324439]]
[[  79  358 1200  663  840]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""" """.join([('%d@%d' % t) for t in l])
------------------------------------------------------------------------------
query is --> convert each tuple in list `l` to a string with '@' separating the tuples' elements
distances and indices:
[[0.11120144 0.11225691 0.11527678 0.11534113 0.11736488]]
[[539  79  80  11 891]]
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""" """.join([('%d@%d' % (t[0], t[1])) for t in l])
------------------------------------------------------------------------------
query is --> get the html from the current web page of a selenium driver
distances and indices:
[[0.20335083 0.23665275 0.24966528 0.26943737 0.27572265]]
[[ 726 1343  725   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
driver.execute_script('return document.documentElement.outerHTML;')
------------------------------------------------------------------------------
query is --> get all matches with regex pattern `\\d+[xx]` in list of string `teststr`
distances and indices:
[[0.2604206  0.29456717 0.31367177 0.3238052  0.32440197]]
[[ 726  725  405 1343 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[i for i in teststr if re.search('\\d+[xX]', i)]
------------------------------------------------------------------------------
query is --> select values from column 'a' for which corresponding values in column 'b' will be greater than 50, and in column 'c' - equal 900 in dataframe `df`
distances and indices:
[[0.17091675 0.1736166  0.17362656 0.17732023 0.18404107]]
[[ 405 2180 1342 1251 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['A'][(df['B'] > 50) & (df['C'] == 900)]
------------------------------------------------------------------------------
query is --> sort dictionary `o` in ascending order based on its keys and items
distances and indices:
[[0.30955818 0.31861857 0.34150884 0.37455788 0.3763554 ]]
[[ 726  725 1107   53 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(o.items())
------------------------------------------------------------------------------
query is --> get sorted list of keys of dict `d`
distances and indices:
[[0.1727053  0.17626362 0.17700212 0.17790599 0.17902035]]
[[ 252 1158 2052  415 1274]]
best_sentence_match_to_query: 
strip a string ` line ` of all carriag return and newlin
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
line.strip()
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get everyth after last slash in a url store in variabl 'url '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
url.rsplit('/', 1)[-1]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
insert variabl ` ( var1 , var2 , var3 ) ` into sql statement 'insert into tabl valu ( ? , ? , ? ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get a list of all field in class ` user ` that are mark ` requir `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[k for k, v in User._fields.items() if v.required]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split a string ` s ` at line break ` \r\n `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(d)
------------------------------------------------------------------------------
query is --> how to sort dictionaries by keys in python
distances and indices:
[[0.30955818 0.31861857 0.34150884 0.37455788 0.3763554 ]]
[[ 726  725 1107   53 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(d.items())
------------------------------------------------------------------------------
query is --> convert string "1" into integer
distances and indices:
[[0.16517317 0.18768127 0.19045833 0.19460367 0.19811662]]
[[ 725 1107  726 2180 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
int('1')
------------------------------------------------------------------------------
query is --> function to convert strings into integers
distances and indices:
[[0.22887008 0.24609472 0.26055306 0.27056158 0.27874777]]
[[ 726  725 1343   79  539]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
int()
------------------------------------------------------------------------------
query is --> convert items in `t1` to integers
distances and indices:
[[0.10500346 0.10733722 0.11197195 0.1168276  0.11751587]]
[[2049 1984 1492 1342 1385]]
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
T2 = [map(int, x) for x in T1]
------------------------------------------------------------------------------
query is --> call a shell script `./test.sh` using subprocess
distances and indices:
[[0.33390155 0.34778464 0.35476783 0.35534096 0.37064326]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call(['./test.sh'])
------------------------------------------------------------------------------
query is --> call a shell script `notepad` using subprocess
distances and indices:
[[0.33390155 0.34778464 0.35476783 0.35534096 0.37064326]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call(['notepad'])
------------------------------------------------------------------------------
query is --> combine lists `l1` and `l2`  by alternating their elements
distances and indices:
[[0.1951151  0.20888782 0.22099784 0.22501172 0.22604944]]
[[1170  898 1889  590  757]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[val for pair in zip(l1, l2) for val in pair]
------------------------------------------------------------------------------
query is --> encode string 'data to be encoded'
distances and indices:
[[0.17472847 0.18329336 0.21534823 0.21692564 0.21919614]]
[[  79 1343  358  840  539]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
encoded = base64.b64encode('data to be encoded')
------------------------------------------------------------------------------
query is --> encode a string `data to be encoded` to `ascii` encoding
distances and indices:
[[0.16274935 0.16935337 0.21460322 0.21514788 0.21781859]]
[[1343   79  539  840   80]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
encoded = 'data to be encoded'.encode('ascii')
------------------------------------------------------------------------------
query is --> parse tab-delimited csv file 'text.txt' into a list
distances and indices:
[[0.15774582 0.17625837 0.18537462 0.22140473 0.22341055]]
[[ 725  726 1107   53 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
------------------------------------------------------------------------------
query is --> get attribute `my_str` of object `my_object`
distances and indices:
[[0.19667721 0.20325437 0.20640557 0.21175171 0.21308064]]
[[1842  796  508  540 1590]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the size of a list ` [ 1,2,3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
len([1, 2, 3])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
getattr(my_object, my_str)
------------------------------------------------------------------------------
query is --> group a list of dicts `ld` into one dict by key
distances and indices:
[[0.23441517 0.23926853 0.24158625 0.24695522 0.25681922]]
[[1985 2180 1251 1342 1107]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))
------------------------------------------------------------------------------
query is --> how do i sum the first value in each tuple in a list of tuples in python?
distances and indices:
[[0.08459887 0.08517044 0.15302496 0.1579369  0.1640654 ]]
[[1984 1985  757 1342 1251]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sum([pair[0] for pair in list_of_pairs])
------------------------------------------------------------------------------
query is --> convert unicode string u"{'code1':1,'code2':1}" into dictionary
distances and indices:
[[0.2604081  0.27718306 0.28744623 0.3142803  0.32508093]]
[[1343  726   79 2009  539]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
d = ast.literal_eval("{'code1':1,'code2':1}")
------------------------------------------------------------------------------
query is --> find all words in a string `mystring` that start with the `$` sign
distances and indices:
[[0.24396625 0.2505254  0.28543538 0.30686408 0.30828553]]
[[ 726  725 1107   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[word for word in mystring.split() if word.startswith('$')]
------------------------------------------------------------------------------
query is --> remove any url within string `text`
distances and indices:
[[0.21991204 0.25190532 0.25553793 0.2790632  0.2848603 ]]
[[ 726 1343  725   11   79]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)
------------------------------------------------------------------------------
query is --> replace all elements in array `a` that are not present in array `[1, 3, 4]` with zeros
distances and indices:
[[0.28554896 0.2876356  0.31104818 0.3195964  0.3203884 ]]
[[1251 1985 1342 2180 1984]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)
------------------------------------------------------------------------------
query is --> calculate mean across dimension in a 2d array `a`
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.mean(a, axis=1)
------------------------------------------------------------------------------
query is --> running r script '/pathto/myrscript.r' from python
distances and indices:
[[0.15697312 0.15747355 0.16767645 0.1724929  0.17465937]]
[[2180 1251 1342  405 2181]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])
------------------------------------------------------------------------------
query is --> run r script '/usr/bin/rscript --vanilla /pathto/myrscript.r'
distances and indices:
[[0.12532787 0.14551006 0.17139488 0.17285621 0.17429486]]
[[ 725  726   53 1107   11]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)
------------------------------------------------------------------------------
query is --> add a header to a csv file
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
writer.writeheader()
------------------------------------------------------------------------------
query is --> replacing nan in the dataframe `df` with row average
distances and indices:
[[0.42477733 0.44464839 0.46035522 0.46638682 0.4702567 ]]
[[ 726  725 2180 1251 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.fillna(df.mean(axis=1), axis=1)
------------------------------------------------------------------------------
query is --> convert unix timestamp '1347517370' to formatted string '%y-%m-%d %h:%m:%s'
distances and indices:
[[0.26876557 0.27904645 0.29108608 0.31482387 0.31553283]]
[[2268 1341 1996  926 1633]]
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a new 2d array with 2 random row from array ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
------------------------------------------------------------------------------
query is --> call a base class's class method `do` from derived class `derived`
distances and indices:
[[0.23761469 0.2379338  0.26918185 0.29429308 0.29438257]]
[[ 726  725 1107   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
super(Derived, cls).do(a)
------------------------------------------------------------------------------
query is --> selecting rows in numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1
distances and indices:
[[0.32486367 0.33433443 0.33597094 0.33627525 0.35561034]]
[[1251 2180 1342 1985  725]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]
------------------------------------------------------------------------------
query is --> separate words delimited by one or more spaces into a list
distances and indices:
[[0.15305124 0.17867741 0.17894109 0.17977074 0.18691815]]
[[  79  663 1343  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.split(' +', 'hello world sample text')
------------------------------------------------------------------------------
query is --> length of longest element in list `words`
distances and indices:
[[0.23092735 0.240495   0.2572209  0.27153674 0.29040956]]
[[ 725 1107  726 1108  757]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(max(words, key=len))
------------------------------------------------------------------------------
query is --> get the value associated with unicode key 'from_user' of first dictionary in list `result`
distances and indices:
[[0.14036068 0.14840779 0.16418996 0.17726862 0.18287176]]
[[1985 1984 1251 1342 1492]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
result[0]['from_user']
------------------------------------------------------------------------------
query is --> retrieve each line from a file 'file.txt' as a list
distances and indices:
[[0.186006   0.18969333 0.19962852 0.20876579 0.21443874]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[line.split() for line in open('File.txt')]
------------------------------------------------------------------------------
query is --> swap keys with values in a dictionary `a`
distances and indices:
[[0.12781945 0.12936136 0.13293003 0.13637172 0.15816563]]
[[1108 1107  508  725 1351]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
get the zip output as list from the list ` [ 1 , 2 , 3 ] ` , ` [ 4 , 5 , 6 ] ` , ` [ 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
res = dict((v, k) for k, v in a.items())
------------------------------------------------------------------------------
query is --> open a file `path/to/file_name.ext` in write mode
distances and indices:
[[0.12484636 0.1544405  0.16350716 0.16958725 0.18355885]]
[[1343  726 2009   79   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
new_file = open('path/to/FILE_NAME.ext', 'w')
------------------------------------------------------------------------------
query is --> how to count distinct values in a column of a pandas group by object?
distances and indices:
[[0.20547476 0.21658342 0.21994942 0.2390674  0.24296936]]
[[1251 1342 2180 2181  405]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()
------------------------------------------------------------------------------
query is --> check if any key in the dictionary `dict1` starts with the string `emp$$`
distances and indices:
[[0.15452579 0.15781401 0.16660412 0.16671069 0.1673238 ]]
[[725 539  79 891  80]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
any(key.startswith('EMP$$') for key in dict1)
------------------------------------------------------------------------------
query is --> create list of values from dictionary `dict1` that have a key that starts with 'emp$$'
distances and indices:
[[0.21562842 0.22898972 0.23437615 0.23575225 0.23662265]]
[[ 725 1107 2180  726 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]
------------------------------------------------------------------------------
query is --> convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`
distances and indices:
[[0.23691466 0.24529232 0.27397266 0.28307524 0.28804156]]
[[ 726  405  725 2009 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.DataFrame({'email': sf.index, 'list': sf.values})
------------------------------------------------------------------------------
query is --> print elements of list `list` seperated by tabs `\t`
distances and indices:
[[0.17035453 0.18060863 0.19065148 0.22519323 0.22700313]]
[[ 725  726 1107   53 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('\t'.join(map(str, list)))
------------------------------------------------------------------------------
query is --> print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8
distances and indices:
[[0.30819136 0.3468191  0.36111742 0.38781998 0.39325032]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
------------------------------------------------------------------------------
query is --> encode a latin character in string `sopet\xc3\xb3n` properly
distances and indices:
[[0.2190917  0.2519025  0.26778966 0.2880183  0.29106998]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
------------------------------------------------------------------------------
query is --> resized image `image` to width, height of `(x, y)` with filter of `antialias`
distances and indices:
[[0.13292038 0.14077984 0.178089   0.19306183 0.19640198]]
[[ 726  725   53 1107   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
image = image.resize((x, y), Image.ANTIALIAS)
------------------------------------------------------------------------------
query is --> regex, find "n"s only in the middle of string `s`
distances and indices:
[[0.22209579 0.25264603 0.2841344  0.29567376 0.30055863]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)
------------------------------------------------------------------------------
query is --> display the float `1/3*100` as a percentage
distances and indices:
[[0.14450486 0.15594606 0.17654862 0.17950231 0.17963524]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('{0:.0f}%'.format(1.0 / 3 * 100))
------------------------------------------------------------------------------
query is --> sort a list of dictionary `mylist` by the key `title`
distances and indices:
[[0.1068081  0.12428988 0.1308334  0.13493359 0.13906075]]
[[1342 2180 1107 1251  757]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
mylist.sort(key=lambda x: x['title'])
------------------------------------------------------------------------------
query is --> sort a list `l` of dicts by dict value 'title'
distances and indices:
[[0.1068081  0.12428988 0.1308334  0.13493359 0.13906075]]
[[1342 2180 1107 1251  757]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l.sort(key=lambda x: x['title'])
------------------------------------------------------------------------------
query is --> sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.
distances and indices:
[[0.09296341 0.11419676 0.13847789 0.1401903  0.15057224]]
[[1251 1342 2180 1985 1492]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))
------------------------------------------------------------------------------
query is --> find 10 largest differences between each respective elements of list `l1` and list `l2`
distances and indices:
[[0.15629691 0.157469   0.16142404 0.16907369 0.19498187]]
[[1107  757 1984 1985 1108]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
------------------------------------------------------------------------------
query is --> beautifulsoup find all 'span' elements in html string `soup` with class of 'stargryb sp'
distances and indices:
[[0.36288217 0.3724053  0.40576097 0.40694618 0.42785615]]
[[ 405  726 1343 2009  725]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
soup.find_all('span', {'class': 'starGryB sp'})
------------------------------------------------------------------------------
query is --> write records in dataframe `df` to table 'test' in schema 'a_schema'
distances and indices:
[[0.12388279 0.14556248 0.15331157 0.15753825 0.16684131]]
[[725 726  53  11 891]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.to_sql('test', engine, schema='a_schema')
------------------------------------------------------------------------------
query is --> extract brackets from string `s`
distances and indices:
[[0.22556902 0.25792068 0.28174907 0.29239935 0.2997531 ]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
brackets = re.sub('[^(){}[\\]]', '', s)
------------------------------------------------------------------------------
query is --> remove duplicate elements from list 'l'
distances and indices:
[[0.14169288 0.16750254 0.17960322 0.1882655  0.21331465]]
[[1985 1984 1251 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(dict((x[0], x) for x in L).values())
------------------------------------------------------------------------------
query is --> read a file `file` without newlines
distances and indices:
[[0.1778058  0.19474313 0.19653745 0.19880903 0.20339596]]
[[  79 1343  539  891  663]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[line.rstrip('\n') for line in file]
------------------------------------------------------------------------------
query is --> get the position of item 1 in `testlist`
distances and indices:
[[0.25785366 0.268765   0.30078304 0.3100465  0.319113  ]]
[[ 726  725 1107 2180   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass
------------------------------------------------------------------------------
query is --> get the position of item `element` in list `testlist`
distances and indices:
[[0.1959505  0.19643962 0.20144516 0.2172071  0.22600435]]
[[1343   79  726  539   80]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
try:
    print(testlist.index(element))
except ValueError:
    pass
------------------------------------------------------------------------------
query is --> find the first element of the tuple with the maximum second element in a list of tuples `lis`
distances and indices:
[[0.14664379 0.1629254  0.16360664 0.19493754 0.19863522]]
[[1984  757 1985  898 1170]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max(lis, key=lambda item: item[1])[0]
------------------------------------------------------------------------------
query is --> get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`
distances and indices:
[[0.15327697 0.15932734 0.1618424  0.1643509  0.19254741]]
[[1985 1984 1107  757 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max(lis, key=itemgetter(1))[0]
------------------------------------------------------------------------------
query is --> make a delay of 1 second
distances and indices:
[[0.4064517  0.41218415 0.42289948 0.423139   0.43106773]]
[[1985 1251 1342 2180  725]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
time.sleep(1)
------------------------------------------------------------------------------
query is --> convert list of tuples `l` to a string
distances and indices:
[[0.29500887 0.30105528 0.317913   0.33153245 0.33584273]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""", """.join('(' + ', '.join(i) + ')' for i in L)
------------------------------------------------------------------------------
query is --> django set default value of field `b` equal to '0000000'
distances and indices:
[[0.24099438 0.24140953 0.24947564 0.26051143 0.2612145 ]]
[[2180 1251  405 2181 1342]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
b = models.CharField(max_length=7, default='0000000', editable=False)
------------------------------------------------------------------------------
query is --> sort lis `list5` in ascending order based on the degrees value of its elements
distances and indices:
[[0.1344233  0.14693452 0.15508062 0.15698186 0.16284783]]
[[1107 1342  725 2180  757]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(list5, lambda x: (degree(x), x))
------------------------------------------------------------------------------
query is --> how do i perform secondary sorting in python?
distances and indices:
[[0.30438226 0.3220931  0.34768617 0.35245746 0.36196703]]
[[ 726  725 2180 1107 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(list5, key=lambda vertex: (degree(vertex), vertex))
------------------------------------------------------------------------------
query is --> convert a list  into a generator object
distances and indices:
[[0.12120298 0.15318069 0.15872633 0.18138975 0.21619366]]
[[1985 1984 1251 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
(n for n in [1, 2, 3, 5])
------------------------------------------------------------------------------
query is --> remove elements from list `oldlist` that have an index number mentioned in list `removelist`
distances and indices:
[[0.10107245 0.11252685 0.1454359  0.15895861 0.16392075]]
[[ 725 1107 1108  757  726]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
that BLEU score was for the following reference translation: 
newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
------------------------------------------------------------------------------
query is --> open a file `yourfile.txt` in write mode
distances and indices:
[[0.08898448 0.11351462 0.13883382 0.1442774  0.15141267]]
[[1343   79 2009  840   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
f = open('yourfile.txt', 'w')
------------------------------------------------------------------------------
query is --> get attribute 'attr' from object `obj`
distances and indices:
[[0.11346867 0.12774272 0.1380373  0.13904789 0.14088458]]
[[1842  796 1022 2168 1946]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
run app ` app ` on host '192.168.0.58 ' and port 9000 in flask
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
app.run(host='192.168.0.58', port=9000, debug=False)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert string '01/12/2011 ' to an integ timestamp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip a list of tupl ` [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] ` into a list of tupl accord to origin tupl index
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[(1, 4), (2, 5), (3, 6)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
getattr(obj, 'attr')
------------------------------------------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple
distances and indices:
[[0.18953396 0.19253643 0.19484563 0.19700772 0.1984195 ]]
[[1342 1107  725 2180 1251]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))
------------------------------------------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line
distances and indices:
[[0.1643975  0.1848417  0.19004557 0.1919408  0.2005285 ]]
[[ 725  726 1107 2180 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))
------------------------------------------------------------------------------
query is --> python pandas: how to replace a characters in a column of a dataframe?
distances and indices:
[[0.18178447 0.18355414 0.18938327 0.18979952 0.1934167 ]]
[[1492 1342 2050 2122 2180]]
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print unicod charact in a string ` \u0420\u043e\u0441\u0441\u0438\u044f `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('\u0420\u043e\u0441\u0441\u0438\u044f')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['range'].replace(',', '-', inplace=True)
------------------------------------------------------------------------------
query is --> unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
distances and indices:
[[0.2685487  0.29070762 0.29959765 0.30444267 0.31304485]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
------------------------------------------------------------------------------
query is --> unzip list `original`
distances and indices:
[[0.23033151 0.24596934 0.2624373  0.2773473  0.29055083]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
result = ([a for (a, b) in original], [b for (a, b) in original])
------------------------------------------------------------------------------
query is --> unzip list `original` and return a generator
distances and indices:
[[0.27446684 0.2870315  0.30460414 0.30654946 0.31058738]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
result = ((a for (a, b) in original), (b for (a, b) in original))
------------------------------------------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`
distances and indices:
[[0.257649   0.27498755 0.28645572 0.29630244 0.29676256]]
[[1251 2180 1342  405 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
------------------------------------------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with none
distances and indices:
[[0.22706339 0.24370249 0.26011026 0.26505756 0.26743284]]
[[1251 2180 1342 2181  405]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
------------------------------------------------------------------------------
query is --> encode `decimal('3.9')` to a json string
distances and indices:
[[0.28940377 0.3141425  0.35283598 0.353292   0.35445386]]
[[ 726  725 2180 1107 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
json.dumps(Decimal('3.9'))
------------------------------------------------------------------------------
query is --> add key "mynewkey" to dictionary `d` with value "mynewvalue"
distances and indices:
[[0.06544426 0.13582999 0.14828484 0.15422809 0.17561944]]
[[ 405 2181 2180  368 2049]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
d['mynewkey'] = 'mynewvalue'
------------------------------------------------------------------------------
query is --> add key 'a' to dictionary `data` with value 1
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
data.update(a=1)
------------------------------------------------------------------------------
query is --> find maximal value in matrix `matrix`
distances and indices:
[[0.1598575  0.17838846 0.18491279 0.18762076 0.2028365 ]]
[[1107  757 1108  508  590]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max([max(i) for i in matrix])
------------------------------------------------------------------------------
query is --> round number `answer` to 2 precision after the decimal point
distances and indices:
[[0.2302791  0.23273121 0.26579234 0.28956848 0.2969047 ]]
[[ 726  725 1107   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
answer = str(round(answer, 2))
------------------------------------------------------------------------------
query is --> extract ip address from an html string
distances and indices:
[[0.22352324 0.26711574 0.26967672 0.2971044  0.2990659 ]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)
------------------------------------------------------------------------------
query is --> filter dataframe `df` by values in column `a` that appear more than once
distances and indices:
[[0.17067333 0.18446404 0.20329395 0.22182967 0.22209337]]
[[ 725  726 1107   53 2180]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.groupby('A').filter(lambda x: len(x) > 1)
------------------------------------------------------------------------------
query is --> append each line in file `myfile` into a list
distances and indices:
[[0.16113171 0.1706164  0.19047913 0.20129924 0.20746782]]
[[ 725 1107 1342  757 2180]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in myfile.splitlines() if x != '']
------------------------------------------------------------------------------
query is --> get a list of integers `lst` from a file `filename.txt`
distances and indices:
[[0.1156969  0.13237286 0.15313904 0.15684967 0.16341035]]
[[ 725  726 1107   53 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
lst = map(int, open('filename.txt').readlines())
------------------------------------------------------------------------------
query is --> add color bar with image `mappable` to plot `plt`
distances and indices:
[[0.40347946 0.41023138 0.41071695 0.41385013 0.42067677]]
[[ 726 2180 1251  725 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
plt.colorbar(mappable=mappable, cax=ax3)
------------------------------------------------------------------------------
query is --> count most frequent 100 words in column 'text' of dataframe `df`
distances and indices:
[[0.19870347 0.21477272 0.22806838 0.25468653 0.260724  ]]
[[ 725  726 1107   53 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
Counter(' '.join(df['text']).split()).most_common(100)
------------------------------------------------------------------------------
query is --> python split a string using regex
distances and indices:
[[0.29094413 0.31405708 0.33588374 0.3415406  0.35827062]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('(.+?):(.+?)\\b ?', text)
------------------------------------------------------------------------------
query is --> generate all 2-element subsets of tuple `(1, 2, 3)`
distances and indices:
[[0.29564613 0.31035507 0.32754755 0.33022544 0.34103763]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(itertools.combinations((1, 2, 3), 2))
------------------------------------------------------------------------------
query is --> get a value of datetime.today() in the utc time zone
distances and indices:
[[0.47899196 0.5205027  0.52330345 0.55741096 0.55961996]]
[[ 726 1343  725   79   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
datetime.now(pytz.utc)
------------------------------------------------------------------------------
query is --> get a new list `list2`by removing empty list from a list of lists `list1`
distances and indices:
[[0.06834629 0.09906936 0.114625   0.12533833 0.12798372]]
[[ 757 1107 1984 1108 2122]]
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print unicod charact in a string ` \u0420\u043e\u0441\u0441\u0438\u044f `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('\u0420\u043e\u0441\u0441\u0438\u044f')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list2 = [x for x in list1 if x != []]
------------------------------------------------------------------------------
query is --> create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`
distances and indices:
[[0.12766454 0.15052214 0.1525328  0.17688793 0.18197551]]
[[1170 2050  898 1904  590]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list2 = [x for x in list1 if x]
------------------------------------------------------------------------------
query is --> django response with json `data`
distances and indices:
[[0.19487454 0.19575055 0.19658066 0.19725852 0.20354111]]
[[2047 1108  889 2122  642]]
best_sentence_match_to_query: 
gener a random number in 1 to 7 with a given distribut [ 0.1 , 0.05 , 0.05 , 0.2 , 0.4 , 0.2 ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print unicod charact in a string ` \u0420\u043e\u0441\u0441\u0438\u044f `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('\u0420\u043e\u0441\u0441\u0438\u044f')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
return HttpResponse(data, mimetype='application/json')
------------------------------------------------------------------------------
query is --> get all text that is not enclosed within square brackets in string `example_str`
distances and indices:
[[0.30482832 0.32542014 0.3598598  0.36115885 0.36981413]]
[[ 726  725 2180 1107 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('(.*?)\\[.*?\\]', example_str)
------------------------------------------------------------------------------
query is --> use a regex to get all text in a string `example_str` that is not surrounded by square brackets
distances and indices:
[[0.2845333  0.31746638 0.34124693 0.3589925  0.3640139 ]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)
------------------------------------------------------------------------------
query is --> get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'
distances and indices:
[[0.29187152 0.32748532 0.3395776  0.36707693 0.37017992]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('\\(.+?\\)|\\w', '(zyx)bc')
------------------------------------------------------------------------------
query is --> match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'
distances and indices:
[[0.2691814  0.2989358  0.31824982 0.34125638 0.3441679 ]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')
------------------------------------------------------------------------------
query is --> match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`
distances and indices:
[[0.31345326 0.3482475  0.3647658  0.38673115 0.39269653]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('\\(.*?\\)|\\w', '(zyx)bc')
------------------------------------------------------------------------------
query is --> formate each string cin list `elements` into pattern '%{0}%'
distances and indices:
[[0.05736006 0.10260298 0.103907   0.11886415 0.121967  ]]
[[ 725   53 1107  726 1108]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
elements = ['%{0}%'.format(element) for element in elements]
------------------------------------------------------------------------------
query is --> open a background process 'background-process' with arguments 'arguments'
distances and indices:
[[0.17571478 0.18091232 0.18174593 0.19223528 0.19258131]]
[[2180  725 1342 2181 1251]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.Popen(['background-process', 'arguments'])
------------------------------------------------------------------------------
query is --> get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'
distances and indices:
[[0.26409584 0.27498862 0.28675404 0.2890897  0.2975319 ]]
[[1984 1985 1492 2050 1170]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[mydict[x] for x in mykeys]
------------------------------------------------------------------------------
query is --> convert list `[('name', 'joe'), ('age', 22)]` into a dictionary
distances and indices:
[[0.08423772 0.08770155 0.11379048 0.12749495 0.13485295]]
[[ 725 1107 1108  757 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
dict([('Name', 'Joe'), ('Age', 22)])
------------------------------------------------------------------------------
query is --> average each two columns of array `data`
distances and indices:
[[0.18606736 0.20594807 0.22613181 0.23071599 0.23822409]]
[[1985 1984 1342 1251 1107]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)
------------------------------------------------------------------------------
query is --> double backslash escape all double quotes in string `s`
distances and indices:
[[0.2678177  0.30619147 0.30739895 0.3375695  0.3417381 ]]
[[ 726 1343  725   11   79]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(s.encode('unicode-escape').replace('"', '\\"'))
------------------------------------------------------------------------------
query is --> split a string into a list of words and whitespace
distances and indices:
[[0.34205878 0.38866046 0.39687213 0.42162663 0.4244579 ]]
[[ 726  725 1343   53  405]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.split('(\\W+)', s)
------------------------------------------------------------------------------
query is --> plotting stacked barplots on a panda data frame
distances and indices:
[[0.35873199 0.36058167 0.36602885 0.37537754 0.37626064]]
[[2180 1251  405  726 1342]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.plot(kind='barh', stacked=True)
------------------------------------------------------------------------------
query is --> reverse the keys and values in a dictionary `mydictionary`
distances and indices:
[[0.28963548 0.29483324 0.29870653 0.31068206 0.3158824 ]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
{i[1]: i[0] for i in list(myDictionary.items())}
------------------------------------------------------------------------------
query is --> finding the index of elements containing substring 'how' and 'what' in a list of strings 'mylist'.
distances and indices:
[[0.22588721 0.2524655  0.2563035  0.26405364 0.28432667]]
[[1985 1984 1251 1342 1107]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
------------------------------------------------------------------------------
query is --> check if object `obj` is a string
distances and indices:
[[0.15740956 0.16640776 0.167198   0.17008561 0.17172928]]
[[ 540 1108  508  725  796]]
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
isinstance(obj, str)
------------------------------------------------------------------------------
query is --> check if object `o` is a string
distances and indices:
[[0.1397777  0.14522797 0.1459373  0.15033177 0.15244076]]
[[725 539 891  11  80]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
isinstance(o, str)
------------------------------------------------------------------------------
query is --> check if `obj_to_test` is a string
distances and indices:
[[0.25969976 0.26277584 0.28450692 0.3081604  0.30856845]]
[[ 725  726 1107 1342 2180]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
isinstance(obj_to_test, str)
------------------------------------------------------------------------------
query is --> append list `list1` to `list2`
distances and indices:
[[0.2276454  0.24696487 0.26366115 0.26416197 0.28562242]]
[[1107  725 1108  757  508]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list2.extend(list1)
------------------------------------------------------------------------------
query is --> append list `mylog` to `list1`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list1.extend(mylog)
------------------------------------------------------------------------------
query is --> append list `a` to `c`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
c.extend(a)
------------------------------------------------------------------------------
query is --> append items in list `mylog` to `list1`
distances and indices:
[[0.3058966  0.3178471  0.35142455 0.3594478  0.36033288]]
[[  79 1343  539  663  726]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
that BLEU score was for the following reference translation: 
for line in mylog:
    list1.append(line)
------------------------------------------------------------------------------
query is --> append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`
distances and indices:
[[0.24814957 0.25332823 0.28038028 0.28132322 0.30392507]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
b.append((a[0][0], a[0][2]))
------------------------------------------------------------------------------
query is --> initialize `secret_key` in flask config with `your_secret_string `
distances and indices:
[[0.19945602 0.22838113 0.23888546 0.24054667 0.25352907]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
app.config['SECRET_KEY'] = 'Your_secret_string'
------------------------------------------------------------------------------
query is --> unpack a series of tuples in pandas into a dataframe with column names 'out-1' and 'out-2'
distances and indices:
[[0.30499935 0.3202641  0.3301368  0.3344363  0.34278995]]
[[1251 2180 1342 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)
------------------------------------------------------------------------------
query is --> find the index of an element 'msft' in a list `stocks_list`
distances and indices:
[[0.18998581 0.19380753 0.21729517 0.22424619 0.23352724]]
[[1251 1985 1342 1984 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']
------------------------------------------------------------------------------
query is --> rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable
distances and indices:
[[0.16782835 0.19520551 0.19566299 0.22670321 0.22699079]]
[[ 725 1107  726 1108   53]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
ax.set_xticklabels(labels, rotation=45)
------------------------------------------------------------------------------
query is --> remove symbols from a string `s`
distances and indices:
[[0.23372024 0.24311945 0.24378343 0.25882477 0.27192092]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('[^\\w]', ' ', s)
------------------------------------------------------------------------------
query is --> get the current directory of a script
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.path.basename(os.path.dirname(os.path.realpath(__file__)))
------------------------------------------------------------------------------
query is --> find octal characters matches from a string `str` using regex
distances and indices:
[[0.24956366 0.28648245 0.287184   0.31492078 0.3198616 ]]
[[ 726  725 1343   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(re.findall("'\\\\[0-7]{1,3}'", str))
------------------------------------------------------------------------------
query is --> split string `input` based on occurrences of regex pattern '[ ](?=[a-z]+\\b)'
distances and indices:
[[0.2675857  0.2765927  0.30625397 0.30877525 0.3142161 ]]
[[ 726  725 2180 1107 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.split('[ ](?=[A-Z]+\\b)', input)
------------------------------------------------------------------------------
query is --> split string `input` at every space followed by an upper-case letter
distances and indices:
[[0.2675857  0.2765927  0.30625397 0.30877525 0.3142161 ]]
[[ 726  725 2180 1107 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.split('[ ](?=[A-Z])', input)
------------------------------------------------------------------------------
query is --> send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`
distances and indices:
[[0.25289375 0.26681355 0.30116475 0.30123836 0.3101592 ]]
[[ 726  405 2180  725 2181]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
r = requests.post(url, files=files, headers=headers, data=data)
------------------------------------------------------------------------------
query is --> write bytes `bytes_` to a file `filename` in python 3
distances and indices:
[[0.15649928 0.16927768 0.17441759 0.17531899 0.18049456]]
[[725 726 891  11 539]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
open('filename', 'wb').write(bytes_)
------------------------------------------------------------------------------
query is --> get a list from a list `lst` with values mapped into a dictionary `dct`
distances and indices:
[[0.15737794 0.20135342 0.20656244 0.21712366 0.2264446 ]]
[[1170 1442 2118  898 1443]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get all object attribut of object ` obj `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print((obj.__dict__))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
django jinja slice list ` mylist ` by ' 3:8 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
{{(mylist | slice): '3:8'}}
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get all object attribut of an object
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dir()
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[dct[k] for k in lst]
------------------------------------------------------------------------------
query is --> find duplicate names in column 'name' of the dataframe `x`
distances and indices:
[[0.1945329  0.22429083 0.24841054 0.2622408  0.26831776]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
x.set_index('name').index.get_duplicates()
------------------------------------------------------------------------------
query is --> truncate float 1.923328437452 to 3 decimal places
distances and indices:
[[0.23473737 0.24286066 0.24728975 0.25132853 0.25473988]]
[[1985 1107 1342  725 1251]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
round(1.923328437452, 3)
------------------------------------------------------------------------------
query is --> sort list `li` in descending order based on the date value in second element of each list in list `li`
distances and indices:
[[0.07897525 0.08323728 0.09149803 0.09294899 0.09647108]]
[[2034  150 1926 1798 1301]]
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac '\u200b ' with '* ' in a string use regular express
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'used\u200b'.replace('\u200b', '*')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get current script directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
os.path.dirname(os.path.abspath(__file__))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac unicod charact '\u2022 ' in string 'str ' with '* '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
str.decode('utf-8').replace('\u2022', '*').encode('utf-8')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a string ` a ` by 2 charact at a time
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)
------------------------------------------------------------------------------
query is --> place the radial ticks in plot `ax` at 135 degrees
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
ax.set_rlabel_position(135)
------------------------------------------------------------------------------
query is --> check if path `my_path` is an absolute path
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.path.isabs(my_path)
------------------------------------------------------------------------------
query is --> get number of keys in dictionary `yourdict`
distances and indices:
[[0.42190954 0.440706   0.46503034 0.47566733 0.48009637]]
[[ 726  725 1107 2180 1985]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(list(yourdict.keys()))
------------------------------------------------------------------------------
query is --> count the number of keys in dictionary `yourdictfile`
distances and indices:
[[0.34082338 0.36827567 0.39372042 0.40609658 0.4158952 ]]
[[ 726  725 1343 1107   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(set(open(yourdictfile).read().split()))
------------------------------------------------------------------------------
query is --> pandas dataframe get first row of each group by 'id'
distances and indices:
[[0.22056021 0.22092663 0.2536923  0.26410487 0.2652147 ]]
[[ 725  726 1107 2180   53]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.groupby('id').first()
------------------------------------------------------------------------------
query is --> split a list in first column  into multiple columns keeping other columns as well in pandas data frame
distances and indices:
[[0.22077873 0.23778118 0.25226426 0.2657641  0.27151468]]
[[1251 1985 1342 1984 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
pd.concat([df[0].apply(pd.Series), df[1]], axis=1)
------------------------------------------------------------------------------
query is --> extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`
distances and indices:
[[0.30542675 0.32851577 0.32882243 0.3502312  0.35183722]]
[[ 726 1343  725   79   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
------------------------------------------------------------------------------
query is --> sum integers contained in strings in list `['', '3.4', '', '', '1.0']`
distances and indices:
[[0.11613449 0.12971658 0.1465458  0.15327112 0.18216228]]
[[1107  725  757 1108 1342]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])
------------------------------------------------------------------------------
query is --> call a subprocess with arguments `c:\\program files\\vmware\\vmware server\\vmware-cmd.bat` that may contain spaces
distances and indices:
[[0.18320993 0.21409449 0.22221223 0.2274788  0.23039089]]
[[ 405  726 2180  725 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
------------------------------------------------------------------------------
query is --> reverse a priority queue `q` in python without using classes
distances and indices:
[[0.2734813  0.27528608 0.297166   0.31726712 0.3233211 ]]
[[ 726  725 1107 2180 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
q.put((-n, n))
------------------------------------------------------------------------------
query is --> make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`
distances and indices:
[[0.26942    0.2909683  0.3077989  0.31297323 0.31820318]]
[[ 405 1251 2180 2181  734]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
declar an array ` variabl `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
variable = []
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
------------------------------------------------------------------------------
query is --> find all matches of regex pattern '([a-fa-f\\d]{32})' in string `data`
distances and indices:
[[0.2693461  0.29042515 0.2979728  0.30442134 0.3054694 ]]
[[ 405 2180  726 1251 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('([a-fA-F\\d]{32})', data)
------------------------------------------------------------------------------
query is --> get the length of list `my_list`
distances and indices:
[[0.24928969 0.26604944 0.27594134 0.27868253 0.28710005]]
[[1107  757  508 1108 1984]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(my_list)
------------------------------------------------------------------------------
query is --> getting the length of array `l`
distances and indices:
[[0.26792073 0.28519428 0.29515582 0.31841478 0.32321656]]
[[1985 1984 1107  757 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(l)
------------------------------------------------------------------------------
query is --> getting the length of array `s`
distances and indices:
[[0.34011662 0.38430256 0.40802225 0.42291576 0.43242377]]
[[ 726 1343  725   79   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(s)
------------------------------------------------------------------------------
query is --> getting the length of `my_tuple`
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(my_tuple)
------------------------------------------------------------------------------
query is --> getting the length of `my_string`
distances and indices:
[[0.25680554 0.26386937 0.26953965 0.27395353 0.2778451 ]]
[[ 725  726   79  539 1343]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
len(my_string)
------------------------------------------------------------------------------
query is --> remove escape character from string "\\a"
distances and indices:
[[0.6151883 0.6305416 0.6510563 0.6537067 0.6555421]]
[[  79 1343  358  663  539]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""\\a""".decode('string_escape')
------------------------------------------------------------------------------
query is --> replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.
distances and indices:
[[0.22217172 0.22373407 0.22741748 0.2571123  0.26565865]]
[[1343  726 2009   11  405]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
------------------------------------------------------------------------------
query is --> remove directory tree '/folder_name'
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
shutil.rmtree('/folder_name')
------------------------------------------------------------------------------
query is --> create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`
distances and indices:
[[0.16667385 0.16883874 0.16936745 0.17874563 0.18091133]]
[[2180  725 1342 2181 1107]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
------------------------------------------------------------------------------
query is --> reverse sort counter `x` by values
distances and indices:
[[0.0983611  0.11242934 0.11926363 0.14027743 0.1649305 ]]
[[1985 1984 1251 1342 1492]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(x, key=x.get, reverse=True)
------------------------------------------------------------------------------
query is --> reverse sort counter `x` by value
distances and indices:
[[0.17496368 0.18533908 0.18637654 0.19103017 0.19198537]]
[[1985 1107 1342 1251 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)
------------------------------------------------------------------------------
query is --> append a numpy array 'b' to a numpy array 'a'
distances and indices:
[[0.35768968 0.3666141  0.37153462 0.37505364 0.39030588]]
[[1251 2180 1985 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.vstack((a, b))
------------------------------------------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the first axis
distances and indices:
[[0.35768968 0.3666141  0.37153462 0.37505364 0.39030588]]
[[1251 2180 1985 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.array((a, b))
------------------------------------------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the second axis
distances and indices:
[[0.23216271 0.247195   0.24738494 0.26185057 0.2631288 ]]
[[ 725  726 1107 2180 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(concatenate((a, b), axis=1))
------------------------------------------------------------------------------
query is --> fetch address information for host 'google.com' ion port 80
distances and indices:
[[0.28765288 0.31492352 0.35274047 0.35488415 0.35931206]]
[[ 726  725 1343 1107   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(socket.getaddrinfo('google.com', 80))
------------------------------------------------------------------------------
query is --> add a column 'day' with value 'sat' to dataframe `df`
distances and indices:
[[0.29743442 0.30232084 0.30393007 0.32321802 0.32420182]]
[[1251  405 2180 2181 1342]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.xs('sat', level='day', drop_level=False)
------------------------------------------------------------------------------
query is --> return a 401 unauthorized in django
distances and indices:
[[0.15936494 0.18332344 0.18948427 0.20434585 0.20525593]]
[[ 725  726 1107 2180   53]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
return HttpResponse('Unauthorized', status=401)
------------------------------------------------------------------------------
query is --> flask set folder 'wherever' as the default template folder
distances and indices:
[[0.15489756 0.15563731 0.19758958 0.20328765 0.20507085]]
[[ 725  726   53   11 1107]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
Flask(__name__, template_folder='wherever')
------------------------------------------------------------------------------
query is --> how do i insert into t1 (select * from t2) in sqlalchemy?
distances and indices:
[[0.2716401  0.31321797 0.31567326 0.34697863 0.34761253]]
[[ 726 1343  725   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
session.execute('INSERT INTO t1 (SELECT * FROM t2)')
------------------------------------------------------------------------------
query is --> sort a list of lists 'c2' such that third row comes first
distances and indices:
[[0.20033088 0.2010763  0.2041531  0.21201544 0.2311322 ]]
[[1985 1251 1342 1984 1492]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
c2.sort(key=lambda row: row[2])
------------------------------------------------------------------------------
query is --> sorting a list of lists in python
distances and indices:
[[0.19837669 0.20223407 0.21859095 0.21958613 0.25359747]]
[[1985 1251 1342 1984 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
c2.sort(key=lambda row: (row[2], row[1]))
------------------------------------------------------------------------------
query is --> set font `arial` to display non-ascii characters in matplotlib
distances and indices:
[[0.28536552 0.33773473 0.361829   0.36328232 0.36768836]]
[[ 405  726 2009 2180 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})
------------------------------------------------------------------------------
query is --> convert  datetime column 'date' of pandas dataframe 'df' to ordinal
distances and indices:
[[0.18696709 0.21448639 0.22117497 0.23061767 0.23380439]]
[[ 405 2180 2181 1342 1251]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df['date'].apply(lambda x: x.toordinal())
------------------------------------------------------------------------------
query is --> get html source of selenium webelement `element`
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
element.get_attribute('innerHTML')
------------------------------------------------------------------------------
query is --> get the integer location of a key `bob` in a pandas data frame
distances and indices:
[[0.53461254 0.5358417  0.5658771  0.5767     0.58153003]]
[[1251 1985 1984 1342 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.index.get_loc('bob')
------------------------------------------------------------------------------
query is --> open a 'gnome' terminal from python script and run  'sudo apt-get update' command.
distances and indices:
[[0.3539874  0.36339495 0.36394447 0.3692806  0.37015712]]
[[  79 1803  690  663 1801]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')
------------------------------------------------------------------------------
query is --> add an item with key 'third_key' and value 1 to an dictionary `my_dict`
distances and indices:
[[0.33765665 0.3605399  0.3846175  0.38677484 0.39388502]]
[[ 726  405 1343  725 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
my_dict.update({'third_key': 1})
------------------------------------------------------------------------------
query is --> declare an array
distances and indices:
[[0.08224496 0.10768871 0.11334779 0.13341364 0.13638395]]
[[ 757 1107 1984 1985 1108]]
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
my_list = []
------------------------------------------------------------------------------
query is --> insert item `12` to a list `my_list`
distances and indices:
[[0.24880098 0.2560927  0.28387412 0.29477146 0.29898226]]
[[ 726  725 1343 1107   79]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
my_list.append(12)
------------------------------------------------------------------------------
query is --> add an entry 'wuggah' at the beginning of list `mylist`
distances and indices:
[[0.24839902 0.26724926 0.26948425 0.27336457 0.29401293]]
[[1251 1342 2180 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
myList.insert(0, 'wuggah')
------------------------------------------------------------------------------
query is --> convert a hex-string representation to actual bytes
distances and indices:
[[0.4760095 0.4884021 0.5152202 0.5199131 0.5210042]]
[[  79 1343  358  539  663]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')
------------------------------------------------------------------------------
query is --> select the last column of dataframe `df`
distances and indices:
[[0.21212505 0.21427092 0.2145189  0.21534808 0.22464176]]
[[1492 1984 1985 1251 1342]]
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df[df.columns[-1]]
------------------------------------------------------------------------------
query is --> get the first value from dataframe `df` where column 'letters' is equal to 'c'
distances and indices:
[[0.25406912 0.29745027 0.30231708 0.3118084  0.31411117]]
[[1251 1342 2180 1985  405]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.loc[df['Letters'] == 'C', 'Letters'].values[0]
------------------------------------------------------------------------------
query is --> converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix
distances and indices:
[[0.2653248  0.26758146 0.2988339  0.29937294 0.31375232]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
np.column_stack(([1, 2, 3], [4, 5, 6]))
------------------------------------------------------------------------------
query is --> get the type of `i`
distances and indices:
[[0.24824864 0.2520825  0.25390697 0.25553873 0.25651407]]
[[ 725  540 1107  539  508]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
type(i)
------------------------------------------------------------------------------
query is --> determine the type of variable `v`
distances and indices:
[[0.16546449 0.1816193  0.18284617 0.1898846  0.19154634]]
[[1842 1960  796 2007 1840]]
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
format float ` 3.5e+20 ` to ` $ 3.5 \\time 10^ { 20 } $ ` and set as titl of matplotlib plot ` ax `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert string ` appl ` from iso-8859-1/latin1 to utf-8
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
apple.decode('iso-8859-1').encode('utf8')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
limit float 13.9499999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
('%.2f' % 13.9499999)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
type(v)
------------------------------------------------------------------------------
query is --> get the type of variable `variable_name`
distances and indices:
[[0.23886324 0.24529257 0.2605749  0.26314452 0.2703092 ]]
[[ 726  725 1343   79  539]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print(type(variable_name))
------------------------------------------------------------------------------
query is --> get the 5th item of a generator
distances and indices:
[[0.29305744 0.29934588 0.30084583 0.3013364  0.30269086]]
[[ 725 1985 1342 1107 1251]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
next(itertools.islice(range(10), 5, 5 + 1))
------------------------------------------------------------------------------
query is --> print a string `word` with string format
distances and indices:
[[0.31780285 0.32098413 0.33331677 0.36605084 0.3698982 ]]
[[1343  726   79  539   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('"{}"'.format(word))
------------------------------------------------------------------------------
query is --> join a list of strings `list` using a space ' '
distances and indices:
[[0.618356   0.63914096 0.6500359  0.65022826 0.6536125 ]]
[[  79 1343 1803  663  358]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""" """.join(list)
------------------------------------------------------------------------------
query is --> create list `y` containing two empty lists
distances and indices:
[[0.14876561 0.15350796 0.15608664 0.1681227  0.16933788]]
[[1342 2180 1251 1985 1107]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
y = [[] for n in range(2)]
------------------------------------------------------------------------------
query is --> read a file 'c:/name/mydocuments/numbers' into a list `data`
distances and indices:
[[0.18550768 0.20159394 0.23281212 0.23468886 0.23776665]]
[[ 405  726  725 2009 2180]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]
------------------------------------------------------------------------------
query is --> delete all occurrences of character 'i' in string 'it is icy'
distances and indices:
[[0.29822215 0.32272416 0.32904902 0.33427808 0.3373995 ]]
[[  79 1343  663  539 1200]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
------------------------------------------------------------------------------
query is --> delete all instances of a character 'i' in a string 'it is icy'
distances and indices:
[[0.27201286 0.29135635 0.29868078 0.30702847 0.31183392]]
[[ 405  726 2180  725 2181]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('i', '', 'it is icy')
------------------------------------------------------------------------------
query is --> delete all characters "i" in string "it is icy"
distances and indices:
[[0.5332449  0.54597193 0.5714227  0.57268226 0.57348835]]
[[  79 1343  358  539  663]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""it is icy""".replace('i', '')
------------------------------------------------------------------------------
query is --> how to delete all instances of a character in a string in python?
distances and indices:
[[0.29822215 0.32272416 0.32904902 0.33427808 0.3373995 ]]
[[  79 1343  663  539 1200]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
------------------------------------------------------------------------------
query is --> drop rows of pandas dataframe `df` having nan in column at index "1"
distances and indices:
[[0.33468306 0.33735022 0.35943338 0.3661481  0.36703065]]
[[1985 1251 1342 2180 1984]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.dropna(subset=[1])
------------------------------------------------------------------------------
query is --> get elements from list `mylist`, that have a field `n` value 30
distances and indices:
[[0.1192114  0.16299418 0.16488135 0.18398616 0.18658382]]
[[1170 2050  898 1746 1904]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
round 123 to 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(round(123, -2))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in myList if x.n == 30]
------------------------------------------------------------------------------
query is --> converting list of strings `intstringlist` to list of integer `nums`
distances and indices:
[[0.06136338 0.07891258 0.08393113 0.10720582 0.1205417 ]]
[[ 725 1108 1107   53 1560]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat sub matrix of a list of list ` [ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ] ` ( without numpi )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[[2, 3, 4], [2, 3, 4], [2, 3, 4]]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
nums = [int(x) for x in intstringlist]
------------------------------------------------------------------------------
query is --> convert list of string numbers into list of integers
distances and indices:
[[0.11156612 0.12112082 0.14539123 0.14688584 0.15021415]]
[[ 726  725  539 1343   80]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
map(int, eval(input('Enter the unfriendly numbers: ')))
------------------------------------------------------------------------------
query is --> print "." without newline
distances and indices:
[[0.31469527 0.32091817 0.32803798 0.33648708 0.33967867]]
[[ 405  726 2180  725 1251]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sys.stdout.write('.')
------------------------------------------------------------------------------
query is --> round off the float that is the product of `2.52 * 100` and convert it to an int
distances and indices:
[[0.2259624  0.23026253 0.24369857 0.24676253 0.2555392 ]]
[[ 726  725 1343   79  539]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
int(round(2.51 * 100))
------------------------------------------------------------------------------
query is --> find all files in directory "/mydir" with extension ".txt"
distances and indices:
[[0.16851717 0.16875117 0.20303828 0.20664886 0.2098215 ]]
[[  79 1343  539  726  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass
------------------------------------------------------------------------------
query is --> plot dataframe `df` without a legend
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.plot(legend=False)
------------------------------------------------------------------------------
query is --> loop through the ip address range "192.168.x.x"
distances and indices:
[[0.18757199 0.19369401 0.19613215 0.20861599 0.20974493]]
[[ 725 2180  726 1342 2181]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
------------------------------------------------------------------------------
query is --> sum the corresponding decimal values for binary values of each boolean element in list `x`
distances and indices:
[[0.13135356 0.13826509 0.14163524 0.1495572  0.1698131 ]]
[[1985 1342 1251 1984 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sum(1 << i for i, b in enumerate(x) if b)
------------------------------------------------------------------------------
query is --> write multiple strings `line1`, `line2` and `line3` in one line in a file `target`
distances and indices:
[[0.27301222 0.27451992 0.29335475 0.29437944 0.3032251 ]]
[[ 726 1343 1705 2009 1755]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
request url ` url ` use http header ` { 'refer ' : my_refer } `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get(url, headers={'referer': my_referer})
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
''.join(reversed(s))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
target.write('%r\n%r\n%r\n' % (line1, line2, line3))
------------------------------------------------------------------------------
query is --> convert list of lists `data` into a flat list
distances and indices:
[[0.10102261 0.12762672 0.1296959  0.14286608 0.1434365 ]]
[[1251 1342 1492 1985 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[y for x in data for y in (x if isinstance(x, list) else [x])]
------------------------------------------------------------------------------
query is --> print new line character as `\n` in a string `foo\nbar`
distances and indices:
[[0.30819136 0.3468191  0.36111742 0.38781998 0.39325032]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('foo\nbar'.encode('string_escape'))
------------------------------------------------------------------------------
query is --> remove last comma character ',' in string `s`
distances and indices:
[[0.38757423 0.3889819  0.39707047 0.4224847  0.42249057]]
[[1343  726   79  725   11]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join(s.rsplit(',', 1))
------------------------------------------------------------------------------
query is --> calculate the mean of each element in array `x` with the element previous to it
distances and indices:
[[0.13594928 0.14680588 0.15436678 0.15693362 0.15873197]]
[[1342 1107 1985  757 1251]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
(x[1:] + x[:-1]) / 2
------------------------------------------------------------------------------
query is --> get an array of the mean of each two consecutive values in numpy array `x`
distances and indices:
[[0.11621914 0.11753387 0.11961495 0.14624125 0.1490498 ]]
[[1107 1342  757 1985 1984]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
x[:-1] + (x[1:] - x[:-1]) / 2
------------------------------------------------------------------------------
query is --> load data containing `utf-8` from file `new.txt` into numpy array `arr`
distances and indices:
[[0.20706724 0.20871039 0.22744003 0.2332329  0.24104309]]
[[ 725  726 2180  405 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')
------------------------------------------------------------------------------
query is --> reverse sort list of dicts `l` by value for key `time`
distances and indices:
[[0.14447474 0.15489602 0.15824644 0.17332162 0.17961252]]
[[1985 1107 1984 1342  757]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l = sorted(l, key=itemgetter('time'), reverse=True)
------------------------------------------------------------------------------
query is --> sort a list of dictionary `l` based on key `time` in descending order
distances and indices:
[[0.08516695 0.1019339  0.10774045 0.10823666 0.1259368 ]]
[[1985 1984 1342 1251 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
l = sorted(l, key=lambda a: a['time'], reverse=True)
------------------------------------------------------------------------------
query is --> get rows of dataframe `df` that match regex '(hel|just)'
distances and indices:
[[0.24286385 0.26678684 0.27171174 0.27224186 0.29596692]]
[[1251 1342 2180 1985 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.loc[df[0].str.contains('(Hel|Just)')]
------------------------------------------------------------------------------
query is --> find the string in `your_string` between two special characters "[" and "]"
distances and indices:
[[0.322575   0.33336604 0.36159882 0.36199766 0.36726177]]
[[ 726  725 2180 1107 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.search('\\[(.*)\\]', your_string).group(1)
------------------------------------------------------------------------------
query is --> how to create a list of date string in 'yyyymmdd' format with python pandas?
distances and indices:
[[0.1645783  0.16593967 0.16675323 0.17148615 0.18040687]]
[[1705 2034  890 1633  368]]
best_sentence_match_to_query: 
request url ` url ` use http header ` { 'refer ' : my_refer } `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get(url, headers={'referer': my_referer})
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print script 's directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.path.dirname(os.path.realpath(__file__)))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a new 2d array with 2 random row from array ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]
------------------------------------------------------------------------------
query is --> count number of times string 'brown' occurred in string 'the big brown fox is brown'
distances and indices:
[[0.6151883 0.6305416 0.6510563 0.6537067 0.6555421]]
[[  79 1343  358  663  539]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""The big brown fox is brown""".count('brown')
------------------------------------------------------------------------------
query is --> decode json string `request.body` to python dict
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
json.loads(request.body)
------------------------------------------------------------------------------
query is --> download the file from url `url` and save it under file `file_name`
distances and indices:
[[0.34296787 0.34825435 0.35889778 0.3596024  0.35981914]]
[[ 79 358 663 690 506]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
urlencod a querystr 'string_of_characters_like_thes : $ # @ = ? % ^q^ $ ' in python 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
urllib.request.urlretrieve(url, file_name)
------------------------------------------------------------------------------
query is --> split string `text` by space
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
text.split()
------------------------------------------------------------------------------
query is --> split string `text` by ","
distances and indices:
[[0.32173288 0.33226597 0.3352939  0.3503941  0.3554711 ]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
text.split(',')
------------------------------------------------------------------------------
query is --> split string `line` into a list by whitespace
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
line.split()
------------------------------------------------------------------------------
query is --> replace dot characters  '.' associated with ascii letters in list `s` with space ' '
distances and indices:
[[0.3502202  0.39521474 0.39789844 0.42929655 0.43215635]]
[[ 726 1343  725   53 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]
------------------------------------------------------------------------------
query is --> sort list `list_of_strings` based on second index of each string `s`
distances and indices:
[[0.21857595 0.22616582 0.23767851 0.23937474 0.25040534]]
[[2180 1251 1342 2181  405]]
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
sorted(list_of_strings, key=lambda s: s.split(',')[1])
------------------------------------------------------------------------------
query is --> call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’
distances and indices:
[[0.19082554 0.1980602  0.24253426 0.24415308 0.25136054]]
[[ 726  725 1107   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
subprocess.check_call('vasp | tee tee_output', shell=True)
------------------------------------------------------------------------------
query is --> eliminate all strings from list `lst`
distances and indices:
[[0.21987435 0.24786322 0.26119658 0.26651806 0.26846513]]
[[1170  898 1984  757 1889]]
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[element for element in lst if isinstance(element, int)]
------------------------------------------------------------------------------
query is --> get all the elements except strings from the list 'lst'.
distances and indices:
[[0.22892828 0.24240705 0.2430785  0.24741974 0.25855356]]
[[1984 1985 1170  757  898]]
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[element for element in lst if not isinstance(element, str)]
------------------------------------------------------------------------------
query is --> sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`
distances and indices:
[[0.07073171 0.07424043 0.07454449 0.07458566 0.0750104 ]]
[[ 796  844  277  750 1022]]
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert list of key-valu tupl ` [ ( ' a ' , 1 ) , ( ' b ' , 2 ) , ( ' c ' , 3 ) ] ` into dictionari
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dict([('A', 1), ('B', 2), ('C', 3)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
convert string ' ( 1,2,3,4 ) ' to a tupl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ast.literal_eval('(1,2,3,4)')
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
run app ` app ` on host '192.168.0.58 ' and port 9000 in flask
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
app.run(host='192.168.0.58', port=9000, debug=False)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
------------------------------------------------------------------------------
query is --> sort a list of dictionaries `l` by values in key `name` in descending order
distances and indices:
[[0.08569092 0.09093181 0.12149891 0.13777147 0.1489726 ]]
[[1107  725 1108  757 1385]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
newlist = sorted(l, key=itemgetter('name'), reverse=True)
------------------------------------------------------------------------------
query is --> how do i sort a list of dictionaries by values of the dictionary in python?
distances and indices:
[[0.19199064 0.19586667 0.23326394 0.24911402 0.25343996]]
[[ 726  725 1107   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list_of_dicts.sort(key=operator.itemgetter('age'))
------------------------------------------------------------------------------
query is --> how to sort a dataframe by the ocurrences in a column in python (pandas)
distances and indices:
[[0.26554903 0.28389418 0.32181856 0.32619792 0.32906416]]
[[ 726  725 1107 2180   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.groupby('prots').sum().sort('scores', ascending=False)
------------------------------------------------------------------------------
query is --> join together with "," elements inside a list indexed with 'category' within a dictionary `trans`
distances and indices:
[[0.43701378 0.43969774 0.45728198 0.4682147  0.47342688]]
[[  79 1343  726  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
""",""".join(trans['category'])
------------------------------------------------------------------------------
query is --> concatenate array of strings `['a', 'b', 'c', 'd']` into a string
distances and indices:
[[0.26269442 0.2847471  0.29719627 0.2998834  0.31002688]]
[[ 405  726  725 2009 2180]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
"""""".join(['A', 'B', 'C', 'D'])
------------------------------------------------------------------------------
query is --> get json data from restful service 'url'
distances and indices:
[[0.23953865 0.26771307 0.2834991  0.30978194 0.3099165 ]]
[[ 726  725 1343   11   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
json.load(urllib.request.urlopen('url'))
------------------------------------------------------------------------------
query is --> remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`
distances and indices:
[[0.13045268 0.16470411 0.16735569 0.17603691 0.18632041]]
[[ 725  726 1107   53   11]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
------------------------------------------------------------------------------
query is --> django filter by hour
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
Entry.objects.filter(pub_date__contains='08:00')
------------------------------------------------------------------------------
query is --> sort a list of dictionary `list` first by key `points` and then by `time`
distances and indices:
[[0.13525875 0.16182601 0.16293858 0.17138325 0.19849129]]
[[1985 1251 1984 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list.sort(key=lambda item: (item['points'], item['time']))
------------------------------------------------------------------------------
query is --> convert datetime object `(1970, 1, 1)` to seconds
distances and indices:
[[0.23062013 0.23814051 0.25411263 0.2622242  0.2624119 ]]
[[ 725 1107  726 1985 1342]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
(t - datetime.datetime(1970, 1, 1)).total_seconds()
------------------------------------------------------------------------------
query is --> insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.
distances and indices:
[[0.31382462 0.33672497 0.35901168 0.361743   0.37417313]]
[[ 726  725  405 2180 1342]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')
------------------------------------------------------------------------------
query is --> reload a module `module`
distances and indices:
[[0.21082643 0.21641327 0.22822565 0.23259401 0.24179563]]
[[ 663   79 1200  539  540]]
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
import imp
imp.reload(module)
------------------------------------------------------------------------------
query is --> convert integer `number` into an unassigned integer
distances and indices:
[[0.14522079 0.1935812  0.19725384 0.19946513 0.20133448]]
[[ 726  405  725   53 1343]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
struct.unpack('H', struct.pack('h', number))
------------------------------------------------------------------------------
query is --> convert int values in list `numlist` to float
distances and indices:
[[0.12765287 0.13061935 0.14680162 0.14720911 0.14767037]]
[[1107 1342 1985  725 2180]]
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
numlist = [float(x) for x in numlist]
------------------------------------------------------------------------------
query is --> write dataframe `df`, excluding index, to a csv file
distances and indices:
[[0.18842058 0.19097103 0.19714594 0.19811632 0.1989433 ]]
[[  79 1343  726  539  891]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
df.to_csv(filename, index=False)
------------------------------------------------------------------------------
query is --> convert a urllib unquoted string `unescaped` to a json data `json_data`
distances and indices:
[[0.28816983 0.2911998  0.29708874 0.30410898 0.30416188]]
[[ 79 663 539 540  80]]
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
json_data = json.loads(unescaped)
------------------------------------------------------------------------------
query is --> create a list containing all ascii characters as its elements
distances and indices:
[[0.37218612 0.37268096 0.37506738 0.3777882  0.37855387]]
[[1985 1251  725 2180 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[chr(i) for i in range(127)]
------------------------------------------------------------------------------
query is --> write `newfilebytes` to a binary file `newfile`
distances and indices:
[[0.39809933 0.41835967 0.4207648  0.42752928 0.43309218]]
[[ 726  725 2180 1251  405]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
newFile.write(struct.pack('5B', *newFileBytes))
------------------------------------------------------------------------------
query is --> python regex - check for a capital letter with a following lowercase in string `string`
distances and indices:
[[0.3023429  0.32235274 0.36076468 0.36210293 0.3700199 ]]
[[ 726  725 1107 1343   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.sub('^[A-Z0-9]*(?![a-z])', '', string)
------------------------------------------------------------------------------
query is --> get the last key of dictionary `dict`
distances and indices:
[[0.24466228 0.2542851  0.26085988 0.26583025 0.26665008]]
[[1985 1107 1342 1251  725]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
that BLEU score was for the following reference translation: 
list(dict.keys())[-1]
------------------------------------------------------------------------------
query is --> write line "hi there" to file `f`
distances and indices:
[[0.20201954 0.22502032 0.26742348 0.2708938  0.2720233 ]]
[[ 726  725   53 1343 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
print('hi there', file=f)
------------------------------------------------------------------------------
query is --> write line "hi there" to file `myfile`
distances and indices:
[[0.12001095 0.14401151 0.14464009 0.17161489 0.1725722 ]]
[[1343   79  726   11  539]]
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
f = open('myfile', 'w')
f.write('hi there\n')
f.close()
------------------------------------------------------------------------------
query is --> write line "hello" to file `somefile.txt`
distances and indices:
[[0.23762597 0.27793714 0.27997383 0.28534576 0.29822636]]
[[ 726  725  405 1343 2009]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
------------------------------------------------------------------------------
query is --> convert unicode string `s` to ascii
distances and indices:
[[0.3981165  0.42886773 0.4357194  0.4375827  0.4506828 ]]
[[ 726  725  405 2180 1251]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
s.encode('iso-8859-15')
------------------------------------------------------------------------------
query is --> django get maximum value associated with field 'added' in model `authorizedemail`
distances and indices:
[[0.3261006  0.33695865 0.33949086 0.33969954 0.3634953 ]]
[[1251 1985 2180 1342 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]
------------------------------------------------------------------------------
query is --> find all numbers and dots from a string `text` using regex
distances and indices:
[[0.24482729 0.268249   0.29874164 0.30949917 0.31515443]]
[[ 726  725 1343   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('Test([0-9.]*[0-9]+)', text)
------------------------------------------------------------------------------
query is --> python regex  to find all numbers and dots from 'text'
distances and indices:
[[0.31974313 0.35392424 0.37341785 0.3925271  0.39941913]]
[[ 726  725 1343   53 1107]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('Test([\\d.]*\\d+)', text)
------------------------------------------------------------------------------
query is --> execute script 'script.ps1' using 'powershell.exe' shell
distances and indices:
[[0.32173288 0.33226597 0.3352939  0.3503941  0.3554711 ]]
[[ 405 2180 1251 2181 1342]]
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
os.system('powershell.exe', 'script.ps1')
------------------------------------------------------------------------------
query is --> sort a list of tuples `b` by third item in the tuple
distances and indices:
[[0.19864017 0.2002876  0.23217042 0.23258056 0.25137332]]
[[1251 1985 1342 1984 2180]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
b.sort(key=lambda x: x[1][2])
------------------------------------------------------------------------------
query is --> get a list of all keys in cassandra database `cf` with pycassa
distances and indices:
[[0.42190954 0.440706   0.46503034 0.47566733 0.48009637]]
[[ 726  725 1107 2180 1985]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
list(cf.get_range().get_keys())
------------------------------------------------------------------------------
query is --> create a datetime with the current date & time
distances and indices:
[[0.46599507 0.49600208 0.5248306  0.5279046  0.5319997 ]]
[[ 726  725 1343 1107 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
datetime.datetime.now()
------------------------------------------------------------------------------
query is --> get the index of an integer `1` from a list `lst` if the list also contains boolean items
distances and indices:
[[0.15555207 0.18250275 0.1867995  0.1997612  0.22328645]]
[[1985 1984 1251 1342 2180]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)
------------------------------------------------------------------------------
query is --> subtract 13 from every number in a list `a`
distances and indices:
[[0.16402799 0.16458012 0.16933718 0.18411861 0.18664196]]
[[1342 2180 1251  725 2181]]
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
a[:] = [(x - 13) for x in a]
------------------------------------------------------------------------------
query is --> choose a random file from the directory contents of the c drive, `c:\\`
distances and indices:
[[0.3402823  0.37586066 0.38693833 0.388003   0.40749258]]
[[ 726  405  725 1343 2180]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
random.choice(os.listdir('C:\\'))
------------------------------------------------------------------------------
query is --> get the highest element in absolute value in a numpy matrix `x`
distances and indices:
[[0.2838204  0.2889765  0.2999764  0.32950738 0.32986334]]
[[ 725  726 1107 2180 1985]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
max(x.min(), x.max(), key=abs)
------------------------------------------------------------------------------
query is --> get all urls within text `s`
distances and indices:
[[0.26511008 0.27087587 0.2943422  0.3172597  0.31761053]]
[[ 726 1343   79  725   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)
------------------------------------------------------------------------------
query is --> match urls whose domain doesn't start with `t` from string `document` using regex
distances and indices:
[[0.16497946 0.16571556 0.20469615 0.20673695 0.21447138]]
[[ 725  726   53   11 1343]]
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
re.findall('http://[^t][^s"]+\\.html', document)
------------------------------------------------------------------------------
query is --> split a string `mystring` considering the spaces ' '
distances and indices:
[[0.26625904 0.29984823 0.30696487 0.3137514  0.32607737]]
[[ 726  725  405 1343   53]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
mystring.replace(' ', '! !').split('!')
------------------------------------------------------------------------------
query is --> open file `path` with mode 'r'
distances and indices:
[[0.11695712 0.15293437 0.15473142 0.16264328 0.1645247 ]]
[[ 726 1343 2009   53   11]]
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
open(path, 'r')
------------------------------------------------------------------------------
query is --> sum elements at the same index in list `data`
distances and indices:
[[0.1741101  0.18935777 0.23768592 0.23935544 0.24623394]]
[[1985 1984  757 1107 1342]]
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
[[sum(item) for item in zip(*items)] for items in zip(*data)]
------------------------------------------------------------------------------
query is --> add a new axis to array `a`
distances and indices:
[[0.33247814 0.33339295 0.34572122 0.3485916  0.35362485]]
[[1251 2180 1342  405 2181]]
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00
that BLEU score was for the following reference translation: 
a[:, (np.newaxis)]
------------------------------------------------------------------------------

Process finished with exit code 0
