/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/bin/python /Users/nicolasg-chausseau/ExtractionOfAPIUsagePatterns5/CoNaLa/train_with_word2vec.py
GOOD -- no empty entry in SOquestions
boolean
[('sub-list', 0.9972020983695984), ('changed_list', 0.9950634837150574), ('ani', 0.9945000410079956), ('list1', 0.9936720728874207), ('original_list', 0.9935040473937988), ('mask', 0.9928765892982483), ('a_list', 0.992401659488678), ('start', 0.9923860430717468), ("'100110", 0.99144446849823), ('uniqu', 0.9911078214645386)]
list
[('l', 0.9968884587287903), ('tupl', 0.984335720539093), ('inner', 0.9701144099235535), ('creat', 0.9669243693351746), ('element', 0.964786946773529), ('centroid', 0.9635379314422607), ('list_of_tupl', 0.9632630944252014), ("'mylist", 0.9609271883964539), ('of', 0.9569957852363586), ('each', 0.9516127705574036)]
dictionary
"word 'dictionary' not in vocabulary"
array
[('numpi', 0.9942611455917358), ('np', 0.9904605746269226), ('at', 0.9805107712745667), ('arr', 0.9786402583122253), ('index', 0.9753857254981995), ('2d', 0.9698780179023743), ('adjac', 0.9661309719085693), ('idx', 0.962700366973877), ("'item", 0.9604811668395996), ('two', 0.9583232998847961)]
sort
[('order', 0.9920617341995239), ('base', 0.9766780734062195), ('descend', 0.9722734093666077), ('your_list', 0.9693171381950378), ('ascend', 0.9687052369117737), ('example_list', 0.968506395816803), ('person', 0.9657431840896606), ('divid', 0.9633020162582397), ("'weight", 0.9625041484832764), ('xs', 0.958767294883728)]
pip
"word 'pip' not in vocabulary"
loop
[('keyword', 0.9968817234039307), ('django', 0.9968180060386658), ('lookup', 0.9959660768508911), ('key1', 0.995890736579895), ('week', 0.9957246780395508), ('socket', 0.9956690073013306), ('dynam', 0.9955357313156128), ('o', 0.9954012632369995), ('fix', 0.9953617453575134), ('switch', 0.9953451156616211)]
integer
"word 'integer' not in vocabulary"
dirty
"word 'dirty' not in vocabulary"
/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/lib/python3.6/site-packages/sklearn/feature_extraction/text.py:300: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['abov', 'afterward', 'alon', 'alreadi', 'alway', 'ani', 'anoth', 'anyon', 'anyth', 'anywher', 'becam', 'becaus', 'becom', 'befor', 'besid', 'cri', 'describ', 'dure', 'els', 'elsewher', 'empti', 'everi', 'everyon', 'everyth', 'everywher', 'fifti', 'formerli', 'forti', 'ha', 'henc', 'hereaft', 'herebi', 'hi', 'howev', 'hundr', 'inde', 'latterli', 'mani', 'meanwhil', 'moreov', 'mostli', 'nobodi', 'noon', 'noth', 'nowher', 'onc', 'onli', 'otherwis', 'ourselv', 'perhap', 'pleas', 'seriou', 'sever', 'sinc', 'sincer', 'sixti', 'someon', 'someth', 'sometim', 'somewher', 'themselv', 'thenc', 'thereaft', 'therebi', 'therefor', 'thi', 'thu', 'togeth', 'twelv', 'twenti', 'veri', 'wa', 'whatev', 'whenc', 'whenev', 'wherea', 'whereaft', 'wherebi', 'wherev', 'whi', 'yourselv'] not in stop_words.
  'stop_words.' % sorted(inconsistent))
GOOD -- no empty entry in SOquestions
------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send a signal `signal.sigusr1` to the current process
the BLEU scores below are for the following reference translation: 
os.kill(os.getpid(), signal.SIGUSR1)
distances and indices:
[[0.3914006  0.41212484 0.41608196 0.42280856 0.43186095]]
[[ 726 2180  725 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode a hex string '4a4b4c' to utf-8.
the BLEU scores below are for the following reference translation: 
bytes.fromhex('4a4b4c').decode('utf-8')
distances and indices:
[[0.20377187 0.21978773 0.24734288 0.26008666 0.2627441 ]]
[[ 726 1343 2009  725   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if all elements in list `mylist` are identical
the BLEU scores below are for the following reference translation: 
all(x == myList[0] for x in myList)
distances and indices:
[[0.14293803 0.16121769 0.16624668 0.18444206 0.20092492]]
[[1984 1985 1170 1492 2050]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format number of spaces between strings `python`, `:` and `very good` to be `20`
the BLEU scores below are for the following reference translation: 
print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))
distances and indices:
[[0.14984885 0.16544144 0.17457882 0.18703179 0.20236431]]
[[1343 2009  726   79 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to convert a string from cp-1251 to utf-8?
the BLEU scores below are for the following reference translation: 
d.decode('cp1251').encode('utf8')
distances and indices:
[[0.15748225 0.16052055 0.16512282 0.16789563 0.16908655]]
[[ 725  726   53 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get rid of none values in dictionary `kwargs`
the BLEU scores below are for the following reference translation: 
res = dict((k, v) for k, v in kwargs.items() if v is not None)
distances and indices:
[[0.09427591 0.09512559 0.09603916 0.1080076  0.10923076]]
[[ 538  540 1842 1946 2007]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener a list of all uniqu pair of integ in ` rang ( 9 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(permutations(list(range(9)), 2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip a list of tupl ` [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] ` into a list of tupl accord to origin tupl index
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[(1, 4), (2, 5), (3, 6)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ` appl ` from iso-8859-1/latin1 to utf-8
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
apple.decode('iso-8859-1').encode('utf8')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> capture final output of a chain of system commands `ps -ef | grep something | wc -l`
the BLEU scores below are for the following reference translation: 
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
distances and indices:
[[0.11654461 0.12728229 0.12830885 0.12924244 0.1310435 ]]
[[1200  506  663  299  690]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
urlencod a querystr 'string_of_characters_like_thes : $ # @ = ? % ^q^ $ ' in python 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
slice ` url ` with ' & ' as delimit to get `` http : //www.domainname.com/pag ? content_item_id=1234 '' from url `` http : //www.domainname.com/pag ? content_item_id=1234 & param2 & param3.+ ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
url.split('&')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate a list of strings `['a', 'b', 'c']`
the BLEU scores below are for the following reference translation: 
"""""".join(['a', 'b', 'c'])
distances and indices:
[[0.2709763  0.2864989  0.28896102 0.29267532 0.30121115]]
[[ 726 2009  725 1343 1288]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find intersection data between series `s1` and series `s2`
the BLEU scores below are for the following reference translation: 
pd.Series(list(set(s1).intersection(set(s2))))
distances and indices:
[[0.22467862 0.24074692 0.25642645 0.26711696 0.28462985]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sending http headers to `client`
the BLEU scores below are for the following reference translation: 
client.send('HTTP/1.0 200 OK\r\n')
distances and indices:
[[0.13759051 0.14511424 0.14522591 0.14556862 0.14977783]]
[[1200  663  358  506   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
urlencod a querystr 'string_of_characters_like_thes : $ # @ = ? % ^q^ $ ' in python 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format a datetime string `when` to extract date only
the BLEU scores below are for the following reference translation: 
then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
distances and indices:
[[0.281845   0.29340017 0.3047004  0.31539512 0.32157704]]
[[1341 2268  926 1996 1986]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a multi-line string `inputstring` into separate strings
the BLEU scores below are for the following reference translation: 
inputString.split('\n')
distances and indices:
[[0.24401169 0.25090256 0.28707263 0.28880143 0.3013251 ]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a multi-line string ` a \n b \r\n c ` by new line character `\n`
the BLEU scores below are for the following reference translation: 
' a \n b \r\n c '.split('\n')
distances and indices:
[[0.1175009  0.11904202 0.12300109 0.12316187 0.12383683]]
[[ 891   11 1288  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate elements of list `b` by a colon ":"
the BLEU scores below are for the following reference translation: 
""":""".join(str(x) for x in b)
distances and indices:
[[0.32567737 0.32668945 0.33741453 0.3379834  0.34901002]]
[[  79 1343  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the first object from a queryset in django model `entry`
the BLEU scores below are for the following reference translation: 
Entry.objects.filter()[:1].get()
distances and indices:
[[0.37348887 0.3811219  0.39082712 0.39100233 0.3929547 ]]
[[2180 1251 1342  726 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate sum over all rows of 2d numpy array
the BLEU scores below are for the following reference translation: 
a.sum(axis=1)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> enable warnings using action 'always'
the BLEU scores below are for the following reference translation: 
warnings.simplefilter('always')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate items of list `l` with a space ' '
the BLEU scores below are for the following reference translation: 
print(' '.join(map(str, l)))
distances and indices:
[[0.13152203 0.13221765 0.15803066 0.1701133  0.18878765]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable
the BLEU scores below are for the following reference translation: 
subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])
distances and indices:
[[0.249724   0.25806645 0.27206084 0.27768546 0.28049645]]
[[1251 2180  405 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how can i parse a time string containing milliseconds in it with python?
the BLEU scores below are for the following reference translation: 
time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')
distances and indices:
[[0.3249064  0.3475105  0.3623797  0.36278212 0.36664736]]
[[1341 1263 2268  572  926]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string `my_string` with dot and comma into a float number `my_float`
the BLEU scores below are for the following reference translation: 
my_float = float(my_string.replace(',', ''))
distances and indices:
[[0.20340328 0.23227732 0.25146744 0.26244777 0.27079982]]
[[ 726 1343  725 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string `123,456.908` with dot and comma into a floating number
the BLEU scores below are for the following reference translation: 
float('123,456.908'.replace(',', ''))
distances and indices:
[[0.19921815 0.22512731 0.2472513  0.25016636 0.2564088 ]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> set pythonpath in python script.
the BLEU scores below are for the following reference translation: 
sys.path.append('/path/to/whatever')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string 'words, words, words.' using a regex '(\\w+)'
the BLEU scores below are for the following reference translation: 
re.split('(\\W+)', 'Words, words, words.')
distances and indices:
[[0.13125187 0.14576647 0.1705439  0.18027765 0.18209797]]
[[ 726  725 1343   53  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `output.txt` in append mode
the BLEU scores below are for the following reference translation: 
file = open('Output.txt', 'a')
distances and indices:
[[0.14155841 0.16838661 0.17270857 0.18117999 0.2034024 ]]
[[1343   79 2009  726  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file "http://www.example.com/songs/mp3.mp3" over http and save to "mp3.mp3"
the BLEU scores below are for the following reference translation: 
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
distances and indices:
[[0.20425394 0.20556714 0.21991786 0.24854188 0.2545352 ]]
[[ 726 1343 2009   79  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http and save to `file_name`
the BLEU scores below are for the following reference translation: 
u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()
distances and indices:
[[0.1828139  0.20535043 0.20888667 0.2449474  0.25809774]]
[[1343  726   79 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file 'http://www.example.com/' over http
the BLEU scores below are for the following reference translation: 
response = urllib.request.urlopen('http://www.example.com/')
html = response.read()
distances and indices:
[[0.23817267 0.253858   0.2742373  0.30189073 0.31191647]]
[[1343   79  726 2009  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http
the BLEU scores below are for the following reference translation: 
r = requests.get(url)
distances and indices:
[[0.28642774 0.28957117 0.32219848 0.3246537  0.36066735]]
[[1343  726   79 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http and save to "10mb"
the BLEU scores below are for the following reference translation: 
response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)
distances and indices:
[[0.18603452 0.1944998  0.2188226  0.23756124 0.25432518]]
[[1343  726   79 2009  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`
the BLEU scores below are for the following reference translation: 
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
distances and indices:
[[0.09845438 0.10379796 0.10646015 0.1443955  0.14473051]]
[[2009 1343  726  641   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] *\\z ' on string ' a\n '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove key 'c' from dictionary `d`
the BLEU scores below are for the following reference translation: 
{i: d[i] for i in d if i != 'c'}
distances and indices:
[[0.2107355  0.21113168 0.23220122 0.23693392 0.23789509]]
[[2009  405 2034 2011 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format paramet ' b ' and ' a ' into plcaehold in string `` { 0 } \\w { { 2 } } b { 1 } \\w { { 2 } } quarter ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{0}\\w{{2}}b{1}\\w{{2}}quarter""".format('b', 'a')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create new dataframe object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively
the BLEU scores below are for the following reference translation: 
pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))
distances and indices:
[[0.14805675 0.15030499 0.16998956 0.17588702 0.19533676]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `s` by space with `4` splits
the BLEU scores below are for the following reference translation: 
s.split(' ', 4)
distances and indices:
[[0.24007031 0.24981289 0.2505568  0.26300552 0.26470068]]
[[2180  405 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read keyboard-input
the BLEU scores below are for the following reference translation: 
input('Enter your input:')
distances and indices:
[[0.14717327 0.15303625 0.16268946 0.16726306 0.17336804]]
[[  79 1200  663  358  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> enable debug mode on flask application `app`
the BLEU scores below are for the following reference translation: 
app.run(debug=True)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python save list `mylist` to file object 'save.txt'
the BLEU scores below are for the following reference translation: 
pickle.dump(mylist, open('save.txt', 'wb'))
distances and indices:
[[0.11722615 0.1196588  0.13891366 0.1591029  0.16740803]]
[[ 725  726 1107   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> multiply a matrix `p` with a 3d tensor `t` in scipy
the BLEU scores below are for the following reference translation: 
scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)
distances and indices:
[[0.13720833 0.14351876 0.15919766 0.16499102 0.16878153]]
[[1251 1985 1342 2180 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create 3d array of zeroes of size `(3,3,3)`
the BLEU scores below are for the following reference translation: 
numpy.zeros((3, 3, 3))
distances and indices:
[[0.3059873  0.3129839  0.33060732 0.33437464 0.33902755]]
[[1985 1251 2180 1984 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> cut off the last word of a sentence `content`
the BLEU scores below are for the following reference translation: 
""" """.join(content.split(' ')[:-1])
distances and indices:
[[0.33998    0.34621266 0.35330927 0.3710527  0.37979525]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert scalar `x` to array
the BLEU scores below are for the following reference translation: 
x = np.asarray(x).reshape(1, -1)[(0), :]
distances and indices:
[[0.17518106 0.18228462 0.18681784 0.19973001 0.2145935 ]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum all elements of nested list `l`
the BLEU scores below are for the following reference translation: 
sum(sum(i) if isinstance(i, list) else i for i in L)
distances and indices:
[[0.19472843 0.19812624 0.19892862 0.21903129 0.24077131]]
[[1107 1985 1984  757 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert hex string '470fc614' to a float number
the BLEU scores below are for the following reference translation: 
struct.unpack('!f', '470FC614'.decode('hex'))[0]
distances and indices:
[[0.15255918 0.17040369 0.17539443 0.19963866 0.1996715 ]]
[[ 726 1343 2009  725   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> multiple each value by `2` for all keys in a dictionary `my_dict`
the BLEU scores below are for the following reference translation: 
my_dict.update((x, y * 2) for x, y in list(my_dict.items()))
distances and indices:
[[0.17509155 0.19654973 0.20343375 0.20876694 0.21028091]]
[[2180 2181 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> running bash script 'sleep.sh'
the BLEU scores below are for the following reference translation: 
subprocess.call('sleep.sh', shell=True)
distances and indices:
[[0.31694624 0.31803447 0.3359077  0.33938602 0.34381536]]
[[2180  405 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join elements of list `l` with a comma `,`
the BLEU scores below are for the following reference translation: 
""",""".join(l)
distances and indices:
[[0.530894   0.5443074  0.5485155  0.5559915  0.55686057]]
[[  79 1343  539 1200  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a comma-separated string from a list `mylist`
the BLEU scores below are for the following reference translation: 
myList = ','.join(map(str, myList))
distances and indices:
[[0.09475802 0.09621123 0.10286204 0.10437004 0.12322162]]
[[1107  725 1108  508  277]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the list that contains 1 to 10
the BLEU scores below are for the following reference translation: 
list(reversed(list(range(10))))
distances and indices:
[[0.2016235  0.20542021 0.20911354 0.24646246 0.25333986]]
[[ 725  726 1107 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove substring 'bag,' from a string 'lamp, bag, mirror'
the BLEU scores below are for the following reference translation: 
print('lamp, bag, mirror'.replace('bag,', ''))
distances and indices:
[[0.24454008 0.2589195  0.27164668 0.276038   0.28860468]]
[[ 726  725 1107 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the order of words, delimited by `.`, in string `s`
the BLEU scores below are for the following reference translation: 
""".""".join(s.split('.')[::-1])
distances and indices:
[[0.29676527 0.30569935 0.3102959  0.3301139  0.33756492]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert epoch time represented as milliseconds `s` to string using format '%y-%m-%d %h:%m:%s.%f'
the BLEU scores below are for the following reference translation: 
datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')
distances and indices:
[[0.32799083 0.35161623 0.3634228  0.3637145  0.36461386]]
[[1341 1263 2268  926  572]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> parse milliseconds epoch time '1236472051807' to format '%y-%m-%d %h:%m:%s'
the BLEU scores below are for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))
distances and indices:
[[0.27410644 0.30451822 0.3052578  0.30654538 0.31223285]]
[[1341 2268 1263  926  572]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the date 7 days before the current date
the BLEU scores below are for the following reference translation: 
(datetime.datetime.now() - datetime.timedelta(days=7)).date()
distances and indices:
[[0.34447664 0.37886038 0.382815   0.4015504  0.41327563]]
[[ 726 1343  725 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum elements at index `column` of each list in list `data`
the BLEU scores below are for the following reference translation: 
print(sum(row[column] for row in data))
distances and indices:
[[0.16212225 0.16985013 0.1736432  0.17857447 0.18287681]]
[[2050  898 1904 1170 1902]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '01010101111 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('01010101111', 2)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum columns of a list `array`
the BLEU scores below are for the following reference translation: 
[sum(row[i] for row in array) for i in range(len(array[0]))]
distances and indices:
[[0.12264926 0.13522746 0.16911034 0.19442855 0.1965652 ]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode binary string 'your string' to base64 code
the BLEU scores below are for the following reference translation: 
base64.b64encode(bytes('your string', 'utf-8'))
distances and indices:
[[0.10437576 0.10918874 0.14432201 0.15845291 0.16086534]]
[[ 726 1343   79  891   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine list of dictionaries `dicts` with the same keys in each list to a single dictionary
the BLEU scores below are for the following reference translation: 
dict((k, [d[k] for d in dicts]) for k in dicts[0])
distances and indices:
[[0.07465915 0.07774796 0.07937349 0.08184721 0.08259245]]
[[2259 1746  604 2260 1323]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener all permut of list ` [ 1 , 2 , 3 ] ` and list ` [ 4 , 5 , 6 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(list(itertools.product([1, 2, 3], [4, 5, 6])))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 123 to 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(round(123, -2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
filter the object in django model 'sampl ' between date rang ` 2011-01-01 ` and ` 2011-01-31 `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener all permut of a list ` [ 1 , 2 , 3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
itertools.permutations([1, 2, 3])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
store integ 3 , 4 , 1 and 2 in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[3, 4, 1, 2]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`
the BLEU scores below are for the following reference translation: 
{k: [d[k] for d in dicts] for k in dicts[0]}
distances and indices:
[[0.06369732 0.06377213 0.06745178 0.07041415 0.07211701]]
[[ 594  604 1362  495 1361]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
select multipl rang of column 1-10 , 15 , 17 , and 50-100 in panda datafram ` df `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
filter the object in django model 'sampl ' between date rang ` 2011-01-01 ` and ` 2011-01-31 `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
list all file in a current directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
glob.glob('*')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get a dictionari in list ` dict ` which key 'ratio ' is closer to a global valu 1.77672955975
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add row ` [ ' 8/19/2014 ' , 'jun ' , 'fli ' , '98765 ' ] ` to datafram ` df `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i get the url parameter in a flask view
the BLEU scores below are for the following reference translation: 
request.args['myParam']
distances and indices:
[[0.25449046 0.28538004 0.2986253  0.29947537 0.3094751 ]]
[[1251 1985 2180 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> identify duplicate values in list `mylist`
the BLEU scores below are for the following reference translation: 
[k for k, v in list(Counter(mylist).items()) if v > 1]
distances and indices:
[[0.09543838 0.10181572 0.10432578 0.10693945 0.11301549]]
[[1842  585  796 1889  508]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
merg a list of integ ` [ 1 , 2 , 3 , 4 , 5 ] ` into a singl integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert directory 'apps' into directory `__file__`
the BLEU scores below are for the following reference translation: 
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))
distances and indices:
[[0.34624547 0.35804653 0.36757073 0.37064293 0.37115332]]
[[2180 1251 1342  726 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> modify sys.path for python module `subdir`
the BLEU scores below are for the following reference translation: 
sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
distances and indices:
[[0.3788109  0.40234584 0.40840852 0.4112351  0.41871533]]
[[ 726 2180  725  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert a 'none' value into a sqlite3 table.
the BLEU scores below are for the following reference translation: 
db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
distances and indices:
[[0.16819322 0.17145313 0.19683005 0.21206097 0.21653058]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> flatten list `list_of_menuitems`
the BLEU scores below are for the following reference translation: 
[image for menuitem in list_of_menuitems for image in menuitem]
distances and indices:
[[0.08433636 0.11387584 0.12150749 0.12810941 0.12848733]]
[[1842  796 2168 1022  585]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string '01/12/2011 ' to an integ timestamp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
run app ` app ` on host '192.168.0.58 ' and port 9000 in flask
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
app.run(host='192.168.0.58', port=9000, debug=False)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
merg a list of integ ` [ 1 , 2 , 3 , 4 , 5 ] ` into a singl integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append elements of a set `b` to a list `a`
the BLEU scores below are for the following reference translation: 
a.extend(b)
distances and indices:
[[0.28906146 0.28997472 0.3117216  0.3163861  0.31748638]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append elements of a set to a list in python
the BLEU scores below are for the following reference translation: 
a.extend(list(b))
distances and indices:
[[0.29191613 0.30021605 0.30960765 0.31217185 0.3192985 ]]
[[2180 1251 1985 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write the data of dataframe `df` into text file `np.txt`
the BLEU scores below are for the following reference translation: 
np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')
distances and indices:
[[0.20092951 0.2713669  0.29285875 0.29610342 0.3031507 ]]
[[ 405 2034 2009  368 1597]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write content of dataframe `df` into text file 'c:\\data\\pandas.txt'
the BLEU scores below are for the following reference translation: 
df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')
distances and indices:
[[0.23132102 0.30087477 0.31077194 0.3173116  0.32919464]]
[[ 405 2180 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `x` by last occurrence of character `-`
the BLEU scores below are for the following reference translation: 
print(x.rpartition('-')[0])
distances and indices:
[[0.14501974 0.14791718 0.17223684 0.17597595 0.1764093 ]]
[[ 725 1107  726 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the last part of a string before the character '-'
the BLEU scores below are for the following reference translation: 
print(x.rsplit('-', 1)[0])
distances and indices:
[[0.14946751 0.15307286 0.1549218  0.16330253 0.17343163]]
[[1342 2180 1251 1107 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> upload file using ftp
the BLEU scores below are for the following reference translation: 
ftp.storlines('STOR ' + filename, open(filename, 'r'))
distances and indices:
[[0.07720597 0.10540063 0.10677908 0.10812536 0.11003486]]
[[1343 2009   79  726  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add one to the hidden web element with id 'xyz' with selenium python script
the BLEU scores below are for the following reference translation: 
browser.execute_script("document.getElementById('XYZ').value+='1'")
distances and indices:
[[0.2250868  0.2330781  0.24605148 0.27437094 0.2772337 ]]
[[1343  726   79  539 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`
the BLEU scores below are for the following reference translation: 
np.maximum([2, 3, 4], [1, 5, 2])
distances and indices:
[[0.23872872 0.2524655  0.2688466  0.29744163 0.30232084]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a list `l` and move first 3 elements to the end of the list
the BLEU scores below are for the following reference translation: 
print(l[3:] + l[:3])
distances and indices:
[[0.1442714  0.15884984 0.1659068  0.17661715 0.17919822]]
[[1985 1984 1107 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over files in directory '.'
the BLEU scores below are for the following reference translation: 
for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass
distances and indices:
[[0.09922957 0.10967758 0.14324835 0.14503391 0.15175751]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over files in directory `source`
the BLEU scores below are for the following reference translation: 
for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass
distances and indices:
[[0.17884229 0.18212596 0.18301755 0.185517   0.18744548]]
[[ 690   79 1200 1801  299]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
slice ` url ` with ' & ' as delimit to get `` http : //www.domainname.com/pag ? content_item_id=1234 '' from url `` http : //www.domainname.com/pag ? content_item_id=1234 & param2 & param3.+ ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
url.split('&')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a random list of integers
the BLEU scores below are for the following reference translation: 
[int(1000 * random.random()) for i in range(10000)]
distances and indices:
[[0.14231828 0.1601302  0.16216709 0.18589397 0.19506179]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> using %f with strftime() in python to get microseconds
the BLEU scores below are for the following reference translation: 
datetime.datetime.now().strftime('%H:%M:%S.%f')
distances and indices:
[[0.30272344 0.32073575 0.32762817 0.33794355 0.342707  ]]
[[1341 2268  926 1986  572]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> google app engine execute gql query 'select * from schedule where station = $1' with parameter `foo.key()`
the BLEU scores below are for the following reference translation: 
db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())
distances and indices:
[[0.28621405 0.30958813 0.33809704 0.33873156 0.3495271 ]]
[[ 726 1343 2009  725  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter rows in pandas starting with alphabet 'f' using regular expression.
the BLEU scores below are for the following reference translation: 
df.b.str.contains('^f')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a 2 dimensional list `tab` as a table with delimiters
the BLEU scores below are for the following reference translation: 
print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
distances and indices:
[[0.12721296 0.15559058 0.16569722 0.16697149 0.16824779]]
[[1842  796 2168  540  538]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string '01/12/2011 ' to an integ timestamp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener a list of all uniqu pair of integ in ` rang ( 9 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(permutations(list(range(9)), 2))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> pandas: delete rows in dataframe `df` based on multiple columns values
the BLEU scores below are for the following reference translation: 
df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()
distances and indices:
[[0.30219382 0.30539542 0.31093723 0.31405368 0.32109532]]
[[2180  726 1107  725 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format the variables `self.goals` and `self.penalties` using string formatting
the BLEU scores below are for the following reference translation: 
"""({:d} goals, ${:d})""".format(self.goals, self.penalties)
distances and indices:
[[0.32408628 0.33815512 0.3508395  0.37198725 0.38431054]]
[[1343   79  726 2009  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format string "({} goals, ${})" with variables `goals` and `penalties`
the BLEU scores below are for the following reference translation: 
"""({} goals, ${})""".format(self.goals, self.penalties)
distances and indices:
[[0.39854392 0.4090767  0.4153061  0.44338566 0.45305187]]
[[1343  726   79 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format string "({0.goals} goals, ${0.penalties})"
the BLEU scores below are for the following reference translation: 
"""({0.goals} goals, ${0.penalties})""".format(self)
distances and indices:
[[0.4197143  0.43347228 0.43471286 0.46708944 0.4737148 ]]
[[1343   79  726 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of lists `l` to list of integers
the BLEU scores below are for the following reference translation: 
[int(''.join(str(d) for d in x)) for x in L]
distances and indices:
[[0.07473256 0.08960726 0.09627162 0.12367741 0.12578267]]
[[1107  725 1108  508 2049]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine elements of each list in list `l` into digits of a single integer
the BLEU scores below are for the following reference translation: 
[''.join(str(d) for d in x) for x in L]
distances and indices:
[[0.07923407 0.09318467 0.09915326 0.1101104  0.11172228]]
[[1107 1108 2049  757 1385]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a list of lists `l` to list of integers
the BLEU scores below are for the following reference translation: 
L = [int(''.join([str(y) for y in x])) for x in L]
distances and indices:
[[0.04862507 0.08635058 0.09613965 0.10767238 0.11122072]]
[[1107  725 1108  757 2049]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write the elements of list `lines` concatenated by special character '\n' to file `myfile`
the BLEU scores below are for the following reference translation: 
myfile.write('\n'.join(lines))
distances and indices:
[[0.31570423 0.32707518 0.35390145 0.36239213 0.38272646]]
[[ 726 1343   79  725  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing an element from a list based on a predicate 'x' or 'n'
the BLEU scores below are for the following reference translation: 
[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]
distances and indices:
[[0.22820254 0.24477518 0.26215804 0.26245505 0.2680278 ]]
[[1251 1492  734 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
declar an array ` variabl `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
variable = []
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove duplicate words from a string `text` using regex
the BLEU scores below are for the following reference translation: 
text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)
distances and indices:
[[0.2482262  0.25313368 0.28457257 0.30348054 0.30817336]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count non zero values in each column in pandas data frame
the BLEU scores below are for the following reference translation: 
df.astype(bool).sum(axis=1)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> search for string that matches regular expression pattern '(?<!distillr)\\\\acrotray\\.exe' in string 'c:\\somedir\\acrotray.exe'
the BLEU scores below are for the following reference translation: 
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
distances and indices:
[[0.24854858 0.26817766 0.27337614 0.27857643 0.30391163]]
[[ 726 1343  405 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string 'qh qd jc kd js' into a list on white spaces
the BLEU scores below are for the following reference translation: 
"""QH QD JC KD JS""".split()
distances and indices:
[[0.5639877  0.57974976 0.5834925  0.5855525  0.58679533]]
[[  79 1803 1801 1343  690]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> search for occurrences of regex pattern '>.*<' in xml string `line`
the BLEU scores below are for the following reference translation: 
print(re.search('>.*<', line).group(0))
distances and indices:
[[0.16071334 0.1752304  0.20359088 0.2087251  0.22110866]]
[[ 726 1343  725   79  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> erase all the contents of a file `filename`
the BLEU scores below are for the following reference translation: 
open(filename, 'w').close()
distances and indices:
[[0.09666242 0.10698737 0.15780005 0.15942514 0.1622742 ]]
[[1343   79  840 2009  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string into datetime using the format '%y-%m-%d %h:%m:%s.%f'
the BLEU scores below are for the following reference translation: 
datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')
distances and indices:
[[0.33555076 0.35355914 0.3713513  0.37581593 0.37592584]]
[[1341 1263  572 2268  926]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the index of a list with the first element equal to '332' within the list of lists `thelist`
the BLEU scores below are for the following reference translation: 
[index for index, item in enumerate(thelist) if item[0] == '332']
distances and indices:
[[0.178337   0.19418558 0.21111022 0.21977742 0.22005536]]
[[1170 1984 1985  898 2050]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> lower a string `text` and remove non-alphanumeric characters aside from space
the BLEU scores below are for the following reference translation: 
re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()
distances and indices:
[[0.26823455 0.28519586 0.2978887  0.30113882 0.3147168 ]]
[[ 726  725 1107 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all non-alphanumeric characters except space from a string `text` and lower it
the BLEU scores below are for the following reference translation: 
re.sub('(?!\\s)[\\W_]', '', text).lower().strip()
distances and indices:
[[0.27250972 0.30490133 0.30688894 0.3324636  0.33885822]]
[[ 726 1343  725 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> subscript text 'h20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
the BLEU scores below are for the following reference translation: 
plt.plot(x, y, label='$H_2O$')
distances and indices:
[[0.15488063 0.1980432  0.20996903 0.22676301 0.23101367]]
[[ 405 2180 2181 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over a list `mylist` if sublists length equals 3
the BLEU scores below are for the following reference translation: 
[x for x in mylist if len(x) == 3]
distances and indices:
[[0.12872927 0.13378684 0.18255647 0.19737165 0.218593  ]]
[[1985 1984 1251 1492 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> initialize a list `lst` of 100 objects object()
the BLEU scores below are for the following reference translation: 
lst = [Object() for _ in range(100)]
distances and indices:
[[0.12454882 0.14539656 0.1456505  0.15556566 0.15585028]]
[[1842  508  725 1108  796]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list `lst` containing 100 instances of object `object`
the BLEU scores below are for the following reference translation: 
lst = [Object() for i in range(100)]
distances and indices:
[[0.10525378 0.11824121 0.14254196 0.14275277 0.1609059 ]]
[[ 725 1107 1108  726   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the content of child tag with`href` attribute whose parent has css `someclass`
the BLEU scores below are for the following reference translation: 
self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'date_time' in both dataframes
the BLEU scores below are for the following reference translation: 
df1.merge(df2, on='Date_Time')
distances and indices:
[[0.17220691 0.17300425 0.17446184 0.17818654 0.17893793]]
[[1342 2181 1385 2180  889]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> use `%s` operator to print variable values `str1` inside a string
the BLEU scores below are for the following reference translation: 
'first string is: %s, second one is: %s' % (str1, 'geo.tif')
distances and indices:
[[0.17757165 0.18893093 0.19429882 0.19614583 0.1990631 ]]
[[2268 1341  926 1343 1996]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string by a delimiter in python
the BLEU scores below are for the following reference translation: 
[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]
distances and indices:
[[0.26203716 0.29498875 0.29826203 0.30826706 0.31159738]]
[[ 726  725 1343  405 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if directory `directory ` exists and create it if necessary
the BLEU scores below are for the following reference translation: 
if (not os.path.exists(directory)):
    os.makedirs(directory)
distances and indices:
[[0.29681647 0.3114821  0.31173614 0.35186347 0.3592694 ]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if a directory `path` exists and create it if necessary
the BLEU scores below are for the following reference translation: 
try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
distances and indices:
[[0.303104   0.32058927 0.32859805 0.36497194 0.3738127 ]]
[[1343   79  726 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace a separate word 'h3' by 'h1' in a string 'text'
the BLEU scores below are for the following reference translation: 
re.sub('\\bH3\\b', 'H1', text)
distances and indices:
[[0.18695737 0.18728371 0.19831163 0.20393854 0.21055427]]
[[ 405  726 2180  725 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> substitute ascii letters in string 'aas30dsa20' with empty string ''
the BLEU scores below are for the following reference translation: 
re.sub('\\D', '', 'aas30dsa20')
distances and indices:
[[0.271638   0.2737058  0.28836223 0.293455   0.30320773]]
[[ 726  405 2180  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get digits only from a string `aas30dsa20` using lambda function
the BLEU scores below are for the following reference translation: 
"""""".join([x for x in 'aas30dsa20' if x.isdigit()])
distances and indices:
[[0.3422895  0.34892973 0.35339993 0.35986826 0.36776364]]
[[ 726 1343  725   79  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> access a tag called "name" in beautifulsoup `soup`
the BLEU scores below are for the following reference translation: 
print(soup.find('name').string)
distances and indices:
[[0.12204834 0.12345383 0.15726447 0.18260968 0.18505746]]
[[ 726 1343   79  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a dictionary `records` of key-value pairs in pymongo cursor `cursor`
the BLEU scores below are for the following reference translation: 
records = dict((record['_id'], record) for record in cursor)
distances and indices:
[[0.10773823 0.11635036 0.119514   0.12204053 0.12299455]]
[[1842 1840  171 2168 2007]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.9499999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
('%.2f' % 13.9499999)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print a float point number 2.345e-67 without ani truncat
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{:.100f}'.format(2.345e-67))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string '01/12/2011 ' to an integ timestamp
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ` appl ` from iso-8859-1/latin1 to utf-8
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
apple.decode('iso-8859-1').encode('utf8')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create new matrix object  by concatenating data from matrix a and matrix b
the BLEU scores below are for the following reference translation: 
np.concatenate((A, B))
distances and indices:
[[0.32115054 0.32991603 0.3436235  0.3473126  0.352738  ]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concat two matrices `a` and `b` in numpy
the BLEU scores below are for the following reference translation: 
np.vstack((A, B))
distances and indices:
[[0.32115054 0.32991603 0.3436235  0.3473126  0.352738  ]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the characters count in a file `filepath`
the BLEU scores below are for the following reference translation: 
os.stat(filepath).st_size
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of item "a" in list `l`
the BLEU scores below are for the following reference translation: 
l.count('a')
distances and indices:
[[0.30856392 0.3486728  0.35299832 0.3691784  0.3836066 ]]
[[ 405  726 2180 2181 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of items in list `l`
the BLEU scores below are for the following reference translation: 
dict(((x, l.count(x)) for x in set(l)))
distances and indices:
[[0.18084542 0.18539551 0.19801806 0.19974703 0.20097905]]
[[1107 2180 1342 1251 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of item "b" in list `l`
the BLEU scores below are for the following reference translation: 
l.count('b')
distances and indices:
[[0.24986215 0.27284494 0.2828368  0.2913101  0.30185094]]
[[ 405 2180 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> copy file `srcfile` to directory `dstdir`
the BLEU scores below are for the following reference translation: 
shutil.copy(srcfile, dstdir)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the key associated with the largest value in dictionary `x` whilst key is non-zero value
the BLEU scores below are for the following reference translation: 
max(k for k, v in x.items() if v != 0)
distances and indices:
[[0.09121127 0.09176116 0.09394435 0.10243321 0.10761203]]
[[1842 1840  538 2007 1960]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.9499999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
('%.2f' % 13.9499999)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener a list of all uniqu pair of integ in ` rang ( 9 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(permutations(list(range(9)), 2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ` appl ` from iso-8859-1/latin1 to utf-8
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
apple.decode('iso-8859-1').encode('utf8')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format float ` 3.5e+20 ` to ` $ 3.5 \\time 10^ { 20 } $ ` and set as titl of matplotlib plot ` ax `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the largest key whose not associated with value of 0 in dictionary `x`
the BLEU scores below are for the following reference translation: 
(k for k, v in x.items() if v != 0)
distances and indices:
[[0.09052286 0.09876597 0.10741494 0.10881636 0.10970964]]
[[1842  540  538  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener a list of all uniqu pair of integ in ` rang ( 9 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(permutations(list(range(9)), 2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the largest key in a dictionary `x` with non-zero value
the BLEU scores below are for the following reference translation: 
max(k for k, v in x.items() if v != 0)
distances and indices:
[[0.09121127 0.09176116 0.09394435 0.10243321 0.10761203]]
[[1842 1840  538 2007 1960]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.9499999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
('%.2f' % 13.9499999)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener a list of all uniqu pair of integ in ` rang ( 9 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(permutations(list(range(9)), 2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ` appl ` from iso-8859-1/latin1 to utf-8
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
apple.decode('iso-8859-1').encode('utf8')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format float ` 3.5e+20 ` to ` $ 3.5 \\time 10^ { 20 } $ ` and set as titl of matplotlib plot ` ax `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> put the curser at beginning of the file
the BLEU scores below are for the following reference translation: 
file.seek(0)
distances and indices:
[[0.27467155 0.278072   0.28462797 0.2893432  0.28953338]]
[[2180 1251 1342 1107 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`
the BLEU scores below are for the following reference translation: 
df['c'] = np.where(df['a'].isnull, df['b'], df['a'])
distances and indices:
[[0.25091553 0.25273955 0.2692454  0.2727161  0.2742072 ]]
[[1251  405 2180 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove key 'ele' from dictionary `d`
the BLEU scores below are for the following reference translation: 
del d['ele']
distances and indices:
[[0.11271261 0.17698158 0.19140951 0.19661038 0.19673796]]
[[ 734 1248  405 2181  368]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
declar an array ` variabl `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
variable = []
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
disabl abbrevi in argpars
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
parser = argparse.ArgumentParser(allow_abbrev=False)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> update datetime field in `mymodel` to be the existing `timestamp` plus 100 years
the BLEU scores below are for the following reference translation: 
MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))
distances and indices:
[[0.25320795 0.25986978 0.2812447  0.31345573 0.3226259 ]]
[[1343  726   79 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> merge list `['it']` and list `['was']` and list `['annoying']` into one list
the BLEU scores below are for the following reference translation: 
['it'] + ['was'] + ['annoying']
distances and indices:
[[0.16421357 0.17610613 0.17976311 0.19727288 0.21620041]]
[[1251 2180 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> increment a value with leading zeroes in a number `x`
the BLEU scores below are for the following reference translation: 
str(int(x) + 1).zfill(len(x))
distances and indices:
[[0.18739443 0.19120684 0.1964381  0.23281251 0.24010012]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if a pandas dataframe `df`'s index is sorted
the BLEU scores below are for the following reference translation: 
all(df.index[:-1] <= df.index[1:])
distances and indices:
[[0.18533763 0.19845223 0.21868214 0.22388694 0.2281068 ]]
[[ 726  725 1107 2180   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple `t` to list
the BLEU scores below are for the following reference translation: 
list(t)
distances and indices:
[[0.16151153 0.16780792 0.16968985 0.18004523 0.18136477]]
[[1107  508  725 1108 1842]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `t` to tuple
the BLEU scores below are for the following reference translation: 
tuple(l)
distances and indices:
[[0.28700754 0.29225212 0.3203154  0.33279753 0.3375642 ]]
[[1984 1985 1170  757 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple `level1` to list
the BLEU scores below are for the following reference translation: 
level1 = map(list, level1)
distances and indices:
[[0.11741058 0.12008493 0.13996649 0.15637851 0.16336876]]
[[ 726  725 1107   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send the output of pprint object `dataobject` to file `logfile`
the BLEU scores below are for the following reference translation: 
pprint.pprint(dataobject, logFile)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get index of rows in column 'boolcol'
the BLEU scores below are for the following reference translation: 
df.loc[df['BoolCol']]
distances and indices:
[[0.25057822 0.2797028  0.2863038  0.29193747 0.29265037]]
[[1251 1985 1492 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing the indexes of rows where the value of column 'boolcol' in dataframe `df` are equal to true
the BLEU scores below are for the following reference translation: 
df.iloc[np.flatnonzero(df['BoolCol'])]
distances and indices:
[[0.19152766 0.2252795  0.22791883 0.22984293 0.24823591]]
[[1251 2180 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get list of indexes of rows where column 'boolcol' values match true
the BLEU scores below are for the following reference translation: 
df[df['BoolCol'] == True].index.tolist()
distances and indices:
[[0.13467492 0.14844634 0.15735503 0.17321515 0.17667079]]
[[1251 1492 1342 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get index of rows in dataframe `df` which column 'boolcol' matches value true
the BLEU scores below are for the following reference translation: 
df[df['BoolCol']].index.tolist()
distances and indices:
[[0.18745454 0.21898638 0.22535965 0.23218583 0.23735015]]
[[1251 1342 2180 1492 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> change working directory to the directory `owd`
the BLEU scores below are for the following reference translation: 
os.chdir(owd)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert data from a string `testfield` to sqlite db `c`
the BLEU scores below are for the following reference translation: 
c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
distances and indices:
[[0.18262143 0.20033297 0.20120357 0.22263055 0.22572012]]
[[ 726 1343  725   79  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode string "\\x89\\n" into a normal string
the BLEU scores below are for the following reference translation: 
"""\\x89\\n""".decode('string_escape')
distances and indices:
[[0.6241008  0.6370342  0.65701395 0.65897053 0.66248965]]
[[  79 1343  539 1200  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a raw string `raw_string` into a normal string
the BLEU scores below are for the following reference translation: 
raw_string.decode('string_escape')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a raw string `raw_byte_string` into a normal string
the BLEU scores below are for the following reference translation: 
raw_byte_string.decode('unicode_escape')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `s` with into all strings of repeated characters
the BLEU scores below are for the following reference translation: 
[m.group(0) for m in re.finditer('(\\d)\\1*', s)]
distances and indices:
[[0.19463    0.23410858 0.24264766 0.256499   0.25841278]]
[[ 726 1343  725 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none
the BLEU scores below are for the following reference translation: 
plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')
distances and indices:
[[0.17477213 0.18106167 0.18793707 0.22057562 0.22757377]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> do a scatter plot with empty circles
the BLEU scores below are for the following reference translation: 
plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')
distances and indices:
[[0.09361576 0.11830975 0.11914663 0.13725047 0.13875073]]
[[ 725 1107  726   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove a div with a id `main-content` using beautifulsoup
the BLEU scores below are for the following reference translation: 
soup.find('div', id='main-content').decompose()
distances and indices:
[[0.16090924 0.19736138 0.2011012  0.22036177 0.22734343]]
[[ 726  725 1343   53 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter rows containing key word `ball` in column `ids`
the BLEU scores below are for the following reference translation: 
df[df['ids'].str.contains('ball')]
distances and indices:
[[0.18086289 0.1973197  0.19941193 0.20580895 0.21294577]]
[[1492 2050 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert index at level 0 into a column in dataframe `df`
the BLEU scores below are for the following reference translation: 
df.reset_index(level=0, inplace=True)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add indexes in a data frame `df` to a column `index1`
the BLEU scores below are for the following reference translation: 
df['index1'] = df.index
distances and indices:
[[0.13263062 0.1955283  0.19927424 0.2095661  0.21902135]]
[[ 405 2181 2180 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert pandas index in a dataframe to columns
the BLEU scores below are for the following reference translation: 
df.reset_index(level=['tick', 'obs'])
distances and indices:
[[0.26011944 0.266266   0.28546086 0.29017475 0.29097506]]
[[1251 2180 1342  405 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get reverse of list items from list 'b' using extended slicing
the BLEU scores below are for the following reference translation: 
[x[::-1] for x in b]
distances and indices:
[[0.0952793  0.12989336 0.13491547 0.14906639 0.15018122]]
[[1251 1342 1492 1985 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join each element in array `a` with element at the same index in array `b` as a tuple
the BLEU scores below are for the following reference translation: 
np.array([zip(x, y) for x, y in zip(a, b)])
distances and indices:
[[0.07424364 0.085232   0.09598111 0.09971523 0.13779461]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> zip two 2-d arrays `a` and `b`
the BLEU scores below are for the following reference translation: 
np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)
distances and indices:
[[0.31910384 0.32958606 0.33671427 0.34070924 0.35062417]]
[[ 726 2180  725 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `list_of_ints` into a comma separated string
the BLEU scores below are for the following reference translation: 
""",""".join([str(i) for i in list_of_ints])
distances and indices:
[[0.42122686 0.4235706  0.4387745  0.45952162 0.46929836]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send a post request with raw data `data` and basic authentication with `username` and `password`
the BLEU scores below are for the following reference translation: 
requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))
distances and indices:
[[0.11810175 0.13280869 0.14420839 0.15800369 0.16030133]]
[[ 726  725 1343  891   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find last occurrence of character '}' in string "abcd}def}"
the BLEU scores below are for the following reference translation: 
'abcd}def}'.rfind('}')
distances and indices:
[[0.23783708 0.25379717 0.25421745 0.25876522 0.29235408]]
[[ 726 1343 2009  405   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> iterate ove list `[1, 2, 3]` using list comprehension
the BLEU scores below are for the following reference translation: 
print([item for item in [1, 2, 3]])
distances and indices:
[[0.12159503 0.1444863  0.18910989 0.22203834 0.23670237]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples
the BLEU scores below are for the following reference translation: 
[(x['x'], x['y']) for x in d]
distances and indices:
[[0.1598504  0.18718342 0.19361259 0.19373417 0.19377385]]
[[1251 2180 1492 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the filename without the extension from file 'hemanth.txt'
the BLEU scores below are for the following reference translation: 
print(os.path.splitext(os.path.basename('hemanth.txt'))[0])
distances and indices:
[[0.28626028 0.28626174 0.2930249  0.29440546 0.30185556]]
[[2180  726  725 1107 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it
the BLEU scores below are for the following reference translation: 
dict(x[i:i + 2] for i in range(0, len(x), 2))
distances and indices:
[[0.16104142 0.16415693 0.16788995 0.17241877 0.18818729]]
[[1251 2180 1342 1985 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing flattened list `[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]`
the BLEU scores below are for the following reference translation: 
values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
distances and indices:
[[0.16569811 0.17629252 0.18003844 0.18708183 0.19530976]]
[[ 405 1251 2180 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select rows in a dataframe `df` column 'closing_price' between two values 99 and 101
the BLEU scores below are for the following reference translation: 
df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
distances and indices:
[[0.15346369 0.1551711  0.16368842 0.16534035 0.1673644 ]]
[[ 726 2009  642   53 1288]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all occurences of newlines `\n` with `<br>` in dataframe `df`
the BLEU scores below are for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
distances and indices:
[[0.16673177 0.19166547 0.19609812 0.19795409 0.23103057]]
[[1343 2009  726   79 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`
the BLEU scores below are for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
distances and indices:
[[0.16673177 0.19166547 0.19609812 0.19795409 0.23103057]]
[[1343 2009  726   79 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing each two adjacent letters in string `word` as its elements
the BLEU scores below are for the following reference translation: 
[(x + y) for x, y in zip(word, word[1:])]
distances and indices:
[[0.0766376  0.09732059 0.11106547 0.11309958 0.11493216]]
[[1107  725 1342 2180 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of pairs from a string `word` using lambda function
the BLEU scores below are for the following reference translation: 
list(map(lambda x, y: x + y, word[:-1], word[1:]))
distances and indices:
[[0.04521943 0.04707231 0.05319241 0.08322188 0.08585353]]
[[ 725 1108 1107 2049   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract a url from a string `mystring`
the BLEU scores below are for the following reference translation: 
print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))
distances and indices:
[[0.18760583 0.20536378 0.2063205  0.24257395 0.24793078]]
[[1343  726   79  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all special characters, punctuation and spaces from a string `mystring` using regex
the BLEU scores below are for the following reference translation: 
re.sub('[^A-Za-z0-9]+', '', mystring)
distances and indices:
[[0.18003413 0.18124183 0.20412785 0.22095172 0.23160274]]
[[ 726  725 1107   53 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a datetimeindex containing 13 periods of the second friday of each month starting from date '2016-01-01'
the BLEU scores below are for the following reference translation: 
pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)
distances and indices:
[[0.26262894 0.2714868  0.28330266 0.2927188  0.2990678 ]]
[[ 405 2180 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create multidimensional array `matrix` with 3 rows and 2 columns in python
the BLEU scores below are for the following reference translation: 
matrix = [[a, b], [c, d], [e, f]]
distances and indices:
[[0.06432353 0.10374052 0.10826804 0.12406764 0.13469285]]
[[1251 1342 2180 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace spaces with underscore
the BLEU scores below are for the following reference translation: 
mystring.replace(' ', '_')
distances and indices:
[[0.17155357 0.18779509 0.19499409 0.19667205 0.196995  ]]
[[405 642 889 179 641]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
insert ' ' between everi three digit befor ' . ' and replac ' , ' with ' . ' in 12345678.46
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
format(12345678.46, ',').replace(',', ' ').replace('.', ',')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] *\\z ' on string ' a\n '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get an absolute file path of file 'mydir/myfile.txt'
the BLEU scores below are for the following reference translation: 
os.path.abspath('mydir/myfile.txt')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `my_string` on white spaces
the BLEU scores below are for the following reference translation: 
""" """.join(my_string.split())
distances and indices:
[[0.5804441 0.586349  0.6108967 0.6135827 0.624069 ]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get filename without extension from file `filename`
the BLEU scores below are for the following reference translation: 
os.path.splitext(filename)[0]
distances and indices:
[[0.10309443 0.12378194 0.13029152 0.13789321 0.15273957]]
[[1107  725  757 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list containing the sum of each element `i` in list `l` plus the previous elements
the BLEU scores below are for the following reference translation: 
[sum(l[:i]) for i, _ in enumerate(l)]
distances and indices:
[[0.119672   0.12026646 0.15423621 0.15721709 0.17511232]]
[[1985 1984  757 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `docs/src/scripts/temp` by `/` keeping `/` in the result
the BLEU scores below are for the following reference translation: 
"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')
distances and indices:
[[0.3681402  0.37111655 0.39919367 0.40140498 0.41254708]]
[[  79 1343  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> shuffle columns of an numpy array 'r'
the BLEU scores below are for the following reference translation: 
np.random.shuffle(np.transpose(r))
distances and indices:
[[0.3741058  0.38175616 0.3818777  0.40336257 0.40761673]]
[[ 726 2180  405 2181  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> copy all values in a column 'b' to a new column 'd' in a pandas data frame 'df'
the BLEU scores below are for the following reference translation: 
df['D'] = df['B']
distances and indices:
[[0.26651213 0.2817041  0.29679358 0.29884717 0.30408546]]
[[ 405 1251 2180 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find a value within nested json 'data' where the key inside another key 'b' is unknown.
the BLEU scores below are for the following reference translation: 
list(data['A']['B'].values())[0]['maindata'][0]['Info']
distances and indices:
[[0.12609267 0.16738275 0.16977115 0.1785264  0.18771303]]
[[1251 1342 2180 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check characters of string `string` are true predication of function `predicate`
the BLEU scores below are for the following reference translation: 
all(predicate(x) for x in string)
distances and indices:
[[0.11887418 0.15118791 0.15542902 0.15863505 0.1606412 ]]
[[1107  757 1108  725  508]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> determine number of files on a drive with python
the BLEU scores below are for the following reference translation: 
os.statvfs('/').f_files - os.statvfs('/').f_ffree
distances and indices:
[[0.09454958 0.11381537 0.12257099 0.14847183 0.14988683]]
[[1343  726   79  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to get a single result from a sqlite query in python?
the BLEU scores below are for the following reference translation: 
cursor.fetchone()[0]
distances and indices:
[[0.23717605 0.24112703 0.26261157 0.2648785  0.2695956 ]]
[[1251 1985 2180 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert string `user_input` into a list of integers `user_list`
the BLEU scores below are for the following reference translation: 
user_list = [int(number) for number in user_input.split(',')]
distances and indices:
[[0.15140262 0.15662454 0.16501197 0.19111548 0.19689196]]
[[ 725 1107  726 2180 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of integers by splitting  a string `user` with comma
the BLEU scores below are for the following reference translation: 
[int(s) for s in user.split(',')]
distances and indices:
[[0.16546467 0.20390756 0.21936901 0.22151197 0.22213094]]
[[ 726  725 2180  405   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting a python list by two criteria
the BLEU scores below are for the following reference translation: 
sorted(list, key=lambda x: (x[0], -x[1]))
distances and indices:
[[0.07688414 0.07956138 0.09682261 0.10738192 0.12439582]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of objects `ut`, based on a function `cmpfun` in descending order
the BLEU scores below are for the following reference translation: 
ut.sort(key=cmpfun, reverse=True)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse list `ut` based on the `count` attribute of each object
the BLEU scores below are for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
distances and indices:
[[0.2318931  0.24757521 0.2531239  0.25762275 0.25845522]]
[[2180  405 2181 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of objects `ut` in reverse order by their `count` property
the BLEU scores below are for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
distances and indices:
[[0.2318931  0.24757521 0.2531239  0.25762275 0.25845522]]
[[2180  405 2181 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button 'send' with selenium
the BLEU scores below are for the following reference translation: 
driver.find_element_by_partial_link_text('Send').click()
distances and indices:
[[0.38717616 0.42438936 0.42543072 0.42703524 0.42835215]]
[[ 726  725 1343  405 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button having text `send inmail` with selenium
the BLEU scores below are for the following reference translation: 
driver.findElement(By.linkText('Send InMail')).click()
distances and indices:
[[0.3985977  0.4349801  0.43611014 0.4437182  0.44714507]]
[[ 726  725 1343 2180  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button with text 'send inmail' with selenium
the BLEU scores below are for the following reference translation: 
driver.find_element_by_link_text('Send InMail').click()
distances and indices:
[[0.38717616 0.42438936 0.42543072 0.42703524 0.42835215]]
[[ 726  725 1343  405 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> cast an int `i` to a string and concat to string 'me'
the BLEU scores below are for the following reference translation: 
'ME' + str(i)
distances and indices:
[[0.16219428 0.17054494 0.1950352  0.1951458  0.20665722]]
[[ 726 1343   79  725  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting data in dataframe pandas
the BLEU scores below are for the following reference translation: 
df.sort_values(['System_num', 'Dis'])
distances and indices:
[[0.26011944 0.266266   0.28546086 0.29017475 0.29097506]]
[[1251 2180 1342  405 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'
the BLEU scores below are for the following reference translation: 
open('outfile', 'w').write('#test firstline\n' + open('infile').read())
distances and indices:
[[0.12927517 0.15534347 0.15929067 0.18494841 0.20059878]]
[[1343  726   79 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list `l` by length of value in tuple
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda t: len(t[1]), reverse=True)
distances and indices:
[[0.1490442  0.15575789 0.18352295 0.19460535 0.19527695]]
[[1107  725  726 2180 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `s` by words that ends with 'd'
the BLEU scores below are for the following reference translation: 
re.findall('\\b(\\w+)d\\b', s)
distances and indices:
[[0.30515978 0.32258627 0.3598603  0.36146173 0.36804593]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> return `true` if string `foobarrrr` contains regex `ba[rzd]`
the BLEU scores below are for the following reference translation: 
bool(re.search('ba[rzd]', 'foobarrrr'))
distances and indices:
[[0.301478   0.30864668 0.32257426 0.32342967 0.32644442]]
[[2180 1251  405 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `t`
the BLEU scores below are for the following reference translation: 
list(set(t))
distances and indices:
[[0.1568282  0.15974392 0.18217619 0.19369046 0.21326365]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `source_list`
the BLEU scores below are for the following reference translation: 
list(set(source_list))
distances and indices:
[[0.25921732 0.26222476 0.26269054 0.30008388 0.3065025 ]]
[[ 726  725 1107 2180 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `abracadabra`
the BLEU scores below are for the following reference translation: 
list(OrderedDict.fromkeys('abracadabra'))
distances and indices:
[[0.326412   0.34790194 0.349163   0.35518214 0.3703    ]]
[[ 726 2180  725 1107 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert array `a` into a list
the BLEU scores below are for the following reference translation: 
numpy.array(a).reshape(-1).tolist()
distances and indices:
[[0.2724382  0.2972039  0.3130334  0.31513768 0.33408663]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert the first row of numpy matrix `a` to a list
the BLEU scores below are for the following reference translation: 
numpy.array(a)[0].tolist()
distances and indices:
[[0.30214372 0.3047974  0.31197858 0.31662863 0.33180264]]
[[1251 2180 1985 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> in `soup`, get the content of the sibling of the `td`  tag with text content `address:`
the BLEU scores below are for the following reference translation: 
print(soup.find(text='Address:').findNext('td').contents[0])
distances and indices:
[[0.2673865  0.28631085 0.28850007 0.29755154 0.30050924]]
[[ 726 2180  725  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert elements of each tuple in list `l` into a string  separated by character `@`
the BLEU scores below are for the following reference translation: 
""" """.join([('%d@%d' % t) for t in l])
distances and indices:
[[0.17214078 0.20022076 0.20046042 0.20560338 0.20664683]]
[[  79  358 1200 1343  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert each tuple in list `l` to a string with '@' separating the tuples' elements
the BLEU scores below are for the following reference translation: 
""" """.join([('%d@%d' % (t[0], t[1])) for t in l])
distances and indices:
[[0.11196583 0.11448139 0.11456206 0.12027166 0.12129097]]
[[1343  726  539   80   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the html from the current web page of a selenium driver
the BLEU scores below are for the following reference translation: 
driver.execute_script('return document.documentElement.outerHTML;')
distances and indices:
[[0.18805866 0.1963718  0.23469712 0.23722404 0.25255308]]
[[ 726 1343 2009   79  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all matches with regex pattern `\\d+[xx]` in list of string `teststr`
the BLEU scores below are for the following reference translation: 
[i for i in teststr if re.search('\\d+[xX]', i)]
distances and indices:
[[0.34822157 0.3518524  0.38333273 0.38721997 0.39266315]]
[[ 405  726 2180 1343 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select values from column 'a' for which corresponding values in column 'b' will be greater than 50, and in column 'c' - equal 900 in dataframe `df`
the BLEU scores below are for the following reference translation: 
df['A'][(df['B'] > 50) & (df['C'] == 900)]
distances and indices:
[[0.14477539 0.14486697 0.14704159 0.14808372 0.15647338]]
[[ 405 1342 2181 2180 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort dictionary `o` in ascending order based on its keys and items
the BLEU scores below are for the following reference translation: 
sorted(o.items())
distances and indices:
[[0.2678412  0.290934   0.2997332  0.31593022 0.3292141 ]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get sorted list of keys of dict `d`
the BLEU scores below are for the following reference translation: 
sorted(d)
distances and indices:
[[0.20377028 0.20646158 0.2112076  0.21341564 0.21442734]]
[[2101  987 1017 1679 1749]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort a list 'lst ' in descend order .
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(lst, reverse=True)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
valid ip address use regex
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
read a singl charact from stdin
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.stdin.read(1)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
trim a string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
str.strip()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
revers a string 'hello world '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'hello world'[::(-1)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to sort dictionaries by keys in python
the BLEU scores below are for the following reference translation: 
sorted(d.items())
distances and indices:
[[0.2678412  0.290934   0.2997332  0.31593022 0.3292141 ]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert string "1" into integer
the BLEU scores below are for the following reference translation: 
int('1')
distances and indices:
[[0.13710056 0.13731168 0.14013587 0.15084769 0.15122063]]
[[2180  725 1107 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> function to convert strings into integers
the BLEU scores below are for the following reference translation: 
int()
distances and indices:
[[0.18738568 0.19996071 0.20453273 0.21325554 0.21568812]]
[[ 726  725 1343  539   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert items in `t1` to integers
the BLEU scores below are for the following reference translation: 
T2 = [map(int, x) for x in T1]
distances and indices:
[[0.06251764 0.0714031  0.08496164 0.08884338 0.09428191]]
[[1107  757 2049 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a shell script `./test.sh` using subprocess
the BLEU scores below are for the following reference translation: 
subprocess.call(['./test.sh'])
distances and indices:
[[0.29334572 0.2961328  0.31361592 0.3205293  0.3225699 ]]
[[1251 2180 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a shell script `notepad` using subprocess
the BLEU scores below are for the following reference translation: 
subprocess.call(['notepad'])
distances and indices:
[[0.29334572 0.2961328  0.31361592 0.3205293  0.3225699 ]]
[[1251 2180 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine lists `l1` and `l2`  by alternating their elements
the BLEU scores below are for the following reference translation: 
[val for pair in zip(l1, l2) for val in pair]
distances and indices:
[[0.14946252 0.15487659 0.15649052 0.15896723 0.16413242]]
[[1889 1842  585  533 1323]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
merg a list of integ ` [ 1 , 2 , 3 , 4 , 5 ] ` into a singl integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get a request paramet ` a ` in jinja2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
{{request.args.get('a')}}
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
store integ 3 , 4 , 1 and 2 in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[3, 4, 1, 2]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode string 'data to be encoded'
the BLEU scores below are for the following reference translation: 
encoded = base64.b64encode('data to be encoded')
distances and indices:
[[0.20652522 0.21809343 0.22069326 0.22432777 0.22628148]]
[[  79  358 1986  840 2268]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode a string `data to be encoded` to `ascii` encoding
the BLEU scores below are for the following reference translation: 
encoded = 'data to be encoded'.encode('ascii')
distances and indices:
[[0.31289715 0.325896   0.32900718 0.32934117 0.3301266 ]]
[[  79 1341 1343 2268 1986]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> parse tab-delimited csv file 'text.txt' into a list
the BLEU scores below are for the following reference translation: 
lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
distances and indices:
[[0.13944234 0.15490237 0.17229359 0.19127245 0.20289864]]
[[ 726  725 1107   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get attribute `my_str` of object `my_object`
the BLEU scores below are for the following reference translation: 
getattr(my_object, my_str)
distances and indices:
[[0.1348209  0.16697684 0.17009823 0.17489707 0.17611967]]
[[1842  508  796  540  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> group a list of dicts `ld` into one dict by key
the BLEU scores below are for the following reference translation: 
print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))
distances and indices:
[[0.11086619 0.11523696 0.13516001 0.14942583 0.16133983]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i sum the first value in each tuple in a list of tuples in python?
the BLEU scores below are for the following reference translation: 
sum([pair[0] for pair in list_of_pairs])
distances and indices:
[[0.08090564 0.08801194 0.15891829 0.1609509  0.16984205]]
[[1984 1985 1251 1492  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unicode string u"{'code1':1,'code2':1}" into dictionary
the BLEU scores below are for the following reference translation: 
d = ast.literal_eval("{'code1':1,'code2':1}")
distances and indices:
[[0.29123408 0.31057692 0.3165589  0.337654   0.3558811 ]]
[[1343   79  726 2009  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all words in a string `mystring` that start with the `$` sign
the BLEU scores below are for the following reference translation: 
[word for word in mystring.split() if word.startswith('$')]
distances and indices:
[[0.2107     0.22589803 0.24575321 0.25972787 0.2693899 ]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove any url within string `text`
the BLEU scores below are for the following reference translation: 
text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)
distances and indices:
[[0.19988841 0.21034199 0.2422323  0.24380347 0.2521916 ]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all elements in array `a` that are not present in array `[1, 3, 4]` with zeros
the BLEU scores below are for the following reference translation: 
np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)
distances and indices:
[[0.25070164 0.25584668 0.27326024 0.28050643 0.28488398]]
[[1251 1985 2180 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate mean across dimension in a 2d array `a`
the BLEU scores below are for the following reference translation: 
np.mean(a, axis=1)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> running r script '/pathto/myrscript.r' from python
the BLEU scores below are for the following reference translation: 
subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])
distances and indices:
[[0.13755347 0.14559545 0.15197259 0.1536378  0.1544843 ]]
[[2180  405 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> run r script '/usr/bin/rscript --vanilla /pathto/myrscript.r'
the BLEU scores below are for the following reference translation: 
subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)
distances and indices:
[[0.10426663 0.12231616 0.15076707 0.15114987 0.1613341 ]]
[[ 726  725   53 1343  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a header to a csv file
the BLEU scores below are for the following reference translation: 
writer.writeheader()
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replacing nan in the dataframe `df` with row average
the BLEU scores below are for the following reference translation: 
df.fillna(df.mean(axis=1), axis=1)
distances and indices:
[[0.3914006  0.41212484 0.41608196 0.42280856 0.43186095]]
[[ 726 2180  725 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unix timestamp '1347517370' to formatted string '%y-%m-%d %h:%m:%s'
the BLEU scores below are for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
distances and indices:
[[0.30955926 0.33820695 0.34138978 0.3428143  0.34875178]]
[[1341 2268 1263  926  572]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum across row of panda datafram
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date and time to a string use pattern ' % y- % m- % d % h : % m : % s '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a base class's class method `do` from derived class `derived`
the BLEU scores below are for the following reference translation: 
super(Derived, cls).do(a)
distances and indices:
[[0.19927439 0.2190955  0.23369181 0.24329443 0.25921917]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> selecting rows in numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1
the BLEU scores below are for the following reference translation: 
a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]
distances and indices:
[[0.28888902 0.29092753 0.30253664 0.30961624 0.314647  ]]
[[2180 1251 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> separate words delimited by one or more spaces into a list
the BLEU scores below are for the following reference translation: 
re.split(' +', 'hello world sample text')
distances and indices:
[[0.11745016 0.1408448  0.14264938 0.14567465 0.14580204]]
[[  79 1200  663  358  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> length of longest element in list `words`
the BLEU scores below are for the following reference translation: 
len(max(words, key=len))
distances and indices:
[[0.20686823 0.2169277  0.22041965 0.24279536 0.24294078]]
[[ 725 1107  726  539 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the value associated with unicode key 'from_user' of first dictionary in list `result`
the BLEU scores below are for the following reference translation: 
result[0]['from_user']
distances and indices:
[[0.13508612 0.13971543 0.15521239 0.16324595 0.18831299]]
[[1985 1984 1251 1492 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> retrieve each line from a file 'file.txt' as a list
the BLEU scores below are for the following reference translation: 
[line.split() for line in open('File.txt')]
distances and indices:
[[0.15088443 0.15133825 0.18033251 0.18774271 0.18961807]]
[[  79 1343  539  726   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> swap keys with values in a dictionary `a`
the BLEU scores below are for the following reference translation: 
res = dict((v, k) for k, v in a.items())
distances and indices:
[[0.09488939 0.09554854 0.10732667 0.10753584 0.11378735]]
[[ 539  540   80  663 1842]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `path/to/file_name.ext` in write mode
the BLEU scores below are for the following reference translation: 
new_file = open('path/to/FILE_NAME.ext', 'w')
distances and indices:
[[0.16895677 0.18622874 0.19931029 0.20509091 0.2184322 ]]
[[1343 2009   79  726 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to count distinct values in a column of a pandas group by object?
the BLEU scores below are for the following reference translation: 
df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()
distances and indices:
[[0.17545305 0.18003927 0.1835129  0.18543634 0.18740842]]
[[2180  405 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if any key in the dictionary `dict1` starts with the string `emp$$`
the BLEU scores below are for the following reference translation: 
any(key.startswith('EMP$$') for key in dict1)
distances and indices:
[[0.12324581 0.13885787 0.1425196  0.14320861 0.15113725]]
[[ 726  725  539 1343   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list of values from dictionary `dict1` that have a key that starts with 'emp$$'
the BLEU scores below are for the following reference translation: 
[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]
distances and indices:
[[0.19566223 0.21177563 0.21315505 0.21518804 0.22003885]]
[[2180 1107 1342 1251 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`
the BLEU scores below are for the following reference translation: 
pd.DataFrame({'email': sf.index, 'list': sf.values})
distances and indices:
[[0.29339498 0.3530466  0.36115703 0.3685719  0.37299573]]
[[ 405  726 2180 2009 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print elements of list `list` seperated by tabs `\t`
the BLEU scores below are for the following reference translation: 
print('\t'.join(map(str, list)))
distances and indices:
[[0.15929535 0.1691773  0.16996537 0.20413528 0.21231309]]
[[ 725  726 1107 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8
the BLEU scores below are for the following reference translation: 
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
distances and indices:
[[0.28237224 0.31143895 0.3273994  0.3503344  0.35329756]]
[[ 726 1343  725   79   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode a latin character in string `sopet\xc3\xb3n` properly
the BLEU scores below are for the following reference translation: 
'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
distances and indices:
[[0.20377187 0.21978773 0.24734288 0.26008666 0.2627441 ]]
[[ 726 1343 2009  725   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> resized image `image` to width, height of `(x, y)` with filter of `antialias`
the BLEU scores below are for the following reference translation: 
image = image.resize((x, y), Image.ANTIALIAS)
distances and indices:
[[0.1134558  0.15597127 0.16524209 0.166849   0.17705077]]
[[ 726  725 1343   53 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> regex, find "n"s only in the middle of string `s`
the BLEU scores below are for the following reference translation: 
re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)
distances and indices:
[[0.22273387 0.25482094 0.26990473 0.2933384  0.29415318]]
[[ 726 1343  725   53 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> display the float `1/3*100` as a percentage
the BLEU scores below are for the following reference translation: 
print('{0:.0f}%'.format(1.0 / 3 * 100))
distances and indices:
[[0.11132599 0.11167426 0.14144994 0.15508427 0.15616052]]
[[ 726 1343   79  891   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `mylist` by the key `title`
the BLEU scores below are for the following reference translation: 
mylist.sort(key=lambda x: x['title'])
distances and indices:
[[0.09968892 0.10059661 0.10131188 0.10522008 0.10847594]]
[[2181 1342 2049 1385 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list `l` of dicts by dict value 'title'
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda x: x['title'])
distances and indices:
[[0.09968892 0.10059661 0.10131188 0.10522008 0.10847594]]
[[2181 1342 2049 1385 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find recur pattern in a string '42344343434 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))
distances and indices:
[[0.07097399 0.09056597 0.10374454 0.10725473 0.11288805]]
[[1251 1342 2180 1492 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find 10 largest differences between each respective elements of list `l1` and list `l2`
the BLEU scores below are for the following reference translation: 
heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
distances and indices:
[[0.11393392 0.13896857 0.1564989  0.16087905 0.1611023 ]]
[[1107  757 1984 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> beautifulsoup find all 'span' elements in html string `soup` with class of 'stargryb sp'
the BLEU scores below are for the following reference translation: 
soup.find_all('span', {'class': 'starGryB sp'})
distances and indices:
[[0.32814953 0.36008474 0.366595   0.37353083 0.41012436]]
[[ 405  726 2009 1343 2034]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write records in dataframe `df` to table 'test' in schema 'a_schema'
the BLEU scores below are for the following reference translation: 
df.to_sql('test', engine, schema='a_schema')
distances and indices:
[[0.09866846 0.11662769 0.13247412 0.14795023 0.15203807]]
[[ 726  725   53 2009  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract brackets from string `s`
the BLEU scores below are for the following reference translation: 
brackets = re.sub('[^(){}[\\]]', '', s)
distances and indices:
[[0.21811911 0.25419202 0.25885504 0.27232254 0.27678636]]
[[ 726  725 1343 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove duplicate elements from list 'l'
the BLEU scores below are for the following reference translation: 
list(dict((x[0], x) for x in L).values())
distances and indices:
[[0.12488527 0.14420344 0.1454947  0.16488406 0.1651748 ]]
[[1985 1251 1984 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read a file `file` without newlines
the BLEU scores below are for the following reference translation: 
[line.rstrip('\n') for line in file]
distances and indices:
[[0.15564631 0.16111912 0.17550129 0.18741399 0.1895824 ]]
[[1343  726   79  891  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the position of item 1 in `testlist`
the BLEU scores below are for the following reference translation: 
gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass
distances and indices:
[[0.23446603 0.25792044 0.27242026 0.27848816 0.28739002]]
[[ 726  725 1107 2180 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the position of item `element` in list `testlist`
the BLEU scores below are for the following reference translation: 
try:
    print(testlist.index(element))
except ValueError:
    pass
distances and indices:
[[0.16437773 0.16443846 0.18979354 0.19172922 0.20344973]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the first element of the tuple with the maximum second element in a list of tuples `lis`
the BLEU scores below are for the following reference translation: 
max(lis, key=lambda item: item[1])[0]
distances and indices:
[[0.15227409 0.1577035  0.167353   0.17605722 0.17722306]]
[[1170 1984  757 1985  898]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`
the BLEU scores below are for the following reference translation: 
max(lis, key=itemgetter(1))[0]
distances and indices:
[[0.14257896 0.1428619  0.14323047 0.15115361 0.18267757]]
[[1984 1985 1107  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a delay of 1 second
the BLEU scores below are for the following reference translation: 
time.sleep(1)
distances and indices:
[[0.37676555 0.37858    0.38280636 0.39163217 0.39901543]]
[[2180 1251 1985 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of tuples `l` to a string
the BLEU scores below are for the following reference translation: 
""", """.join('(' + ', '.join(i) + ')' for i in L)
distances and indices:
[[0.2832287  0.28455845 0.30069703 0.3203596  0.32434008]]
[[1343  726   79  725  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django set default value of field `b` equal to '0000000'
the BLEU scores below are for the following reference translation: 
b = models.CharField(max_length=7, default='0000000', editable=False)
distances and indices:
[[0.22687903 0.24217261 0.2613321  0.26710802 0.27207685]]
[[ 405 2180 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort lis `list5` in ascending order based on the degrees value of its elements
the BLEU scores below are for the following reference translation: 
sorted(list5, lambda x: (degree(x), x))
distances and indices:
[[0.10713796 0.113671   0.12500763 0.12959337 0.1341201 ]]
[[1107 2180 1342 2181  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i perform secondary sorting in python?
the BLEU scores below are for the following reference translation: 
sorted(list5, key=lambda vertex: (degree(vertex), vertex))
distances and indices:
[[0.28000343 0.30793655 0.31798714 0.31929263 0.33099607]]
[[ 726  725 2180 1107 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a list  into a generator object
the BLEU scores below are for the following reference translation: 
(n for n in [1, 2, 3, 5])
distances and indices:
[[0.1282603  0.15769179 0.15825436 0.19219528 0.20137976]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove elements from list `oldlist` that have an index number mentioned in list `removelist`
the BLEU scores below are for the following reference translation: 
newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
distances and indices:
[[0.05899521 0.08784179 0.0883003  0.09407242 0.10357089]]
[[ 725   53 1108 1107  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `yourfile.txt` in write mode
the BLEU scores below are for the following reference translation: 
f = open('yourfile.txt', 'w')
distances and indices:
[[0.12366223 0.13692306 0.1514961  0.15787084 0.16611522]]
[[1343   79 2009  840 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get attribute 'attr' from object `obj`
the BLEU scores below are for the following reference translation: 
getattr(obj, 'attr')
distances and indices:
[[0.10992376 0.11065901 0.11201479 0.11545632 0.11582228]]
[[ 540  663  539 1842 1200]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple
the BLEU scores below are for the following reference translation: 
from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))
distances and indices:
[[0.14820865 0.15578678 0.16011922 0.1680264  0.17722675]]
[[2180 1342 1251 2181 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line
the BLEU scores below are for the following reference translation: 
map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))
distances and indices:
[[0.15512903 0.16214798 0.16733164 0.18564612 0.19443499]]
[[ 725  726 1107 2180   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python pandas: how to replace a characters in a column of a dataframe?
the BLEU scores below are for the following reference translation: 
df['range'].replace(',', '-', inplace=True)
distances and indices:
[[0.14312951 0.1469761  0.15134533 0.15439516 0.15922704]]
[[1047  516 1832  889 1928]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
initi a panda seri object ` s ` with column ` [ ' a ' , ' b ' , 'a1r ' , 'b2 ' , 'aabb4 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a list ` [ ' a:1 ' , ' b:2 ' , ' c:3 ' , 'd:4 ' ] ` to dictionari
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get index of charact ' b ' in list ' [ ' a ' , ' b ' ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
['a', 'b'].index('b')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concaten string in tupl ` ( ' a ' , ' b ' , ' c ' , 'd ' , ' g ' , ' x ' , ' r ' , ' e ' ) ` into a singl string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
the BLEU scores below are for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
distances and indices:
[[0.23171583 0.23555712 0.2559821  0.26056153 0.26515144]]
[[1251 2180 1342 2181  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `original`
the BLEU scores below are for the following reference translation: 
result = ([a for (a, b) in original], [b for (a, b) in original])
distances and indices:
[[0.28261986 0.29314673 0.31041077 0.33165297 0.337693  ]]
[[1985 1251 1984 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `original` and return a generator
the BLEU scores below are for the following reference translation: 
result = ((a for (a, b) in original), (b for (a, b) in original))
distances and indices:
[[0.30385742 0.30615488 0.3237986  0.33110133 0.33901718]]
[[1985 1251 2180 1984 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`
the BLEU scores below are for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
distances and indices:
[[0.22705013 0.22729334 0.24860746 0.25123054 0.25134024]]
[[2180 1251 1342  405 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with none
the BLEU scores below are for the following reference translation: 
map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
distances and indices:
[[0.21500349 0.21543886 0.23696235 0.23936716 0.24170698]]
[[2180 1251 1342 2181  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode `decimal('3.9')` to a json string
the BLEU scores below are for the following reference translation: 
json.dumps(Decimal('3.9'))
distances and indices:
[[0.25440684 0.28965113 0.29819497 0.30891982 0.3100481 ]]
[[ 726  725 1343  405 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add key "mynewkey" to dictionary `d` with value "mynewvalue"
the BLEU scores below are for the following reference translation: 
d['mynewkey'] = 'mynewvalue'
distances and indices:
[[0.10760538 0.18480961 0.19312079 0.20470984 0.211684  ]]
[[ 405 2034  368 2009  890]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
revers a list ` array `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
list(reversed(array))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print script 's directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.path.dirname(os.path.realpath(__file__)))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add key 'a' to dictionary `data` with value 1
the BLEU scores below are for the following reference translation: 
data.update(a=1)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find maximal value in matrix `matrix`
the BLEU scores below are for the following reference translation: 
max([max(i) for i in matrix])
distances and indices:
[[0.14536068 0.15574183 0.15958527 0.16257785 0.17163208]]
[[ 508 1107  590  757  277]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> round number `answer` to 2 precision after the decimal point
the BLEU scores below are for the following reference translation: 
answer = str(round(answer, 2))
distances and indices:
[[0.19446564 0.20500807 0.2233389  0.2434366  0.24962923]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract ip address from an html string
the BLEU scores below are for the following reference translation: 
ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)
distances and indices:
[[0.20069993 0.22886449 0.24594717 0.25880828 0.2665821 ]]
[[ 726 1343  725 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter dataframe `df` by values in column `a` that appear more than once
the BLEU scores below are for the following reference translation: 
df.groupby('A').filter(lambda x: len(x) > 1)
distances and indices:
[[0.13533145 0.14536929 0.16835617 0.17560823 0.19073369]]
[[ 726  725 1107   53 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append each line in file `myfile` into a list
the BLEU scores below are for the following reference translation: 
[x for x in myfile.splitlines() if x != '']
distances and indices:
[[0.14577997 0.14685217 0.16889945 0.17535043 0.18082236]]
[[1107  725 1342 2180  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of integers `lst` from a file `filename.txt`
the BLEU scores below are for the following reference translation: 
lst = map(int, open('filename.txt').readlines())
distances and indices:
[[0.12527174 0.13799648 0.14867263 0.14963351 0.15628509]]
[[ 726  725 1343  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add color bar with image `mappable` to plot `plt`
the BLEU scores below are for the following reference translation: 
plt.colorbar(mappable=mappable, cax=ax3)
distances and indices:
[[0.3654114  0.3743339  0.37997946 0.3869203  0.38969296]]
[[2180  726 1251 1342 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count most frequent 100 words in column 'text' of dataframe `df`
the BLEU scores below are for the following reference translation: 
Counter(' '.join(df['text']).split()).most_common(100)
distances and indices:
[[0.13495788 0.14835918 0.15755679 0.18166162 0.18181528]]
[[ 725  726 1107   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python split a string using regex
the BLEU scores below are for the following reference translation: 
re.findall('(.+?):(.+?)\\b ?', text)
distances and indices:
[[0.28951743 0.29879072 0.31262118 0.3538556  0.35439852]]
[[1343  726   79  539 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> generate all 2-element subsets of tuple `(1, 2, 3)`
the BLEU scores below are for the following reference translation: 
list(itertools.combinations((1, 2, 3), 2))
distances and indices:
[[0.27500737 0.28414255 0.302447   0.30307066 0.3103249 ]]
[[1985 1251 2180 1984 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a value of datetime.today() in the utc time zone
the BLEU scores below are for the following reference translation: 
datetime.now(pytz.utc)
distances and indices:
[[0.2912213  0.31743765 0.3197725  0.34163126 0.34737727]]
[[ 726 1343  725 1107   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a new list `list2`by removing empty list from a list of lists `list1`
the BLEU scores below are for the following reference translation: 
list2 = [x for x in list1 if x != []]
distances and indices:
[[0.04125399 0.08161165 0.09009914 0.09452279 0.09590377]]
[[ 757  590 1107  393 1902]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '01010101111 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('01010101111', 2)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`
the BLEU scores below are for the following reference translation: 
list2 = [x for x in list1 if x]
distances and indices:
[[0.08831616 0.14264688 0.14392333 0.15663177 0.16611882]]
[[1170  898 2050 1904 1980]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of integ with duplic valu ` [ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django response with json `data`
the BLEU scores below are for the following reference translation: 
return HttpResponse(data, mimetype='application/json')
distances and indices:
[[0.1312841  0.13145131 0.13574395 0.13822542 0.13836378]]
[[ 889  642 1928 1365  844]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concaten string in tupl ` ( ' a ' , ' b ' , ' c ' , 'd ' , ' g ' , ' x ' , ' r ' , ' e ' ) ` into a singl string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
evalu the express '20 < 30 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
eval('20<30')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert list of key-valu tupl ` [ ( ' a ' , 1 ) , ( ' b ' , 2 ) , ( ' c ' , 3 ) ] ` into dictionari
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dict([('A', 1), ('B', 2), ('C', 3)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all text that is not enclosed within square brackets in string `example_str`
the BLEU scores below are for the following reference translation: 
re.findall('(.*?)\\[.*?\\]', example_str)
distances and indices:
[[0.2756005  0.3006655  0.31002823 0.3147413  0.3224316 ]]
[[ 726  725 2180 1107  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> use a regex to get all text in a string `example_str` that is not surrounded by square brackets
the BLEU scores below are for the following reference translation: 
re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)
distances and indices:
[[0.26273897 0.30017316 0.30060938 0.324986   0.32834283]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'
the BLEU scores below are for the following reference translation: 
re.findall('\\(.+?\\)|\\w', '(zyx)bc')
distances and indices:
[[0.27279893 0.2963868  0.31858322 0.3346713  0.3384431 ]]
[[ 726 1343  725   79 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'
the BLEU scores below are for the following reference translation: 
re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')
distances and indices:
[[0.22336039 0.25274226 0.26154026 0.29047123 0.29084077]]
[[ 726 1343  725   53   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`
the BLEU scores below are for the following reference translation: 
re.findall('\\(.*?\\)|\\w', '(zyx)bc')
distances and indices:
[[0.27229878 0.3040029  0.31226626 0.33563796 0.3380005 ]]
[[ 726 1343  725 2009   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> formate each string cin list `elements` into pattern '%{0}%'
the BLEU scores below are for the following reference translation: 
elements = ['%{0}%'.format(element) for element in elements]
distances and indices:
[[0.08353214 0.08488619 0.08565161 0.11818852 0.12109031]]
[[ 725   53  726 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a background process 'background-process' with arguments 'arguments'
the BLEU scores below are for the following reference translation: 
subprocess.Popen(['background-process', 'arguments'])
distances and indices:
[[0.13725936 0.14835697 0.1530384  0.15848431 0.15946345]]
[[2180 2181 1342  405  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'
the BLEU scores below are for the following reference translation: 
[mydict[x] for x in mykeys]
distances and indices:
[[0.22534907 0.23534587 0.2504897  0.25881025 0.26688623]]
[[1984 1985 1492 1170 2050]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `[('name', 'joe'), ('age', 22)]` into a dictionary
the BLEU scores below are for the following reference translation: 
dict([('Name', 'Joe'), ('Age', 22)])
distances and indices:
[[0.08022574 0.09294643 0.10252307 0.10714547 0.10826254]]
[[  53  725  726  179 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
insert ' ' between everi three digit befor ' . ' and replac ' , ' with ' . ' in 12345678.46
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
format(12345678.46, ',').replace(',', ' ').replace('.', ',')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> average each two columns of array `data`
the BLEU scores below are for the following reference translation: 
data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)
distances and indices:
[[0.1367972  0.15107255 0.15142211 0.15558425 0.1629545 ]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> double backslash escape all double quotes in string `s`
the BLEU scores below are for the following reference translation: 
print(s.encode('unicode-escape').replace('"', '\\"'))
distances and indices:
[[0.2520572  0.2757204  0.29217094 0.31180686 0.3131616 ]]
[[ 726 1343  725   79 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string into a list of words and whitespace
the BLEU scores below are for the following reference translation: 
re.split('(\\W+)', s)
distances and indices:
[[0.32127774 0.34789595 0.37172484 0.3762973  0.377537  ]]
[[ 726 1343  405  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> plotting stacked barplots on a panda data frame
the BLEU scores below are for the following reference translation: 
df.plot(kind='barh', stacked=True)
distances and indices:
[[0.31694624 0.31803447 0.3359077  0.33938602 0.34381536]]
[[2180  405 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the keys and values in a dictionary `mydictionary`
the BLEU scores below are for the following reference translation: 
{i[1]: i[0] for i in list(myDictionary.items())}
distances and indices:
[[0.26210234 0.2678801  0.27719575 0.28674138 0.29531127]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> finding the index of elements containing substring 'how' and 'what' in a list of strings 'mylist'.
the BLEU scores below are for the following reference translation: 
[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
distances and indices:
[[0.18451944 0.19920768 0.20365924 0.20855555 0.20855726]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if object `obj` is a string
the BLEU scores below are for the following reference translation: 
isinstance(obj, str)
distances and indices:
[[0.13326545 0.15035734 0.15173708 0.15227057 0.15702854]]
[[1842  539  663  540 1200]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if object `o` is a string
the BLEU scores below are for the following reference translation: 
isinstance(o, str)
distances and indices:
[[0.10874485 0.1163688  0.1195691  0.12123174 0.1224182 ]]
[[ 539  540 1842   80  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if `obj_to_test` is a string
the BLEU scores below are for the following reference translation: 
isinstance(obj_to_test, str)
distances and indices:
[[0.16938505 0.17381166 0.18927813 0.21451183 0.22679101]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `list1` to `list2`
the BLEU scores below are for the following reference translation: 
list2.extend(list1)
distances and indices:
[[0.19095199 0.1993919  0.21512571 0.21861686 0.23002426]]
[[1107  725  508 1108 1842]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `mylog` to `list1`
the BLEU scores below are for the following reference translation: 
list1.extend(mylog)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `a` to `c`
the BLEU scores below are for the following reference translation: 
c.extend(a)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append items in list `mylog` to `list1`
the BLEU scores below are for the following reference translation: 
for line in mylog:
    list1.append(line)
distances and indices:
[[0.27326852 0.28693318 0.32847685 0.3306343  0.33155754]]
[[  79 1343  539  358 1200]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`
the BLEU scores below are for the following reference translation: 
b.append((a[0][0], a[0][2]))
distances and indices:
[[0.21611437 0.22216877 0.24643719 0.26270962 0.2688027 ]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> initialize `secret_key` in flask config with `your_secret_string `
the BLEU scores below are for the following reference translation: 
app.config['SECRET_KEY'] = 'Your_secret_string'
distances and indices:
[[0.18233971 0.24253844 0.25355247 0.26911074 0.270501  ]]
[[ 405 2180 2181 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unpack a series of tuples in pandas into a dataframe with column names 'out-1' and 'out-2'
the BLEU scores below are for the following reference translation: 
pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)
distances and indices:
[[0.27623764 0.27783537 0.29786226 0.3038209  0.3088976 ]]
[[1251 2180 1342 2181  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the index of an element 'msft' in a list `stocks_list`
the BLEU scores below are for the following reference translation: 
[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']
distances and indices:
[[0.15262109 0.16166756 0.18886846 0.19240992 0.19347972]]
[[1251 1985 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable
the BLEU scores below are for the following reference translation: 
ax.set_xticklabels(labels, rotation=45)
distances and indices:
[[0.14102583 0.15466958 0.15695944 0.18808639 0.19194019]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove symbols from a string `s`
the BLEU scores below are for the following reference translation: 
re.sub('[^\\w]', ' ', s)
distances and indices:
[[0.20348048 0.22844675 0.24540639 0.2462717  0.2592987 ]]
[[ 405 2180 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the current directory of a script
the BLEU scores below are for the following reference translation: 
os.path.basename(os.path.dirname(os.path.realpath(__file__)))
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find octal characters matches from a string `str` using regex
the BLEU scores below are for the following reference translation: 
print(re.findall("'\\\\[0-7]{1,3}'", str))
distances and indices:
[[0.22632138 0.25102893 0.25861973 0.28392002 0.2845662 ]]
[[ 726 1343  725 2009   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `input` based on occurrences of regex pattern '[ ](?=[a-z]+\\b)'
the BLEU scores below are for the following reference translation: 
re.split('[ ](?=[A-Z]+\\b)', input)
distances and indices:
[[0.2531225  0.26955834 0.272993   0.2807236  0.29023042]]
[[ 726  725 2180 1107 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `input` at every space followed by an upper-case letter
the BLEU scores below are for the following reference translation: 
re.split('[ ](?=[A-Z])', input)
distances and indices:
[[0.2531225  0.26955834 0.272993   0.2807236  0.29023042]]
[[ 726  725 2180 1107 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`
the BLEU scores below are for the following reference translation: 
r = requests.post(url, files=files, headers=headers, data=data)
distances and indices:
[[0.23692372 0.25224158 0.27694738 0.2806891  0.28384778]]
[[ 726  405 1343 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write bytes `bytes_` to a file `filename` in python 3
the BLEU scores below are for the following reference translation: 
open('filename', 'wb').write(bytes_)
distances and indices:
[[0.10094263 0.10926241 0.11450039 0.12034969 0.12361185]]
[[1343   79  539   80  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list from a list `lst` with values mapped into a dictionary `dct`
the BLEU scores below are for the following reference translation: 
[dct[k] for k in lst]
distances and indices:
[[0.15377371 0.17332438 0.19421352 0.1982055  0.20693623]]
[[1170 1442 1443 2020 1889]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all object attribut of object ` obj `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print((obj.__dict__))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all object attribut of an object
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dir()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all environ variabl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
os.environ
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find duplicate names in column 'name' of the dataframe `x`
the BLEU scores below are for the following reference translation: 
x.set_index('name').index.get_duplicates()
distances and indices:
[[0.15675235 0.18465765 0.21635543 0.22539695 0.22570837]]
[[ 726 1343  725   53 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> truncate float 1.923328437452 to 3 decimal places
the BLEU scores below are for the following reference translation: 
round(1.923328437452, 3)
distances and indices:
[[0.22574402 0.22688429 0.23167492 0.2350827  0.2355857 ]]
[[1985 1107 1251 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort list `li` in descending order based on the date value in second element of each list in list `li`
the BLEU scores below are for the following reference translation: 
sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)
distances and indices:
[[0.06794219 0.09215266 0.09780994 0.09796277 0.10104827]]
[[2034  890 1633  105 2011]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print script 's directori
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.path.dirname(os.path.realpath(__file__)))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a new 2d array with 2 random row from array ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
trim charact ' \t\n\r ' in ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
s = s.strip(' \t\n\r')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format paramet ' b ' and ' a ' into plcaehold in string `` { 0 } \\w { { 2 } } b { 1 } \\w { { 2 } } quarter ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{0}\\w{{2}}b{1}\\w{{2}}quarter""".format('b', 'a')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> place the radial ticks in plot `ax` at 135 degrees
the BLEU scores below are for the following reference translation: 
ax.set_rlabel_position(135)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if path `my_path` is an absolute path
the BLEU scores below are for the following reference translation: 
os.path.isabs(my_path)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get number of keys in dictionary `yourdict`
the BLEU scores below are for the following reference translation: 
len(list(yourdict.keys()))
distances and indices:
[[0.38243955 0.40723577 0.4144418  0.4234319  0.4273714 ]]
[[ 726  725 1107 2180 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the number of keys in dictionary `yourdictfile`
the BLEU scores below are for the following reference translation: 
len(set(open(yourdictfile).read().split()))
distances and indices:
[[0.3030445  0.33219734 0.33925673 0.36186188 0.36708277]]
[[ 726 1343  725 1107   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> pandas dataframe get first row of each group by 'id'
the BLEU scores below are for the following reference translation: 
df.groupby('id').first()
distances and indices:
[[0.14928974 0.18558718 0.1913804  0.20474464 0.21655989]]
[[ 726  725 1343   53 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a list in first column  into multiple columns keeping other columns as well in pandas data frame
the BLEU scores below are for the following reference translation: 
pd.concat([df[0].apply(pd.Series), df[1]], axis=1)
distances and indices:
[[0.18012814 0.19932239 0.22207512 0.22512016 0.22787699]]
[[1251 1985 1342 1984 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`
the BLEU scores below are for the following reference translation: 
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
distances and indices:
[[0.27122355 0.28482926 0.287833   0.30930188 0.31358397]]
[[ 726  725 1343   79  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum integers contained in strings in list `['', '3.4', '', '', '1.0']`
the BLEU scores below are for the following reference translation: 
sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])
distances and indices:
[[0.09225608 0.11594752 0.11982854 0.13027482 0.14427347]]
[[1107  757  725 1108  590]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a subprocess with arguments `c:\\program files\\vmware\\vmware server\\vmware-cmd.bat` that may contain spaces
the BLEU scores below are for the following reference translation: 
subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
distances and indices:
[[0.14381789 0.18987204 0.20240171 0.20672758 0.21127546]]
[[ 405  726 2009 2180 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse a priority queue `q` in python without using classes
the BLEU scores below are for the following reference translation: 
q.put((-n, n))
distances and indices:
[[0.2642418  0.28332558 0.29187235 0.3112455  0.3172841 ]]
[[ 726  725 1107 2180 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`
the BLEU scores below are for the following reference translation: 
df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
distances and indices:
[[0.20526797 0.23846003 0.24122329 0.24268487 0.25028   ]]
[[ 405 1251 2180 2181  734]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
declar an array ` variabl `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
variable = []
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all matches of regex pattern '([a-fa-f\\d]{32})' in string `data`
the BLEU scores below are for the following reference translation: 
re.findall('([a-fA-F\\d]{32})', data)
distances and indices:
[[0.2240349  0.25303042 0.2693108  0.27455208 0.27837437]]
[[ 405 2180 2181  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the length of list `my_list`
the BLEU scores below are for the following reference translation: 
len(my_list)
distances and indices:
[[0.20475817 0.20784327 0.2279093  0.2301723  0.23089974]]
[[ 508 1107  590 1108  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of array `l`
the BLEU scores below are for the following reference translation: 
len(l)
distances and indices:
[[0.2589057  0.26998    0.27205744 0.30352914 0.3051826 ]]
[[1985 1984 1107 1251 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of array `s`
the BLEU scores below are for the following reference translation: 
len(s)
distances and indices:
[[0.33417866 0.34695303 0.38016105 0.3975474  0.40230346]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of `my_tuple`
the BLEU scores below are for the following reference translation: 
len(my_tuple)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of `my_string`
the BLEU scores below are for the following reference translation: 
len(my_string)
distances and indices:
[[0.21457447 0.21814808 0.22031198 0.22920801 0.23159772]]
[[ 725  726  539 1343   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove escape character from string "\\a"
the BLEU scores below are for the following reference translation: 
"""\\a""".decode('string_escape')
distances and indices:
[[0.6241008  0.6370342  0.65701395 0.65897053 0.66248965]]
[[  79 1343  539 1200  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.
the BLEU scores below are for the following reference translation: 
"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
distances and indices:
[[0.22136529 0.23049422 0.24339265 0.25594148 0.26315087]]
[[2009 1343  726  405 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove directory tree '/folder_name'
the BLEU scores below are for the following reference translation: 
shutil.rmtree('/folder_name')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`
the BLEU scores below are for the following reference translation: 
data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
distances and indices:
[[0.13841546 0.13921455 0.13950752 0.14830734 0.1493624 ]]
[[2181  725 2180 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort counter `x` by values
the BLEU scores below are for the following reference translation: 
sorted(x, key=x.get, reverse=True)
distances and indices:
[[0.09553201 0.10250534 0.10301462 0.13446276 0.13497731]]
[[1985 1984 1251 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort counter `x` by value
the BLEU scores below are for the following reference translation: 
sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)
distances and indices:
[[0.17410822 0.17442323 0.18244967 0.18661976 0.18730997]]
[[1107 2180 1985 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append a numpy array 'b' to a numpy array 'a'
the BLEU scores below are for the following reference translation: 
np.vstack((a, b))
distances and indices:
[[0.32115054 0.32991603 0.3436235  0.3473126  0.352738  ]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the first axis
the BLEU scores below are for the following reference translation: 
np.array((a, b))
distances and indices:
[[0.32115054 0.32991603 0.3436235  0.3473126  0.352738  ]]
[[2180 1251 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the second axis
the BLEU scores below are for the following reference translation: 
print(concatenate((a, b), axis=1))
distances and indices:
[[0.21595146 0.21625513 0.21700545 0.2189205  0.23297182]]
[[1107 2180  725  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> fetch address information for host 'google.com' ion port 80
the BLEU scores below are for the following reference translation: 
print(socket.getaddrinfo('google.com', 80))
distances and indices:
[[0.26432887 0.2987615  0.3079796  0.31868798 0.32646596]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a column 'day' with value 'sat' to dataframe `df`
the BLEU scores below are for the following reference translation: 
df.xs('sat', level='day', drop_level=False)
distances and indices:
[[0.26262894 0.2714868  0.28330266 0.2927188  0.2990678 ]]
[[ 405 2180 1251 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> return a 401 unauthorized in django
the BLEU scores below are for the following reference translation: 
return HttpResponse('Unauthorized', status=401)
distances and indices:
[[0.11408057 0.11988647 0.13982609 0.14278637 0.1565187 ]]
[[ 725  726 1107   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> flask set folder 'wherever' as the default template folder
the BLEU scores below are for the following reference translation: 
Flask(__name__, template_folder='wherever')
distances and indices:
[[0.11285055 0.1383487  0.1549847  0.16233864 0.17182314]]
[[ 726  725 1343   53  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i insert into t1 (select * from t2) in sqlalchemy?
the BLEU scores below are for the following reference translation: 
session.execute('INSERT INTO t1 (SELECT * FROM t2)')
distances and indices:
[[0.2637545  0.28312692 0.31504917 0.3222278  0.32356784]]
[[ 726 1343  725   79 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of lists 'c2' such that third row comes first
the BLEU scores below are for the following reference translation: 
c2.sort(key=lambda row: row[2])
distances and indices:
[[0.1400797  0.14292865 0.15305962 0.15873122 0.16930373]]
[[1251 1985 1984 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting a list of lists in python
the BLEU scores below are for the following reference translation: 
c2.sort(key=lambda row: (row[2], row[1]))
distances and indices:
[[0.14533792 0.149363   0.1665193  0.18302277 0.2046446 ]]
[[1985 1251 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> set font `arial` to display non-ascii characters in matplotlib
the BLEU scores below are for the following reference translation: 
matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})
distances and indices:
[[0.27210072 0.34255087 0.34371132 0.36498222 0.3669493 ]]
[[ 405 2009  726 1343 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert  datetime column 'date' of pandas dataframe 'df' to ordinal
the BLEU scores below are for the following reference translation: 
df['date'].apply(lambda x: x.toordinal())
distances and indices:
[[0.16732612 0.17269562 0.1738487  0.18153231 0.18239118]]
[[ 405  516  889  179 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a list ` [ ' a:1 ' , ' b:2 ' , ' c:3 ' , 'd:4 ' ] ` to dictionari
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
insert ' ' between everi three digit befor ' . ' and replac ' , ' with ' . ' in 12345678.46
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
format(12345678.46, ',').replace(',', ' ').replace('.', ',')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get html source of selenium webelement `element`
the BLEU scores below are for the following reference translation: 
element.get_attribute('innerHTML')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the integer location of a key `bob` in a pandas data frame
the BLEU scores below are for the following reference translation: 
df.index.get_loc('bob')
distances and indices:
[[0.55752707 0.5700133  0.5793432  0.5959469  0.59792   ]]
[[1251 1985 2180 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a 'gnome' terminal from python script and run  'sudo apt-get update' command.
the BLEU scores below are for the following reference translation: 
os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')
distances and indices:
[[0.35356393 0.35692266 0.3607456  0.36392966 0.3690574 ]]
[[1803 1801   79  690  713]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
how to get a function name as a string in python ?
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
my_function.__name__
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add an item with key 'third_key' and value 1 to an dictionary `my_dict`
the BLEU scores below are for the following reference translation: 
my_dict.update({'third_key': 1})
distances and indices:
[[0.34333882 0.34562406 0.371532   0.37579548 0.39507633]]
[[ 405  726 1343 2009 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> declare an array
the BLEU scores below are for the following reference translation: 
my_list = []
distances and indices:
[[0.06181918 0.06821448 0.08233622 0.09188968 0.09290537]]
[[ 757 1107  590  508 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert item `12` to a list `my_list`
the BLEU scores below are for the following reference translation: 
my_list.append(12)
distances and indices:
[[0.19443145 0.2086587  0.21669196 0.2269007  0.23371246]]
[[ 726 1343  725   79  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add an entry 'wuggah' at the beginning of list `mylist`
the BLEU scores below are for the following reference translation: 
myList.insert(0, 'wuggah')
distances and indices:
[[0.21231449 0.21518472 0.23085456 0.24108587 0.25187683]]
[[1251 2180 1342 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a hex-string representation to actual bytes
the BLEU scores below are for the following reference translation: 
"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')
distances and indices:
[[0.49649763 0.5068599  0.5386505  0.5402078  0.54023373]]
[[  79 1343  358  840  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select the last column of dataframe `df`
the BLEU scores below are for the following reference translation: 
df[df.columns[-1]]
distances and indices:
[[0.18094017 0.19763918 0.20677385 0.20789301 0.21079165]]
[[1492 1251 2050 1984 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the first value from dataframe `df` where column 'letters' is equal to 'c'
the BLEU scores below are for the following reference translation: 
df.loc[df['Letters'] == 'C', 'Letters'].values[0]
distances and indices:
[[0.2563023  0.29447043 0.29635474 0.30222735 0.30483505]]
[[1251 1342 2180 1492 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix
the BLEU scores below are for the following reference translation: 
np.column_stack(([1, 2, 3], [4, 5, 6]))
distances and indices:
[[0.2373878  0.2429214  0.26808053 0.28117678 0.28183463]]
[[1985 1251 1984 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the type of `i`
the BLEU scores below are for the following reference translation: 
type(i)
distances and indices:
[[0.18384227 0.19223125 0.19708924 0.19936934 0.199906  ]]
[[ 539 1842  663   80  540]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> determine the type of variable `v`
the BLEU scores below are for the following reference translation: 
type(v)
distances and indices:
[[0.09803668 0.11570566 0.12049521 0.12158056 0.12582602]]
[[1048 1840  372    1  582]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
none
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.9499999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
('%.2f' % 13.9499999)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get file '~/foo.ini '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
config_file = os.path.expanduser('~/foo.ini')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a list of integ into a singl integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
r = int(''.join(map(str, x)))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
join element of each tupl in list ` a ` into one string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[''.join(x) for x in a]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the type of variable `variable_name`
the BLEU scores below are for the following reference translation: 
print(type(variable_name))
distances and indices:
[[0.20337047 0.20702161 0.21726595 0.22650594 0.22650804]]
[[ 726 1343   79  539  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the 5th item of a generator
the BLEU scores below are for the following reference translation: 
next(itertools.islice(range(10), 5, 5 + 1))
distances and indices:
[[0.24617282 0.24912119 0.2563094  0.2573855  0.2574473 ]]
[[1107 2180  725 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a string `word` with string format
the BLEU scores below are for the following reference translation: 
print('"{}"'.format(word))
distances and indices:
[[0.30186456 0.31499287 0.3178409  0.35478497 0.36213642]]
[[1343   79  726  539   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join a list of strings `list` using a space ' '
the BLEU scores below are for the following reference translation: 
""" """.join(list)
distances and indices:
[[0.6359292  0.6517475  0.662553   0.6636397  0.66733927]]
[[  79 1343  539 1200 1803]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the name of the os
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.name)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list `y` containing two empty lists
the BLEU scores below are for the following reference translation: 
y = [[] for n in range(2)]
distances and indices:
[[0.13446409 0.1461589  0.15425321 0.1545871  0.15636097]]
[[2180 1342 1251 1107 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read a file 'c:/name/mydocuments/numbers' into a list `data`
the BLEU scores below are for the following reference translation: 
data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]
distances and indices:
[[0.1535532  0.1827464  0.1895099  0.21437258 0.21574186]]
[[ 405  726 2009 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all occurrences of character 'i' in string 'it is icy'
the BLEU scores below are for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
distances and indices:
[[0.3250858  0.34436214 0.3503457  0.35043833 0.35046044]]
[[  79 1200  539  663 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all instances of a character 'i' in a string 'it is icy'
the BLEU scores below are for the following reference translation: 
re.sub('i', '', 'it is icy')
distances and indices:
[[0.2397881  0.2746365  0.27481982 0.2885359  0.2929532 ]]
[[ 405  726 2180 2181 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all characters "i" in string "it is icy"
the BLEU scores below are for the following reference translation: 
"""it is icy""".replace('i', '')
distances and indices:
[[0.54447955 0.5545053  0.57603186 0.5816311  0.5833238 ]]
[[  79 1343  539 1200  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to delete all instances of a character in a string in python?
the BLEU scores below are for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
distances and indices:
[[0.3250858  0.34436214 0.3503457  0.35043833 0.35046044]]
[[  79 1200  539  663 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> drop rows of pandas dataframe `df` having nan in column at index "1"
the BLEU scores below are for the following reference translation: 
df.dropna(subset=[1])
distances and indices:
[[0.3039386  0.30424565 0.3252829  0.33248386 0.33299547]]
[[1985 1251 2180 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get elements from list `mylist`, that have a field `n` value 30
the BLEU scores below are for the following reference translation: 
[x for x in myList if x.n == 30]
distances and indices:
[[0.10062948 0.15332109 0.15964054 0.17118157 0.17120004]]
[[1170  898 2050 1904 1442]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all object attribut of object ` obj `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print((obj.__dict__))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> converting list of strings `intstringlist` to list of integer `nums`
the BLEU scores below are for the following reference translation: 
nums = [int(x) for x in intstringlist]
distances and indices:
[[0.06223479 0.06625573 0.06946948 0.07733672 0.07990078]]
[[ 53 725 726 891  11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of string numbers into list of integers
the BLEU scores below are for the following reference translation: 
map(int, eval(input('Enter the unfriendly numbers: ')))
distances and indices:
[[0.12676072 0.13071878 0.13274337 0.13657874 0.13727413]]
[[ 539  726 1343   80   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print "." without newline
the BLEU scores below are for the following reference translation: 
sys.stdout.write('.')
distances and indices:
[[0.23359512 0.26094943 0.27002814 0.28397134 0.2889107 ]]
[[ 405  726 2180 2181  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> round off the float that is the product of `2.52 * 100` and convert it to an int
the BLEU scores below are for the following reference translation: 
int(round(2.51 * 100))
distances and indices:
[[0.19110489 0.19150868 0.19962105 0.20093633 0.20704506]]
[[ 726  725  539 1343   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all files in directory "/mydir" with extension ".txt"
the BLEU scores below are for the following reference translation: 
for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass
distances and indices:
[[0.13157323 0.13930742 0.17903134 0.18780556 0.18881117]]
[[  79 1343  539  663   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> plot dataframe `df` without a legend
the BLEU scores below are for the following reference translation: 
df.plot(legend=False)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop through the ip address range "192.168.x.x"
the BLEU scores below are for the following reference translation: 
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
distances and indices:
[[0.18714856 0.19620736 0.20423484 0.20982136 0.21744242]]
[[ 726  405 2180  725 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum the corresponding decimal values for binary values of each boolean element in list `x`
the BLEU scores below are for the following reference translation: 
sum(1 << i for i, b in enumerate(x) if b)
distances and indices:
[[0.0987711  0.10133042 0.10575207 0.12740679 0.12965384]]
[[1342 1251 2180 2181 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write multiple strings `line1`, `line2` and `line3` in one line in a file `target`
the BLEU scores below are for the following reference translation: 
target.write('%r\n%r\n%r\n' % (line1, line2, line3))
distances and indices:
[[0.30231678 0.30507997 0.31906295 0.3258177  0.32657668]]
[[1343 2009 2034  726 2004]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of lists `data` into a flat list
the BLEU scores below are for the following reference translation: 
[y for x in data for y in (x if isinstance(x, list) else [x])]
distances and indices:
[[0.11095808 0.12071563 0.13666598 0.14232582 0.1465157 ]]
[[1251 1492 1342 2180 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print new line character as `\n` in a string `foo\nbar`
the BLEU scores below are for the following reference translation: 
print('foo\nbar'.encode('string_escape'))
distances and indices:
[[0.28237224 0.31143895 0.3273994  0.3503344  0.35329756]]
[[ 726 1343  725   79   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove last comma character ',' in string `s`
the BLEU scores below are for the following reference translation: 
"""""".join(s.rsplit(',', 1))
distances and indices:
[[0.39408344 0.39666504 0.40564784 0.42368522 0.42787552]]
[[1343  726   79  725  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate the mean of each element in array `x` with the element previous to it
the BLEU scores below are for the following reference translation: 
(x[1:] + x[:-1]) / 2
distances and indices:
[[0.11889323 0.12354915 0.13548683 0.13561566 0.14782508]]
[[1342 1107 2180 1251  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get an array of the mean of each two consecutive values in numpy array `x`
the BLEU scores below are for the following reference translation: 
x[:-1] + (x[1:] - x[:-1]) / 2
distances and indices:
[[0.09438711 0.10198563 0.11683424 0.12177137 0.12272068]]
[[1342 1107 2180 1251  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> load data containing `utf-8` from file `new.txt` into numpy array `arr`
the BLEU scores below are for the following reference translation: 
arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')
distances and indices:
[[0.17246872 0.18276972 0.19736622 0.20287073 0.2107    ]]
[[ 726  405  725 2180   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort list of dicts `l` by value for key `time`
the BLEU scores below are for the following reference translation: 
l = sorted(l, key=itemgetter('time'), reverse=True)
distances and indices:
[[0.14396474 0.16183227 0.17494017 0.17631856 0.17821363]]
[[1107 2180 1985 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `l` based on key `time` in descending order
the BLEU scores below are for the following reference translation: 
l = sorted(l, key=lambda a: a['time'], reverse=True)
distances and indices:
[[0.10662435 0.11619401 0.11747858 0.1178911  0.12403497]]
[[2180 1342 1251 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get rows of dataframe `df` that match regex '(hel|just)'
the BLEU scores below are for the following reference translation: 
df.loc[df[0].str.contains('(Hel|Just)')]
distances and indices:
[[0.19391868 0.21276319 0.22129647 0.23494942 0.23762824]]
[[1251 2180 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the string in `your_string` between two special characters "[" and "]"
the BLEU scores below are for the following reference translation: 
re.search('\\[(.*)\\]', your_string).group(1)
distances and indices:
[[0.28743866 0.2991664  0.30641913 0.30818766 0.32143745]]
[[ 726  725 1107 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to create a list of date string in 'yyyymmdd' format with python pandas?
the BLEU scores below are for the following reference translation: 
[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]
distances and indices:
[[0.20874552 0.21962455 0.2359783  0.2362923  0.23662227]]
[[1633 2034 2268 1996 1033]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a new 2d array with 2 random row from array ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
A[(np.random.choice(A.shape[0], 2, replace=False)), :]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
separ each charact in string ` s ` by '- '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(.)(?=.)', '\\1-', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
termin a python script with error messag `` some error messag ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sys.exit('some error message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener random decim
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
decimal.Decimal(random.randrange(10000)) / 100
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count number of times string 'brown' occurred in string 'the big brown fox is brown'
the BLEU scores below are for the following reference translation: 
"""The big brown fox is brown""".count('brown')
distances and indices:
[[0.6241008  0.6370342  0.65701395 0.65897053 0.66248965]]
[[  79 1343  539 1200  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode json string `request.body` to python dict
the BLEU scores below are for the following reference translation: 
json.loads(request.body)
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download the file from url `url` and save it under file `file_name`
the BLEU scores below are for the following reference translation: 
urllib.request.urlretrieve(url, file_name)
distances and indices:
[[0.35836467 0.35922638 0.3594494  0.36698225 0.3675777 ]]
[[1986 2199 1341  943 2268]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if websit `` http : //www.stackoverflow.com '' is up
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `text` by space
the BLEU scores below are for the following reference translation: 
text.split()
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `text` by ","
the BLEU scores below are for the following reference translation: 
text.split(',')
distances and indices:
[[0.27299607 0.29856053 0.3178531  0.32027808 0.32856303]]
[[ 405 2180 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `line` into a list by whitespace
the BLEU scores below are for the following reference translation: 
line.split()
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace dot characters  '.' associated with ascii letters in list `s` with space ' '
the BLEU scores below are for the following reference translation: 
[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]
distances and indices:
[[0.22004737 0.22566466 0.25937214 0.27575216 0.27608237]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort list `list_of_strings` based on second index of each string `s`
the BLEU scores below are for the following reference translation: 
sorted(list_of_strings, key=lambda s: s.split(',')[1])
distances and indices:
[[0.19280927 0.21568991 0.22000308 0.22075403 0.22259119]]
[[2180 2181 1251  405 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’
the BLEU scores below are for the following reference translation: 
subprocess.check_call('vasp | tee tee_output', shell=True)
distances and indices:
[[0.15639032 0.18377677 0.20422637 0.21156867 0.21365026]]
[[ 726  725 1343   53 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> eliminate all strings from list `lst`
the BLEU scores below are for the following reference translation: 
[element for element in lst if isinstance(element, int)]
distances and indices:
[[0.20823807 0.2589698  0.26009732 0.2712821  0.28161323]]
[[1170 1889  898 1984 2020]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all environ variabl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
os.environ
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all the elements except strings from the list 'lst'.
the BLEU scores below are for the following reference translation: 
[element for element in lst if not isinstance(element, str)]
distances and indices:
[[0.2132308  0.26008093 0.26153752 0.2668188  0.27645636]]
[[1170 1984  898 1889 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`
the BLEU scores below are for the following reference translation: 
newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
distances and indices:
[[0.04963025 0.05831589 0.05975613 0.05986376 0.05992049]]
[[1062 1972 1777  125  528]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert the zip of rang ` ( 1 , 5 ) ` and rang ` ( 7 , 11 ) ` into a dictionari
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
dict(zip(list(range(1, 5)), list(range(7, 11))))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get all match pattern ' a . * ? a ' from a string ' a 1 a 2 a 3 a 4 a ' .
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print a ration number ` 3/2 `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if dictionari ` l [ 0 ] .f.item ( ) ` is in dictionari ` a3.f.item ( ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
set(L[0].f.items()).issubset(set(a3.f.items()))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars string `` aug 28 1999 12:00am '' into datetim
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
parser.parse('Aug 28 1999 12:00AM')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries `l` by values in key `name` in descending order
the BLEU scores below are for the following reference translation: 
newlist = sorted(l, key=itemgetter('name'), reverse=True)
distances and indices:
[[0.09531058 0.10500715 0.10972865 0.11910385 0.11965282]]
[[ 725 1107  726 1108   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i sort a list of dictionaries by values of the dictionary in python?
the BLEU scores below are for the following reference translation: 
list_of_dicts.sort(key=operator.itemgetter('age'))
distances and indices:
[[0.13351613 0.15649338 0.18852921 0.1930379  0.20070408]]
[[ 726 1343 2009   53   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to sort a dataframe by the ocurrences in a column in python (pandas)
the BLEU scores below are for the following reference translation: 
df.groupby('prots').sum().sort('scores', ascending=False)
distances and indices:
[[0.24237755 0.2805401  0.2821165  0.3049199  0.3052538 ]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join together with "," elements inside a list indexed with 'category' within a dictionary `trans`
the BLEU scores below are for the following reference translation: 
""",""".join(trans['category'])
distances and indices:
[[0.4562871  0.45741308 0.46763745 0.4778429  0.48786652]]
[[1343   79  726  539  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate array of strings `['a', 'b', 'c', 'd']` into a string
the BLEU scores below are for the following reference translation: 
"""""".join(['A', 'B', 'C', 'D'])
distances and indices:
[[0.2531099  0.28231767 0.29177368 0.29756036 0.29918683]]
[[ 405  726 2009  725 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get json data from restful service 'url'
the BLEU scores below are for the following reference translation: 
json.load(urllib.request.urlopen('url'))
distances and indices:
[[0.20524982 0.22472227 0.24975646 0.25878516 0.2749741 ]]
[[ 726 1343  725   79   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`
the BLEU scores below are for the following reference translation: 
[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
distances and indices:
[[0.10810661 0.12986721 0.13314106 0.1430385  0.14783254]]
[[ 725 1107  726   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django filter by hour
the BLEU scores below are for the following reference translation: 
Entry.objects.filter(pub_date__contains='08:00')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `list` first by key `points` and then by `time`
the BLEU scores below are for the following reference translation: 
list.sort(key=lambda item: (item['points'], item['time']))
distances and indices:
[[0.11504284 0.13314934 0.13351233 0.14636327 0.15481038]]
[[1985 1984 1251 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert datetime object `(1970, 1, 1)` to seconds
the BLEU scores below are for the following reference translation: 
(t - datetime.datetime(1970, 1, 1)).total_seconds()
distances and indices:
[[0.2237322  0.22936463 0.23464315 0.23663008 0.24750128]]
[[1107  725 2180  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.
the BLEU scores below are for the following reference translation: 
re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')
distances and indices:
[[0.2701588  0.29405195 0.29780802 0.2998224  0.31118995]]
[[ 726  725  405 2180 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reload a module `module`
the BLEU scores below are for the following reference translation: 
import imp
imp.reload(module)
distances and indices:
[[0.19541302 0.20339245 0.20362528 0.20412667 0.2097894 ]]
[[1048 1200  478 1801 1796]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
none
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
save json output from a url ‘ http : //search.twitter.com/search.json ? q=hi ’ to file ‘ hi.json ’ in python 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get os name
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
import platform
platform.system()
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
input an integ tupl from user
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
tuple(map(int, input().split(',')))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert integer `number` into an unassigned integer
the BLEU scores below are for the following reference translation: 
struct.unpack('H', struct.pack('h', number))
distances and indices:
[[0.15033256 0.16613263 0.17081785 0.17629996 0.19467992]]
[[ 726 2009  405 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert int values in list `numlist` to float
the BLEU scores below are for the following reference translation: 
numlist = [float(x) for x in numlist]
distances and indices:
[[0.1021862  0.1043072  0.11887217 0.12003677 0.12201513]]
[[2180 1342 1251 2181 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write dataframe `df`, excluding index, to a csv file
the BLEU scores below are for the following reference translation: 
df.to_csv(filename, index=False)
distances and indices:
[[0.12959659 0.13246153 0.13266094 0.14345646 0.14980072]]
[[  79  539 1343   80  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a urllib unquoted string `unescaped` to a json data `json_data`
the BLEU scores below are for the following reference translation: 
json_data = json.loads(unescaped)
distances and indices:
[[0.16318204 0.1636103  0.17205298 0.1778036  0.18105854]]
[[  79 1200  663  358  690]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars webpag 'http : //www.google.com/ ' use beautifulsoup
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing all ascii characters as its elements
the BLEU scores below are for the following reference translation: 
[chr(i) for i in range(127)]
distances and indices:
[[0.31521723 0.32005486 0.32586473 0.32637239 0.3276791 ]]
[[2180 1251 1107 1985 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write `newfilebytes` to a binary file `newfile`
the BLEU scores below are for the following reference translation: 
newFile.write(struct.pack('5B', *newFileBytes))
distances and indices:
[[0.36478662 0.37395713 0.38090828 0.3917192  0.39592144]]
[[ 726 2180  405  725 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python regex - check for a capital letter with a following lowercase in string `string`
the BLEU scores below are for the following reference translation: 
re.sub('^[A-Z0-9]*(?![a-z])', '', string)
distances and indices:
[[0.28903672 0.31095734 0.32863286 0.33060598 0.34966752]]
[[ 726  725 1107 1343   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the last key of dictionary `dict`
the BLEU scores below are for the following reference translation: 
list(dict.keys())[-1]
distances and indices:
[[0.2012086  0.20686622 0.2090166  0.21023755 0.2131918 ]]
[[1107 2180 1251 1342 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hi there" to file `f`
the BLEU scores below are for the following reference translation: 
print('hi there', file=f)
distances and indices:
[[0.18616872 0.21946952 0.23648608 0.2451522  0.2456545 ]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hi there" to file `myfile`
the BLEU scores below are for the following reference translation: 
f = open('myfile', 'w')
f.write('hi there\n')
f.close()
distances and indices:
[[0.1172386  0.13985913 0.16078323 0.17996444 0.19193366]]
[[1343   79  726 2009  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hello" to file `somefile.txt`
the BLEU scores below are for the following reference translation: 
with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
distances and indices:
[[0.22731538 0.24870682 0.24962635 0.2559176  0.2835448 ]]
[[ 726 1343  405 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unicode string `s` to ascii
the BLEU scores below are for the following reference translation: 
s.encode('iso-8859-15')
distances and indices:
[[0.3632902  0.37603933 0.39199704 0.40217713 0.4029424 ]]
[[ 726  405 2180  725 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django get maximum value associated with field 'added' in model `authorizedemail`
the BLEU scores below are for the following reference translation: 
AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]
distances and indices:
[[0.28086635 0.28121206 0.29607788 0.30233827 0.30782792]]
[[1251 2180 1342 1985 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all numbers and dots from a string `text` using regex
the BLEU scores below are for the following reference translation: 
re.findall('Test([0-9.]*[0-9]+)', text)
distances and indices:
[[0.20873795 0.22785202 0.25182983 0.25251448 0.26390925]]
[[ 726  725 1343 1107   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python regex  to find all numbers and dots from 'text'
the BLEU scores below are for the following reference translation: 
re.findall('Test([\\d.]*\\d+)', text)
distances and indices:
[[0.19291343 0.217251   0.23071948 0.254215   0.2568935 ]]
[[ 726 1343  725   79   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> execute script 'script.ps1' using 'powershell.exe' shell
the BLEU scores below are for the following reference translation: 
os.system('powershell.exe', 'script.ps1')
distances and indices:
[[0.27299607 0.29856053 0.3178531  0.32027808 0.32856303]]
[[ 405 2180 2181 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of tuples `b` by third item in the tuple
the BLEU scores below are for the following reference translation: 
b.sort(key=lambda x: x[1][2])
distances and indices:
[[0.18876097 0.18951337 0.21913141 0.23179375 0.23480515]]
[[1251 1985 1984 1342 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of all keys in cassandra database `cf` with pycassa
the BLEU scores below are for the following reference translation: 
list(cf.get_range().get_keys())
distances and indices:
[[0.38243955 0.40723577 0.4144418  0.4234319  0.4273714 ]]
[[ 726  725 1107 2180 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a datetime with the current date & time
the BLEU scores below are for the following reference translation: 
datetime.datetime.now()
distances and indices:
[[0.4275538  0.46188343 0.4631814  0.47549087 0.48001605]]
[[ 726  725 1343 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the index of an integer `1` from a list `lst` if the list also contains boolean items
the BLEU scores below are for the following reference translation: 
next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)
distances and indices:
[[0.13365869 0.15273567 0.15717499 0.17958298 0.18006624]]
[[1985 1251 1984 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> subtract 13 from every number in a list `a`
the BLEU scores below are for the following reference translation: 
a[:] = [(x - 13) for x in a]
distances and indices:
[[0.14827077 0.16622122 0.16866814 0.17047904 0.19483157]]
[[2180 1342 1251 2181 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> choose a random file from the directory contents of the c drive, `c:\\`
the BLEU scores below are for the following reference translation: 
random.choice(os.listdir('C:\\'))
distances and indices:
[[0.32649606 0.33590528 0.35216716 0.36466676 0.3785844 ]]
[[ 726  405 1343 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the highest element in absolute value in a numpy matrix `x`
the BLEU scores below are for the following reference translation: 
max(x.min(), x.max(), key=abs)
distances and indices:
[[0.25218865 0.25584352 0.25610828 0.2852549  0.29945537]]
[[ 726  725 1107 2180 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all urls within text `s`
the BLEU scores below are for the following reference translation: 
re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)
distances and indices:
[[0.23685642 0.2515837  0.2558299  0.29432172 0.2950823 ]]
[[1343  726   79  539 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match urls whose domain doesn't start with `t` from string `document` using regex
the BLEU scores below are for the following reference translation: 
re.findall('http://[^t][^s"]+\\.html', document)
distances and indices:
[[0.14013247 0.15083426 0.17659909 0.17945682 0.1833418 ]]
[[ 726  725 1343   53  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `mystring` considering the spaces ' '
the BLEU scores below are for the following reference translation: 
mystring.replace(' ', '! !').split('!')
distances and indices:
[[0.21369559 0.23796912 0.24878564 0.2548847  0.26348928]]
[[ 726 1343 2009  405  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open file `path` with mode 'r'
the BLEU scores below are for the following reference translation: 
open(path, 'r')
distances and indices:
[[0.09154785 0.10085727 0.10832886 0.12640922 0.13115987]]
[[ 726 2009 1343   53  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum elements at the same index in list `data`
the BLEU scores below are for the following reference translation: 
[[sum(item) for item in zip(*items)] for items in zip(*data)]
distances and indices:
[[0.16168709 0.16863367 0.17817248 0.18101245 0.2050024 ]]
[[1984 1985  757 1107  590]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a new axis to array `a`
the BLEU scores below are for the following reference translation: 
a[:, (np.newaxis)]
distances and indices:
[[0.3024388  0.31282762 0.32181004 0.32610664 0.32644632]]
[[2180 1251 1342  405 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


Process finished with exit code 0
