/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/bin/python /Users/nicolasg-chausseau/ExtractionOfAPIUsagePatterns5/CoNaLa/train_with_word2vec.py
GOOD -- no empty entry in SOquestions
boolean
[('randomlist', 0.9949836134910583), ('next', 0.9949824213981628), ('upper-cas', 0.994213342666626), ('remov', 0.9931381344795227), ('compar', 0.992841362953186), ('tuppl', 0.9925153851509094), ('start', 0.992432177066803), ('tuple/list', 0.9917047023773193), ('doe', 0.9915129542350769), ('user', 0.9914010763168335)]
list
[('l', 0.9925616383552551), ('tupl', 0.9925196170806885), ('creat', 0.9807902574539185), ('lst', 0.9758414030075073), ('interchang', 0.9708744287490845), ('mylistoftupl', 0.9682739973068237), ('a', 0.9652925133705139), ('of', 0.9636327624320984), ('contain', 0.9617765545845032), ('main_list', 0.9617099165916443)]
dictionary
"word 'dictionary' not in vocabulary"
array
[('numpi', 0.990348219871521), ('np', 0.9899715185165405), ('index', 0.9831761121749878), ('at', 0.9724288582801819), ('two', 0.9637168049812317), ("'item", 0.9572232961654663), ('greater', 0.954406201839447), ('interchang', 0.9528360366821289), ('arr', 0.9509037137031555), ('numpy.linalg.norm', 0.9487583637237549)]
sort
[('order', 0.9944442510604858), ('descend', 0.980640709400177), ("'weight", 0.9775558114051819), ('base', 0.972420334815979), ('student_tupl', 0.9704734086990356), ('ascend', 0.9696540832519531), ('my_list', 0.9671226143836975), ('xs', 0.9653429388999939), ('sum', 0.96504145860672), ('tag_weight', 0.9632853269577026)]
pip
"word 'pip' not in vocabulary"
loop
[('filter', 0.996692955493927), ('dynam', 0.995456337928772), ('keyword', 0.9951118230819702), ('lambda', 0.9945953488349915), ('django', 0.9937215447425842), ('field', 0.993719220161438), ('week', 0.9931727647781372), ('updat', 0.9927018880844116), ('option', 0.9926552772521973), ('switch', 0.992120623588562)]
integer
"word 'integer' not in vocabulary"
dirty
"word 'dirty' not in vocabulary"
/Users/nicolasg-chausseau/.conda/envs/ExtractionOfAPIUsagePatterns5/lib/python3.6/site-packages/sklearn/feature_extraction/text.py:300: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['abov', 'afterward', 'alon', 'alreadi', 'alway', 'ani', 'anoth', 'anyon', 'anyth', 'anywher', 'becam', 'becaus', 'becom', 'befor', 'besid', 'cri', 'describ', 'dure', 'els', 'elsewher', 'empti', 'everi', 'everyon', 'everyth', 'everywher', 'fifti', 'formerli', 'forti', 'ha', 'henc', 'hereaft', 'herebi', 'hi', 'howev', 'hundr', 'inde', 'latterli', 'mani', 'meanwhil', 'moreov', 'mostli', 'nobodi', 'noon', 'noth', 'nowher', 'onc', 'onli', 'otherwis', 'ourselv', 'perhap', 'pleas', 'seriou', 'sever', 'sinc', 'sincer', 'sixti', 'someon', 'someth', 'sometim', 'somewher', 'themselv', 'thenc', 'thereaft', 'therebi', 'therefor', 'thi', 'thu', 'togeth', 'twelv', 'twenti', 'veri', 'wa', 'whatev', 'whenc', 'whenev', 'wherea', 'whereaft', 'wherebi', 'wherev', 'whi', 'yourselv'] not in stop_words.
  'stop_words.' % sorted(inconsistent))
GOOD -- no empty entry in SOquestions
------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send a signal `signal.sigusr1` to the current process
the BLEU scores below are for the following reference translation: 
os.kill(os.getpid(), signal.SIGUSR1)
distances and indices:
[[0.43549693 0.4483816  0.47020426 0.47260544 0.47369662]]
[[1107 1985 1984  405 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode a hex string '4a4b4c' to utf-8.
the BLEU scores below are for the following reference translation: 
bytes.fromhex('4a4b4c').decode('utf-8')
distances and indices:
[[0.2831046  0.2843536  0.29079863 0.30380395 0.3094299 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if all elements in list `mylist` are identical
the BLEU scores below are for the following reference translation: 
all(x == myList[0] for x in myList)
distances and indices:
[[0.15932378 0.16017765 0.16160339 0.17897956 0.17912553]]
[[1492 1251 1984 1985 1170]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format number of spaces between strings `python`, `:` and `very good` to be `20`
the BLEU scores below are for the following reference translation: 
print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))
distances and indices:
[[0.18806563 0.20649578 0.21709031 0.23006624 0.23281379]]
[[2009  726 1343  405   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to convert a string from cp-1251 to utf-8?
the BLEU scores below are for the following reference translation: 
d.decode('cp1251').encode('utf8')
distances and indices:
[[0.22755753 0.25151804 0.2527011  0.25906736 0.2759667 ]]
[[1107  725 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get rid of none values in dictionary `kwargs`
the BLEU scores below are for the following reference translation: 
res = dict((k, v) for k, v in kwargs.items() if v is not None)
distances and indices:
[[0.13764292 0.14770447 0.1567782  0.1608733  0.17264679]]
[[ 725  508 1107 1108  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> capture final output of a chain of system commands `ps -ef | grep something | wc -l`
the BLEU scores below are for the following reference translation: 
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
distances and indices:
[[0.10067479 0.11786633 0.1423905  0.14357711 0.15014608]]
[[  79 1343  539  663   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate a list of strings `['a', 'b', 'c']`
the BLEU scores below are for the following reference translation: 
"""""".join(['a', 'b', 'c'])
distances and indices:
[[0.3127474  0.31495976 0.31619105 0.31908536 0.3315027 ]]
[[ 726  405  725 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find intersection data between series `s1` and series `s2`
the BLEU scores below are for the following reference translation: 
pd.Series(list(set(s1).intersection(set(s2))))
distances and indices:
[[0.2744008  0.29950154 0.30778396 0.30832022 0.34246594]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sending http headers to `client`
the BLEU scores below are for the following reference translation: 
client.send('HTTP/1.0 200 OK\r\n')
distances and indices:
[[0.13429976 0.1440558  0.14563003 0.15049206 0.15722011]]
[[  79  539  663 1343   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format a datetime string `when` to extract date only
the BLEU scores below are for the following reference translation: 
then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
distances and indices:
[[0.32982376 0.3338073  0.3362726  0.3551356  0.35660273]]
[[1343 2009   79 2004 1341]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a multi-line string `inputstring` into separate strings
the BLEU scores below are for the following reference translation: 
inputString.split('\n')
distances and indices:
[[0.19592677 0.21479589 0.22062263 0.23274747 0.23449233]]
[[ 726 1343   79  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a multi-line string ` a \n b \r\n c ` by new line character `\n`
the BLEU scores below are for the following reference translation: 
' a \n b \r\n c '.split('\n')
distances and indices:
[[0.10490038 0.10856135 0.120395   0.12341737 0.13111852]]
[[1343   79  726   11  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate elements of list `b` by a colon ":"
the BLEU scores below are for the following reference translation: 
""":""".join(str(x) for x in b)
distances and indices:
[[0.31185722 0.32551602 0.3278275  0.33234867 0.3399535 ]]
[[ 726   79 1343  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the first object from a queryset in django model `entry`
the BLEU scores below are for the following reference translation: 
Entry.objects.filter()[:1].get()
distances and indices:
[[0.39559153 0.4083592  0.4203413  0.43943956 0.45105574]]
[[1985 1107 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate sum over all rows of 2d numpy array
the BLEU scores below are for the following reference translation: 
a.sum(axis=1)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> enable warnings using action 'always'
the BLEU scores below are for the following reference translation: 
warnings.simplefilter('always')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate items of list `l` with a space ' '
the BLEU scores below are for the following reference translation: 
print(' '.join(map(str, l)))
distances and indices:
[[0.1076757  0.14133993 0.15206453 0.1730957  0.19426692]]
[[1107 1108  725  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable
the BLEU scores below are for the following reference translation: 
subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])
distances and indices:
[[0.2997506  0.3236266  0.33488184 0.3372381  0.3469551 ]]
[[1985 1984 1342  405 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how can i parse a time string containing milliseconds in it with python?
the BLEU scores below are for the following reference translation: 
time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')
distances and indices:
[[0.3317794  0.3565361  0.35979527 0.36291566 0.36333007]]
[[1341 1986 2199  413 2268]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
call bash command 'tar c my_dir | md5sum ' with pipe
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call('tar c my_dir | md5sum', shell=True)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string `my_string` with dot and comma into a float number `my_float`
the BLEU scores below are for the following reference translation: 
my_float = float(my_string.replace(',', ''))
distances and indices:
[[0.27200016 0.27478698 0.2814377  0.29548824 0.3060396 ]]
[[ 726 1107  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string `123,456.908` with dot and comma into a floating number
the BLEU scores below are for the following reference translation: 
float('123,456.908'.replace(',', ''))
distances and indices:
[[0.26307327 0.29225132 0.29273388 0.30059126 0.3063604 ]]
[[1107 1108  725  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> set pythonpath in python script.
the BLEU scores below are for the following reference translation: 
sys.path.append('/path/to/whatever')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string 'words, words, words.' using a regex '(\\w+)'
the BLEU scores below are for the following reference translation: 
re.split('(\\W+)', 'Words, words, words.')
distances and indices:
[[0.19011267 0.20564033 0.21537244 0.22520262 0.25240007]]
[[1107  725 1108  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `output.txt` in append mode
the BLEU scores below are for the following reference translation: 
file = open('Output.txt', 'a')
distances and indices:
[[0.19677582 0.19843797 0.20094538 0.21094131 0.2251469 ]]
[[2009  726 1343   79   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file "http://www.example.com/songs/mp3.mp3" over http and save to "mp3.mp3"
the BLEU scores below are for the following reference translation: 
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
distances and indices:
[[0.27496284 0.28004324 0.280689   0.30468458 0.31695396]]
[[ 405 2009  726 1343  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http and save to `file_name`
the BLEU scores below are for the following reference translation: 
u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()
distances and indices:
[[0.2408405  0.25146258 0.25926676 0.26444644 0.28506374]]
[[ 726 1343   79 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file 'http://www.example.com/' over http
the BLEU scores below are for the following reference translation: 
response = urllib.request.urlopen('http://www.example.com/')
html = response.read()
distances and indices:
[[0.25955948 0.26122716 0.27624974 0.2949811  0.3169739 ]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http
the BLEU scores below are for the following reference translation: 
r = requests.get(url)
distances and indices:
[[0.14757548 0.15152776 0.1997973  0.21805106 0.22752334]]
[[  79 1343  726 2009   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download a file `url` over http and save to "10mb"
the BLEU scores below are for the following reference translation: 
response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)
distances and indices:
[[0.2445486  0.26717284 0.2706737  0.27592278 0.27633366]]
[[ 726 1343 2009  725   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`
the BLEU scores below are for the following reference translation: 
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
distances and indices:
[[0.14792465 0.14829549 0.17746907 0.18155381 0.1864504 ]]
[[ 726 2009  405   11  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove key 'c' from dictionary `d`
the BLEU scores below are for the following reference translation: 
{i: d[i] for i in d if i != 'c'}
distances and indices:
[[0.21533923 0.2427114  0.28423685 0.29710057 0.30252668]]
[[ 405 2009  726 1343 1597]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create new dataframe object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively
the BLEU scores below are for the following reference translation: 
pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))
distances and indices:
[[0.20211557 0.22335318 0.23258543 0.24488875 0.24725865]]
[[1985 1984 1342 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `s` by space with `4` splits
the BLEU scores below are for the following reference translation: 
s.split(' ', 4)
distances and indices:
[[0.31141272 0.32978454 0.3345663  0.3375318  0.3399723 ]]
[[1985  405 1984 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read keyboard-input
the BLEU scores below are for the following reference translation: 
input('Enter your input:')
distances and indices:
[[0.13942076 0.15527363 0.16870895 0.16872361 0.17761847]]
[[  79 1343  539  663   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> enable debug mode on flask application `app`
the BLEU scores below are for the following reference translation: 
app.run(debug=True)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python save list `mylist` to file object 'save.txt'
the BLEU scores below are for the following reference translation: 
pickle.dump(mylist, open('save.txt', 'wb'))
distances and indices:
[[0.1493562  0.17685322 0.18497    0.20756434 0.21364649]]
[[1107 1108  725 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> multiply a matrix `p` with a 3d tensor `t` in scipy
the BLEU scores below are for the following reference translation: 
scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)
distances and indices:
[[0.16093367 0.18744946 0.22422652 0.22571656 0.22582744]]
[[1985 1984 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create 3d array of zeroes of size `(3,3,3)`
the BLEU scores below are for the following reference translation: 
numpy.zeros((3, 3, 3))
distances and indices:
[[0.31321177 0.34298968 0.38450643 0.3933586  0.39440772]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> cut off the last word of a sentence `content`
the BLEU scores below are for the following reference translation: 
""" """.join(content.split(' ')[:-1])
distances and indices:
[[0.36474797 0.37064126 0.37350515 0.39175525 0.3974122 ]]
[[ 726   79 1343  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert scalar `x` to array
the BLEU scores below are for the following reference translation: 
x = np.asarray(x).reshape(1, -1)[(0), :]
distances and indices:
[[0.20372185 0.2072452  0.22077118 0.22524258 0.23789397]]
[[1107 1985 1342 1984 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum all elements of nested list `l`
the BLEU scores below are for the following reference translation: 
sum(sum(i) if isinstance(i, list) else i for i in L)
distances and indices:
[[0.17388967 0.17875713 0.19363508 0.20674732 0.2189646 ]]
[[1985 1984 1107  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert hex string '470fc614' to a float number
the BLEU scores below are for the following reference translation: 
struct.unpack('!f', '470FC614'.decode('hex'))[0]
distances and indices:
[[0.20458038 0.2068773  0.20828615 0.20979607 0.21495594]]
[[ 725  405  726 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> multiple each value by `2` for all keys in a dictionary `my_dict`
the BLEU scores below are for the following reference translation: 
my_dict.update((x, y * 2) for x, y in list(my_dict.items()))
distances and indices:
[[0.21809398 0.2426097  0.245845   0.24676108 0.2516859 ]]
[[1107 1342 1985  405 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> running bash script 'sleep.sh'
the BLEU scores below are for the following reference translation: 
subprocess.call('sleep.sh', shell=True)
distances and indices:
[[0.37576598 0.37652794 0.3800251  0.39643988 0.39863768]]
[[ 405 1985 1107 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join elements of list `l` with a comma `,`
the BLEU scores below are for the following reference translation: 
""",""".join(l)
distances and indices:
[[0.48754638 0.4986516  0.50771713 0.5180116  0.5239113 ]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a comma-separated string from a list `mylist`
the BLEU scores below are for the following reference translation: 
myList = ','.join(map(str, myList))
distances and indices:
[[0.08288997 0.08664551 0.09578654 0.10876842 0.10914642]]
[[ 508  725 1108  277 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the list that contains 1 to 10
the BLEU scores below are for the following reference translation: 
list(reversed(list(range(10))))
distances and indices:
[[0.22856805 0.26882112 0.27027833 0.2887193  0.29524273]]
[[1107 1108  725  757 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove substring 'bag,' from a string 'lamp, bag, mirror'
the BLEU scores below are for the following reference translation: 
print('lamp, bag, mirror'.replace('bag,', ''))
distances and indices:
[[0.2773343  0.31166366 0.32000905 0.32179457 0.32190967]]
[[1107 1108 1342  405 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the order of words, delimited by `.`, in string `s`
the BLEU scores below are for the following reference translation: 
""".""".join(s.split('.')[::-1])
distances and indices:
[[0.3244231  0.3363269  0.33734465 0.35012293 0.35683247]]
[[ 726   79 1343  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert epoch time represented as milliseconds `s` to string using format '%y-%m-%d %h:%m:%s.%f'
the BLEU scores below are for the following reference translation: 
datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')
distances and indices:
[[0.35446957 0.37887165 0.3829491  0.38598093 0.38920206]]
[[1341 1986 2199 2268  926]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> parse milliseconds epoch time '1236472051807' to format '%y-%m-%d %h:%m:%s'
the BLEU scores below are for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))
distances and indices:
[[0.3271591  0.35000962 0.35323352 0.3577945  0.35909966]]
[[1341 1986 2199  926 2268]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the date 7 days before the current date
the BLEU scores below are for the following reference translation: 
(datetime.datetime.now() - datetime.timedelta(days=7)).date()
distances and indices:
[[0.39953715 0.4304756  0.4313327  0.43358728 0.45017976]]
[[1107  726  725 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum elements at index `column` of each list in list `data`
the BLEU scores below are for the following reference translation: 
print(sum(row[column] for row in data))
distances and indices:
[[0.17511062 0.20899536 0.21026136 0.2117047  0.2169332 ]]
[[2050 1492 1904  898 1902]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '01010101111 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('01010101111', 2)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum columns of a list `array`
the BLEU scores below are for the following reference translation: 
[sum(row[i] for row in array) for i in range(len(array[0]))]
distances and indices:
[[0.1628493  0.17698327 0.20412508 0.23260401 0.24092412]]
[[1985 1984 1251 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode binary string 'your string' to base64 code
the BLEU scores below are for the following reference translation: 
base64.b64encode(bytes('your string', 'utf-8'))
distances and indices:
[[0.17180961 0.19104624 0.21538988 0.22200237 0.22255021]]
[[ 726  725   11 1107 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine list of dictionaries `dicts` with the same keys in each list to a single dictionary
the BLEU scores below are for the following reference translation: 
dict((k, [d[k] for d in dicts]) for k in dicts[0])
distances and indices:
[[0.09862012 0.10406292 0.10472011 0.10599809 0.10763363]]
[[1170  590  898 1889  393]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`
the BLEU scores below are for the following reference translation: 
{k: [d[k] for d in dicts] for k in dicts[0]}
distances and indices:
[[0.07412633 0.07500245 0.08324372 0.08658563 0.08758423]]
[[2259  841 1846  317 1361]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
gener all permut of list ` [ 1 , 2 , 3 ] ` and list ` [ 4 , 5 , 6 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(list(itertools.product([1, 2, 3], [4, 5, 6])))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
remov adjac duplic element from a list ` [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sum all element of two-dimens list ` [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set circl marker on plot for individu point defin in list ` [ 1,2,3,4,5,6,7,8,9,10 ] ` creat by rang ( 10 )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.plot(list(range(10)), linestyle='--', marker='o', color='b')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add row ` [ ' 8/19/2014 ' , 'jun ' , 'fli ' , '98765 ' ] ` to datafram ` df `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i get the url parameter in a flask view
the BLEU scores below are for the following reference translation: 
request.args['myParam']
distances and indices:
[[0.2805592  0.30487671 0.33885294 0.3457612  0.38287875]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> identify duplicate values in list `mylist`
the BLEU scores below are for the following reference translation: 
[k for k, v in list(Counter(mylist).items()) if v > 1]
distances and indices:
[[0.15246715 0.15646043 0.16954806 0.17039388 0.17422082]]
[[ 508  757 1107  590  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert directory 'apps' into directory `__file__`
the BLEU scores below are for the following reference translation: 
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))
distances and indices:
[[0.38231742 0.39330184 0.40656817 0.41952637 0.42676467]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> modify sys.path for python module `subdir`
the BLEU scores below are for the following reference translation: 
sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
distances and indices:
[[0.43146986 0.44910198 0.45527658 0.46745738 0.4697737 ]]
[[1107 1985  405 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert a 'none' value into a sqlite3 table.
the BLEU scores below are for the following reference translation: 
db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
distances and indices:
[[0.2082727  0.22703162 0.23731725 0.24609193 0.27156833]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> flatten list `list_of_menuitems`
the BLEU scores below are for the following reference translation: 
[image for menuitem in list_of_menuitems for image in menuitem]
distances and indices:
[[0.09424651 0.0946378  0.11415265 0.11453865 0.1154101 ]]
[[ 796 1842  168 1022  750]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
remov 20 symbol in front of ' . ' in string 'unique12345678901234567890.mkv '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('.{20}(.mkv)', '\\1', 'unique12345678901234567890.mkv')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
run app ` app ` on host '192.168.0.58 ' and port 9000 in flask
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
app.run(host='192.168.0.58', port=9000, debug=False)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ' ( 1,2,3,4 ) ' to a tupl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ast.literal_eval('(1,2,3,4)')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append elements of a set `b` to a list `a`
the BLEU scores below are for the following reference translation: 
a.extend(b)
distances and indices:
[[0.30781293 0.3337481  0.35625848 0.35888505 0.36667404]]
[[1985 1984 1342 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append elements of a set to a list in python
the BLEU scores below are for the following reference translation: 
a.extend(list(b))
distances and indices:
[[0.29695842 0.32141417 0.32141817 0.34635717 0.35774824]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write the data of dataframe `df` into text file `np.txt`
the BLEU scores below are for the following reference translation: 
np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')
distances and indices:
[[0.2234515  0.3316164  0.34050572 0.38114113 0.38124597]]
[[ 405 1597 2009 2161  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 7 is in ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
(7 in a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write content of dataframe `df` into text file 'c:\\data\\pandas.txt'
the BLEU scores below are for the following reference translation: 
df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')
distances and indices:
[[0.28750396 0.36978754 0.38593984 0.39623895 0.39926898]]
[[ 405 1342 1985 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `x` by last occurrence of character `-`
the BLEU scores below are for the following reference translation: 
print(x.rpartition('-')[0])
distances and indices:
[[0.15951484 0.18688738 0.19226256 0.20651136 0.2084698 ]]
[[1107 1342 1108  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the last part of a string before the character '-'
the BLEU scores below are for the following reference translation: 
print(x.rsplit('-', 1)[0])
distances and indices:
[[0.17524128 0.17950977 0.18130001 0.19351852 0.19380522]]
[[1107 1985 1342 1984 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> upload file using ftp
the BLEU scores below are for the following reference translation: 
ftp.storlines('STOR ' + filename, open(filename, 'r'))
distances and indices:
[[0.10550915 0.10917946 0.10987413 0.11496302 0.11535715]]
[[  11 1343  726   79 1288]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add one to the hidden web element with id 'xyz' with selenium python script
the BLEU scores below are for the following reference translation: 
browser.execute_script("document.getElementById('XYZ').value+='1'")
distances and indices:
[[0.32293254 0.34262213 0.35449907 0.3571942  0.3616386 ]]
[[ 726  725 1107 1343 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`
the BLEU scores below are for the following reference translation: 
np.maximum([2, 3, 4], [1, 5, 2])
distances and indices:
[[0.24676047 0.27688894 0.3352098  0.34817517 0.37730053]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a list `l` and move first 3 elements to the end of the list
the BLEU scores below are for the following reference translation: 
print(l[3:] + l[:3])
distances and indices:
[[0.12937748 0.14531311 0.15735333 0.18876745 0.1899651 ]]
[[1985 1984 1107 1251 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over files in directory '.'
the BLEU scores below are for the following reference translation: 
for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass
distances and indices:
[[0.18038127 0.18302538 0.18671076 0.20951676 0.21239701]]
[[ 726 1343   79 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over files in directory `source`
the BLEU scores below are for the following reference translation: 
for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass
distances and indices:
[[0.1223086  0.1401112  0.1787853  0.1787938  0.18489264]]
[[  79 1343  539  663  358]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a random list of integers
the BLEU scores below are for the following reference translation: 
[int(1000 * random.random()) for i in range(10000)]
distances and indices:
[[0.18342875 0.20738593 0.21598347 0.23580357 0.24651228]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> using %f with strftime() in python to get microseconds
the BLEU scores below are for the following reference translation: 
datetime.datetime.now().strftime('%H:%M:%S.%f')
distances and indices:
[[0.324611   0.3272203  0.33999965 0.34696782 0.35417813]]
[[1343   79 2009 1341  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> google app engine execute gql query 'select * from schedule where station = $1' with parameter `foo.key()`
the BLEU scores below are for the following reference translation: 
db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())
distances and indices:
[[0.3135911  0.31470892 0.324359   0.3379026  0.3473417 ]]
[[ 726 1107  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter rows in pandas starting with alphabet 'f' using regular expression.
the BLEU scores below are for the following reference translation: 
df.b.str.contains('^f')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a 2 dimensional list `tab` as a table with delimiters
the BLEU scores below are for the following reference translation: 
print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
distances and indices:
[[0.1902634  0.19167946 0.19533387 0.20319189 0.20574132]]
[[1842  796  725  508  168]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
remov 20 symbol in front of ' . ' in string 'unique12345678901234567890.mkv '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('.{20}(.mkv)', '\\1', 'unique12345678901234567890.mkv')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> pandas: delete rows in dataframe `df` based on multiple columns values
the BLEU scores below are for the following reference translation: 
df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()
distances and indices:
[[0.32076156 0.3271026  0.3483803  0.3602045  0.36296576]]
[[1107 1985 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format the variables `self.goals` and `self.penalties` using string formatting
the BLEU scores below are for the following reference translation: 
"""({:d} goals, ${:d})""".format(self.goals, self.penalties)
distances and indices:
[[0.37450552 0.37652713 0.38443282 0.39773616 0.42658725]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format string "({} goals, ${})" with variables `goals` and `penalties`
the BLEU scores below are for the following reference translation: 
"""({} goals, ${})""".format(self.goals, self.penalties)
distances and indices:
[[0.447156   0.45158756 0.45242774 0.47437283 0.48697358]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> format string "({0.goals} goals, ${0.penalties})"
the BLEU scores below are for the following reference translation: 
"""({0.goals} goals, ${0.penalties})""".format(self)
distances and indices:
[[0.46733892 0.46784085 0.46891332 0.49537498 0.5095433 ]]
[[  79 1343  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of lists `l` to list of integers
the BLEU scores below are for the following reference translation: 
[int(''.join(str(d) for d in x)) for x in L]
distances and indices:
[[0.06260768 0.08882291 0.13256454 0.13316634 0.1333513 ]]
[[1107 1108  725  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine elements of each list in list `l` into digits of a single integer
the BLEU scores below are for the following reference translation: 
[''.join(str(d) for d in x) for x in L]
distances and indices:
[[0.07451531 0.08773247 0.10091546 0.11175669 0.11275941]]
[[1107 1108 1342 2180  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a list of lists `l` to list of integers
the BLEU scores below are for the following reference translation: 
L = [int(''.join([str(y) for y in x])) for x in L]
distances and indices:
[[0.05774429 0.09791592 0.11128315 0.12157002 0.13680156]]
[[1107 1108 1342  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write the elements of list `lines` concatenated by special character '\n' to file `myfile`
the BLEU scores below are for the following reference translation: 
myfile.write('\n'.join(lines))
distances and indices:
[[0.38465896 0.4016844  0.40348905 0.41712353 0.42246932]]
[[ 726  725 1107 1343   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing an element from a list based on a predicate 'x' or 'n'
the BLEU scores below are for the following reference translation: 
[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]
distances and indices:
[[0.27820915 0.28065673 0.2831325  0.28317082 0.29088348]]
[[1251 1985 1984 1492 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove duplicate words from a string `text` using regex
the BLEU scores below are for the following reference translation: 
text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)
distances and indices:
[[0.32275492 0.34530944 0.35316882 0.35462785 0.3607086 ]]
[[ 726  725 1343 1107   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count non zero values in each column in pandas data frame
the BLEU scores below are for the following reference translation: 
df.astype(bool).sum(axis=1)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> search for string that matches regular expression pattern '(?<!distillr)\\\\acrotray\\.exe' in string 'c:\\somedir\\acrotray.exe'
the BLEU scores below are for the following reference translation: 
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
distances and indices:
[[0.31386867 0.3452397  0.35532174 0.35556322 0.36461788]]
[[ 405  726 1107 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string 'qh qd jc kd js' into a list on white spaces
the BLEU scores below are for the following reference translation: 
"""QH QD JC KD JS""".split()
distances and indices:
[[0.53074324 0.54653627 0.5712133  0.57393855 0.5761089 ]]
[[  79 1343  539  358 1200]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> search for occurrences of regex pattern '>.*<' in xml string `line`
the BLEU scores below are for the following reference translation: 
print(re.search('>.*<', line).group(0))
distances and indices:
[[0.2443083  0.25483242 0.2678254  0.2831788  0.28404427]]
[[ 726  725 1107   11 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> erase all the contents of a file `filename`
the BLEU scores below are for the following reference translation: 
open(filename, 'w').close()
distances and indices:
[[0.1430585  0.14884111 0.1665202  0.17159526 0.19529907]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a string into datetime using the format '%y-%m-%d %h:%m:%s.%f'
the BLEU scores below are for the following reference translation: 
datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')
distances and indices:
[[0.34724513 0.37366647 0.37777218 0.3792851  0.38059026]]
[[1341 1986 2199 2268  413]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
throw a runtim error with messag 'specif messag '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
raise RuntimeError('specific message')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
call bash command 'tar c my_dir | md5sum ' with pipe
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call('tar c my_dir | md5sum', shell=True)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the index of a list with the first element equal to '332' within the list of lists `thelist`
the BLEU scores below are for the following reference translation: 
[index for index, item in enumerate(thelist) if item[0] == '332']
distances and indices:
[[0.191572   0.19235927 0.1931481  0.19564715 0.20723009]]
[[1251 1984 1492 1170 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> lower a string `text` and remove non-alphanumeric characters aside from space
the BLEU scores below are for the following reference translation: 
re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()
distances and indices:
[[0.3074756  0.34353483 0.34506303 0.35016465 0.35344625]]
[[1107 1108 1985 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all non-alphanumeric characters except space from a string `text` and lower it
the BLEU scores below are for the following reference translation: 
re.sub('(?!\\s)[\\W_]', '', text).lower().strip()
distances and indices:
[[0.34161013 0.35757026 0.36066464 0.37060797 0.388473  ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> subscript text 'h20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
the BLEU scores below are for the following reference translation: 
plt.plot(x, y, label='$H_2O$')
distances and indices:
[[0.2043543  0.27028164 0.27110693 0.286996   0.30569956]]
[[ 405 1107 1342 1108 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop over a list `mylist` if sublists length equals 3
the BLEU scores below are for the following reference translation: 
[x for x in mylist if len(x) == 3]
distances and indices:
[[0.15350273 0.15703899 0.1895044  0.21593475 0.22922373]]
[[1985 1984 1251 1492 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> initialize a list `lst` of 100 objects object()
the BLEU scores below are for the following reference translation: 
lst = [Object() for _ in range(100)]
distances and indices:
[[0.1109511  0.15146698 0.15540044 0.15933277 0.16791977]]
[[ 725  726 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list `lst` containing 100 instances of object `object`
the BLEU scores below are for the following reference translation: 
lst = [Object() for i in range(100)]
distances and indices:
[[0.12136097 0.13307993 0.14571841 0.1787933  0.18056275]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the content of child tag with`href` attribute whose parent has css `someclass`
the BLEU scores below are for the following reference translation: 
self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'date_time' in both dataframes
the BLEU scores below are for the following reference translation: 
df1.merge(df2, on='Date_Time')
distances and indices:
[[0.20001063 0.2139611  0.22569491 0.22934774 0.23273966]]
[[1342 1251 1492 2180 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> use `%s` operator to print variable values `str1` inside a string
the BLEU scores below are for the following reference translation: 
'first string is: %s, second one is: %s' % (str1, 'geo.tif')
distances and indices:
[[0.21021359 0.21507515 0.21895699 0.2436708  0.2506965 ]]
[[1343 2009   79 2004  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string by a delimiter in python
the BLEU scores below are for the following reference translation: 
[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]
distances and indices:
[[0.32914576 0.33658174 0.34298933 0.34776562 0.35297585]]
[[1107  726  725  405 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if directory `directory ` exists and create it if necessary
the BLEU scores below are for the following reference translation: 
if (not os.path.exists(directory)):
    os.makedirs(directory)
distances and indices:
[[0.36047724 0.36575776 0.36727628 0.3981004  0.39886132]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if a directory `path` exists and create it if necessary
the BLEU scores below are for the following reference translation: 
try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
distances and indices:
[[0.3409518  0.34360424 0.34750816 0.36902824 0.39113536]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace a separate word 'h3' by 'h1' in a string 'text'
the BLEU scores below are for the following reference translation: 
re.sub('\\bH3\\b', 'H1', text)
distances and indices:
[[0.22247963 0.22939308 0.24721321 0.24788426 0.26706183]]
[[1107  405 1342 1108  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> substitute ascii letters in string 'aas30dsa20' with empty string ''
the BLEU scores below are for the following reference translation: 
re.sub('\\D', '', 'aas30dsa20')
distances and indices:
[[0.31914186 0.32101372 0.34633988 0.349341   0.35645652]]
[[ 405 1107 1342 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get digits only from a string `aas30dsa20` using lambda function
the BLEU scores below are for the following reference translation: 
"""""".join([x for x in 'aas30dsa20' if x.isdigit()])
distances and indices:
[[0.34829593 0.3554344  0.37898237 0.37991655 0.38054225]]
[[ 726  725   11 1343   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> access a tag called "name" in beautifulsoup `soup`
the BLEU scores below are for the following reference translation: 
print(soup.find('name').string)
distances and indices:
[[0.17893043 0.2115898  0.2189676  0.2253221  0.22634482]]
[[ 726  725 1343 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a dictionary `records` of key-value pairs in pymongo cursor `cursor`
the BLEU scores below are for the following reference translation: 
records = dict((record['_id'], record) for record in cursor)
distances and indices:
[[0.11560258 0.1176968  0.12279958 0.12419465 0.13285692]]
[[663 539 891  80 540]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create new matrix object  by concatenating data from matrix a and matrix b
the BLEU scores below are for the following reference translation: 
np.concatenate((A, B))
distances and indices:
[[0.34777555 0.3728012  0.37288347 0.3890199  0.39956692]]
[[1985 1984 1107 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concat two matrices `a` and `b` in numpy
the BLEU scores below are for the following reference translation: 
np.vstack((A, B))
distances and indices:
[[0.34777555 0.3728012  0.37288347 0.3890199  0.39956692]]
[[1985 1984 1107 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the characters count in a file `filepath`
the BLEU scores below are for the following reference translation: 
os.stat(filepath).st_size
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of item "a" in list `l`
the BLEU scores below are for the following reference translation: 
l.count('a')
distances and indices:
[[0.36817944 0.41104728 0.4282118  0.4335383  0.43646213]]
[[ 405 1107 1342 1985 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of items in list `l`
the BLEU scores below are for the following reference translation: 
dict(((x, l.count(x)) for x in set(l)))
distances and indices:
[[0.17917843 0.18141866 0.19625703 0.2119914  0.22288609]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the occurrences of item "b" in list `l`
the BLEU scores below are for the following reference translation: 
l.count('b')
distances and indices:
[[0.31294143 0.33394432 0.34578347 0.35324568 0.3636884 ]]
[[ 405 1985 1342 1984 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> copy file `srcfile` to directory `dstdir`
the BLEU scores below are for the following reference translation: 
shutil.copy(srcfile, dstdir)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the key associated with the largest value in dictionary `x` whilst key is non-zero value
the BLEU scores below are for the following reference translation: 
max(k for k, v in x.items() if v != 0)
distances and indices:
[[0.15055817 0.15108892 0.15121944 0.15143096 0.16647384]]
[[ 508 1842  796  725  750]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ' ( 1,2,3,4 ) ' to a tupl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ast.literal_eval('(1,2,3,4)')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the largest key whose not associated with value of 0 in dictionary `x`
the BLEU scores below are for the following reference translation: 
(k for k, v in x.items() if v != 0)
distances and indices:
[[0.13231859 0.16115852 0.17063718 0.17192546 0.18425842]]
[[ 725  508 1107 1108  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the largest key in a dictionary `x` with non-zero value
the BLEU scores below are for the following reference translation: 
max(k for k, v in x.items() if v != 0)
distances and indices:
[[0.15055817 0.15108892 0.15121944 0.15143096 0.16647384]]
[[ 508 1842  796  725  750]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ' ( 1,2,3,4 ) ' to a tupl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ast.literal_eval('(1,2,3,4)')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> put the curser at beginning of the file
the BLEU scores below are for the following reference translation: 
file.seek(0)
distances and indices:
[[0.3001543  0.30896458 0.32299492 0.33444825 0.34734598]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`
the BLEU scores below are for the following reference translation: 
df['c'] = np.where(df['a'].isnull, df['b'], df['a'])
distances and indices:
[[0.28897053 0.2892396  0.29469967 0.30641067 0.30943465]]
[[1342  405 1251 1985 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove key 'ele' from dictionary `d`
the BLEU scores below are for the following reference translation: 
del d['ele']
distances and indices:
[[0.21940759 0.25643903 0.26118892 0.26144087 0.26506004]]
[[ 405 1342 2181 1597 1190]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 3 is insid list ` [ 1 , 2 , 3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
3 in [1, 2, 3]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> update datetime field in `mymodel` to be the existing `timestamp` plus 100 years
the BLEU scores below are for the following reference translation: 
MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))
distances and indices:
[[0.3294121  0.34763378 0.35512072 0.36127648 0.36744827]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> merge list `['it']` and list `['was']` and list `['annoying']` into one list
the BLEU scores below are for the following reference translation: 
['it'] + ['was'] + ['annoying']
distances and indices:
[[0.22250897 0.23706608 0.24266964 0.2484722  0.25223437]]
[[1985 1342 1984 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> increment a value with leading zeroes in a number `x`
the BLEU scores below are for the following reference translation: 
str(int(x) + 1).zfill(len(x))
distances and indices:
[[0.22364827 0.26156065 0.2717385  0.2771907  0.28148904]]
[[1107 1108  725 1342 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if a pandas dataframe `df`'s index is sorted
the BLEU scores below are for the following reference translation: 
all(df.index[:-1] <= df.index[1:])
distances and indices:
[[0.20782892 0.23711623 0.24204177 0.2592472  0.260493  ]]
[[1107 1108  725 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple `t` to list
the BLEU scores below are for the following reference translation: 
list(t)
distances and indices:
[[0.16099145 0.16196923 0.18083389 0.19356333 0.19688712]]
[[1107  725 1108  508  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `t` to tuple
the BLEU scores below are for the following reference translation: 
tuple(l)
distances and indices:
[[0.27108395 0.27336437 0.317165   0.32269424 0.3229723 ]]
[[1984 1985  757 1251 1170]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple `level1` to list
the BLEU scores below are for the following reference translation: 
level1 = map(list, level1)
distances and indices:
[[0.10535    0.11343426 0.11578085 0.12889653 0.13459657]]
[[ 725  508 1108 1107  277]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send the output of pprint object `dataobject` to file `logfile`
the BLEU scores below are for the following reference translation: 
pprint.pprint(dataobject, logFile)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get index of rows in column 'boolcol'
the BLEU scores below are for the following reference translation: 
df.loc[df['BoolCol']]
distances and indices:
[[0.28066012 0.29324764 0.3024722  0.31935945 0.32580134]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing the indexes of rows where the value of column 'boolcol' in dataframe `df` are equal to true
the BLEU scores below are for the following reference translation: 
df.iloc[np.flatnonzero(df['BoolCol'])]
distances and indices:
[[0.24192266 0.26547474 0.28671008 0.28681776 0.31989634]]
[[1985 1984 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get list of indexes of rows where column 'boolcol' values match true
the BLEU scores below are for the following reference translation: 
df[df['BoolCol'] == True].index.tolist()
distances and indices:
[[0.17435504 0.18548968 0.19828713 0.19893207 0.2009832 ]]
[[1251 1342 1492 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get index of rows in dataframe `df` which column 'boolcol' matches value true
the BLEU scores below are for the following reference translation: 
df[df['BoolCol']].index.tolist()
distances and indices:
[[0.25365153 0.26080617 0.26434287 0.26630393 0.29176745]]
[[1985 1251 1342 1984 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> change working directory to the directory `owd`
the BLEU scores below are for the following reference translation: 
os.chdir(owd)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert data from a string `testfield` to sqlite db `c`
the BLEU scores below are for the following reference translation: 
c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
distances and indices:
[[0.23444963 0.23474829 0.24426413 0.26419196 0.2727806 ]]
[[ 726  725 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode string "\\x89\\n" into a normal string
the BLEU scores below are for the following reference translation: 
"""\\x89\\n""".decode('string_escape')
distances and indices:
[[0.5875992  0.59919274 0.6241443  0.6339934  0.63965434]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a raw string `raw_string` into a normal string
the BLEU scores below are for the following reference translation: 
raw_string.decode('string_escape')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a raw string `raw_byte_string` into a normal string
the BLEU scores below are for the following reference translation: 
raw_byte_string.decode('unicode_escape')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `s` with into all strings of repeated characters
the BLEU scores below are for the following reference translation: 
[m.group(0) for m in re.finditer('(\\d)\\1*', s)]
distances and indices:
[[0.31007993 0.31416857 0.3147451  0.3299378  0.33417547]]
[[ 405  726 1107  725 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none
the BLEU scores below are for the following reference translation: 
plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')
distances and indices:
[[0.21031167 0.24421008 0.24576062 0.26954186 0.27081755]]
[[1107 1108  725  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> do a scatter plot with empty circles
the BLEU scores below are for the following reference translation: 
plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')
distances and indices:
[[0.12676777 0.14613096 0.14910437 0.18398875 0.18495984]]
[[1107 1108  725  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove a div with a id `main-content` using beautifulsoup
the BLEU scores below are for the following reference translation: 
soup.find('div', id='main-content').decompose()
distances and indices:
[[0.2345236  0.2550087  0.25778234 0.26231182 0.26991653]]
[[1107  725 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter rows containing key word `ball` in column `ids`
the BLEU scores below are for the following reference translation: 
df[df['ids'].str.contains('ball')]
distances and indices:
[[0.21723825 0.21941534 0.22350124 0.25304526 0.26000404]]
[[1492 1251 1342 2180 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert index at level 0 into a column in dataframe `df`
the BLEU scores below are for the following reference translation: 
df.reset_index(level=0, inplace=True)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add indexes in a data frame `df` to a column `index1`
the BLEU scores below are for the following reference translation: 
df['index1'] = df.index
distances and indices:
[[0.17555511 0.19554871 0.22210853 0.22811477 0.2286722 ]]
[[ 405 1342 1251 2181 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert pandas index in a dataframe to columns
the BLEU scores below are for the following reference translation: 
df.reset_index(level=['tick', 'obs'])
distances and indices:
[[0.30398077 0.32940578 0.34476858 0.35481942 0.35684943]]
[[1985 1984 1342  405 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get reverse of list items from list 'b' using extended slicing
the BLEU scores below are for the following reference translation: 
[x[::-1] for x in b]
distances and indices:
[[0.13287733 0.14193182 0.14497225 0.14731656 0.1637352 ]]
[[1251 1342 1985 1984 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join each element in array `a` with element at the same index in array `b` as a tuple
the BLEU scores below are for the following reference translation: 
np.array([zip(x, y) for x, y in zip(a, b)])
distances and indices:
[[0.13091175 0.14008588 0.14173998 0.1530454  0.16967563]]
[[1985 1342 1984 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> zip two 2-d arrays `a` and `b`
the BLEU scores below are for the following reference translation: 
np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)
distances and indices:
[[0.3543903  0.36766466 0.38876164 0.3937862  0.39402634]]
[[1107 1985 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `list_of_ints` into a comma separated string
the BLEU scores below are for the following reference translation: 
""",""".join([str(i) for i in list_of_ints])
distances and indices:
[[0.3797189  0.38772437 0.39587468 0.4273913  0.42807245]]
[[  79 1343  726   11  539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send a post request with raw data `data` and basic authentication with `username` and `password`
the BLEU scores below are for the following reference translation: 
requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))
distances and indices:
[[0.17395101 0.19336616 0.21196271 0.21515314 0.218345  ]]
[[ 726  725   11 1343 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find last occurrence of character '}' in string "abcd}def}"
the BLEU scores below are for the following reference translation: 
'abcd}def}'.rfind('}')
distances and indices:
[[0.28702176 0.29139808 0.2929083  0.31975022 0.32618612]]
[[ 405  726 2009 1343  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> iterate ove list `[1, 2, 3]` using list comprehension
the BLEU scores below are for the following reference translation: 
print([item for item in [1, 2, 3]])
distances and indices:
[[0.12692001 0.15011194 0.21826936 0.24741024 0.25624266]]
[[1985 1984 1251 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples
the BLEU scores below are for the following reference translation: 
[(x['x'], x['y']) for x in d]
distances and indices:
[[0.22088264 0.2255159  0.22631335 0.22905037 0.24213777]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the filename without the extension from file 'hemanth.txt'
the BLEU scores below are for the following reference translation: 
print(os.path.splitext(os.path.basename('hemanth.txt'))[0])
distances and indices:
[[0.30360416 0.32085308 0.34079635 0.34094402 0.34391364]]
[[1107 1985 1342 1984 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it
the BLEU scores below are for the following reference translation: 
dict(x[i:i + 2] for i in range(0, len(x), 2))
distances and indices:
[[0.17040491 0.19196968 0.19907643 0.20862827 0.21846767]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing flattened list `[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]`
the BLEU scores below are for the following reference translation: 
values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
distances and indices:
[[0.20338687 0.22556585 0.24379297 0.24586512 0.25463423]]
[[ 405 1342 1251 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select rows in a dataframe `df` column 'closing_price' between two values 99 and 101
the BLEU scores below are for the following reference translation: 
df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
distances and indices:
[[0.19182587 0.20450228 0.20612554 0.20682327 0.2095031 ]]
[[ 725  726 1108  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all occurences of newlines `\n` with `<br>` in dataframe `df`
the BLEU scores below are for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
distances and indices:
[[0.19115026 0.19205877 0.19413832 0.20149383 0.22539932]]
[[ 726 1343 2009   79   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`
the BLEU scores below are for the following reference translation: 
df.replace({'\n': '<br>'}, regex=True)
distances and indices:
[[0.19115026 0.19205877 0.19413832 0.20149383 0.22539932]]
[[ 726 1343 2009   79   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing each two adjacent letters in string `word` as its elements
the BLEU scores below are for the following reference translation: 
[(x + y) for x, y in zip(word, word[1:])]
distances and indices:
[[0.08186615 0.11471908 0.11934257 0.13703033 0.14072372]]
[[1107 1342 1108  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of pairs from a string `word` using lambda function
the BLEU scores below are for the following reference translation: 
list(map(lambda x, y: x + y, word[:-1], word[1:]))
distances and indices:
[[0.04545673 0.06499141 0.07568871 0.10385594 0.11027727]]
[[1108 1107  725  757 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract a url from a string `mystring`
the BLEU scores below are for the following reference translation: 
print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))
distances and indices:
[[0.24676386 0.25849593 0.2617307  0.28370464 0.2848961 ]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all special characters, punctuation and spaces from a string `mystring` using regex
the BLEU scores below are for the following reference translation: 
re.sub('[^A-Za-z0-9]+', '', mystring)
distances and indices:
[[0.21451668 0.23412488 0.24012592 0.251632   0.26509804]]
[[1107  725 1108  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a datetimeindex containing 13 periods of the second friday of each month starting from date '2016-01-01'
the BLEU scores below are for the following reference translation: 
pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)
distances and indices:
[[0.32879895 0.33726248 0.3549551  0.3589333  0.36238956]]
[[ 405 1985 1342 1984 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create multidimensional array `matrix` with 3 rows and 2 columns in python
the BLEU scores below are for the following reference translation: 
matrix = [[a, b], [c, d], [e, f]]
distances and indices:
[[0.1311767  0.13568114 0.13843419 0.1404596  0.18004456]]
[[1985 1342 1984 1251 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace spaces with underscore
the BLEU scores below are for the following reference translation: 
mystring.replace(' ', '_')
distances and indices:
[[0.18279628 0.23266    0.23837128 0.2438756  0.24468543]]
[[ 405 1107 1108 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get an absolute file path of file 'mydir/myfile.txt'
the BLEU scores below are for the following reference translation: 
os.path.abspath('mydir/myfile.txt')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `my_string` on white spaces
the BLEU scores below are for the following reference translation: 
""" """.join(my_string.split())
distances and indices:
[[0.5657371  0.57453185 0.5873563  0.6151492  0.6184231 ]]
[[  79 1343  726  539   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get filename without extension from file `filename`
the BLEU scores below are for the following reference translation: 
os.path.splitext(filename)[0]
distances and indices:
[[0.13486135 0.15943262 0.16567221 0.16993783 0.17467318]]
[[1107  757 1342 1108 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list containing the sum of each element `i` in list `l` plus the previous elements
the BLEU scores below are for the following reference translation: 
[sum(l[:i]) for i, _ in enumerate(l)]
distances and indices:
[[0.10916007 0.11687937 0.14172421 0.15407014 0.15482558]]
[[1985 1984 1107 1251  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `docs/src/scripts/temp` by `/` keeping `/` in the result
the BLEU scores below are for the following reference translation: 
"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')
distances and indices:
[[0.37188846 0.3764961  0.38206735 0.41190127 0.41682813]]
[[  79 1343  726   11 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> shuffle columns of an numpy array 'r'
the BLEU scores below are for the following reference translation: 
np.random.shuffle(np.transpose(r))
distances and indices:
[[0.24650516 0.2615072  0.26473558 0.27150634 0.29884148]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> copy all values in a column 'b' to a new column 'd' in a pandas data frame 'df'
the BLEU scores below are for the following reference translation: 
df['D'] = df['B']
distances and indices:
[[0.29485345 0.31466544 0.32266903 0.33374122 0.33470246]]
[[ 405 1342 1251 1492 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find a value within nested json 'data' where the key inside another key 'b' is unknown.
the BLEU scores below are for the following reference translation: 
list(data['A']['B'].values())[0]['maindata'][0]['Info']
distances and indices:
[[0.19859996 0.21480158 0.22203794 0.22421323 0.26411074]]
[[1985 1984 1342 1251 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check characters of string `string` are true predication of function `predicate`
the BLEU scores below are for the following reference translation: 
all(predicate(x) for x in string)
distances and indices:
[[0.12453182 0.17007335 0.17016041 0.18453592 0.18684606]]
[[1107 1108  757 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> determine number of files on a drive with python
the BLEU scores below are for the following reference translation: 
os.statvfs('/').f_files - os.statvfs('/').f_ffree
distances and indices:
[[0.1598504  0.17953369 0.18915416 0.19620903 0.20121646]]
[[ 726  725   11 2009 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to get a single result from a sqlite query in python?
the BLEU scores below are for the following reference translation: 
cursor.fetchone()[0]
distances and indices:
[[0.25376946 0.28246585 0.32225525 0.32285732 0.3248344 ]]
[[1985 1984 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert string `user_input` into a list of integers `user_list`
the BLEU scores below are for the following reference translation: 
user_list = [int(number) for number in user_input.split(',')]
distances and indices:
[[0.15642194 0.19625384 0.20784728 0.2182325  0.22032051]]
[[1107 1108 1342  725  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of integers by splitting  a string `user` with comma
the BLEU scores below are for the following reference translation: 
[int(s) for s in user.split(',')]
distances and indices:
[[0.2501573  0.25257054 0.2752094  0.28732407 0.28908312]]
[[ 405 1107 1108  726  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting a python list by two criteria
the BLEU scores below are for the following reference translation: 
sorted(list, key=lambda x: (x[0], -x[1]))
distances and indices:
[[0.08640578 0.10423289 0.13274045 0.14244826 0.17166315]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of objects `ut`, based on a function `cmpfun` in descending order
the BLEU scores below are for the following reference translation: 
ut.sort(key=cmpfun, reverse=True)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse list `ut` based on the `count` attribute of each object
the BLEU scores below are for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
distances and indices:
[[0.27487448 0.28113946 0.29858178 0.30219993 0.31136584]]
[[ 405 1107 1342 1985 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of objects `ut` in reverse order by their `count` property
the BLEU scores below are for the following reference translation: 
ut.sort(key=lambda x: x.count, reverse=True)
distances and indices:
[[0.27487448 0.28113946 0.29858178 0.30219993 0.31136584]]
[[ 405 1107 1342 1985 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button 'send' with selenium
the BLEU scores below are for the following reference translation: 
driver.find_element_by_partial_link_text('Send').click()
distances and indices:
[[0.45237854 0.4700339  0.4805342  0.48592228 0.49336436]]
[[1107  405 1985 1108  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button having text `send inmail` with selenium
the BLEU scores below are for the following reference translation: 
driver.findElement(By.linkText('Send InMail')).click()
distances and indices:
[[0.46248168 0.4873785  0.49110195 0.49676317 0.5026481 ]]
[[1107  405 1985 1108  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> click a href button with text 'send inmail' with selenium
the BLEU scores below are for the following reference translation: 
driver.find_element_by_link_text('Send InMail').click()
distances and indices:
[[0.45237854 0.4700339  0.4805342  0.48592228 0.49336436]]
[[1107  405 1985 1108  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> cast an int `i` to a string and concat to string 'me'
the BLEU scores below are for the following reference translation: 
'ME' + str(i)
distances and indices:
[[0.25196934 0.26523674 0.27760154 0.2916891  0.29345337]]
[[ 726  725 1107   11 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting data in dataframe pandas
the BLEU scores below are for the following reference translation: 
df.sort_values(['System_num', 'Dis'])
distances and indices:
[[0.30398077 0.32940578 0.34476858 0.35481942 0.35684943]]
[[1985 1984 1342  405 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'
the BLEU scores below are for the following reference translation: 
open('outfile', 'w').write('#test firstline\n' + open('infile').read())
distances and indices:
[[0.20155948 0.21331549 0.22199257 0.22327885 0.24015298]]
[[ 726 1343   79 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list `l` by length of value in tuple
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda t: len(t[1]), reverse=True)
distances and indices:
[[0.16945048 0.21216144 0.22619732 0.22814062 0.23285627]]
[[1107 1108 1342 1985  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `s` by words that ends with 'd'
the BLEU scores below are for the following reference translation: 
re.findall('\\b(\\w+)d\\b', s)
distances and indices:
[[0.42223224 0.4315528  0.44292817 0.44350803 0.45444757]]
[[ 726 1107  405  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> return `true` if string `foobarrrr` contains regex `ba[rzd]`
the BLEU scores below are for the following reference translation: 
bool(re.search('ba[rzd]', 'foobarrrr'))
distances and indices:
[[0.34474358 0.36942106 0.3694473  0.3798276  0.38252062]]
[[1985 1984 1107 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `t`
the BLEU scores below are for the following reference translation: 
list(set(t))
distances and indices:
[[0.16800494 0.19277558 0.20101745 0.2279663  0.22830047]]
[[1107  725 1108  757  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `source_list`
the BLEU scores below are for the following reference translation: 
list(set(source_list))
distances and indices:
[[0.27004293 0.3115127  0.31401923 0.32232073 0.32920632]]
[[1107 1108 1985  725 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> removing duplicates in list `abracadabra`
the BLEU scores below are for the following reference translation: 
list(OrderedDict.fromkeys('abracadabra'))
distances and indices:
[[0.36330095 0.3846444  0.40181333 0.40464944 0.4075733 ]]
[[1107 1985 1108 1984 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert array `a` into a list
the BLEU scores below are for the following reference translation: 
numpy.array(a).reshape(-1).tolist()
distances and indices:
[[0.33642897 0.36633006 0.37102675 0.3730281  0.39687604]]
[[1107  725 1108  726 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert the first row of numpy matrix `a` to a list
the BLEU scores below are for the following reference translation: 
numpy.array(a)[0].tolist()
distances and indices:
[[0.31937653 0.34535268 0.34951815 0.3694781  0.37944087]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> in `soup`, get the content of the sibling of the `td`  tag with text content `address:`
the BLEU scores below are for the following reference translation: 
print(soup.find(text='Address:').findNext('td').contents[0])
distances and indices:
[[0.30736694 0.33288392 0.34118387 0.34284377 0.34390515]]
[[1107  405 1108 1985 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert elements of each tuple in list `l` into a string  separated by character `@`
the BLEU scores below are for the following reference translation: 
""" """.join([('%d@%d' % t) for t in l])
distances and indices:
[[0.15302321 0.16338499 0.20800924 0.20985985 0.21530476]]
[[  79 1343  358  840  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert each tuple in list `l` to a string with '@' separating the tuples' elements
the BLEU scores below are for the following reference translation: 
""" """.join([('%d@%d' % (t[0], t[1])) for t in l])
distances and indices:
[[0.10909535 0.13779268 0.14838168 0.16249682 0.16441779]]
[[ 726  725   11   53 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the html from the current web page of a selenium driver
the BLEU scores below are for the following reference translation: 
driver.execute_script('return document.documentElement.outerHTML;')
distances and indices:
[[0.26147997 0.27999246 0.28410217 0.29000998 0.29040226]]
[[ 726  725 1107  405 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all matches with regex pattern `\\d+[xx]` in list of string `teststr`
the BLEU scores below are for the following reference translation: 
[i for i in teststr if re.search('\\d+[xX]', i)]
distances and indices:
[[0.26493478 0.2774226  0.29078913 0.29615274 0.29748333]]
[[ 405 1107  726 1108  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select values from column 'a' for which corresponding values in column 'b' will be greater than 50, and in column 'c' - equal 900 in dataframe `df`
the BLEU scores below are for the following reference translation: 
df['A'][(df['B'] > 50) & (df['C'] == 900)]
distances and indices:
[[0.1744046  0.17849535 0.20627932 0.20851897 0.21741158]]
[[ 405 1342 1251 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort dictionary `o` in ascending order based on its keys and items
the BLEU scores below are for the following reference translation: 
sorted(o.items())
distances and indices:
[[0.3053716  0.3431068  0.350812   0.35468894 0.36319438]]
[[1107 1108  725 1985  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get sorted list of keys of dict `d`
the BLEU scores below are for the following reference translation: 
sorted(d)
distances and indices:
[[0.22791648 0.2371308  0.23799491 0.23887023 0.23913833]]
[[1190 1880  771 1109 1714]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 3 is insid list ` [ 1 , 2 , 3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
3 in [1, 2, 3]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regex search and split string 'aaa bbb ccc ddd eee fff ' by delimit ' ( d ( d ) d ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all possibl sequenc of element in a list ` [ 2 , 3 , 4 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, permutations([2, 3, 4]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 3 is not in the list [ 4,5,6 ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
(3 not in [4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
panda : chang all the valu of a column 'date ' into `` int ( str ( x ) [ -4 : ] ) ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to sort dictionaries by keys in python
the BLEU scores below are for the following reference translation: 
sorted(d.items())
distances and indices:
[[0.3053716  0.3431068  0.350812   0.35468894 0.36319438]]
[[1107 1108  725 1985  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert string "1" into integer
the BLEU scores below are for the following reference translation: 
int('1')
distances and indices:
[[0.1824317  0.20782004 0.21521574 0.22522895 0.2276772 ]]
[[1107 1342 1108  405 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> function to convert strings into integers
the BLEU scores below are for the following reference translation: 
int()
distances and indices:
[[0.22309497 0.22581886 0.23406224 0.25475696 0.26764295]]
[[ 726  725 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert items in `t1` to integers
the BLEU scores below are for the following reference translation: 
T2 = [map(int, x) for x in T1]
distances and indices:
[[0.05455601 0.05729456 0.06712402 0.069953   0.07259521]]
[[ 757 2180 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a shell script `./test.sh` using subprocess
the BLEU scores below are for the following reference translation: 
subprocess.call(['./test.sh'])
distances and indices:
[[0.32486716 0.35141182 0.36662963 0.37208152 0.383751  ]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a shell script `notepad` using subprocess
the BLEU scores below are for the following reference translation: 
subprocess.call(['notepad'])
distances and indices:
[[0.32486716 0.35141182 0.36662963 0.37208152 0.383751  ]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> combine lists `l1` and `l2`  by alternating their elements
the BLEU scores below are for the following reference translation: 
[val for pair in zip(l1, l2) for val in pair]
distances and indices:
[[0.20076555 0.20590594 0.21713725 0.21872984 0.22301628]]
[[1170  898  393 1889  590]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode string 'data to be encoded'
the BLEU scores below are for the following reference translation: 
encoded = base64.b64encode('data to be encoded')
distances and indices:
[[0.16637158 0.17228477 0.17635709 0.1812826  0.1850594 ]]
[[  79 1343  358  840  891]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode a string `data to be encoded` to `ascii` encoding
the BLEU scores below are for the following reference translation: 
encoded = 'data to be encoded'.encode('ascii')
distances and indices:
[[0.35244453 0.35311022 0.35775533 0.38701078 0.3956472 ]]
[[1343 2009   79  726  840]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print +1 use format ' { 0 : +d } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0:+d}'.format(score))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> parse tab-delimited csv file 'text.txt' into a list
the BLEU scores below are for the following reference translation: 
lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
distances and indices:
[[0.1622088  0.19166873 0.19963196 0.21862817 0.23377061]]
[[1107 1108  725  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get attribute `my_str` of object `my_object`
the BLEU scores below are for the following reference translation: 
getattr(my_object, my_str)
distances and indices:
[[0.14675756 0.16610284 0.16657978 0.16718714 0.16792475]]
[[725  11  80 726 539]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> group a list of dicts `ld` into one dict by key
the BLEU scores below are for the following reference translation: 
print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))
distances and indices:
[[0.11880471 0.1576659  0.17446867 0.18323076 0.19982563]]
[[1107 1108  725  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i sum the first value in each tuple in a list of tuples in python?
the BLEU scores below are for the following reference translation: 
sum([pair[0] for pair in list_of_pairs])
distances and indices:
[[0.09957017 0.10771196 0.14222988 0.17330287 0.17615977]]
[[1984 1985 1251 1492  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unicode string u"{'code1':1,'code2':1}" into dictionary
the BLEU scores below are for the following reference translation: 
d = ast.literal_eval("{'code1':1,'code2':1}")
distances and indices:
[[0.3293543  0.33370754 0.3365125  0.3476979  0.3808057 ]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all words in a string `mystring` that start with the `$` sign
the BLEU scores below are for the following reference translation: 
[word for word in mystring.split() if word.startswith('$')]
distances and indices:
[[0.24362348 0.27732205 0.2788986  0.29540056 0.30554235]]
[[1107  725 1108  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove any url within string `text`
the BLEU scores below are for the following reference translation: 
text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)
distances and indices:
[[0.25510103 0.2703564  0.2880903  0.29435787 0.29460037]]
[[ 726  725 1107 1343   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace all elements in array `a` that are not present in array `[1, 3, 4]` with zeros
the BLEU scores below are for the following reference translation: 
np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)
distances and indices:
[[0.26920176 0.29890352 0.34328628 0.34509733 0.3469137 ]]
[[1985 1984 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate mean across dimension in a 2d array `a`
the BLEU scores below are for the following reference translation: 
np.mean(a, axis=1)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> running r script '/pathto/myrscript.r' from python
the BLEU scores below are for the following reference translation: 
subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])
distances and indices:
[[0.19024336 0.20486163 0.21003531 0.21026278 0.2177358 ]]
[[1342 1985  405 1251 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> run r script '/usr/bin/rscript --vanilla /pathto/myrscript.r'
the BLEU scores below are for the following reference translation: 
subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)
distances and indices:
[[0.14024407 0.16203232 0.16326474 0.1950378  0.19972911]]
[[1107 1108  725 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a header to a csv file
the BLEU scores below are for the following reference translation: 
writer.writeheader()
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replacing nan in the dataframe `df` with row average
the BLEU scores below are for the following reference translation: 
df.fillna(df.mean(axis=1), axis=1)
distances and indices:
[[0.43549693 0.4483816  0.47020426 0.47260544 0.47369662]]
[[1107 1985 1984  405 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unix timestamp '1347517370' to formatted string '%y-%m-%d %h:%m:%s'
the BLEU scores below are for the following reference translation: 
time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
distances and indices:
[[0.37243018 0.3959216  0.39786467 0.40362087 0.40379265]]
[[1341 1986 2199  926  413]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format current date to pattern ' { % y- % m- % d % h : % m : % s } '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
time.strftime('{%Y-%m-%d %H:%M:%S}')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
request page 'http : //www.mysite.com/ ' with credenti of usernam 'usernam ' and password 'pwd '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
requests.get('https://www.mysite.com/', auth=('username', 'pwd'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
shutdown a comput use subprocess
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call(['shutdown', '/s'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
pars a unicod string ` m\\n { ampersand } m\\n { apostroph } s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
call bash command 'tar c my_dir | md5sum ' with pipe
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
subprocess.call('tar c my_dir | md5sum', shell=True)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a base class's class method `do` from derived class `derived`
the BLEU scores below are for the following reference translation: 
super(Derived, cls).do(a)
distances and indices:
[[0.22486717 0.23412539 0.2498952  0.25221345 0.28558713]]
[[1107  725  726 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> selecting rows in numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1
the BLEU scores below are for the following reference translation: 
a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]
distances and indices:
[[0.31521448 0.33524126 0.340022   0.3557237  0.36996353]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> separate words delimited by one or more spaces into a list
the BLEU scores below are for the following reference translation: 
re.split(' +', 'hello world sample text')
distances and indices:
[[0.13104644 0.13828169 0.162846   0.17839164 0.17853658]]
[[  79 1343  726   11   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> length of longest element in list `words`
the BLEU scores below are for the following reference translation: 
len(max(words, key=len))
distances and indices:
[[0.20917553 0.21372125 0.22827683 0.23773694 0.26475078]]
[[ 725 1107  726 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the value associated with unicode key 'from_user' of first dictionary in list `result`
the BLEU scores below are for the following reference translation: 
result[0]['from_user']
distances and indices:
[[0.13678174 0.14254113 0.15852493 0.19159907 0.19346139]]
[[1985 1984 1251 1492 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> retrieve each line from a file 'file.txt' as a list
the BLEU scores below are for the following reference translation: 
[line.split() for line in open('File.txt')]
distances and indices:
[[0.1974642  0.21916078 0.22744395 0.23242906 0.23273952]]
[[ 726  725 1343   11   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> swap keys with values in a dictionary `a`
the BLEU scores below are for the following reference translation: 
res = dict((v, k) for k, v in a.items())
distances and indices:
[[0.12930214 0.1434573  0.15240888 0.15858038 0.17323802]]
[[ 725 1107 1108  508  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `path/to/file_name.ext` in write mode
the BLEU scores below are for the following reference translation: 
new_file = open('path/to/FILE_NAME.ext', 'w')
distances and indices:
[[0.18817715 0.19632883 0.20805438 0.21338463 0.24226919]]
[[2009 1343   79  726   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to count distinct values in a column of a pandas group by object?
the BLEU scores below are for the following reference translation: 
df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()
distances and indices:
[[0.20847036 0.22097519 0.22735235 0.23731887 0.2416785 ]]
[[1342 1251 1985 1984 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if any key in the dictionary `dict1` starts with the string `emp$$`
the BLEU scores below are for the following reference translation: 
any(key.startswith('EMP$$') for key in dict1)
distances and indices:
[[0.1260085  0.14034285 0.15237251 0.15835018 0.17301925]]
[[ 725  726 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list of values from dictionary `dict1` that have a key that starts with 'emp$$'
the BLEU scores below are for the following reference translation: 
[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]
distances and indices:
[[0.21752697 0.23582152 0.25273237 0.25314462 0.25925365]]
[[1107 1985 1342 1984 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`
the BLEU scores below are for the following reference translation: 
pd.DataFrame({'email': sf.index, 'list': sf.values})
distances and indices:
[[0.25177434 0.32246596 0.3370086  0.339581   0.35751733]]
[[ 405 1107 1342 1108 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print elements of list `list` seperated by tabs `\t`
the BLEU scores below are for the following reference translation: 
print('\t'.join(map(str, list)))
distances and indices:
[[0.14569755 0.1675262  0.17505018 0.20060726 0.21036452]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8
the BLEU scores below are for the following reference translation: 
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
distances and indices:
[[0.35828832 0.36675212 0.3771245  0.3857286  0.3940808 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode a latin character in string `sopet\xc3\xb3n` properly
the BLEU scores below are for the following reference translation: 
'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
distances and indices:
[[0.2831046  0.2843536  0.29079863 0.30380395 0.3094299 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> resized image `image` to width, height of `(x, y)` with filter of `antialias`
the BLEU scores below are for the following reference translation: 
image = image.resize((x, y), Image.ANTIALIAS)
distances and indices:
[[0.17452623 0.18577802 0.1890418  0.19109054 0.19486108]]
[[1107 1108  725  405  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> regex, find "n"s only in the middle of string `s`
the BLEU scores below are for the following reference translation: 
re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)
distances and indices:
[[0.2893873  0.29676205 0.30456463 0.3144698  0.33299762]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> display the float `1/3*100` as a percentage
the BLEU scores below are for the following reference translation: 
print('{0:.0f}%'.format(1.0 / 3 * 100))
distances and indices:
[[0.15719642 0.18746153 0.19268063 0.1951884  0.19636497]]
[[ 726 1343  725   79 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `mylist` by the key `title`
the BLEU scores below are for the following reference translation: 
mylist.sort(key=lambda x: x['title'])
distances and indices:
[[0.10594578 0.11889473 0.13490531 0.13639969 0.14775188]]
[[1342 1107 1251 1108  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list `l` of dicts by dict value 'title'
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda x: x['title'])
distances and indices:
[[0.10594578 0.11889473 0.13490531 0.13639969 0.14775188]]
[[1342 1107 1251 1108  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.
the BLEU scores below are for the following reference translation: 
l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))
distances and indices:
[[0.14096367 0.14175218 0.14636938 0.15252069 0.17944136]]
[[1251 1342 1985 1984 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find 10 largest differences between each respective elements of list `l1` and list `l2`
the BLEU scores below are for the following reference translation: 
heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
distances and indices:
[[0.14915794 0.15509118 0.18985023 0.19188459 0.1931873 ]]
[[1985 1984  757 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> beautifulsoup find all 'span' elements in html string `soup` with class of 'stargryb sp'
the BLEU scores below are for the following reference translation: 
soup.find_all('span', {'class': 'starGryB sp'})
distances and indices:
[[0.33969718 0.3826316  0.39646542 0.41851807 0.43252674]]
[[ 405 2009  726 1343 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write records in dataframe `df` to table 'test' in schema 'a_schema'
the BLEU scores below are for the following reference translation: 
df.to_sql('test', engine, schema='a_schema')
distances and indices:
[[0.16164027 0.16477303 0.16986924 0.1835845  0.19490558]]
[[1107  725 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract brackets from string `s`
the BLEU scores below are for the following reference translation: 
brackets = re.sub('[^(){}[\\]]', '', s)
distances and indices:
[[0.29118803 0.3072979  0.3104963  0.3138853  0.3157215 ]]
[[1107  405  726  725 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove duplicate elements from list 'l'
the BLEU scores below are for the following reference translation: 
list(dict((x[0], x) for x in L).values())
distances and indices:
[[0.11254618 0.13687496 0.184693   0.19269548 0.20071122]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read a file `file` without newlines
the BLEU scores below are for the following reference translation: 
[line.rstrip('\n') for line in file]
distances and indices:
[[0.15958302 0.17653714 0.17776589 0.17840032 0.17846462]]
[[ 726   11  725   79 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the position of item 1 in `testlist`
the BLEU scores below are for the following reference translation: 
gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass
distances and indices:
[[0.26513302 0.29880968 0.30836663 0.3149593  0.31579617]]
[[1107 1108  725 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the position of item `element` in list `testlist`
the BLEU scores below are for the following reference translation: 
try:
    print(testlist.index(element))
except ValueError:
    pass
distances and indices:
[[0.18138433 0.18921246 0.19010545 0.21920267 0.21931738]]
[[ 726   79 1343  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the first element of the tuple with the maximum second element in a list of tuples `lis`
the BLEU scores below are for the following reference translation: 
max(lis, key=lambda item: item[1])[0]
distances and indices:
[[0.13954233 0.14347556 0.14817385 0.16190757 0.16476418]]
[[ 757 1984 1251 1985 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`
the BLEU scores below are for the following reference translation: 
max(lis, key=itemgetter(1))[0]
distances and indices:
[[0.13389239 0.13767757 0.13913338 0.14729755 0.15631579]]
[[1985 1984 1107  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a delay of 1 second
the BLEU scores below are for the following reference translation: 
time.sleep(1)
distances and indices:
[[0.3900043  0.41597265 0.41609994 0.44608107 0.45588186]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of tuples `l` to a string
the BLEU scores below are for the following reference translation: 
""", """.join('(' + ', '.join(i) + ')' for i in L)
distances and indices:
[[0.31858414 0.34305495 0.34427696 0.34772995 0.35828242]]
[[ 726  725 1343   79   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django set default value of field `b` equal to '0000000'
the BLEU scores below are for the following reference translation: 
b = models.CharField(max_length=7, default='0000000', editable=False)
distances and indices:
[[0.24576971 0.27323753 0.27338517 0.2768506  0.2936902 ]]
[[ 405 1107 1342 1985 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort lis `list5` in ascending order based on the degrees value of its elements
the BLEU scores below are for the following reference translation: 
sorted(list5, lambda x: (degree(x), x))
distances and indices:
[[0.13012375 0.14697772 0.16273122 0.17097393 0.1780992 ]]
[[1107 1342 1108 1251 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i perform secondary sorting in python?
the BLEU scores below are for the following reference translation: 
sorted(list5, key=lambda vertex: (degree(vertex), vertex))
distances and indices:
[[0.32769674 0.36286724 0.36507237 0.36607045 0.37438723]]
[[1107 1108 1985  405 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a list  into a generator object
the BLEU scores below are for the following reference translation: 
(n for n in [1, 2, 3, 5])
distances and indices:
[[0.12452728 0.1553688  0.21772389 0.23190764 0.24905   ]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove elements from list `oldlist` that have an index number mentioned in list `removelist`
the BLEU scores below are for the following reference translation: 
newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
distances and indices:
[[0.12107947 0.16131619 0.16850708 0.18139073 0.18696742]]
[[1107 1108  757  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a file `yourfile.txt` in write mode
the BLEU scores below are for the following reference translation: 
f = open('yourfile.txt', 'w')
distances and indices:
[[0.15308882 0.16027641 0.16166626 0.19080727 0.21250054]]
[[1343 2009   79  726   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get attribute 'attr' from object `obj`
the BLEU scores below are for the following reference translation: 
getattr(obj, 'attr')
distances and indices:
[[0.10472779 0.10479265 0.10709234 0.11008008 0.11040799]]
[[ 540  891   80 1288  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
regular express `` ^ ( .+ ) \\n ( ( ? : \\n.+ ) + ) '' match a multilin block of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple
the BLEU scores below are for the following reference translation: 
from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))
distances and indices:
[[0.14551334 0.1751421  0.17922965 0.1970298  0.19799985]]
[[1107 1342 1108  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line
the BLEU scores below are for the following reference translation: 
map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))
distances and indices:
[[0.16256155 0.19250779 0.20785116 0.21059461 0.22913921]]
[[1107 1108  725 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python pandas: how to replace a characters in a column of a dataframe?
the BLEU scores below are for the following reference translation: 
df['range'].replace(',', '-', inplace=True)
distances and indices:
[[0.16579324 0.17451854 0.18036954 0.18654262 0.18744023]]
[[1342 1492 1251 2180 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
the BLEU scores below are for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
distances and indices:
[[0.2844783  0.30931133 0.32330912 0.3324634  0.33514896]]
[[1985 1984 1342  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `original`
the BLEU scores below are for the following reference translation: 
result = ([a for (a, b) in original], [b for (a, b) in original])
distances and indices:
[[0.18868028 0.21553138 0.2765569  0.29847068 0.32593122]]
[[1985 1984 1251 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `original` and return a generator
the BLEU scores below are for the following reference translation: 
result = ((a for (a, b) in original), (b for (a, b) in original))
distances and indices:
[[0.20061333 0.22878946 0.28347996 0.29175347 0.29202363]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`
the BLEU scores below are for the following reference translation: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
distances and indices:
[[0.27908647 0.30230337 0.30823642 0.31000093 0.3185572 ]]
[[1985 1984 1342  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with none
the BLEU scores below are for the following reference translation: 
map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
distances and indices:
[[0.25881657 0.2811106  0.28537962 0.28916642 0.29970407]]
[[1985 1984 1342  405 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> encode `decimal('3.9')` to a json string
the BLEU scores below are for the following reference translation: 
json.dumps(Decimal('3.9'))
distances and indices:
[[0.3166851  0.34836105 0.34958413 0.3538574  0.359423  ]]
[[1107 1108  405  725  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add key "mynewkey" to dictionary `d` with value "mynewvalue"
the BLEU scores below are for the following reference translation: 
d['mynewkey'] = 'mynewvalue'
distances and indices:
[[0.07135383 0.18901941 0.2186163  0.22534047 0.23222856]]
[[ 405 1597 1190 2009 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 3 is insid list ` [ 1 , 2 , 3 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
3 in [1, 2, 3]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add key 'a' to dictionary `data` with value 1
the BLEU scores below are for the following reference translation: 
data.update(a=1)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find maximal value in matrix `matrix`
the BLEU scores below are for the following reference translation: 
max([max(i) for i in matrix])
distances and indices:
[[0.13533233 0.14657895 0.15144435 0.15432237 0.15586348]]
[[1107  757  725 1108  508]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> round number `answer` to 2 precision after the decimal point
the BLEU scores below are for the following reference translation: 
answer = str(round(answer, 2))
distances and indices:
[[0.21823414 0.24446414 0.25040427 0.2632863  0.28442866]]
[[1107  725 1108  726  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract ip address from an html string
the BLEU scores below are for the following reference translation: 
ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)
distances and indices:
[[0.29771695 0.30547193 0.31204993 0.32187384 0.32535198]]
[[ 726 1107  725  405 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> filter dataframe `df` by values in column `a` that appear more than once
the BLEU scores below are for the following reference translation: 
df.groupby('A').filter(lambda x: len(x) > 1)
distances and indices:
[[0.20247017 0.22631559 0.23424424 0.23515698 0.24525915]]
[[1107 1108  725  405 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append each line in file `myfile` into a list
the BLEU scores below are for the following reference translation: 
[x for x in myfile.splitlines() if x != '']
distances and indices:
[[0.13959977 0.16941284 0.16947581 0.18416086 0.18995804]]
[[1107 1342 1108  757  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of integers `lst` from a file `filename.txt`
the BLEU scores below are for the following reference translation: 
lst = map(int, open('filename.txt').readlines())
distances and indices:
[[0.11089522 0.12261378 0.15611833 0.15749398 0.15749511]]
[[ 725  726   11 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add color bar with image `mappable` to plot `plt`
the BLEU scores below are for the following reference translation: 
plt.colorbar(mappable=mappable, cax=ax3)
distances and indices:
[[0.40001032 0.40274784 0.42342988 0.43407655 0.4372405 ]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count most frequent 100 words in column 'text' of dataframe `df`
the BLEU scores below are for the following reference translation: 
Counter(' '.join(df['text']).split()).most_common(100)
distances and indices:
[[0.21325639 0.22938658 0.23941533 0.2501237  0.27156374]]
[[1107  725 1108  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python split a string using regex
the BLEU scores below are for the following reference translation: 
re.findall('(.+?):(.+?)\\b ?', text)
distances and indices:
[[0.36460954 0.38292584 0.38791916 0.39415443 0.40318772]]
[[ 726 1343   79  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> generate all 2-element subsets of tuple `(1, 2, 3)`
the BLEU scores below are for the following reference translation: 
list(itertools.combinations((1, 2, 3), 2))
distances and indices:
[[0.27800426 0.30752513 0.35020056 0.3592933  0.35971394]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a value of datetime.today() in the utc time zone
the BLEU scores below are for the following reference translation: 
datetime.now(pytz.utc)
distances and indices:
[[0.40421793 0.41975576 0.42270544 0.4352989  0.46173033]]
[[1107  726  725 1108 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a new list `list2`by removing empty list from a list of lists `list1`
the BLEU scores below are for the following reference translation: 
list2 = [x for x in list1 if x != []]
distances and indices:
[[0.06042814 0.09134383 0.09511745 0.10374282 0.11043363]]
[[ 757 1251 1492 2180 1980]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of integ with duplic valu ` [ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`
the BLEU scores below are for the following reference translation: 
list2 = [x for x in list1 if x]
distances and indices:
[[0.11534088 0.14459804 0.14558235 0.16610697 0.17062233]]
[[1170  898 2050 1492 1904]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django response with json `data`
the BLEU scores below are for the following reference translation: 
return HttpResponse(data, mimetype='application/json')
distances and indices:
[[0.16735871 0.17669171 0.17783998 0.18093242 0.18466684]]
[[2122  889  725 1108 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print unicod charact in a string ` \u0420\u043e\u0441\u0441\u0438\u044f `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('\u0420\u043e\u0441\u0441\u0438\u044f')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all text that is not enclosed within square brackets in string `example_str`
the BLEU scores below are for the following reference translation: 
re.findall('(.*?)\\[.*?\\]', example_str)
distances and indices:
[[0.30905387 0.34216952 0.34826177 0.35300505 0.3551429 ]]
[[1107 1108  725  405  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> use a regex to get all text in a string `example_str` that is not surrounded by square brackets
the BLEU scores below are for the following reference translation: 
re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)
distances and indices:
[[0.3302507  0.34186724 0.34894776 0.3573428  0.3678863 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'
the BLEU scores below are for the following reference translation: 
re.findall('\\(.+?\\)|\\w', '(zyx)bc')
distances and indices:
[[0.3571351  0.36068016 0.37113327 0.38278493 0.38798732]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'
the BLEU scores below are for the following reference translation: 
re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')
distances and indices:
[[0.31133607 0.3126698  0.3202066  0.33611807 0.35553497]]
[[1107  726  725 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`
the BLEU scores below are for the following reference translation: 
re.findall('\\(.*?\\)|\\w', '(zyx)bc')
distances and indices:
[[0.34983692 0.36534983 0.37067077 0.3772863  0.3777729 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> formate each string cin list `elements` into pattern '%{0}%'
the BLEU scores below are for the following reference translation: 
elements = ['%{0}%'.format(element) for element in elements]
distances and indices:
[[0.10083451 0.1038416  0.11568762 0.12178899 0.13103917]]
[[1108  725 1107  726   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a background process 'background-process' with arguments 'arguments'
the BLEU scores below are for the following reference translation: 
subprocess.Popen(['background-process', 'arguments'])
distances and indices:
[[0.1861122  0.20817752 0.2162481  0.2235695  0.23602426]]
[[1107 1342 1108  405 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'
the BLEU scores below are for the following reference translation: 
[mydict[x] for x in mykeys]
distances and indices:
[[0.24526973 0.24598268 0.2541104  0.25565627 0.26397032]]
[[1984 1492 1251 1985 1170]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list `[('name', 'joe'), ('age', 22)]` into a dictionary
the BLEU scores below are for the following reference translation: 
dict([('Name', 'Joe'), ('Age', 22)])
distances and indices:
[[0.07216369 0.08975049 0.11531943 0.13553433 0.13726501]]
[[1107 1108 1342  757  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> average each two columns of array `data`
the BLEU scores below are for the following reference translation: 
data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)
distances and indices:
[[0.15148586 0.15953837 0.16232267 0.17908825 0.17924944]]
[[1985 1107 1984  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> double backslash escape all double quotes in string `s`
the BLEU scores below are for the following reference translation: 
print(s.encode('unicode-escape').replace('"', '\\"'))
distances and indices:
[[0.3211782  0.32816115 0.3323033  0.35107574 0.3616419 ]]
[[ 726 1107  725 1108 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string into a list of words and whitespace
the BLEU scores below are for the following reference translation: 
re.split('(\\W+)', s)
distances and indices:
[[0.4246416  0.43586534 0.4408004  0.45897385 0.46008855]]
[[ 405 1107  726  725 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> plotting stacked barplots on a panda data frame
the BLEU scores below are for the following reference translation: 
df.plot(kind='barh', stacked=True)
distances and indices:
[[0.37576598 0.37652794 0.3800251  0.39643988 0.39863768]]
[[ 405 1985 1107 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse the keys and values in a dictionary `mydictionary`
the BLEU scores below are for the following reference translation: 
{i[1]: i[0] for i in list(myDictionary.items())}
distances and indices:
[[0.29875702 0.30870575 0.3217128  0.32889864 0.34226286]]
[[1985 1107 1984 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> finding the index of elements containing substring 'how' and 'what' in a list of strings 'mylist'.
the BLEU scores below are for the following reference translation: 
[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
distances and indices:
[[0.16345266 0.18396074 0.19954102 0.22006539 0.22082463]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if object `obj` is a string
the BLEU scores below are for the following reference translation: 
isinstance(obj, str)
distances and indices:
[[0.09738304 0.12092135 0.12384525 0.13195434 0.13361922]]
[[ 725   11  726   53 1288]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if object `o` is a string
the BLEU scores below are for the following reference translation: 
isinstance(o, str)
distances and indices:
[[0.06813055 0.11213393 0.11389677 0.11865335 0.12927656]]
[[ 725  726   11   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if `obj_to_test` is a string
the BLEU scores below are for the following reference translation: 
isinstance(obj_to_test, str)
distances and indices:
[[0.22738275 0.2651919  0.27585545 0.27690962 0.27968287]]
[[1107 1108 1342  725 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `list1` to `list2`
the BLEU scores below are for the following reference translation: 
list2.extend(list1)
distances and indices:
[[0.20367578 0.21711873 0.23195556 0.23617499 0.24744192]]
[[1107  725 1108  757  508]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `mylog` to `list1`
the BLEU scores below are for the following reference translation: 
list1.extend(mylog)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append list `a` to `c`
the BLEU scores below are for the following reference translation: 
c.extend(a)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append items in list `mylog` to `list1`
the BLEU scores below are for the following reference translation: 
for line in mylog:
    list1.append(line)
distances and indices:
[[0.28122193 0.29163638 0.3299832  0.34851328 0.35093692]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`
the BLEU scores below are for the following reference translation: 
b.append((a[0][0], a[0][2]))
distances and indices:
[[0.22865474 0.25852233 0.30678034 0.3164249  0.34011742]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> initialize `secret_key` in flask config with `your_secret_string `
the BLEU scores below are for the following reference translation: 
app.config['SECRET_KEY'] = 'Your_secret_string'
distances and indices:
[[0.1927459  0.24609424 0.25412682 0.2720178  0.27886054]]
[[ 405 1342 1107 1108 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> unpack a series of tuples in pandas into a dataframe with column names 'out-1' and 'out-2'
the BLEU scores below are for the following reference translation: 
pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)
distances and indices:
[[0.3140287  0.33988646 0.35683155 0.358077   0.36867806]]
[[1985 1984 1342 1107  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the index of an element 'msft' in a list `stocks_list`
the BLEU scores below are for the following reference translation: 
[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']
distances and indices:
[[0.18423092 0.21054012 0.24667665 0.25300074 0.2833892 ]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable
the BLEU scores below are for the following reference translation: 
ax.set_xticklabels(labels, rotation=45)
distances and indices:
[[0.16902785 0.19911012 0.1999218  0.22644132 0.22922061]]
[[1107  725 1108  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove symbols from a string `s`
the BLEU scores below are for the following reference translation: 
re.sub('[^\\w]', ' ', s)
distances and indices:
[[0.26590836 0.30751526 0.31041163 0.32524076 0.32614657]]
[[ 405 1985 1342 1984 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the current directory of a script
the BLEU scores below are for the following reference translation: 
os.path.basename(os.path.dirname(os.path.realpath(__file__)))
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find octal characters matches from a string `str` using regex
the BLEU scores below are for the following reference translation: 
print(re.findall("'\\\\[0-7]{1,3}'", str))
distances and indices:
[[0.30218494 0.3135814  0.31477264 0.3345925  0.33995152]]
[[ 726 1107  725 1108 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `input` based on occurrences of regex pattern '[ ](?=[a-z]+\\b)'
the BLEU scores below are for the following reference translation: 
re.split('[ ](?=[A-Z]+\\b)', input)
distances and indices:
[[0.28606552 0.32114246 0.32987526 0.33030495 0.3320763 ]]
[[1107 1108 1342 1985  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `input` at every space followed by an upper-case letter
the BLEU scores below are for the following reference translation: 
re.split('[ ](?=[A-Z])', input)
distances and indices:
[[0.28606552 0.32114246 0.32987526 0.33030495 0.3320763 ]]
[[1107 1108 1342 1985  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`
the BLEU scores below are for the following reference translation: 
r = requests.post(url, files=files, headers=headers, data=data)
distances and indices:
[[0.13137443 0.16116813 0.16126093 0.1704376  0.1824005 ]]
[[ 726 2009  725   11   53]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write bytes `bytes_` to a file `filename` in python 3
the BLEU scores below are for the following reference translation: 
open('filename', 'wb').write(bytes_)
distances and indices:
[[0.17184187 0.18460518 0.1899924  0.20155136 0.20814903]]
[[ 726 1343   79   11 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list from a list `lst` with values mapped into a dictionary `dct`
the BLEU scores below are for the following reference translation: 
[dct[k] for k in lst]
distances and indices:
[[0.17418677 0.20141883 0.22274698 0.22776109 0.23898512]]
[[1170  898 1746  393 1889]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 123 to 100
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int(round(123, -2))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
multipli all item in a list ` [ 1 , 2 , 3 , 4 , 5 , 6 ] ` togeth
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find duplicate names in column 'name' of the dataframe `x`
the BLEU scores below are for the following reference translation: 
x.set_index('name').index.get_duplicates()
distances and indices:
[[0.251975   0.26018062 0.26725605 0.27734655 0.2805965 ]]
[[ 726 1107  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> truncate float 1.923328437452 to 3 decimal places
the BLEU scores below are for the following reference translation: 
round(1.923328437452, 3)
distances and indices:
[[0.21589182 0.21617009 0.23474385 0.2547682  0.2594643 ]]
[[1107 1985 1984 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort list `li` in descending order based on the date value in second element of each list in list `li`
the BLEU scores below are for the following reference translation: 
sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)
distances and indices:
[[0.12431002 0.1254156  0.14044963 0.14993693 0.1672055 ]]
[[ 405 2009 1597 2161  889]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 7 is in ` a `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
(7 in a)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ` strg ` start with ani of the element in list ( ' 0 ' , ' 1 ' , ' 2 ' , ' 3 ' , ' 4 ' , ' 5 ' , ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' )
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> place the radial ticks in plot `ax` at 135 degrees
the BLEU scores below are for the following reference translation: 
ax.set_rlabel_position(135)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> check if path `my_path` is an absolute path
the BLEU scores below are for the following reference translation: 
os.path.isabs(my_path)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get number of keys in dictionary `yourdict`
the BLEU scores below are for the following reference translation: 
len(list(yourdict.keys()))
distances and indices:
[[0.42306295 0.4480692  0.4618872  0.4679754  0.47030395]]
[[1107 1985 1108 1984  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count the number of keys in dictionary `yourdictfile`
the BLEU scores below are for the following reference translation: 
len(set(open(yourdictfile).read().split()))
distances and indices:
[[0.37284037 0.3905587  0.3947821  0.4038672  0.4295292 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> pandas dataframe get first row of each group by 'id'
the BLEU scores below are for the following reference translation: 
df.groupby('id').first()
distances and indices:
[[0.22019549 0.24343465 0.24767402 0.25186688 0.26237282]]
[[1107 1108  405  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a list in first column  into multiple columns keeping other columns as well in pandas data frame
the BLEU scores below are for the following reference translation: 
pd.concat([df[0].apply(pd.Series), df[1]], axis=1)
distances and indices:
[[0.21833025 0.24318881 0.2726887  0.28011826 0.3162098 ]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`
the BLEU scores below are for the following reference translation: 
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
distances and indices:
[[0.3673868  0.3739946  0.37487242 0.39465117 0.41125935]]
[[1107  725  726 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum integers contained in strings in list `['', '3.4', '', '', '1.0']`
the BLEU scores below are for the following reference translation: 
sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])
distances and indices:
[[0.10029396 0.13270542 0.13606016 0.15180443 0.15879504]]
[[1107  757 1108  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call a subprocess with arguments `c:\\program files\\vmware\\vmware server\\vmware-cmd.bat` that may contain spaces
the BLEU scores below are for the following reference translation: 
subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
distances and indices:
[[0.20676968 0.25643995 0.27016607 0.2757873  0.28277555]]
[[ 405 1107 1108 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse a priority queue `q` in python without using classes
the BLEU scores below are for the following reference translation: 
q.put((-n, n))
distances and indices:
[[0.29055032 0.32981455 0.33045018 0.34282926 0.34512126]]
[[1107 1108 1985  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`
the BLEU scores below are for the following reference translation: 
df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
distances and indices:
[[0.23600924 0.24238579 0.24721514 0.2536191  0.26228192]]
[[ 405 1492 1342 1251 2181]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
add array of shape ` ( 6 , 9 , 20 ) ` to array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all matches of regex pattern '([a-fa-f\\d]{32})' in string `data`
the BLEU scores below are for the following reference translation: 
re.findall('([a-fA-F\\d]{32})', data)
distances and indices:
[[0.2835258  0.315571   0.3306124  0.34130055 0.3441821 ]]
[[ 405 1107 1342 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the length of list `my_list`
the BLEU scores below are for the following reference translation: 
len(my_list)
distances and indices:
[[0.22658697 0.23009486 0.23813061 0.24473293 0.2536756 ]]
[[ 508  757 1107  590  393]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of array `l`
the BLEU scores below are for the following reference translation: 
len(l)
distances and indices:
[[0.23662618 0.25179115 0.2698738  0.3039692  0.30772567]]
[[1985 1984 1107  757 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of array `s`
the BLEU scores below are for the following reference translation: 
len(s)
distances and indices:
[[0.41966006 0.44499484 0.44818455 0.45510066 0.45591947]]
[[ 726 1343 2009   79  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of `my_tuple`
the BLEU scores below are for the following reference translation: 
len(my_tuple)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> getting the length of `my_string`
the BLEU scores below are for the following reference translation: 
len(my_string)
distances and indices:
[[0.2270076  0.24493718 0.24830326 0.25037596 0.26326805]]
[[ 726  725   79 1343   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove escape character from string "\\a"
the BLEU scores below are for the following reference translation: 
"""\\a""".decode('string_escape')
distances and indices:
[[0.5875992  0.59919274 0.6241443  0.6339934  0.63965434]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.
the BLEU scores below are for the following reference translation: 
"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
distances and indices:
[[0.2665726  0.2665943  0.2848009  0.30121186 0.31565514]]
[[2009  405  726 1343   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove directory tree '/folder_name'
the BLEU scores below are for the following reference translation: 
shutil.rmtree('/folder_name')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`
the BLEU scores below are for the following reference translation: 
data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
distances and indices:
[[0.16505134 0.16722867 0.17199737 0.17293258 0.19763812]]
[[1107 1342  405 1108  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort counter `x` by values
the BLEU scores below are for the following reference translation: 
sorted(x, key=x.get, reverse=True)
distances and indices:
[[0.10300044 0.11325836 0.14553034 0.16213143 0.19011815]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort counter `x` by value
the BLEU scores below are for the following reference translation: 
sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)
distances and indices:
[[0.15648024 0.16890703 0.17248945 0.2009043  0.20983188]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> append a numpy array 'b' to a numpy array 'a'
the BLEU scores below are for the following reference translation: 
np.vstack((a, b))
distances and indices:
[[0.34777555 0.3728012  0.37288347 0.3890199  0.39956692]]
[[1985 1984 1107 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the first axis
the BLEU scores below are for the following reference translation: 
np.array((a, b))
distances and indices:
[[0.34777555 0.3728012  0.37288347 0.3890199  0.39956692]]
[[1985 1984 1107 1342  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> numpy concatenate two arrays `a` and `b` along the second axis
the BLEU scores below are for the following reference translation: 
print(concatenate((a, b), axis=1))
distances and indices:
[[0.21330865 0.24822679 0.25436488 0.25606093 0.263713  ]]
[[1107 1985 1108 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> fetch address information for host 'google.com' ion port 80
the BLEU scores below are for the following reference translation: 
print(socket.getaddrinfo('google.com', 80))
distances and indices:
[[0.32304925 0.3543459  0.3575861  0.35806632 0.35938472]]
[[1107 1108  405  725  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a column 'day' with value 'sat' to dataframe `df`
the BLEU scores below are for the following reference translation: 
df.xs('sat', level='day', drop_level=False)
distances and indices:
[[0.32879895 0.33726248 0.3549551  0.3589333  0.36238956]]
[[ 405 1985 1342 1984 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> return a 401 unauthorized in django
the BLEU scores below are for the following reference translation: 
return HttpResponse('Unauthorized', status=401)
distances and indices:
[[0.15662472 0.1788588  0.18719028 0.20006174 0.21524704]]
[[1107 1108  725 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> flask set folder 'wherever' as the default template folder
the BLEU scores below are for the following reference translation: 
Flask(__name__, template_folder='wherever')
distances and indices:
[[0.18288496 0.18319757 0.19202945 0.1972496  0.22295186]]
[[ 725 1107  726 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i insert into t1 (select * from t2) in sqlalchemy?
the BLEU scores below are for the following reference translation: 
session.execute('INSERT INTO t1 (SELECT * FROM t2)')
distances and indices:
[[0.35576433 0.36989278 0.37431464 0.38357297 0.38656443]]
[[ 726 1107  725  405 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of lists 'c2' such that third row comes first
the BLEU scores below are for the following reference translation: 
c2.sort(key=lambda row: row[2])
distances and indices:
[[0.17960173 0.18479817 0.18855102 0.19900501 0.21931535]]
[[1985 1251 1984 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sorting a list of lists in python
the BLEU scores below are for the following reference translation: 
c2.sort(key=lambda row: (row[2], row[1]))
distances and indices:
[[0.17734107 0.19668812 0.2184749  0.23397437 0.2609516 ]]
[[1985 1984 1251 1342  757]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> set font `arial` to display non-ascii characters in matplotlib
the BLEU scores below are for the following reference translation: 
matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})
distances and indices:
[[0.3213818  0.40837336 0.42325798 0.4271437  0.43640873]]
[[ 405 2009  726 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert  datetime column 'date' of pandas dataframe 'df' to ordinal
the BLEU scores below are for the following reference translation: 
df['date'].apply(lambda x: x.toordinal())
distances and indices:
[[0.18858942 0.21894255 0.23997074 0.24255933 0.24603319]]
[[ 405 1342 1108 1107 2180]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
ad a 1-d array ` [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ` to a 3-d array ` np.zero ( ( 6 , 9 , 20 ) ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get html source of selenium webelement `element`
the BLEU scores below are for the following reference translation: 
element.get_attribute('innerHTML')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the integer location of a key `bob` in a pandas data frame
the BLEU scores below are for the following reference translation: 
df.index.get_loc('bob')
distances and indices:
[[0.462127  0.4886086 0.5404648 0.5532779 0.5856003]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open a 'gnome' terminal from python script and run  'sudo apt-get update' command.
the BLEU scores below are for the following reference translation: 
os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')
distances and indices:
[[0.30545953 0.32398316 0.33692396 0.34293956 0.34335843]]
[[  79 1343  539  663 1200]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get multipl match string use regex pattern ` ( ? : review : ) ? ( http : //url.com/ ( \\d+ ) ) \\ ? `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add an item with key 'third_key' and value 1 to an dictionary `my_dict`
the BLEU scores below are for the following reference translation: 
my_dict.update({'third_key': 1})
distances and indices:
[[0.3947282  0.43721974 0.43780807 0.44521224 0.4571473 ]]
[[ 405  726 1107 2009 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> declare an array
the BLEU scores below are for the following reference translation: 
my_list = []
distances and indices:
[[0.10261722 0.10435691 0.10843939 0.11226355 0.11397707]]
[[590 757 898 508 393]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
round 1123.456789 to be an integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(round(1123.456789, -1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert item `12` to a list `my_list`
the BLEU scores below are for the following reference translation: 
my_list.append(12)
distances and indices:
[[0.27157876 0.27218044 0.2744727  0.29916164 0.31302997]]
[[ 725  726 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add an entry 'wuggah' at the beginning of list `mylist`
the BLEU scores below are for the following reference translation: 
myList.insert(0, 'wuggah')
distances and indices:
[[0.26376036 0.28726202 0.29361337 0.29998037 0.3075604 ]]
[[1985 1984 1342 1107 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a hex-string representation to actual bytes
the BLEU scores below are for the following reference translation: 
"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')
distances and indices:
[[0.42697453 0.437639   0.46733695 0.48135537 0.48660466]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> select the last column of dataframe `df`
the BLEU scores below are for the following reference translation: 
df[df.columns[-1]]
distances and indices:
[[0.1737043  0.1831896  0.19682898 0.20194267 0.20643587]]
[[1251 1492 1984 1985 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the first value from dataframe `df` where column 'letters' is equal to 'c'
the BLEU scores below are for the following reference translation: 
df.loc[df['Letters'] == 'C', 'Letters'].values[0]
distances and indices:
[[0.2972411  0.31113353 0.3174921  0.32206157 0.34263125]]
[[1985 1984 1251 1342 1492]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix
the BLEU scores below are for the following reference translation: 
np.column_stack(([1, 2, 3], [4, 5, 6]))
distances and indices:
[[0.24594367 0.27688077 0.3313072  0.33732197 0.35414514]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the type of `i`
the BLEU scores below are for the following reference translation: 
type(i)
distances and indices:
[[0.19333364 0.20141824 0.21221621 0.21254134 0.21396235]]
[[725 726 663 539  80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> determine the type of variable `v`
the BLEU scores below are for the following reference translation: 
type(v)
distances and indices:
[[0.18110298 0.18175085 0.19197714 0.19369693 0.19986694]]
[[1842  796 2052  508  585]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
limit float 13.949999999999999 to two decim point
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'{0:.2f}'.format(13.95)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ' x+13.5*10x-4e1 ' into token
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
insert variabl ` ( var1 , var2 , var3 ) ` into sql statement 'insert into tabl valu ( ? , ? , ? ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
merg a list of integ ` [ 1 , 2 , 3 , 4 , 5 ] ` into a singl integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the type of variable `variable_name`
the BLEU scores below are for the following reference translation: 
print(type(variable_name))
distances and indices:
[[0.21977742 0.2316551  0.25550154 0.25733614 0.26006627]]
[[ 726  725 1343   79   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the 5th item of a generator
the BLEU scores below are for the following reference translation: 
next(itertools.islice(range(10), 5, 5 + 1))
distances and indices:
[[0.26672673 0.2748463  0.29539815 0.30464095 0.31139293]]
[[1107 1985 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print a string `word` with string format
the BLEU scores below are for the following reference translation: 
print('"{}"'.format(word))
distances and indices:
[[0.3410213  0.34782302 0.34867734 0.37927496 0.38288847]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join a list of strings `list` using a space ' '
the BLEU scores below are for the following reference translation: 
""" """.join(list)
distances and indices:
[[0.59056914 0.6036187  0.62673825 0.62829506 0.63428897]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create list `y` containing two empty lists
the BLEU scores below are for the following reference translation: 
y = [[] for n in range(2)]
distances and indices:
[[0.14539368 0.1579154  0.16699736 0.17164214 0.18645711]]
[[1107 1985 1342 1984 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> read a file 'c:/name/mydocuments/numbers' into a list `data`
the BLEU scores below are for the following reference translation: 
data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]
distances and indices:
[[0.16145025 0.17728947 0.17971984 0.19200166 0.19710965]]
[[ 405 2009  726  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all occurrences of character 'i' in string 'it is icy'
the BLEU scores below are for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
distances and indices:
[[0.28519544 0.29916582 0.3222745  0.32752636 0.3283047 ]]
[[  79 1343  539  726  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all instances of a character 'i' in a string 'it is icy'
the BLEU scores below are for the following reference translation: 
re.sub('i', '', 'it is icy')
distances and indices:
[[0.29357907 0.32267118 0.3371627  0.34707594 0.35437775]]
[[ 405 1107 1342 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> delete all characters "i" in string "it is icy"
the BLEU scores below are for the following reference translation: 
"""it is icy""".replace('i', '')
distances and indices:
[[0.51570725 0.52555114 0.544781   0.56310284 0.5685897 ]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to delete all instances of a character in a string in python?
the BLEU scores below are for the following reference translation: 
"""""".join([char for char in 'it is icy' if char != 'i'])
distances and indices:
[[0.28519544 0.29916582 0.3222745  0.32752636 0.3283047 ]]
[[  79 1343  539  726  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> drop rows of pandas dataframe `df` having nan in column at index "1"
the BLEU scores below are for the following reference translation: 
df.dropna(subset=[1])
distances and indices:
[[0.313439   0.34330434 0.3866201  0.39171433 0.39210686]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get elements from list `mylist`, that have a field `n` value 30
the BLEU scores below are for the following reference translation: 
[x for x in myList if x.n == 30]
distances and indices:
[[0.11489456 0.11631244 0.13223049 0.14669743 0.15768725]]
[[1170 2050  898 1904 1902]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '\x00\x00\x80 ? \x00\x00\x00 @ \x00\x00 @ @ \x00\x00\x80 @ ' to numpi array
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '0b0010101010 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('0b0010101010', 2)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert binari string '01010101111 ' to integ
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
int('01010101111', 2)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> converting list of strings `intstringlist` to list of integer `nums`
the BLEU scores below are for the following reference translation: 
nums = [int(x) for x in intstringlist]
distances and indices:
[[0.05952777 0.07803836 0.0832541  0.10149381 0.11191525]]
[[1108 1107  725  757 1385]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sympi solv matrix of linear equat ` ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) ` with variabl ` ( x , y , z ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of string numbers into list of integers
the BLEU scores below are for the following reference translation: 
map(int, eval(input('Enter the unfriendly numbers: ')))
distances and indices:
[[0.11508687 0.12388134 0.15223455 0.16098626 0.17199321]]
[[ 725  726   11   53 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern ' ( \\d+ ( \\.\\d+ ) ? ) ' with string '3434.35353 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print "." without newline
the BLEU scores below are for the following reference translation: 
sys.stdout.write('.')
distances and indices:
[[0.3012525  0.3225054  0.33958337 0.34866923 0.35503712]]
[[ 405 1107 1342 1108 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> round off the float that is the product of `2.52 * 100` and convert it to an int
the BLEU scores below are for the following reference translation: 
int(round(2.51 * 100))
distances and indices:
[[0.20725814 0.20893389 0.24057157 0.24669658 0.24735169]]
[[ 726  725   11 1343 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all files in directory "/mydir" with extension ".txt"
the BLEU scores below are for the following reference translation: 
for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass
distances and indices:
[[0.18375973 0.18405677 0.20052508 0.22343495 0.22881539]]
[[  79 1343  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> plot dataframe `df` without a legend
the BLEU scores below are for the following reference translation: 
df.plot(legend=False)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> loop through the ip address range "192.168.x.x"
the BLEU scores below are for the following reference translation: 
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
distances and indices:
[[0.19934632 0.20841417 0.22208546 0.2337219  0.23949572]]
[[1107  405 1108 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum the corresponding decimal values for binary values of each boolean element in list `x`
the BLEU scores below are for the following reference translation: 
sum(1 << i for i, b in enumerate(x) if b)
distances and indices:
[[0.13157006 0.13933095 0.14283979 0.14527331 0.15126319]]
[[1985 1342 1984 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write multiple strings `line1`, `line2` and `line3` in one line in a file `target`
the BLEU scores below are for the following reference translation: 
target.write('%r\n%r\n%r\n' % (line1, line2, line3))
distances and indices:
[[0.33461305 0.3415675  0.36011678 0.36760956 0.37395132]]
[[2009  405 1343  726   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert list of lists `data` into a flat list
the BLEU scores below are for the following reference translation: 
[y for x in data for y in (x if isinstance(x, list) else [x])]
distances and indices:
[[0.1549695  0.16234526 0.16832624 0.17013624 0.17317799]]
[[1251 1342 1492 1984 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the dot product of matrix ` [ 1,0,0,1,0,0 ] ` and matrix ` [ [ 0,1 ] , [ 1,1 ] , [ 1,0 ] , [ 1,0 ] , [ 1,1 ] , [ 0,1 ] ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> print new line character as `\n` in a string `foo\nbar`
the BLEU scores below are for the following reference translation: 
print('foo\nbar'.encode('string_escape'))
distances and indices:
[[0.35828832 0.36675212 0.3771245  0.3857286  0.3940808 ]]
[[1107  726  725 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove last comma character ',' in string `s`
the BLEU scores below are for the following reference translation: 
"""""".join(s.rsplit(',', 1))
distances and indices:
[[0.41279617 0.43257454 0.43263274 0.43281236 0.44844547]]
[[ 726   79  725 1343   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> calculate the mean of each element in array `x` with the element previous to it
the BLEU scores below are for the following reference translation: 
(x[1:] + x[:-1]) / 2
distances and indices:
[[0.11890174 0.14120956 0.1560221  0.15611891 0.15989776]]
[[1107 1342 1251  757 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get an array of the mean of each two consecutive values in numpy array `x`
the BLEU scores below are for the following reference translation: 
x[:-1] + (x[1:] - x[:-1]) / 2
distances and indices:
[[0.09351319 0.11409807 0.11945813 0.12741569 0.12921245]]
[[1107 1342  757 1108 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> load data containing `utf-8` from file `new.txt` into numpy array `arr`
the BLEU scores below are for the following reference translation: 
arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')
distances and indices:
[[0.21053474 0.21219064 0.2291868  0.23935196 0.24200827]]
[[1107  405 1108  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reverse sort list of dicts `l` by value for key `time`
the BLEU scores below are for the following reference translation: 
l = sorted(l, key=itemgetter('time'), reverse=True)
distances and indices:
[[0.13120031 0.14431334 0.14833145 0.17276688 0.1742321 ]]
[[1107 1985 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `l` based on key `time` in descending order
the BLEU scores below are for the following reference translation: 
l = sorted(l, key=lambda a: a['time'], reverse=True)
distances and indices:
[[0.09843077 0.09957825 0.12364584 0.12855041 0.13252608]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get rows of dataframe `df` that match regex '(hel|just)'
the BLEU scores below are for the following reference translation: 
df.loc[df[0].str.contains('(Hel|Just)')]
distances and indices:
[[0.24891151 0.2725107  0.28471404 0.29174182 0.30406007]]
[[1985 1984 1342 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find the string in `your_string` between two special characters "[" and "]"
the BLEU scores below are for the following reference translation: 
re.search('\\[(.*)\\]', your_string).group(1)
distances and indices:
[[0.31528783 0.34511226 0.35393596 0.35850826 0.36381656]]
[[1107 1985 1108 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to create a list of date string in 'yyyymmdd' format with python pandas?
the BLEU scores below are for the following reference translation: 
[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]
distances and indices:
[[0.25104696 0.25423762 0.2837918  0.28594998 0.294019  ]]
[[2009  405 1597 2004 2011]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if string ' x ' is in list ` [ ' x ' , 'd ' , ' a ' , 's ' , 'd ' , 's ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
'x' in ['x', 'd', 'a', 's', 'd', 's']
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac placehold in string ' { 1 } { ham } { 0 } { foo } { 1 } ' with argument ` ( 10 , 20 , foo='bar ' , ham='spam ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
format paramet ' b ' and ' a ' into plcaehold in string `` { 0 } \\w { { 2 } } b { 1 } \\w { { 2 } } quarter ''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""{0}\\w{{2}}b{1}\\w{{2}}quarter""".format('b', 'a')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> count number of times string 'brown' occurred in string 'the big brown fox is brown'
the BLEU scores below are for the following reference translation: 
"""The big brown fox is brown""".count('brown')
distances and indices:
[[0.5875992  0.59919274 0.6241443  0.6339934  0.63965434]]
[[  79 1343  726  539  663]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> decode json string `request.body` to python dict
the BLEU scores below are for the following reference translation: 
json.loads(request.body)
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> download the file from url `url` and save it under file `file_name`
the BLEU scores below are for the following reference translation: 
urllib.request.urlretrieve(url, file_name)
distances and indices:
[[0.51324904 0.5144806  0.5253735  0.53523797 0.53571755]]
[[  79 1343 2009 1475  358]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check whether a path `` /etc '' exist
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print(os.path.exists('/etc'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
replac each occurr of the pattern ' ( http : //\\s+|\\s* [ ^\\w\\ ] \\s* ) ' within ` a ` with ``
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `text` by space
the BLEU scores below are for the following reference translation: 
text.split()
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `text` by ","
the BLEU scores below are for the following reference translation: 
text.split(',')
distances and indices:
[[0.3385351  0.3728187  0.3767763  0.38016263 0.3929658 ]]
[[ 405 1985 1107 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split string `line` into a list by whitespace
the BLEU scores below are for the following reference translation: 
line.split()
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> replace dot characters  '.' associated with ascii letters in list `s` with space ' '
the BLEU scores below are for the following reference translation: 
[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]
distances and indices:
[[0.33109394 0.35166684 0.3592563  0.35948694 0.36365786]]
[[ 726 1343 2009   79  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort list `list_of_strings` based on second index of each string `s`
the BLEU scores below are for the following reference translation: 
sorted(list_of_strings, key=lambda s: s.split(',')[1])
distances and indices:
[[0.25571817 0.26025265 0.26651725 0.27179334 0.27864298]]
[[1107 1985  405 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’
the BLEU scores below are for the following reference translation: 
subprocess.check_call('vasp | tee tee_output', shell=True)
distances and indices:
[[0.2408974  0.2574164  0.25930044 0.26319787 0.2735844 ]]
[[1107  725  726 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> eliminate all strings from list `lst`
the BLEU scores below are for the following reference translation: 
[element for element in lst if isinstance(element, int)]
distances and indices:
[[0.19753164 0.22489765 0.24649161 0.24869998 0.25084034]]
[[1170  898  393  757 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert a binari valu '1633837924 ' to string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.pack('<I', 1633837924)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all the elements except strings from the list 'lst'.
the BLEU scores below are for the following reference translation: 
[element for element in lst if not isinstance(element, str)]
distances and indices:
[[0.21166936 0.23291144 0.23687442 0.24108464 0.24711445]]
[[1170 1984  898  757 1985]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
set label ` [ 1 , 2 , 3 , 4 , 5 ] ` on axi x in plot ` plt `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
plt.xticks([1, 2, 3, 4, 5])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert doubl 0.00582811585976 to float
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
struct.unpack('f', struct.pack('f', 0.00582811585976))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`
the BLEU scores below are for the following reference translation: 
newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
distances and indices:
[[0.07414965 0.0746304  0.07776291 0.08026696 0.08080944]]
[[ 277  508 1109  750 1351]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if all element in a tupl ` ( 1 , 6 ) ` are in anoth ` ( 1 , 2 , 3 , 4 , 5 ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
all(i in (1, 2, 3, 4, 5) for i in (1, 6))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert tupl element in list ` [ ( 1,2 ) , ( 3,4 ) , ( 5,6 ) , ] ` into list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if 3 is not in the list [ 4,5,6 ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
(3 not in [4, 5, 6])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
convert string ' ( 1,2,3,4 ) ' to a tupl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
ast.literal_eval('(1,2,3,4)')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
get the zip output as list from the list ` [ 1 , 2 , 3 ] ` , ` [ 4 , 5 , 6 ] ` , ` [ 7 , 8 , 9 ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionaries `l` by values in key `name` in descending order
the BLEU scores below are for the following reference translation: 
newlist = sorted(l, key=itemgetter('name'), reverse=True)
distances and indices:
[[0.08170654 0.0966507  0.12985803 0.15146343 0.15383106]]
[[1107 1108  725  757 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how do i sort a list of dictionaries by values of the dictionary in python?
the BLEU scores below are for the following reference translation: 
list_of_dicts.sort(key=operator.itemgetter('age'))
distances and indices:
[[0.1772861  0.2053613  0.21614237 0.23311365 0.24307017]]
[[1107 1108  725  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> how to sort a dataframe by the ocurrences in a column in python (pandas)
the BLEU scores below are for the following reference translation: 
df.groupby('prots').sum().sort('scores', ascending=False)
distances and indices:
[[0.31718323 0.33435065 0.3455154  0.34982455 0.350631  ]]
[[1107  405 1108  725  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> join together with "," elements inside a list indexed with 'category' within a dictionary `trans`
the BLEU scores below are for the following reference translation: 
""",""".join(trans['category'])
distances and indices:
[[0.45037818 0.45355842 0.45828143 0.47263697 0.47989005]]
[[ 726   79 1343  725   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> concatenate array of strings `['a', 'b', 'c', 'd']` into a string
the BLEU scores below are for the following reference translation: 
"""""".join(['A', 'B', 'C', 'D'])
distances and indices:
[[0.28617844 0.3265238  0.337813   0.34160098 0.34606466]]
[[ 405 1107 1342 1108  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get json data from restful service 'url'
the BLEU scores below are for the following reference translation: 
json.load(urllib.request.urlopen('url'))
distances and indices:
[[0.27021548 0.28210226 0.2881847  0.30651298 0.3106195 ]]
[[ 726  725 1107 1108   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`
the BLEU scores below are for the following reference translation: 
[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
distances and indices:
[[0.14376712 0.15425593 0.15696932 0.18619113 0.19197822]]
[[1107  725 1108 1342  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django filter by hour
the BLEU scores below are for the following reference translation: 
Entry.objects.filter(pub_date__contains='08:00')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of dictionary `list` first by key `points` and then by `time`
the BLEU scores below are for the following reference translation: 
list.sort(key=lambda item: (item['points'], item['time']))
distances and indices:
[[0.10978486 0.1309657  0.17460272 0.17658609 0.17926972]]
[[1985 1984 1251 1107 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert datetime object `(1970, 1, 1)` to seconds
the BLEU scores below are for the following reference translation: 
(t - datetime.datetime(1970, 1, 1)).total_seconds()
distances and indices:
[[0.23253314 0.2579492  0.27511787 0.2777241  0.28134513]]
[[1107 1985 1984 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.
the BLEU scores below are for the following reference translation: 
re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')
distances and indices:
[[0.32218868 0.34531704 0.3539426  0.35999575 0.36244598]]
[[1107  405 1108 1342  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> reload a module `module`
the BLEU scores below are for the following reference translation: 
import imp
imp.reload(module)
distances and indices:
[[0.15959759 0.17077965 0.17098735 0.17470749 0.18243824]]
[[  79  663  539 1343   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all anchor with a hyperlink that match the pattern '^ ( ? ! ( ? : [ a-za-z ] [ a-za-z0-9+.- ] * : |// ) ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert integer `number` into an unassigned integer
the BLEU scores below are for the following reference translation: 
struct.unpack('H', struct.pack('h', number))
distances and indices:
[[0.17556903 0.22770116 0.22799584 0.23884404 0.2414178 ]]
[[ 405  726 2009 1107 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert int values in list `numlist` to float
the BLEU scores below are for the following reference translation: 
numlist = [float(x) for x in numlist]
distances and indices:
[[0.10616496 0.11091564 0.12813267 0.13956583 0.14154136]]
[[1107 1342 1251  757 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write dataframe `df`, excluding index, to a csv file
the BLEU scores below are for the following reference translation: 
df.to_csv(filename, index=False)
distances and indices:
[[0.16127017 0.16495128 0.1837015  0.1972907  0.20097074]]
[[ 726  725   11 1343   79]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert a urllib unquoted string `unescaped` to a json data `json_data`
the BLEU scores below are for the following reference translation: 
json_data = json.loads(unescaped)
distances and indices:
[[0.18686952 0.18743975 0.19592768 0.19849458 0.19891618]]
[[ 642  891 1071  539  641]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern 'taa ( ? : [ atgc ] { 3 } ) + ? taa ' on string ` seq `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('TAA(?:[ATGC]{3})+?TAA', seq)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a regular express that match the pattern '^ ( .+ ) ( ? : \\n|\\r\\n ? ) ( ( ? : ( ? : \\n|\\r\\n ? ) .+ ) + ) ' over multipl line of text
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] *\\z ' on string ' a\n '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a list containing all ascii characters as its elements
the BLEU scores below are for the following reference translation: 
[chr(i) for i in range(127)]
distances and indices:
[[0.3376576  0.35276318 0.36221147 0.38371608 0.39551777]]
[[1985 1107 1984 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write `newfilebytes` to a binary file `newfile`
the BLEU scores below are for the following reference translation: 
newFile.write(struct.pack('5B', *newFileBytes))
distances and indices:
[[0.41284195 0.42476806 0.42911124 0.4453657  0.44627476]]
[[1107 1985  405 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python regex - check for a capital letter with a following lowercase in string `string`
the BLEU scores below are for the following reference translation: 
re.sub('^[A-Z0-9]*(?![a-z])', '', string)
distances and indices:
[[0.3506942  0.38057944 0.38359052 0.38423508 0.4013192 ]]
[[1107  725 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the last key of dictionary `dict`
the BLEU scores below are for the following reference translation: 
list(dict.keys())[-1]
distances and indices:
[[0.21529037 0.22961007 0.24679513 0.26059893 0.2633567 ]]
[[1107 1985 1984 1342 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hi there" to file `f`
the BLEU scores below are for the following reference translation: 
print('hi there', file=f)
distances and indices:
[[0.24556968 0.2715387  0.27423903 0.27507824 0.27875322]]
[[1107 1108  405  725  726]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hi there" to file `myfile`
the BLEU scores below are for the following reference translation: 
f = open('myfile', 'w')
f.write('hi there\n')
f.close()
distances and indices:
[[0.17025986 0.17642872 0.19435312 0.19558407 0.2268697 ]]
[[1343   79  726 2009   11]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> write line "hello" to file `somefile.txt`
the BLEU scores below are for the following reference translation: 
with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
distances and indices:
[[0.28278166 0.3213472  0.3271475  0.33077857 0.33823726]]
[[ 405  726 1107 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> convert unicode string `s` to ascii
the BLEU scores below are for the following reference translation: 
s.encode('iso-8859-15')
distances and indices:
[[0.42633006 0.4301658  0.45663846 0.46118364 0.46341324]]
[[ 405 1107 1985 1108 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> django get maximum value associated with field 'added' in model `authorizedemail`
the BLEU scores below are for the following reference translation: 
AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]
distances and indices:
[[0.31011578 0.33559427 0.3397527  0.3529164  0.36520305]]
[[1985 1984 1107 1342 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> find all numbers and dots from a string `text` using regex
the BLEU scores below are for the following reference translation: 
re.findall('Test([0-9.]*[0-9]+)', text)
distances and indices:
[[0.27123332 0.30078185 0.30228138 0.3129518  0.32234237]]
[[1107  725 1108  726 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> python regex  to find all numbers and dots from 'text'
the BLEU scores below are for the following reference translation: 
re.findall('Test([\\d.]*\\d+)', text)
distances and indices:
[[0.27872595 0.29143316 0.29771426 0.31619236 0.31895438]]
[[ 726  725 1107 1108 1343]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> execute script 'script.ps1' using 'powershell.exe' shell
the BLEU scores below are for the following reference translation: 
os.system('powershell.exe', 'script.ps1')
distances and indices:
[[0.3385351  0.3728187  0.3767763  0.38016263 0.3929658 ]]
[[ 405 1985 1107 1342 1984]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sort a list of tuples `b` by third item in the tuple
the BLEU scores below are for the following reference translation: 
b.sort(key=lambda x: x[1][2])
distances and indices:
[[0.19469492 0.22341588 0.2697017  0.2784006  0.31045645]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get a list of all keys in cassandra database `cf` with pycassa
the BLEU scores below are for the following reference translation: 
list(cf.get_range().get_keys())
distances and indices:
[[0.42306295 0.4480692  0.4618872  0.4679754  0.47030395]]
[[1107 1985 1108 1984  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> create a datetime with the current date & time
the BLEU scores below are for the following reference translation: 
datetime.datetime.now()
distances and indices:
[[0.4876314 0.5169898 0.5231709 0.5258151 0.5268702]]
[[1107 1985 1108  726  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the index of an integer `1` from a list `lst` if the list also contains boolean items
the BLEU scores below are for the following reference translation: 
next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)
distances and indices:
[[0.13748802 0.16377142 0.21022819 0.21777672 0.22926742]]
[[1985 1984 1251 1342 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> subtract 13 from every number in a list `a`
the BLEU scores below are for the following reference translation: 
a[:] = [(x - 13) for x in a]
distances and indices:
[[0.15962578 0.17124268 0.17950845 0.19172905 0.19277713]]
[[1107 1342 1985 1984 1251]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> choose a random file from the directory contents of the c drive, `c:\\`
the BLEU scores below are for the following reference translation: 
random.choice(os.listdir('C:\\'))
distances and indices:
[[0.37217987 0.41554412 0.41798908 0.42920977 0.43480864]]
[[ 405 1107  726 2009 1108]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get the highest element in absolute value in a numpy matrix `x`
the BLEU scores below are for the following reference translation: 
max(x.min(), x.max(), key=abs)
distances and indices:
[[0.27285564 0.31183773 0.32160726 0.3221018  0.3312542 ]]
[[1107 1108 1985  725 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> get all urls within text `s`
the BLEU scores below are for the following reference translation: 
re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)
distances and indices:
[[0.3047145  0.31605726 0.31897774 0.34020215 0.34289348]]
[[ 726 1343   79 2009  725]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of regex pattern ' ( ? : \\w+ ( ? : \\s+\\w+ ) * , \\ ) + ( ? : \\w+ ( ? : \\s\\w+ ) * ) ' in string ` x `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
fetch smili match regex pattern ' ( ? : :| ; |= ) ( ? : - ) ? ( ? : \\ ) |\\ ( |d|p ) ' in string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> match urls whose domain doesn't start with `t` from string `document` using regex
the BLEU scores below are for the following reference translation: 
re.findall('http://[^t][^s"]+\\.html', document)
distances and indices:
[[0.21607755 0.22123587 0.22520527 0.23312451 0.25071138]]
[[1107  725  726 1108  405]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 7 ) , ( 7 , 3 ) , `` hi '' ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 7), (7, 3), 'hi'])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> split a string `mystring` considering the spaces ' '
the BLEU scores below are for the following reference translation: 
mystring.replace(' ', '! !').split('!')
distances and indices:
[[0.28702882 0.31075686 0.31287304 0.32247826 0.32672074]]
[[ 405  726 1107  725 2009]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regular express ' ( ( \\d ) ( ? : [ ( ) ] *\\2* [ ( ) ] * ) * ) ' to split string ` s `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]
bleu:5.99
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
use regex pattern ' ( ( .+ ? ) \\2+ ) ' to split string '44442 ( 2 ) 2 ( 2 ) 44 '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
bleu:6.29
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
escap charact ' } ' in string ' { 0 } : < 15 } } { 1 } : < 15 } } { 2 } : < 8 } } ' while use function ` format ` with argument ` ( ' 1 ' , ' 2 ' , ' 3 ' ) `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> open file `path` with mode 'r'
the BLEU scores below are for the following reference translation: 
open(path, 'r')
distances and indices:
[[0.07057987 0.07378583 0.07414363 0.08289105 0.08417967]]
[[ 891   11 1288  642   80]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
split string ` text ` by the occurr of regex pattern ' ( ? < =\\ ? | ! |\\ . ) \\ { 0,2 } ( ? = [ a-z ] | $ ) '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
find all occurr of the pattern '\\ [ [ ^\\ ] ] *\\ ] |\\ ( [ ^\\ ) ] *\\ ) | '' [ ^ '' ] * '' |\\s+ ' within ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex pattern '\\ $ [ 0-9 ] + [ ^\\ $ ] * $ ' on string ' $ 1 off delici $ 5 ham . '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match regex ' [ a-za-z ] [ \\w- ] * $ ' on string ' ! a_b '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[a-zA-Z][\\w-]*$', '!A_B')
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
match the pattern ' [ : ; ] [ ) ( ] ( ? ! [ ) ( ] ) ' to the string ` str `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
re.match('[:;][)(](?![)(])', str)
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> sum elements at the same index in list `data`
the BLEU scores below are for the following reference translation: 
[[sum(item) for item in zip(*items)] for items in zip(*data)]
distances and indices:
[[0.15843222 0.1606284  0.18337789 0.19520321 0.19796748]]
[[1984 1985  757 1251 1107]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
concat each valu in a tupl ` ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) ` to get a string
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
print ' [ 1 , 2 , 3 ] '
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
print('[%s, %s, %s]' % (1, 2, 3))
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00

------------------------------------evaluating for a new reference: query+code------------------------------------------
query is --> add a new axis to array `a`
the BLEU scores below are for the following reference translation: 
a[:, (np.newaxis)]
distances and indices:
[[0.34152535 0.35000706 0.3646754  0.36876905 0.36975965]]
[[1985 1107 1984  405 1342]]


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list in a list [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
check if tupl ( 2 , 3 ) is not in a list [ ( 2 , 3 ) , ( 5 , 6 ) , ( 9 , 1 ) ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
((2, 3) not in [(2, 3), (5, 6), (9, 1)])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
zip list ` [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ` in a list
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
zip(*[[1, 2], [3, 4], [5, 6]])
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
creat a list of dictionari [ { ' a ' : 1 , ' c ' : 4 , ' b ' : 2 , 'd ' : 4 } , { ' a ' : 1 , ' c ' : 4 , ' b ' : 1 , 'd ' : 5 } ]
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
bleu:0.00
exact:0.00


---new nearest neighbour for same query---
best_sentence_match_to_query: 
sort list ` [ '14:10:01 ' , '03:12:08 ' ] `
$$$$$$$$$$$$$$$$$$$$$$$$$$$$ corresponding code: 
sorted(['14:10:01', '03:12:08'])
bleu:0.00
exact:0.00


Process finished with exit code 0
